webpackJsonp([0],[
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar platform_browser_dynamic_1 = __webpack_require__(19);\nvar app_module_1 = __webpack_require__(23);\n// depending on the env mode, enable prod mode or add debugging modules\nif (false) {\n    core_1.enableProdMode();\n}\nfunction main() {\n    return platform_browser_dynamic_1.platformBrowserDynamic().bootstrapModule(app_module_1.AppModule);\n}\nexports.main = main;\nif (document.readyState === 'complete') {\n    main();\n}\nelse {\n    document.addEventListener('DOMContentLoaded', main);\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL21haW4udHM/YmEyMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUNBQStCLENBQWUsQ0FBQztBQUMvQyxxREFBdUMsRUFBbUMsQ0FBQztBQUMzRSx1Q0FBMEIsRUFBa0IsQ0FBQztBQUU3Qyx1RUFBdUU7QUFDdkUsRUFBRSxDQUFDLENBQUMsS0FBMkIsQ0FBQyxDQUFDLENBQUM7SUFDaEMscUJBQWMsRUFBRSxDQUFDO0FBQ25CLENBQUM7QUFFRDtJQUNFLE1BQU0sQ0FBQyxpREFBc0IsRUFBRSxDQUFDLGVBQWUsQ0FBQyxzQkFBUyxDQUFDLENBQUM7QUFDN0QsQ0FBQztBQUZlLFlBQUksT0FFbkI7QUFFRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxLQUFLLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkMsSUFBSSxFQUFFO0FBQ1IsQ0FBQztBQUFDLElBQUksQ0FBQyxDQUFDO0lBQ04sUUFBUSxDQUFDLGdCQUFnQixDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxDQUFDO0FBQ3RELENBQUMiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVuYWJsZVByb2RNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBwbGF0Zm9ybUJyb3dzZXJEeW5hbWljIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlci1keW5hbWljJztcbmltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gJy4vYXBwL2FwcC5tb2R1bGUnO1xuXG4vLyBkZXBlbmRpbmcgb24gdGhlIGVudiBtb2RlLCBlbmFibGUgcHJvZCBtb2RlIG9yIGFkZCBkZWJ1Z2dpbmcgbW9kdWxlc1xuaWYgKHByb2Nlc3MuZW52LkVOViA9PT0gJ2J1aWxkJykge1xuICBlbmFibGVQcm9kTW9kZSgpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFpbigpIHtcbiAgcmV0dXJuIHBsYXRmb3JtQnJvd3NlckR5bmFtaWMoKS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTtcbn1cblxuaWYgKGRvY3VtZW50LnJlYWR5U3RhdGUgPT09ICdjb21wbGV0ZScpIHtcbiAgbWFpbigpXG59IGVsc2Uge1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdET01Db250ZW50TG9hZGVkJywgbWFpbik7XG59XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL3dlYi9zcmMvbWFpbi50cyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 1 */,
/* 2 */,
/* 3 */,
/* 4 */,
/* 5 */,
/* 6 */,
/* 7 */,
/* 8 */,
/* 9 */,
/* 10 */,
/* 11 */,
/* 12 */,
/* 13 */,
/* 14 */,
/* 15 */,
/* 16 */,
/* 17 */,
/* 18 */,
/* 19 */,
/* 20 */,
/* 21 */,
/* 22 */,
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar platform_browser_1 = __webpack_require__(21);\nvar common_1 = __webpack_require__(22);\nvar common_2 = __webpack_require__(22);\n/* App Root */\nvar app_component_1 = __webpack_require__(24);\n/* Feature Modules */\n// import { LobbyModule } from './lobby/lobby.module';\nvar core_module_1 = __webpack_require__(360);\n/* Routing Module */\nvar app_routing_module_1 = __webpack_require__(478);\nvar device_state_service_1 = __webpack_require__(25);\nvar AppModule = (function () {\n    function AppModule(appRef, _deviceStateService) {\n        this.appRef = appRef;\n        this._deviceStateService = _deviceStateService;\n    }\n    AppModule = __decorate([\n        core_1.NgModule({\n            imports: [\n                platform_browser_1.BrowserModule,\n                common_2.CommonModule,\n                // Feature Routes\n                // LobbyModule,\n                // CoreModule defines everything that needs to be imported once,\n                // and app-wide singletons such as the DeviceStateService\n                core_module_1.CoreModule.forRoot(),\n                app_routing_module_1.AppRoutingModule\n            ],\n            declarations: [\n                app_component_1.AppComponent,\n            ],\n            providers: [\n                { provide: common_1.LocationStrategy, useClass: common_1.HashLocationStrategy },\n            ],\n            bootstrap: [app_component_1.AppComponent]\n        }), \n        __metadata('design:paramtypes', [(typeof (_a = typeof core_1.ApplicationRef !== 'undefined' && core_1.ApplicationRef) === 'function' && _a) || Object, (typeof (_b = typeof device_state_service_1.DeviceStateService !== 'undefined' && device_state_service_1.DeviceStateService) === 'function' && _b) || Object])\n    ], AppModule);\n    return AppModule;\n    var _a, _b;\n}());\nexports.AppModule = AppModule;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9hcHAubW9kdWxlLnRzP2IwNGMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUF5QyxDQUFlLENBQUM7QUFDekQsNkNBQThCLEVBQTJCLENBQUM7QUFDMUQsbUNBQXVELEVBQWlCLENBQUM7QUFDekUsbUNBQWtDLEVBQWlCLENBQUM7QUFFcEQsY0FBYztBQUNkLDBDQUE2QixFQUFpQixDQUFDO0FBSy9DLHFCQUFxQjtBQUNyQixzREFBc0Q7QUFFdEQsd0NBQTJCLEdBQW9CLENBQUM7QUFFaEQsb0JBQW9CO0FBQ3BCLCtDQUFpQyxHQUFzQixDQUFDO0FBR3hELGlEQUFtQyxFQUNuQyxDQUFDLENBRCtEO0FBeUJoRTtJQUNFLG1CQUNXLE1BQXNCLEVBQ3JCLG1CQUF1QztRQUR4QyxXQUFNLEdBQU4sTUFBTSxDQUFnQjtRQUNyQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBQW9CO0lBQUcsQ0FBQztJQXpCekQ7UUFBQyxlQUFRLENBQUM7WUFDUixPQUFPLEVBQUU7Z0JBQ1AsZ0NBQWE7Z0JBQ2IscUJBQVk7Z0JBRVosaUJBQWlCO2dCQUNqQixlQUFlO2dCQUVmLGdFQUFnRTtnQkFDaEUseURBQXlEO2dCQUN6RCx3QkFBVSxDQUFDLE9BQU8sRUFBRTtnQkFFcEIscUNBQWdCO2FBQ2pCO1lBQ0QsWUFBWSxFQUFFO2dCQUNaLDRCQUFZO2FBQ2I7WUFDRCxTQUFTLEVBQUU7Z0JBQ1QsRUFBQyxPQUFPLEVBQUUseUJBQWdCLEVBQUUsUUFBUSxFQUFFLDZCQUFvQixFQUFDO2FBQzVEO1lBQ0QsU0FBUyxFQUFFLENBQUMsNEJBQVksQ0FBQztTQUMxQixDQUFDOztpQkFBQTtJQUtGLGdCQUFDOztBQUFELENBQUM7QUFKWSxpQkFBUyxZQUlyQiIsImZpbGUiOiIyMy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBBcHBsaWNhdGlvblJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQnJvd3Nlck1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHsgTG9jYXRpb25TdHJhdGVneSwgSGFzaExvY2F0aW9uU3RyYXRlZ3kgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gICAgICBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKiBBcHAgUm9vdCAqL1xuaW1wb3J0IHsgQXBwQ29tcG9uZW50IH0gZnJvbSAnLi9hcHAuY29tcG9uZW50JztcblxuLyogU2hhcmVkIE1vZHVsZXMgKi9cbmltcG9ydCB7IFNoYXJlZE1vZHVsZSB9IGZyb20gJy4vc2hhcmVkL3NoYXJlZC5tb2R1bGUnO1xuXG4vKiBGZWF0dXJlIE1vZHVsZXMgKi9cbi8vIGltcG9ydCB7IExvYmJ5TW9kdWxlIH0gZnJvbSAnLi9sb2JieS9sb2JieS5tb2R1bGUnO1xuXG5pbXBvcnQgeyBDb3JlTW9kdWxlIH0gZnJvbSAnLi9jb3JlL2NvcmUubW9kdWxlJztcblxuLyogUm91dGluZyBNb2R1bGUgKi9cbmltcG9ydCB7IEFwcFJvdXRpbmdNb2R1bGUgfSBmcm9tICcuL2FwcC1yb3V0aW5nLm1vZHVsZSc7XG5cblxuaW1wb3J0IHsgRGV2aWNlU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi9jb3JlL2RldmljZS1zdGF0ZS5zZXJ2aWNlJ1xuaW1wb3J0IHsgcmVtb3ZlTmdTdHlsZXMsIGNyZWF0ZU5ld0hvc3RzIH0gZnJvbSAnQGFuZ3VsYXJjbGFzcy9obXInO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbXG4gICAgQnJvd3Nlck1vZHVsZSxcbiAgICBDb21tb25Nb2R1bGUsXG5cbiAgICAvLyBGZWF0dXJlIFJvdXRlc1xuICAgIC8vIExvYmJ5TW9kdWxlLFxuXG4gICAgLy8gQ29yZU1vZHVsZSBkZWZpbmVzIGV2ZXJ5dGhpbmcgdGhhdCBuZWVkcyB0byBiZSBpbXBvcnRlZCBvbmNlLFxuICAgIC8vIGFuZCBhcHAtd2lkZSBzaW5nbGV0b25zIHN1Y2ggYXMgdGhlIERldmljZVN0YXRlU2VydmljZVxuICAgIENvcmVNb2R1bGUuZm9yUm9vdCgpLFxuXG4gICAgQXBwUm91dGluZ01vZHVsZVxuICBdLFxuICBkZWNsYXJhdGlvbnM6IFtcbiAgICBBcHBDb21wb25lbnQsXG4gIF0sXG4gIHByb3ZpZGVyczogW1xuICAgIHtwcm92aWRlOiBMb2NhdGlvblN0cmF0ZWd5LCB1c2VDbGFzczogSGFzaExvY2F0aW9uU3RyYXRlZ3l9LFxuICBdLFxuICBib290c3RyYXA6IFtBcHBDb21wb25lbnRdXG59KVxuZXhwb3J0IGNsYXNzIEFwcE1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgICAgcHVibGljIGFwcFJlZjogQXBwbGljYXRpb25SZWYsXG4gICAgICBwcml2YXRlIF9kZXZpY2VTdGF0ZVNlcnZpY2U6IERldmljZVN0YXRlU2VydmljZSkge31cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vd2ViL3NyYy9hcHAvYXBwLm1vZHVsZS50cyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar device_state_service_1 = __webpack_require__(25);\nvar AppComponent = (function () {\n    function AppComponent(_deviceStateService) {\n        var _this = this;\n        this._deviceStateService = _deviceStateService;\n        this._stateSub =\n            this._deviceStateService.state.subscribe(function (deviceState) {\n                _this.deviceState = deviceState;\n            });\n        console.log(\"AppComponent\", this._deviceStateService.getState());\n        if (!this._deviceStateService.getState()) {\n            this._deviceStateService.setDefaultState();\n        }\n    }\n    AppComponent.prototype.ngOnInit = function () {\n        //  TODO Set up listener service which can\n        //    respond to changes to model and affect\n        //    the model with those changes.\n        //  HOLD on this, I don't know where it should go\n    };\n    AppComponent.prototype.ngOnDestroy = function () {\n        // Remove subscription to free up resources\n        this._stateSub.unsubscribe();\n    };\n    AppComponent = __decorate([\n        core_1.Component({\n            selector: 'wt-app',\n            template: __webpack_require__(358),\n            styles: [__webpack_require__(359)],\n        }), \n        __metadata('design:paramtypes', [(typeof (_a = typeof device_state_service_1.DeviceStateService !== 'undefined' && device_state_service_1.DeviceStateService) === 'function' && _a) || Object])\n    ], AppComponent);\n    return AppComponent;\n    var _a;\n}());\nexports.AppComponent = AppComponent;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9hcHAuY29tcG9uZW50LnRzPzJiYmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUE2QyxDQUFlLENBQUM7QUFJN0QsaURBQW1DLEVBQ25DLENBQUMsQ0FEK0Q7QUFRaEU7SUFNRSxzQkFBb0IsbUJBQXVDO1FBTjdELGlCQThCQztRQXhCcUIsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFvQjtRQUN6RCxJQUFJLENBQUMsU0FBUztZQUNkLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLHFCQUFXO2dCQUNsRCxLQUFJLENBQUMsV0FBVyxHQUFHLFdBQVc7WUFDaEMsQ0FBQyxDQUFDO1FBRUYsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDO1FBRWhFLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6QyxJQUFJLENBQUMsbUJBQW1CLENBQUMsZUFBZSxFQUFFO1FBQzVDLENBQUM7SUFDSCxDQUFDO0lBRUQsK0JBQVEsR0FBUjtRQUNFLDBDQUEwQztRQUMxQyw0Q0FBNEM7UUFDNUMsbUNBQW1DO1FBQ25DLGlEQUFpRDtJQUNuRCxDQUFDO0lBRUQsa0NBQVcsR0FBWDtRQUNFLDJDQUEyQztRQUMzQyxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsRUFBRTtJQUM5QixDQUFDO0lBbENIO1FBQUMsZ0JBQVMsQ0FBQztZQUNULFFBQVEsRUFBRSxRQUFRO1lBQ2xCLFFBQVEsRUFBRSxtQkFBTyxDQUFDLEdBQXNCLENBQUM7WUFDekMsTUFBTSxFQUFFLENBQUMsbUJBQU8sQ0FBQyxHQUFzQixDQUFDLENBQUM7U0FDMUMsQ0FBQzs7b0JBQUE7SUErQkYsbUJBQUM7O0FBQUQsQ0FBQztBQTlCWSxvQkFBWSxlQThCeEIiLCJmaWxlIjoiMjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQgeyBEZXZpY2VTdGF0ZVNlcnZpY2UgfSBmcm9tICcuL2NvcmUvZGV2aWNlLXN0YXRlLnNlcnZpY2UnXG5pbXBvcnQgeyBEZXZpY2VTdGF0ZSwgTGFuZ3VhZ2VUeXBlIH0gZnJvbSAnLi9zaGFyZWQvcmVhZCdcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnd3QtYXBwJywgLy8gPHd0LWFwcD48L3d0LWFwcD5cbiAgdGVtcGxhdGU6IHJlcXVpcmUoJy4vYXBwLmNvbXBvbmVudC5odG1sJyksXG4gIHN0eWxlczogW3JlcXVpcmUoJy4vYXBwLmNvbXBvbmVudC5zY3NzJyldLFxufSlcbmV4cG9ydCBjbGFzcyBBcHBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG5cbiAgZGV2aWNlU3RhdGU6IERldmljZVN0YXRlXG5cbiAgcHJpdmF0ZSBfc3RhdGVTdWI6IFN1YnNjcmlwdGlvbjtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kZXZpY2VTdGF0ZVNlcnZpY2U6IERldmljZVN0YXRlU2VydmljZSkge1xuICAgIHRoaXMuX3N0YXRlU3ViID1cbiAgICB0aGlzLl9kZXZpY2VTdGF0ZVNlcnZpY2Uuc3RhdGUuc3Vic2NyaWJlKGRldmljZVN0YXRlID0+IHtcbiAgICAgIHRoaXMuZGV2aWNlU3RhdGUgPSBkZXZpY2VTdGF0ZVxuICAgIH0pXG5cbiAgICBjb25zb2xlLmxvZyhcIkFwcENvbXBvbmVudFwiLCB0aGlzLl9kZXZpY2VTdGF0ZVNlcnZpY2UuZ2V0U3RhdGUoKSlcblxuICAgIGlmICghdGhpcy5fZGV2aWNlU3RhdGVTZXJ2aWNlLmdldFN0YXRlKCkpIHtcbiAgICAgIHRoaXMuX2RldmljZVN0YXRlU2VydmljZS5zZXREZWZhdWx0U3RhdGUoKVxuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0ICgpIHtcbiAgICAvLyAgVE9ETyBTZXQgdXAgbGlzdGVuZXIgc2VydmljZSB3aGljaCBjYW5cbiAgICAvLyAgICByZXNwb25kIHRvIGNoYW5nZXMgdG8gbW9kZWwgYW5kIGFmZmVjdFxuICAgIC8vICAgIHRoZSBtb2RlbCB3aXRoIHRob3NlIGNoYW5nZXMuXG4gICAgLy8gIEhPTEQgb24gdGhpcywgSSBkb24ndCBrbm93IHdoZXJlIGl0IHNob3VsZCBnb1xuICB9XG5cbiAgbmdPbkRlc3Ryb3kgKCkge1xuICAgIC8vIFJlbW92ZSBzdWJzY3JpcHRpb24gdG8gZnJlZSB1cCByZXNvdXJjZXNcbiAgICB0aGlzLl9zdGF0ZVN1Yi51bnN1YnNjcmliZSgpXG4gIH1cbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vd2ViL3NyYy9hcHAvYXBwLmNvbXBvbmVudC50cyJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar rxjs_1 = __webpack_require__(26);\nvar Mocks = __webpack_require__(354);\nvar mergeWith = __webpack_require__(357);\n// https://lodash.com/docs/4.16.4#mergeWith\n// In the future, we may be interested in customizing this further\n// for better support of large message arrays maybe.\nfunction mergeExceptArrays(objValue, srcValue) {\n    if (objValue instanceof Array && srcValue instanceof Array) {\n        return srcValue;\n    }\n}\nvar DeviceStateService = (function () {\n    function DeviceStateService() {\n        var _this = this;\n        this.state = rxjs_1.Observable.create(function (observer) {\n            _this.stateObserver = observer;\n            // Any cleanup logic might go here\n            return function () { return console.log('disposed device state service'); };\n        });\n    }\n    DeviceStateService.prototype.setState = function (newState) {\n        if (!newState) {\n            throw new Error(\"setState received undefined state\");\n        }\n        this._state = newState;\n        this.next();\n    };\n    DeviceStateService.prototype.updateState = function (stateChanges) {\n        if (!stateChanges) {\n            throw new Error(\"updateState received undefined state\");\n        }\n        // Special merge update of traits\n        mergeWith(this._state, stateChanges, mergeExceptArrays);\n        this.next();\n    };\n    DeviceStateService.prototype.getState = function () {\n        return this._state;\n    };\n    DeviceStateService.prototype.next = function () {\n        console.log(this._state);\n        this.stateObserver.next(this._state);\n    };\n    DeviceStateService.prototype.setMockState = function (id) {\n        var newState = Mocks.getState(id);\n        if (newState) {\n            console.log(\"Mock state set to \\\"\" + id + \"\\\".\");\n            this.setState(newState);\n        }\n        else {\n            console.warn(\"Mock state with id \\\"\" + id + \"\\\" not found.\");\n        }\n    };\n    DeviceStateService.prototype.getMockStateIds = function () {\n        return Mocks.StateKeys;\n    };\n    DeviceStateService.prototype.setDefaultState = function () {\n        this.setState({\n            HasLoggedIn: false,\n            NotLoggedIn: {\n                HasLoggedOutShown: false\n            }\n        });\n    };\n    DeviceStateService = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [])\n    ], DeviceStateService);\n    return DeviceStateService;\n}());\nexports.DeviceStateService = DeviceStateService;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9jb3JlL2RldmljZS1zdGF0ZS5zZXJ2aWNlLnRzPzE1MTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLGlDQUEyQixDQUFlLENBQUM7QUFDM0MsaUNBQXFDLEVBQU0sQ0FBQztBQUc1QyxJQUFZLEtBQUssdUJBQU0sR0FFdkIsQ0FBQyxDQUY0QztBQUU3QyxJQUFNLFNBQVMsR0FBNkUsbUJBQU8sQ0FBQyxHQUFrQixDQUFDO0FBRXZILDJDQUEyQztBQUMzQyxrRUFBa0U7QUFDbEUsb0RBQW9EO0FBQ3BELDJCQUE0QixRQUFRLEVBQUUsUUFBUTtJQUM1QyxFQUFFLENBQUMsQ0FBQyxRQUFRLFlBQVksS0FBSyxJQUFJLFFBQVEsWUFBWSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQzNELE1BQU0sQ0FBQyxRQUFRO0lBQ2pCLENBQUM7QUFDSCxDQUFDO0FBR0Q7SUFPRTtRQVBGLGlCQThEQztRQXRERyxJQUFJLENBQUMsS0FBSyxHQUFHLGlCQUFVLENBQUMsTUFBTSxDQUFDLGtCQUFRO1lBQ3JDLEtBQUksQ0FBQyxhQUFhLEdBQUcsUUFBUTtZQUM3QixrQ0FBa0M7WUFDbEMsTUFBTSxDQUFDLGNBQU0sY0FBTyxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsQ0FBQyxFQUE1QyxDQUE0QztRQUMzRCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUM7SUFFRCxxQ0FBUSxHQUFSLFVBQVMsUUFBdUI7UUFDOUIsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1lBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsQ0FBQztRQUFDLENBQUM7UUFFdkUsSUFBSSxDQUFDLE1BQU0sR0FBRyxRQUFRO1FBQ3RCLElBQUksQ0FBQyxJQUFJLEVBQUU7SUFDYixDQUFDO0lBRUQsd0NBQVcsR0FBWCxVQUFZLFlBQTJCO1FBQ3JDLEVBQUUsQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQztZQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsc0NBQXNDLENBQUM7UUFBQyxDQUFDO1FBRTlFLGlDQUFpQztRQUNqQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxZQUFZLEVBQUUsaUJBQWlCLENBQUM7UUFFdkQsSUFBSSxDQUFDLElBQUksRUFBRTtJQUNiLENBQUM7SUFFRCxxQ0FBUSxHQUFSO1FBQ0UsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNO0lBQ3BCLENBQUM7SUFFRCxpQ0FBSSxHQUFKO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdEMsQ0FBQztJQUVELHlDQUFZLEdBQVosVUFBYSxFQUFVO1FBQ3JCLElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO1FBQ2pDLEVBQUUsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFDYixPQUFPLENBQUMsR0FBRyxDQUFDLHlCQUFzQixFQUFFLFFBQUksQ0FBQztZQUN6QyxJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQztRQUN6QixDQUFDO1FBQUMsSUFBSSxDQUFDLENBQUM7WUFDTixPQUFPLENBQUMsSUFBSSxDQUFDLDBCQUF1QixFQUFFLGtCQUFjLENBQUM7UUFDdkQsQ0FBQztJQUNILENBQUM7SUFFRCw0Q0FBZSxHQUFmO1FBQ0UsTUFBTSxDQUFDLEtBQUssQ0FBQyxTQUFTO0lBQ3hCLENBQUM7SUFFRCw0Q0FBZSxHQUFmO1FBQ0UsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNaLFdBQVcsRUFBRSxLQUFLO1lBQ2xCLFdBQVcsRUFBRTtnQkFDWCxpQkFBaUIsRUFBRSxLQUFLO2FBQ3pCO1NBQ0YsQ0FBQztJQUNKLENBQUM7SUE5REg7UUFBQyxpQkFBVSxFQUFFOzswQkFBQTtJQStEYix5QkFBQztBQUFELENBQUM7QUE5RFksMEJBQWtCLHFCQThEOUIiLCJmaWxlIjoiMjUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgKiBhcyBSIGZyb20gJy4uL3NoYXJlZC9yZWFkJztcblxuaW1wb3J0ICogYXMgTW9ja3MgZnJvbSAnLi9kZXZpY2Utc3RhdGUtbW9ja3MnXG5cbmNvbnN0IG1lcmdlV2l0aCA9IDwob2JqOiBhbnksIHNvdXJjZTogYW55LCBjdXN0b21pemVyOiAob2JqVmFsdWUsIHNyY1ZhbHVlKSA9PiBhbnkpID0+IGFueT4gcmVxdWlyZSgnbG9kYXNoLm1lcmdld2l0aCcpXG5cbi8vIGh0dHBzOi8vbG9kYXNoLmNvbS9kb2NzLzQuMTYuNCNtZXJnZVdpdGhcbi8vIEluIHRoZSBmdXR1cmUsIHdlIG1heSBiZSBpbnRlcmVzdGVkIGluIGN1c3RvbWl6aW5nIHRoaXMgZnVydGhlclxuLy8gZm9yIGJldHRlciBzdXBwb3J0IG9mIGxhcmdlIG1lc3NhZ2UgYXJyYXlzIG1heWJlLlxuZnVuY3Rpb24gbWVyZ2VFeGNlcHRBcnJheXMgKG9ialZhbHVlLCBzcmNWYWx1ZSkge1xuICBpZiAob2JqVmFsdWUgaW5zdGFuY2VvZiBBcnJheSAmJiBzcmNWYWx1ZSBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgcmV0dXJuIHNyY1ZhbHVlXG4gIH1cbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERldmljZVN0YXRlU2VydmljZSB7XG5cbiAgcHJpdmF0ZSBfc3RhdGU6IFIuRGV2aWNlU3RhdGVcbiAgcHJpdmF0ZSBzdGF0ZU9ic2VydmVyOiBPYnNlcnZlcjxSLkRldmljZVN0YXRlPlxuXG4gIHB1YmxpYyBzdGF0ZTogT2JzZXJ2YWJsZTxSLkRldmljZVN0YXRlPlxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuc3RhdGUgPSBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XG4gICAgICB0aGlzLnN0YXRlT2JzZXJ2ZXIgPSBvYnNlcnZlclxuICAgICAgLy8gQW55IGNsZWFudXAgbG9naWMgbWlnaHQgZ28gaGVyZVxuICAgICAgcmV0dXJuICgpID0+IGNvbnNvbGUubG9nKCdkaXNwb3NlZCBkZXZpY2Ugc3RhdGUgc2VydmljZScpXG4gICAgfSk7XG4gIH1cblxuICBzZXRTdGF0ZShuZXdTdGF0ZTogUi5EZXZpY2VTdGF0ZSkge1xuICAgIGlmICghbmV3U3RhdGUpIHsgdGhyb3cgbmV3IEVycm9yKFwic2V0U3RhdGUgcmVjZWl2ZWQgdW5kZWZpbmVkIHN0YXRlXCIpIH1cblxuICAgIHRoaXMuX3N0YXRlID0gbmV3U3RhdGVcbiAgICB0aGlzLm5leHQoKVxuICB9XG5cbiAgdXBkYXRlU3RhdGUoc3RhdGVDaGFuZ2VzOiBSLkRldmljZVN0YXRlKSB7XG4gICAgaWYgKCFzdGF0ZUNoYW5nZXMpIHsgdGhyb3cgbmV3IEVycm9yKFwidXBkYXRlU3RhdGUgcmVjZWl2ZWQgdW5kZWZpbmVkIHN0YXRlXCIpIH1cblxuICAgIC8vIFNwZWNpYWwgbWVyZ2UgdXBkYXRlIG9mIHRyYWl0c1xuICAgIG1lcmdlV2l0aCh0aGlzLl9zdGF0ZSwgc3RhdGVDaGFuZ2VzLCBtZXJnZUV4Y2VwdEFycmF5cylcblxuICAgIHRoaXMubmV4dCgpXG4gIH1cblxuICBnZXRTdGF0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGVcbiAgfVxuXG4gIG5leHQoKSB7XG4gICAgY29uc29sZS5sb2codGhpcy5fc3RhdGUpXG4gICAgdGhpcy5zdGF0ZU9ic2VydmVyLm5leHQodGhpcy5fc3RhdGUpXG4gIH1cblxuICBzZXRNb2NrU3RhdGUoaWQ6IHN0cmluZykge1xuICAgIGxldCBuZXdTdGF0ZSA9IE1vY2tzLmdldFN0YXRlKGlkKVxuICAgIGlmIChuZXdTdGF0ZSkge1xuICAgICAgY29uc29sZS5sb2coYE1vY2sgc3RhdGUgc2V0IHRvIFwiJHtpZH1cIi5gKVxuICAgICAgdGhpcy5zZXRTdGF0ZShuZXdTdGF0ZSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS53YXJuKGBNb2NrIHN0YXRlIHdpdGggaWQgXCIke2lkfVwiIG5vdCBmb3VuZC5gKVxuICAgIH1cbiAgfVxuXG4gIGdldE1vY2tTdGF0ZUlkcygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIE1vY2tzLlN0YXRlS2V5c1xuICB9XG5cbiAgc2V0RGVmYXVsdFN0YXRlKCkge1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgSGFzTG9nZ2VkSW46IGZhbHNlLFxuICAgICAgTm90TG9nZ2VkSW46IHtcbiAgICAgICAgSGFzTG9nZ2VkT3V0U2hvd246IGZhbHNlXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi93ZWIvc3JjL2FwcC9jb3JlL2RldmljZS1zdGF0ZS5zZXJ2aWNlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 26 */,
/* 27 */,
/* 28 */,
/* 29 */,
/* 30 */,
/* 31 */,
/* 32 */,
/* 33 */,
/* 34 */,
/* 35 */,
/* 36 */,
/* 37 */,
/* 38 */,
/* 39 */,
/* 40 */,
/* 41 */,
/* 42 */,
/* 43 */,
/* 44 */,
/* 45 */,
/* 46 */,
/* 47 */,
/* 48 */,
/* 49 */,
/* 50 */,
/* 51 */,
/* 52 */,
/* 53 */,
/* 54 */,
/* 55 */,
/* 56 */,
/* 57 */,
/* 58 */,
/* 59 */,
/* 60 */,
/* 61 */,
/* 62 */,
/* 63 */,
/* 64 */,
/* 65 */,
/* 66 */,
/* 67 */,
/* 68 */,
/* 69 */,
/* 70 */,
/* 71 */,
/* 72 */,
/* 73 */,
/* 74 */,
/* 75 */,
/* 76 */,
/* 77 */,
/* 78 */,
/* 79 */,
/* 80 */,
/* 81 */,
/* 82 */,
/* 83 */,
/* 84 */,
/* 85 */,
/* 86 */,
/* 87 */,
/* 88 */,
/* 89 */,
/* 90 */,
/* 91 */,
/* 92 */,
/* 93 */,
/* 94 */,
/* 95 */,
/* 96 */,
/* 97 */,
/* 98 */,
/* 99 */,
/* 100 */,
/* 101 */,
/* 102 */,
/* 103 */,
/* 104 */,
/* 105 */,
/* 106 */,
/* 107 */,
/* 108 */,
/* 109 */,
/* 110 */,
/* 111 */,
/* 112 */,
/* 113 */,
/* 114 */,
/* 115 */,
/* 116 */,
/* 117 */,
/* 118 */,
/* 119 */,
/* 120 */,
/* 121 */,
/* 122 */,
/* 123 */,
/* 124 */,
/* 125 */,
/* 126 */,
/* 127 */,
/* 128 */,
/* 129 */,
/* 130 */,
/* 131 */,
/* 132 */,
/* 133 */,
/* 134 */,
/* 135 */,
/* 136 */,
/* 137 */,
/* 138 */,
/* 139 */,
/* 140 */,
/* 141 */,
/* 142 */,
/* 143 */,
/* 144 */,
/* 145 */,
/* 146 */,
/* 147 */,
/* 148 */,
/* 149 */,
/* 150 */,
/* 151 */,
/* 152 */,
/* 153 */,
/* 154 */,
/* 155 */,
/* 156 */,
/* 157 */,
/* 158 */,
/* 159 */,
/* 160 */,
/* 161 */,
/* 162 */,
/* 163 */,
/* 164 */,
/* 165 */,
/* 166 */,
/* 167 */,
/* 168 */,
/* 169 */,
/* 170 */,
/* 171 */,
/* 172 */,
/* 173 */,
/* 174 */,
/* 175 */,
/* 176 */,
/* 177 */,
/* 178 */,
/* 179 */,
/* 180 */,
/* 181 */,
/* 182 */,
/* 183 */,
/* 184 */,
/* 185 */,
/* 186 */,
/* 187 */,
/* 188 */,
/* 189 */,
/* 190 */,
/* 191 */,
/* 192 */,
/* 193 */,
/* 194 */,
/* 195 */,
/* 196 */,
/* 197 */,
/* 198 */,
/* 199 */,
/* 200 */,
/* 201 */,
/* 202 */,
/* 203 */,
/* 204 */,
/* 205 */,
/* 206 */,
/* 207 */,
/* 208 */,
/* 209 */,
/* 210 */,
/* 211 */,
/* 212 */,
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */,
/* 217 */,
/* 218 */,
/* 219 */,
/* 220 */,
/* 221 */,
/* 222 */,
/* 223 */,
/* 224 */,
/* 225 */,
/* 226 */,
/* 227 */,
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */,
/* 236 */,
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */,
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar cloneDeep = __webpack_require__(355);\nvar States = {\n    // Although not necessary to throw this `R.DeviceState` cast here,\n    // It makes our lives easier if a single mock state is incorrect.\n    NotLoggedIn: {\n        HasLoggedIn: false,\n        NotLoggedIn: {\n            HasLoggedOutShown: false\n        }\n    },\n    LoggedOut: {\n        HasLoggedIn: false,\n        NotLoggedIn: {\n            HasLoggedOutShown: true\n        }\n    },\n    LoginError: {\n        HasLoggedIn: false,\n        NotLoggedIn: {\n            HasLoggedOutShown: false,\n            LoginError: \"Connection to facebook could not be established\"\n        }\n    }\n};\nfunction getState(id) {\n    return cloneDeep(States[id]);\n}\nexports.getState = getState;\nexports.StateKeys = (function () {\n    var res = [], key;\n    for (key in States) {\n        res.push(key);\n    }\n    return res;\n})();\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9jb3JlL2RldmljZS1zdGF0ZS1tb2Nrcy50cz9kYjRkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxJQUFNLFNBQVMsR0FBdUIsbUJBQU8sQ0FBQyxHQUFrQixDQUFDLENBQUM7QUFFbEUsSUFBTSxNQUFNLEdBQW9DO0lBRTlDLGtFQUFrRTtJQUNsRSxpRUFBaUU7SUFDakUsV0FBVyxFQUFrQjtRQUMzQixXQUFXLEVBQUUsS0FBSztRQUNsQixXQUFXLEVBQUU7WUFDWCxpQkFBaUIsRUFBRSxLQUFLO1NBQ3pCO0tBQ0Y7SUFFRCxTQUFTLEVBQWtCO1FBQ3pCLFdBQVcsRUFBRSxLQUFLO1FBQ2xCLFdBQVcsRUFBRTtZQUNYLGlCQUFpQixFQUFFLElBQUk7U0FDeEI7S0FDRjtJQUVELFVBQVUsRUFBa0I7UUFDMUIsV0FBVyxFQUFFLEtBQUs7UUFDbEIsV0FBVyxFQUFFO1lBQ1gsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixVQUFVLEVBQUUsaURBQWlEO1NBQzlEO0tBQ0Y7Q0FDRjtBQUVELGtCQUF5QixFQUFVO0lBQ2pDLE1BQU0sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFGZSxnQkFBUSxXQUV2QjtBQUVZLGlCQUFTLEdBQUcsQ0FBQztJQUN4QixJQUFJLEdBQUcsR0FBYSxFQUFFLEVBQUUsR0FBRztJQUMzQixHQUFHLENBQUMsQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQztRQUNuQixHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztJQUNmLENBQUM7SUFDRCxNQUFNLENBQUMsR0FBRztBQUNaLENBQUMsQ0FBQyxFQUFFLENBQUMiLCJmaWxlIjoiMzU0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgKiBhcyBSIGZyb20gJy4uL3NoYXJlZC9yZWFkJztcblxuY29uc3QgY2xvbmVEZWVwID0gPChvYmo6IGFueSkgPT4gYW55PiByZXF1aXJlKCdsb2Rhc2guY2xvbmVkZWVwJyk7XG5cbmNvbnN0IFN0YXRlcyA9IDx7W2tleTogc3RyaW5nXTogUi5EZXZpY2VTdGF0ZX0+IHtcblxuICAvLyBBbHRob3VnaCBub3QgbmVjZXNzYXJ5IHRvIHRocm93IHRoaXMgYFIuRGV2aWNlU3RhdGVgIGNhc3QgaGVyZSxcbiAgLy8gSXQgbWFrZXMgb3VyIGxpdmVzIGVhc2llciBpZiBhIHNpbmdsZSBtb2NrIHN0YXRlIGlzIGluY29ycmVjdC5cbiAgTm90TG9nZ2VkSW46IDxSLkRldmljZVN0YXRlPiB7XG4gICAgSGFzTG9nZ2VkSW46IGZhbHNlLFxuICAgIE5vdExvZ2dlZEluOiB7XG4gICAgICBIYXNMb2dnZWRPdXRTaG93bjogZmFsc2VcbiAgICB9XG4gIH0sXG5cbiAgTG9nZ2VkT3V0OiA8Ui5EZXZpY2VTdGF0ZT4ge1xuICAgIEhhc0xvZ2dlZEluOiBmYWxzZSxcbiAgICBOb3RMb2dnZWRJbjoge1xuICAgICAgSGFzTG9nZ2VkT3V0U2hvd246IHRydWVcbiAgICB9XG4gIH0sXG5cbiAgTG9naW5FcnJvcjogPFIuRGV2aWNlU3RhdGU+IHtcbiAgICBIYXNMb2dnZWRJbjogZmFsc2UsXG4gICAgTm90TG9nZ2VkSW46IHtcbiAgICAgIEhhc0xvZ2dlZE91dFNob3duOiBmYWxzZSxcbiAgICAgIExvZ2luRXJyb3I6IFwiQ29ubmVjdGlvbiB0byBmYWNlYm9vayBjb3VsZCBub3QgYmUgZXN0YWJsaXNoZWRcIlxuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RhdGUoaWQ6IHN0cmluZyk6IFIuRGV2aWNlU3RhdGUge1xuICByZXR1cm4gY2xvbmVEZWVwKFN0YXRlc1tpZF0pXG59XG5cbmV4cG9ydCBjb25zdCBTdGF0ZUtleXMgPSAoKCkgPT4ge1xuICBsZXQgcmVzOiBzdHJpbmdbXSA9IFtdLCBrZXlcbiAgZm9yIChrZXkgaW4gU3RhdGVzKSB7XG4gICAgcmVzLnB1c2goa2V5KVxuICB9XG4gIHJldHVybiByZXNcbn0pKCk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2FuZ3VsYXIyLXRlbXBsYXRlLWxvYWRlciEuL3dlYi9zcmMvYXBwL2NvcmUvZGV2aWNlLXN0YXRlLW1vY2tzLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 355 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object);\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * This method is like `_.clone` except that it recursively clones `value`.\n *\n * @static\n * @memberOf _\n * @since 1.0.0\n * @category Lang\n * @param {*} value The value to recursively clone.\n * @returns {*} Returns the deep cloned value.\n * @see _.clone\n * @example\n *\n * var objects = [{ 'a': 1 }, { 'b': 2 }];\n *\n * var deep = _.cloneDeep(objects);\n * console.log(deep[0] === objects[0]);\n * // => false\n */\nfunction cloneDeep(value) {\n  return baseClone(value, true, true);\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = cloneDeep;\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(356)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 356 */
/***/ function(module, exports) {

	eval("module.exports = function(module) {\n\tif(!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tmodule.children = [];\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n}\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzP2MzYzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiMzU2LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihtb2R1bGUpIHtcblx0aWYoIW1vZHVsZS53ZWJwYWNrUG9seWZpbGwpIHtcblx0XHRtb2R1bGUuZGVwcmVjYXRlID0gZnVuY3Rpb24oKSB7fTtcblx0XHRtb2R1bGUucGF0aHMgPSBbXTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufVxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gKHdlYnBhY2spL2J1aWxkaW4vbW9kdWxlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 357 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global, module) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    promiseTag = '[object Promise]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to match `RegExp` flags from their coerced string values. */\nvar reFlags = /\\w*$/;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/** Used to identify `toStringTag` values supported by `_.clone`. */\nvar cloneableTags = {};\ncloneableTags[argsTag] = cloneableTags[arrayTag] =\ncloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =\ncloneableTags[boolTag] = cloneableTags[dateTag] =\ncloneableTags[float32Tag] = cloneableTags[float64Tag] =\ncloneableTags[int8Tag] = cloneableTags[int16Tag] =\ncloneableTags[int32Tag] = cloneableTags[mapTag] =\ncloneableTags[numberTag] = cloneableTags[objectTag] =\ncloneableTags[regexpTag] = cloneableTags[setTag] =\ncloneableTags[stringTag] = cloneableTags[symbolTag] =\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;\ncloneableTags[errorTag] = cloneableTags[funcTag] =\ncloneableTags[weakMapTag] = false;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Adds the key-value `pair` to `map`.\n *\n * @private\n * @param {Object} map The map to modify.\n * @param {Array} pair The key-value pair to add.\n * @returns {Object} Returns `map`.\n */\nfunction addMapEntry(map, pair) {\n  // Don't return `map.set` because it's not chainable in IE 11.\n  map.set(pair[0], pair[1]);\n  return map;\n}\n\n/**\n * Adds `value` to `set`.\n *\n * @private\n * @param {Object} set The set to modify.\n * @param {*} value The value to add.\n * @returns {Object} Returns `set`.\n */\nfunction addSetEntry(set, value) {\n  // Don't return `set.add` because it's not chainable in IE 11.\n  set.add(value);\n  return set;\n}\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\n/**\n * A specialized version of `_.forEach` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns `array`.\n */\nfunction arrayEach(array, iteratee) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  while (++index < length) {\n    if (iteratee(array[index], index, array) === false) {\n      break;\n    }\n  }\n  return array;\n}\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\n/**\n * A specialized version of `_.reduce` for arrays without support for\n * iteratee shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @param {boolean} [initAccum] Specify using the first element of `array` as\n *  the initial value.\n * @returns {*} Returns the accumulated value.\n */\nfunction arrayReduce(array, iteratee, accumulator, initAccum) {\n  var index = -1,\n      length = array ? array.length : 0;\n\n  if (initAccum && length) {\n    accumulator = array[++index];\n  }\n  while (++index < length) {\n    accumulator = iteratee(accumulator, array[index], index, array);\n  }\n  return accumulator;\n}\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\n/**\n * Checks if `value` is a host object in IE < 9.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a host object, else `false`.\n */\nfunction isHostObject(value) {\n  // Many host objects are `Object` objects that can coerce to strings\n  // despite having improperly defined `toString` methods.\n  var result = false;\n  if (value != null && typeof value.toString != 'function') {\n    try {\n      result = !!(value + '');\n    } catch (e) {}\n  }\n  return result;\n}\n\n/**\n * Converts `map` to its key-value pairs.\n *\n * @private\n * @param {Object} map The map to convert.\n * @returns {Array} Returns the key-value pairs.\n */\nfunction mapToArray(map) {\n  var index = -1,\n      result = Array(map.size);\n\n  map.forEach(function(value, key) {\n    result[++index] = [key, value];\n  });\n  return result;\n}\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\nfunction setToArray(set) {\n  var index = -1,\n      result = Array(set.size);\n\n  set.forEach(function(value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype,\n    funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    Symbol = root.Symbol,\n    Uint8Array = root.Uint8Array,\n    getPrototype = overArg(Object.getPrototypeOf, Object),\n    objectCreate = Object.create,\n    propertyIsEnumerable = objectProto.propertyIsEnumerable,\n    splice = arrayProto.splice;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeGetSymbols = Object.getOwnPropertySymbols,\n    nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,\n    nativeKeys = overArg(Object.keys, Object),\n    nativeMax = Math.max;\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView'),\n    Map = getNative(root, 'Map'),\n    Promise = getNative(root, 'Promise'),\n    Set = getNative(root, 'Set'),\n    WeakMap = getNative(root, 'WeakMap'),\n    nativeCreate = getNative(Object, 'create');\n\n/** Used to detect maps, sets, and weakmaps. */\nvar dataViewCtorString = toSource(DataView),\n    mapCtorString = toSource(Map),\n    promiseCtorString = toSource(Promise),\n    setCtorString = toSource(Set),\n    weakMapCtorString = toSource(WeakMap);\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n}\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  return this.has(key) && delete this.__data__[key];\n}\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n}\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  return true;\n}\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries ? entries.length : 0;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  return getMapData(this, key)['delete'](key);\n}\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  getMapData(this, key).set(key, value);\n  return this;\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  this.__data__ = new ListCache(entries);\n}\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n}\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  return this.__data__['delete'](key);\n}\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var cache = this.__data__;\n  if (cache instanceof ListCache) {\n    var pairs = cache.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      return this;\n    }\n    cache = this.__data__ = new MapCache(pairs);\n  }\n  cache.set(key, value);\n  return this;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  // Safari 9 makes `arguments.length` enumerable in strict mode.\n  var result = (isArray(value) || isArguments(value))\n    ? baseTimes(value.length, String)\n    : [];\n\n  var length = result.length,\n      skipIndexes = !!length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (key == 'length' || isIndex(key, length)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (typeof key == 'number' && value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    object[key] = value;\n  }\n}\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\n/**\n * The base implementation of `_.assign` without support for multiple sources\n * or `customizer` functions.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @returns {Object} Returns `object`.\n */\nfunction baseAssign(object, source) {\n  return object && copyObject(source, keys(source), object);\n}\n\n/**\n * The base implementation of `_.clone` and `_.cloneDeep` which tracks\n * traversed objects.\n *\n * @private\n * @param {*} value The value to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @param {boolean} [isFull] Specify a clone including symbols.\n * @param {Function} [customizer] The function to customize cloning.\n * @param {string} [key] The key of `value`.\n * @param {Object} [object] The parent object of `value`.\n * @param {Object} [stack] Tracks traversed objects and their clone counterparts.\n * @returns {*} Returns the cloned value.\n */\nfunction baseClone(value, isDeep, isFull, customizer, key, object, stack) {\n  var result;\n  if (customizer) {\n    result = object ? customizer(value, key, object, stack) : customizer(value);\n  }\n  if (result !== undefined) {\n    return result;\n  }\n  if (!isObject(value)) {\n    return value;\n  }\n  var isArr = isArray(value);\n  if (isArr) {\n    result = initCloneArray(value);\n    if (!isDeep) {\n      return copyArray(value, result);\n    }\n  } else {\n    var tag = getTag(value),\n        isFunc = tag == funcTag || tag == genTag;\n\n    if (isBuffer(value)) {\n      return cloneBuffer(value, isDeep);\n    }\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {\n      if (isHostObject(value)) {\n        return object ? value : {};\n      }\n      result = initCloneObject(isFunc ? {} : value);\n      if (!isDeep) {\n        return copySymbols(value, baseAssign(result, value));\n      }\n    } else {\n      if (!cloneableTags[tag]) {\n        return object ? value : {};\n      }\n      result = initCloneByTag(value, tag, baseClone, isDeep);\n    }\n  }\n  // Check for circular references and return its corresponding clone.\n  stack || (stack = new Stack);\n  var stacked = stack.get(value);\n  if (stacked) {\n    return stacked;\n  }\n  stack.set(value, result);\n\n  if (!isArr) {\n    var props = isFull ? getAllKeys(value) : keys(value);\n  }\n  arrayEach(props || value, function(subValue, key) {\n    if (props) {\n      key = subValue;\n      subValue = value[key];\n    }\n    // Recursively populate clone (susceptible to call stack limits).\n    assignValue(result, key, baseClone(subValue, isDeep, isFull, customizer, key, value, stack));\n  });\n  return result;\n}\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} prototype The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nfunction baseCreate(proto) {\n  return isObject(proto) ? objectCreate(proto) : {};\n}\n\n/**\n * The base implementation of `getAllKeys` and `getAllKeysIn` which uses\n * `keysFunc` and `symbolsFunc` to get the enumerable property names and\n * symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @param {Function} symbolsFunc The function to get the symbols of `object`.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction baseGetAllKeys(object, keysFunc, symbolsFunc) {\n  var result = keysFunc(object);\n  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));\n}\n\n/**\n * The base implementation of `getTag`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  return objectToString.call(value);\n}\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = (isFunction(value) || isHostObject(value)) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[objectToString.call(value)];\n}\n\n/**\n * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeys(object) {\n  if (!isPrototype(object)) {\n    return nativeKeys(object);\n  }\n  var result = [];\n  for (var key in Object(object)) {\n    if (hasOwnProperty.call(object, key) && key != 'constructor') {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  if (!(isArray(source) || isTypedArray(source))) {\n    var props = baseKeysIn(source);\n  }\n  arrayEach(props || source, function(srcValue, key) {\n    if (props) {\n      key = srcValue;\n      srcValue = source[key];\n    }\n    if (isObject(srcValue)) {\n      stack || (stack = new Stack);\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  });\n}\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    newValue = srcValue;\n    if (isArray(srcValue) || isTypedArray(srcValue)) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        isCommon = false;\n        newValue = baseClone(srcValue, true);\n      }\n      else {\n        newValue = objValue;\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = array;\n    return apply(func, this, otherArgs);\n  };\n}\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var result = new buffer.constructor(buffer.length);\n  buffer.copy(result);\n  return result;\n}\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\n/**\n * Creates a clone of `dataView`.\n *\n * @private\n * @param {Object} dataView The data view to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned data view.\n */\nfunction cloneDataView(dataView, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;\n  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);\n}\n\n/**\n * Creates a clone of `map`.\n *\n * @private\n * @param {Object} map The map to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned map.\n */\nfunction cloneMap(map, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(mapToArray(map), true) : mapToArray(map);\n  return arrayReduce(array, addMapEntry, new map.constructor);\n}\n\n/**\n * Creates a clone of `regexp`.\n *\n * @private\n * @param {Object} regexp The regexp to clone.\n * @returns {Object} Returns the cloned regexp.\n */\nfunction cloneRegExp(regexp) {\n  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));\n  result.lastIndex = regexp.lastIndex;\n  return result;\n}\n\n/**\n * Creates a clone of `set`.\n *\n * @private\n * @param {Object} set The set to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned set.\n */\nfunction cloneSet(set, isDeep, cloneFunc) {\n  var array = isDeep ? cloneFunc(setToArray(set), true) : setToArray(set);\n  return arrayReduce(array, addSetEntry, new set.constructor);\n}\n\n/**\n * Creates a clone of the `symbol` object.\n *\n * @private\n * @param {Object} symbol The symbol object to clone.\n * @returns {Object} Returns the cloned symbol object.\n */\nfunction cloneSymbol(symbol) {\n  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};\n}\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    assignValue(object, key, newValue === undefined ? source[key] : newValue);\n  }\n  return object;\n}\n\n/**\n * Copies own symbol properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy symbols from.\n * @param {Object} [object={}] The object to copy symbols to.\n * @returns {Object} Returns `object`.\n */\nfunction copySymbols(source, object) {\n  return copyObject(source, getSymbols(source), object);\n}\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\n/**\n * Creates an array of own enumerable property names and symbols of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names and symbols.\n */\nfunction getAllKeys(object) {\n  return baseGetAllKeys(object, keys, getSymbols);\n}\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\n/**\n * Creates an array of the own enumerable symbol properties of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of symbols.\n */\nvar getSymbols = nativeGetSymbols ? overArg(nativeGetSymbols, Object) : stubArray;\n\n/**\n * Gets the `toStringTag` of `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nvar getTag = baseGetTag;\n\n// Fallback for data views, maps, sets, and weak maps in IE 11,\n// for data views in Edge < 14, and promises in Node.js.\nif ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||\n    (Map && getTag(new Map) != mapTag) ||\n    (Promise && getTag(Promise.resolve()) != promiseTag) ||\n    (Set && getTag(new Set) != setTag) ||\n    (WeakMap && getTag(new WeakMap) != weakMapTag)) {\n  getTag = function(value) {\n    var result = objectToString.call(value),\n        Ctor = result == objectTag ? value.constructor : undefined,\n        ctorString = Ctor ? toSource(Ctor) : undefined;\n\n    if (ctorString) {\n      switch (ctorString) {\n        case dataViewCtorString: return dataViewTag;\n        case mapCtorString: return mapTag;\n        case promiseCtorString: return promiseTag;\n        case setCtorString: return setTag;\n        case weakMapCtorString: return weakMapTag;\n      }\n    }\n    return result;\n  };\n}\n\n/**\n * Initializes an array clone.\n *\n * @private\n * @param {Array} array The array to clone.\n * @returns {Array} Returns the initialized clone.\n */\nfunction initCloneArray(array) {\n  var length = array.length,\n      result = array.constructor(length);\n\n  // Add properties assigned by `RegExp#exec`.\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {\n    result.index = array.index;\n    result.input = array.input;\n  }\n  return result;\n}\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to process.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nfunction isArguments(value) {\n  // Safari 8.1 makes `arguments.callee` enumerable in strict mode.\n  return isArrayLikeObject(value) && hasOwnProperty.call(value, 'callee') &&\n    (!propertyIsEnumerable.call(value, 'callee') || objectToString.call(value) == argsTag);\n}\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 8-9 which returns 'object' for typed array and other constructors.\n  var tag = isObject(value) ? objectToString.call(value) : '';\n  return tag == funcTag || tag == genTag;\n}\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) ||\n      objectToString.call(value) != objectTag || isHostObject(value)) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return (typeof Ctor == 'function' &&\n    Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString);\n}\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\n/**\n * Creates an array of the own enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects. See the\n * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * for more details.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keys(new Foo);\n * // => ['a', 'b'] (iteration order is not guaranteed)\n *\n * _.keys('hi');\n * // => ['0', '1']\n */\nfunction keys(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);\n}\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\n/**\n * This method is like `_.merge` except that it accepts `customizer` which\n * is invoked to produce the merged values of the destination and source\n * properties. If `customizer` returns `undefined`, merging is handled by the\n * method instead. The `customizer` is invoked with seven arguments:\n * (objValue, srcValue, key, object, source, stack).\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} sources The source objects.\n * @param {Function} customizer The function to customize assigned values.\n * @returns {Object} Returns `object`.\n * @example\n *\n * function customizer(objValue, srcValue) {\n *   if (_.isArray(objValue)) {\n *     return objValue.concat(srcValue);\n *   }\n * }\n *\n * var object = { 'a': [1], 'b': [2] };\n * var other = { 'a': [3], 'b': [4] };\n *\n * _.mergeWith(object, other, customizer);\n * // => { 'a': [1, 3], 'b': [2, 4] }\n */\nvar mergeWith = createAssigner(function(object, source, srcIndex, customizer) {\n  baseMerge(object, source, srcIndex, customizer);\n});\n\n/**\n * This method returns a new empty array.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {Array} Returns the new empty array.\n * @example\n *\n * var arrays = _.times(2, _.stubArray);\n *\n * console.log(arrays);\n * // => [[], []]\n *\n * console.log(arrays[0] === arrays[1]);\n * // => false\n */\nfunction stubArray() {\n  return [];\n}\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = mergeWith;\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(356)(module)))//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 358 */
/***/ function(module, exports) {

	eval("module.exports = \"<router-outlet></router-outlet>\\n\\n<!-- Mockstate Overlay \\\"M\\\" -->\\n<div class=\\\"mock\\\">\\n  <div class=\\\"open\\\" (click)=\\\"mockSelectionOpen = true\\\">\\n    M\\n  </div>\\n  <div class=\\\"dropup\\\"\\n      [class.show]=\\\"mockSelectionOpen\\\"\\n      (click)=\\\"mockSelectionOpen = false\\\">\\n    <div class=\\\"title\\\">Select Lang</div>\\n    <span *ngFor=\\\"let nv of languageKeys\\\"\\n        class=\\\"lang\\\"\\n        (click)=\\\"setLanguage(nv.name)\\\">\\n      {{ nv.name }}\\n    </span>\\n    <div class=\\\"title\\\">Select State</div>\\n    <div *ngFor=\\\"let key of mockStateKeys\\\"\\n        [attr.data-mock-key]=\\\"key\\\"\\n        (click)=\\\"setMockState(key)\\\">\\n      {{key}}\\n    </div>\\n    <div class=\\\"title\\\">Links</div>\\n    <a routerLink=\\\"/configure-search\\\">/configure-search</a>\\n    <a routerLink=\\\"/configure-rank\\\">/configure-rank</a>\\n    <a routerLink=\\\"/login\\\">/login</a>\\n    <a routerLink=\\\"/status\\\">/status</a>\\n    <a routerLink=\\\"/lobby\\\">/lobby</a>\\n    <a routerLink=\\\"/history\\\">/history</a>\\n    <a routerLink=\\\"/beta-signup\\\">/beta-signup</a>\\n    <a routerLink=\\\"/\\\">/</a>\\n    <div (click)=\\\"mockSelectionOpen = false\\\">Close</div>\\n  </div>\\n</div>\\n\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWw/YmM1NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxnZEFBZ2QsV0FBVyxnTUFBZ00sS0FBSyIsImZpbGUiOiIzNTguanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPHJvdXRlci1vdXRsZXQ+PC9yb3V0ZXItb3V0bGV0PlxcblxcbjwhLS0gTW9ja3N0YXRlIE92ZXJsYXkgXFxcIk1cXFwiIC0tPlxcbjxkaXYgY2xhc3M9XFxcIm1vY2tcXFwiPlxcbiAgPGRpdiBjbGFzcz1cXFwib3BlblxcXCIgKGNsaWNrKT1cXFwibW9ja1NlbGVjdGlvbk9wZW4gPSB0cnVlXFxcIj5cXG4gICAgTVxcbiAgPC9kaXY+XFxuICA8ZGl2IGNsYXNzPVxcXCJkcm9wdXBcXFwiXFxuICAgICAgW2NsYXNzLnNob3ddPVxcXCJtb2NrU2VsZWN0aW9uT3BlblxcXCJcXG4gICAgICAoY2xpY2spPVxcXCJtb2NrU2VsZWN0aW9uT3BlbiA9IGZhbHNlXFxcIj5cXG4gICAgPGRpdiBjbGFzcz1cXFwidGl0bGVcXFwiPlNlbGVjdCBMYW5nPC9kaXY+XFxuICAgIDxzcGFuICpuZ0Zvcj1cXFwibGV0IG52IG9mIGxhbmd1YWdlS2V5c1xcXCJcXG4gICAgICAgIGNsYXNzPVxcXCJsYW5nXFxcIlxcbiAgICAgICAgKGNsaWNrKT1cXFwic2V0TGFuZ3VhZ2UobnYubmFtZSlcXFwiPlxcbiAgICAgIHt7IG52Lm5hbWUgfX1cXG4gICAgPC9zcGFuPlxcbiAgICA8ZGl2IGNsYXNzPVxcXCJ0aXRsZVxcXCI+U2VsZWN0IFN0YXRlPC9kaXY+XFxuICAgIDxkaXYgKm5nRm9yPVxcXCJsZXQga2V5IG9mIG1vY2tTdGF0ZUtleXNcXFwiXFxuICAgICAgICBbYXR0ci5kYXRhLW1vY2sta2V5XT1cXFwia2V5XFxcIlxcbiAgICAgICAgKGNsaWNrKT1cXFwic2V0TW9ja1N0YXRlKGtleSlcXFwiPlxcbiAgICAgIHt7a2V5fX1cXG4gICAgPC9kaXY+XFxuICAgIDxkaXYgY2xhc3M9XFxcInRpdGxlXFxcIj5MaW5rczwvZGl2PlxcbiAgICA8YSByb3V0ZXJMaW5rPVxcXCIvY29uZmlndXJlLXNlYXJjaFxcXCI+L2NvbmZpZ3VyZS1zZWFyY2g8L2E+XFxuICAgIDxhIHJvdXRlckxpbms9XFxcIi9jb25maWd1cmUtcmFua1xcXCI+L2NvbmZpZ3VyZS1yYW5rPC9hPlxcbiAgICA8YSByb3V0ZXJMaW5rPVxcXCIvbG9naW5cXFwiPi9sb2dpbjwvYT5cXG4gICAgPGEgcm91dGVyTGluaz1cXFwiL3N0YXR1c1xcXCI+L3N0YXR1czwvYT5cXG4gICAgPGEgcm91dGVyTGluaz1cXFwiL2xvYmJ5XFxcIj4vbG9iYnk8L2E+XFxuICAgIDxhIHJvdXRlckxpbms9XFxcIi9oaXN0b3J5XFxcIj4vaGlzdG9yeTwvYT5cXG4gICAgPGEgcm91dGVyTGluaz1cXFwiL2JldGEtc2lnbnVwXFxcIj4vYmV0YS1zaWdudXA8L2E+XFxuICAgIDxhIHJvdXRlckxpbms9XFxcIi9cXFwiPi88L2E+XFxuICAgIDxkaXYgKGNsaWNrKT1cXFwibW9ja1NlbGVjdGlvbk9wZW4gPSBmYWxzZVxcXCI+Q2xvc2U8L2Rpdj5cXG4gIDwvZGl2PlxcbjwvZGl2PlxcblwiXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi93ZWIvc3JjL2FwcC9hcHAuY29tcG9uZW50Lmh0bWxcbi8vIG1vZHVsZSBpZCA9IDM1OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 359 */
/***/ function(module, exports) {

	eval("module.exports = \"/*@import 'colors';*/\\n:host {\\n  display: block; }\\n\\n.mock .open, .mock .dropup {\\n  position: absolute;\\n  background: whitesmoke;\\n  right: 20px;\\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2); }\\n\\n.mock .open {\\n  z-index: 9998;\\n  padding: 10px;\\n  border-radius: 20px;\\n  font-size: 20px;\\n  bottom: 30%; }\\n\\n.mock .dropup {\\n  pointer-events: none;\\n  opacity: 0;\\n  z-index: 9999;\\n  top: 10px;\\n  bottom: 10px;\\n  overflow: auto;\\n  width: 220px;\\n  transition: opacity .2s; }\\n  .mock .dropup .lang {\\n    padding: 6px;\\n    display: inline-block; }\\n    .mock .dropup .lang:hover {\\n      background: #bee64b; }\\n  .mock .dropup > .title {\\n    font-size: .8em;\\n    font-weight: bold;\\n    color: black;\\n    text-transform: uppercase; }\\n  .mock .dropup [data-mock-key=WhitelistedSignedUpBeta],\\n  .mock .dropup [data-mock-key=RankingNotSubmitted],\\n  .mock .dropup [data-mock-key=PreppingNotOpened] {\\n    background: rgba(255, 250, 0, 0.2); }\\n  .mock .dropup [data-mock-key=PreppingOpened] {\\n    background: rgba(255, 250, 0, 0.4); }\\n  .mock .dropup > div {\\n    padding: 6px;\\n    padding-left: 4px;\\n    border-bottom: 1px solid #d9d6cf; }\\n  .mock .dropup > a {\\n    padding: .5em;\\n    display: block;\\n    text-decoration: none;\\n    border-bottom: 1px solid #d9d6cf; }\\n    .mock .dropup > a:visited {\\n      color: blue; }\\n  .mock .dropup.show {\\n    opacity: 1;\\n    pointer-events: all; }\\n\"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9hcHAuY29tcG9uZW50LnNjc3M/OTE2MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUMsV0FBVyxtQkFBbUIsRUFBRSxnQ0FBZ0MsdUJBQXVCLDJCQUEyQixnQkFBZ0IsNkNBQTZDLEVBQUUsaUJBQWlCLGtCQUFrQixrQkFBa0Isd0JBQXdCLG9CQUFvQixnQkFBZ0IsRUFBRSxtQkFBbUIseUJBQXlCLGVBQWUsa0JBQWtCLGNBQWMsaUJBQWlCLG1CQUFtQixpQkFBaUIsNEJBQTRCLEVBQUUseUJBQXlCLG1CQUFtQiw0QkFBNEIsRUFBRSxpQ0FBaUMsNEJBQTRCLEVBQUUsNEJBQTRCLHNCQUFzQix3QkFBd0IsbUJBQW1CLGdDQUFnQyxFQUFFLHFLQUFxSyx5Q0FBeUMsRUFBRSxrREFBa0QseUNBQXlDLEVBQUUseUJBQXlCLG1CQUFtQix3QkFBd0IsdUNBQXVDLEVBQUUsdUJBQXVCLG9CQUFvQixxQkFBcUIsNEJBQTRCLHVDQUF1QyxFQUFFLGlDQUFpQyxvQkFBb0IsRUFBRSx3QkFBd0IsaUJBQWlCLDBCQUEwQixFQUFFIiwiZmlsZSI6IjM1OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCIvKkBpbXBvcnQgJ2NvbG9ycyc7Ki9cXG46aG9zdCB7XFxuICBkaXNwbGF5OiBibG9jazsgfVxcblxcbi5tb2NrIC5vcGVuLCAubW9jayAuZHJvcHVwIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJhY2tncm91bmQ6IHdoaXRlc21va2U7XFxuICByaWdodDogMjBweDtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDVweCByZ2JhKDAsIDAsIDAsIDAuMik7IH1cXG5cXG4ubW9jayAub3BlbiB7XFxuICB6LWluZGV4OiA5OTk4O1xcbiAgcGFkZGluZzogMTBweDtcXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XFxuICBmb250LXNpemU6IDIwcHg7XFxuICBib3R0b206IDMwJTsgfVxcblxcbi5tb2NrIC5kcm9wdXAge1xcbiAgcG9pbnRlci1ldmVudHM6IG5vbmU7XFxuICBvcGFjaXR5OiAwO1xcbiAgei1pbmRleDogOTk5OTtcXG4gIHRvcDogMTBweDtcXG4gIGJvdHRvbTogMTBweDtcXG4gIG92ZXJmbG93OiBhdXRvO1xcbiAgd2lkdGg6IDIyMHB4O1xcbiAgdHJhbnNpdGlvbjogb3BhY2l0eSAuMnM7IH1cXG4gIC5tb2NrIC5kcm9wdXAgLmxhbmcge1xcbiAgICBwYWRkaW5nOiA2cHg7XFxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jazsgfVxcbiAgICAubW9jayAuZHJvcHVwIC5sYW5nOmhvdmVyIHtcXG4gICAgICBiYWNrZ3JvdW5kOiAjYmVlNjRiOyB9XFxuICAubW9jayAuZHJvcHVwID4gLnRpdGxlIHtcXG4gICAgZm9udC1zaXplOiAuOGVtO1xcbiAgICBmb250LXdlaWdodDogYm9sZDtcXG4gICAgY29sb3I6IGJsYWNrO1xcbiAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlOyB9XFxuICAubW9jayAuZHJvcHVwIFtkYXRhLW1vY2sta2V5PVdoaXRlbGlzdGVkU2lnbmVkVXBCZXRhXSxcXG4gIC5tb2NrIC5kcm9wdXAgW2RhdGEtbW9jay1rZXk9UmFua2luZ05vdFN1Ym1pdHRlZF0sXFxuICAubW9jayAuZHJvcHVwIFtkYXRhLW1vY2sta2V5PVByZXBwaW5nTm90T3BlbmVkXSB7XFxuICAgIGJhY2tncm91bmQ6IHJnYmEoMjU1LCAyNTAsIDAsIDAuMik7IH1cXG4gIC5tb2NrIC5kcm9wdXAgW2RhdGEtbW9jay1rZXk9UHJlcHBpbmdPcGVuZWRdIHtcXG4gICAgYmFja2dyb3VuZDogcmdiYSgyNTUsIDI1MCwgMCwgMC40KTsgfVxcbiAgLm1vY2sgLmRyb3B1cCA+IGRpdiB7XFxuICAgIHBhZGRpbmc6IDZweDtcXG4gICAgcGFkZGluZy1sZWZ0OiA0cHg7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZDlkNmNmOyB9XFxuICAubW9jayAuZHJvcHVwID4gYSB7XFxuICAgIHBhZGRpbmc6IC41ZW07XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCAjZDlkNmNmOyB9XFxuICAgIC5tb2NrIC5kcm9wdXAgPiBhOnZpc2l0ZWQge1xcbiAgICAgIGNvbG9yOiBibHVlOyB9XFxuICAubW9jayAuZHJvcHVwLnNob3cge1xcbiAgICBvcGFjaXR5OiAxO1xcbiAgICBwb2ludGVyLWV2ZW50czogYWxsOyB9XFxuXCJcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL3dlYi9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2Nzc1xuLy8gbW9kdWxlIGlkID0gMzU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 360 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar common_1 = __webpack_require__(22);\nvar http_1 = __webpack_require__(361);\nvar forms_1 = __webpack_require__(362);\nvar device_state_service_1 = __webpack_require__(25);\nvar writers_1 = __webpack_require__(363);\nvar CoreModule = (function () {\n    function CoreModule(parentModule) {\n        if (parentModule) {\n            throw new Error('CoreModule is already loaded. Import it in the AppModule only');\n        }\n    }\n    // From https://angular.io/docs/ts/latest/cookbook/ngmodule-faq.html#!#what-is-the-_forroot_-method-\n    // The forRoot static method is a convention that makes it easy for developers to\n    // configure the module's provider(s).\n    CoreModule.forRoot = function () {\n        return {\n            ngModule: CoreModule,\n            providers: []\n        };\n    };\n    CoreModule = __decorate([\n        core_1.NgModule({\n            imports: [common_1.CommonModule, http_1.HttpModule, forms_1.FormsModule],\n            declarations: [],\n            // exports:      [ TitleComponent ],\n            providers: [\n                device_state_service_1.DeviceStateService,\n                writers_1.GroupWriter,\n            ]\n        }),\n        __param(0, core_1.Optional()),\n        __param(0, core_1.SkipSelf()), \n        __metadata('design:paramtypes', [CoreModule])\n    ], CoreModule);\n    return CoreModule;\n}());\nexports.CoreModule = CoreModule;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9jb3JlL2NvcmUubW9kdWxlLnRzPzIwYTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUVrQyxDQUFlLENBQUM7QUFFbEQsbUNBQWtDLEVBQWlCLENBQUM7QUFDcEQsaUNBQTJCLEdBQWUsQ0FBQztBQUMzQyxrQ0FBNEIsR0FBZ0IsQ0FBQztBQUU3QyxpREFBa0MsRUFBd0IsQ0FBQztBQUMzRCxvQ0FFTyxHQUFpQixDQUFDO0FBV3pCO0lBYUUsb0JBQXFDLFlBQXdCO1FBQzNELEVBQUUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7WUFDakIsTUFBTSxJQUFJLEtBQUssQ0FDYiwrREFBK0QsQ0FBQyxDQUFDO1FBQ3JFLENBQUM7SUFDSCxDQUFDO0lBakJELG9HQUFvRztJQUNwRyxpRkFBaUY7SUFDakYsc0NBQXNDO0lBQy9CLGtCQUFPLEdBQWQ7UUFDRSxNQUFNLENBQUM7WUFDTCxRQUFRLEVBQUUsVUFBVTtZQUNwQixTQUFTLEVBQUUsRUFFVjtTQUNGLENBQUM7SUFDSixDQUFDO0lBckJIO1FBQUMsZUFBUSxDQUFDO1lBQ1IsT0FBTyxFQUFPLENBQUUscUJBQVksRUFBRSxpQkFBVSxFQUFFLG1CQUFXLENBQUU7WUFDdkQsWUFBWSxFQUFFLEVBQUU7WUFDaEIsb0NBQW9DO1lBQ3BDLFNBQVMsRUFBSztnQkFDWix5Q0FBa0I7Z0JBRWxCLHFCQUFXO2FBQ1o7U0FDRixDQUFDO21CQWNjLGVBQVEsRUFBRTttQkFBRSxlQUFRLEVBQUU7O2tCQWRwQztJQXFCRixpQkFBQztBQUFELENBQUM7QUFwQlksa0JBQVUsYUFvQnRCIiwiZmlsZSI6IjM2MC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIE1vZHVsZVdpdGhQcm92aWRlcnMsIE5nTW9kdWxlLFxuICBPcHRpb25hbCwgU2tpcFNlbGYgfSAgICAgICBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gICAgICBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgSHR0cE1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2h0dHAnO1xuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5cbmltcG9ydCB7IERldmljZVN0YXRlU2VydmljZSB9ZnJvbSAnLi9kZXZpY2Utc3RhdGUuc2VydmljZSc7XG5pbXBvcnQge1xuICBHcm91cFdyaXRlcixcbn0gZnJvbSAnLi4vY29yZS93cml0ZXJzJztcbkBOZ01vZHVsZSh7XG4gIGltcG9ydHM6ICAgICAgWyBDb21tb25Nb2R1bGUsIEh0dHBNb2R1bGUsIEZvcm1zTW9kdWxlIF0sXG4gIGRlY2xhcmF0aW9uczogW10sXG4gIC8vIGV4cG9ydHM6ICAgICAgWyBUaXRsZUNvbXBvbmVudCBdLFxuICBwcm92aWRlcnM6ICAgIFtcbiAgICBEZXZpY2VTdGF0ZVNlcnZpY2UsXG5cbiAgICBHcm91cFdyaXRlcixcbiAgXVxufSlcbmV4cG9ydCBjbGFzcyBDb3JlTW9kdWxlIHtcbiAgLy8gRnJvbSBodHRwczovL2FuZ3VsYXIuaW8vZG9jcy90cy9sYXRlc3QvY29va2Jvb2svbmdtb2R1bGUtZmFxLmh0bWwjISN3aGF0LWlzLXRoZS1fZm9ycm9vdF8tbWV0aG9kLVxuICAvLyBUaGUgZm9yUm9vdCBzdGF0aWMgbWV0aG9kIGlzIGEgY29udmVudGlvbiB0aGF0IG1ha2VzIGl0IGVhc3kgZm9yIGRldmVsb3BlcnMgdG9cbiAgLy8gY29uZmlndXJlIHRoZSBtb2R1bGUncyBwcm92aWRlcihzKS5cbiAgc3RhdGljIGZvclJvb3QoLypjb25maWc6IFVzZXJTZXJ2aWNlQ29uZmlnKi8pOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmdNb2R1bGU6IENvcmVNb2R1bGUsXG4gICAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgLy8ge3Byb3ZpZGU6IFVzZXJTZXJ2aWNlQ29uZmlnLCB1c2VWYWx1ZTogY29uZmlnIH1cbiAgICAgIF1cbiAgICB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IgKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogQ29yZU1vZHVsZSkge1xuICAgIGlmIChwYXJlbnRNb2R1bGUpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ0NvcmVNb2R1bGUgaXMgYWxyZWFkeSBsb2FkZWQuIEltcG9ydCBpdCBpbiB0aGUgQXBwTW9kdWxlIG9ubHknKTtcbiAgICB9XG4gIH1cblxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi93ZWIvc3JjL2FwcC9jb3JlL2NvcmUubW9kdWxlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 361 */,
/* 362 */
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * @license Angular v2.0.0\n * (c) 2010-2016 Google, Inc. https://angular.io/\n * License: MIT\n */\n(function (global, factory) {\n     true ? factory(exports, __webpack_require__(1), __webpack_require__(327), __webpack_require__(2), __webpack_require__(3), __webpack_require__(73)) :\n    typeof define === 'function' && define.amd ? define(['exports', '@angular/core', 'rxjs/operator/toPromise', 'rxjs/Subject', 'rxjs/Observable', 'rxjs/observable/fromPromise'], factory) :\n    (factory((global.ng = global.ng || {}, global.ng.forms = global.ng.forms || {}),global.ng.core,global.Rx.Observable.prototype,global.Rx,global.Rx,global.Rx.Observable));\n}(this, function (exports,_angular_core,rxjs_operator_toPromise,rxjs_Subject,rxjs_Observable,rxjs_observable_fromPromise) { 'use strict';\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var globalScope;\n    if (typeof window === 'undefined') {\n        if (typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope) {\n            // TODO: Replace any with WorkerGlobalScope from lib.webworker.d.ts #3492\n            globalScope = self;\n        }\n        else {\n            globalScope = global;\n        }\n    }\n    else {\n        globalScope = window;\n    }\n    // Need to declare a new variable for global here since TypeScript\n    // exports the original value of the symbol.\n    var global$1 = globalScope;\n    // TODO: remove calls to assert in production environment\n    // Note: Can't just export this and import in in other files\n    // as `assert` is a reserved keyword in Dart\n    global$1.assert = function assert(condition) {\n        // TODO: to be fixed properly via #2830, noop for now\n    };\n    function isPresent(obj) {\n        return obj !== undefined && obj !== null;\n    }\n    function isBlank(obj) {\n        return obj === undefined || obj === null;\n    }\n    function isString(obj) {\n        return typeof obj === 'string';\n    }\n    function isFunction(obj) {\n        return typeof obj === 'function';\n    }\n    function isStringMap(obj) {\n        return typeof obj === 'object' && obj !== null;\n    }\n    function isPromise(obj) {\n        // allow any Promise/A+ compliant thenable.\n        // It's up to the caller to ensure that obj.then conforms to the spec\n        return isPresent(obj) && isFunction(obj.then);\n    }\n    function isArray(obj) {\n        return Array.isArray(obj);\n    }\n    var StringWrapper = (function () {\n        function StringWrapper() {\n        }\n        StringWrapper.fromCharCode = function (code) { return String.fromCharCode(code); };\n        StringWrapper.charCodeAt = function (s, index) { return s.charCodeAt(index); };\n        StringWrapper.split = function (s, regExp) { return s.split(regExp); };\n        StringWrapper.equals = function (s, s2) { return s === s2; };\n        StringWrapper.stripLeft = function (s, charVal) {\n            if (s && s.length) {\n                var pos = 0;\n                for (var i = 0; i < s.length; i++) {\n                    if (s[i] != charVal)\n                        break;\n                    pos++;\n                }\n                s = s.substring(pos);\n            }\n            return s;\n        };\n        StringWrapper.stripRight = function (s, charVal) {\n            if (s && s.length) {\n                var pos = s.length;\n                for (var i = s.length - 1; i >= 0; i--) {\n                    if (s[i] != charVal)\n                        break;\n                    pos--;\n                }\n                s = s.substring(0, pos);\n            }\n            return s;\n        };\n        StringWrapper.replace = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.replaceAll = function (s, from, replace) {\n            return s.replace(from, replace);\n        };\n        StringWrapper.slice = function (s, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return s.slice(from, to === null ? undefined : to);\n        };\n        StringWrapper.replaceAllMapped = function (s, from, cb) {\n            return s.replace(from, function () {\n                var matches = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    matches[_i - 0] = arguments[_i];\n                }\n                // Remove offset & string from the result array\n                matches.splice(-2, 2);\n                // The callback receives match, p1, ..., pn\n                return cb(matches);\n            });\n        };\n        StringWrapper.contains = function (s, substr) { return s.indexOf(substr) != -1; };\n        StringWrapper.compare = function (a, b) {\n            if (a < b) {\n                return -1;\n            }\n            else if (a > b) {\n                return 1;\n            }\n            else {\n                return 0;\n            }\n        };\n        return StringWrapper;\n    }());\n    var NumberWrapper = (function () {\n        function NumberWrapper() {\n        }\n        NumberWrapper.toFixed = function (n, fractionDigits) { return n.toFixed(fractionDigits); };\n        NumberWrapper.equal = function (a, b) { return a === b; };\n        NumberWrapper.parseIntAutoRadix = function (text) {\n            var result = parseInt(text);\n            if (isNaN(result)) {\n                throw new Error('Invalid integer literal when parsing ' + text);\n            }\n            return result;\n        };\n        NumberWrapper.parseInt = function (text, radix) {\n            if (radix == 10) {\n                if (/^(\\-|\\+)?[0-9]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else if (radix == 16) {\n                if (/^(\\-|\\+)?[0-9ABCDEFabcdef]+$/.test(text)) {\n                    return parseInt(text, radix);\n                }\n            }\n            else {\n                var result = parseInt(text, radix);\n                if (!isNaN(result)) {\n                    return result;\n                }\n            }\n            throw new Error('Invalid integer literal when parsing ' + text + ' in base ' + radix);\n        };\n        Object.defineProperty(NumberWrapper, \"NaN\", {\n            get: function () { return NaN; },\n            enumerable: true,\n            configurable: true\n        });\n        NumberWrapper.isNumeric = function (value) { return !isNaN(value - parseFloat(value)); };\n        NumberWrapper.isNaN = function (value) { return isNaN(value); };\n        NumberWrapper.isInteger = function (value) { return Number.isInteger(value); };\n        return NumberWrapper;\n    }());\n    // JS has NaN !== NaN\n    function looseIdentical(a, b) {\n        return a === b || typeof a === 'number' && typeof b === 'number' && isNaN(a) && isNaN(b);\n    }\n    function normalizeBool(obj) {\n        return isBlank(obj) ? false : obj;\n    }\n    function isJsObject(o) {\n        return o !== null && (typeof o === 'function' || typeof o === 'object');\n    }\n    function isPrimitive(obj) {\n        return !isJsObject(obj);\n    }\n    function hasConstructor(value, type) {\n        return value.constructor === type;\n    }\n\n    /**\n     * Base class for control directives.\n     *\n     * Only used internally in the forms module.\n     *\n     * @stable\n     */\n    var AbstractControlDirective = (function () {\n        function AbstractControlDirective() {\n        }\n        Object.defineProperty(AbstractControlDirective.prototype, \"control\", {\n            get: function () { throw new Error('unimplemented'); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"value\", {\n            get: function () { return isPresent(this.control) ? this.control.value : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valid\", {\n            get: function () { return isPresent(this.control) ? this.control.valid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"invalid\", {\n            get: function () { return isPresent(this.control) ? this.control.invalid : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pending\", {\n            get: function () { return isPresent(this.control) ? this.control.pending : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"errors\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.errors : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"pristine\", {\n            get: function () { return isPresent(this.control) ? this.control.pristine : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"dirty\", {\n            get: function () { return isPresent(this.control) ? this.control.dirty : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"touched\", {\n            get: function () { return isPresent(this.control) ? this.control.touched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"untouched\", {\n            get: function () { return isPresent(this.control) ? this.control.untouched : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"disabled\", {\n            get: function () { return isPresent(this.control) ? this.control.disabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"enabled\", {\n            get: function () { return isPresent(this.control) ? this.control.enabled : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"statusChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.statusChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"valueChanges\", {\n            get: function () {\n                return isPresent(this.control) ? this.control.valueChanges : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlDirective.prototype, \"path\", {\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        AbstractControlDirective.prototype.reset = function (value) {\n            if (value === void 0) { value = undefined; }\n            if (isPresent(this.control))\n                this.control.reset(value);\n        };\n        return AbstractControlDirective;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$1 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * A directive that contains multiple {@link NgControl}s.\n     *\n     * Only used by the forms module.\n     *\n     * @stable\n     */\n    var ControlContainer = (function (_super) {\n        __extends$1(ControlContainer, _super);\n        function ControlContainer() {\n            _super.apply(this, arguments);\n        }\n        Object.defineProperty(ControlContainer.prototype, \"formDirective\", {\n            /**\n             * Get the form to which this container belongs.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(ControlContainer.prototype, \"path\", {\n            /**\n             * Get the path to this container.\n             */\n            get: function () { return null; },\n            enumerable: true,\n            configurable: true\n        });\n        return ControlContainer;\n    }(AbstractControlDirective));\n\n    var Map$1 = global$1.Map;\n    var Set = global$1.Set;\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Map constructor.  We work around that by manually adding the items.\n    var createMapFromPairs = (function () {\n        try {\n            if (new Map$1([[1, 2]]).size === 1) {\n                return function createMapFromPairs(pairs) { return new Map$1(pairs); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromPairs(pairs) {\n            var map = new Map$1();\n            for (var i = 0; i < pairs.length; i++) {\n                var pair = pairs[i];\n                map.set(pair[0], pair[1]);\n            }\n            return map;\n        };\n    })();\n    var createMapFromMap = (function () {\n        try {\n            if (new Map$1(new Map$1())) {\n                return function createMapFromMap(m) { return new Map$1(m); };\n            }\n        }\n        catch (e) {\n        }\n        return function createMapAndPopulateFromMap(m) {\n            var map = new Map$1();\n            m.forEach(function (v, k) { map.set(k, v); });\n            return map;\n        };\n    })();\n    var _clearValues = (function () {\n        if ((new Map$1()).keys().next) {\n            return function _clearValues(m) {\n                var keyIterator = m.keys();\n                var k;\n                while (!((k = keyIterator.next()).done)) {\n                    m.set(k.value, null);\n                }\n            };\n        }\n        else {\n            return function _clearValuesWithForeEach(m) {\n                m.forEach(function (v, k) { m.set(k, null); });\n            };\n        }\n    })();\n    // Safari doesn't implement MapIterator.next(), which is used is Traceur's polyfill of Array.from\n    // TODO(mlaval): remove the work around once we have a working polyfill of Array.from\n    var _arrayFromMap = (function () {\n        try {\n            if ((new Map$1()).values().next) {\n                return function createArrayFromMap(m, getValues) {\n                    return getValues ? Array.from(m.values()) : Array.from(m.keys());\n                };\n            }\n        }\n        catch (e) {\n        }\n        return function createArrayFromMapWithForeach(m, getValues) {\n            var res = ListWrapper.createFixedSize(m.size), i = 0;\n            m.forEach(function (v, k) {\n                res[i] = getValues ? v : k;\n                i++;\n            });\n            return res;\n        };\n    })();\n    var MapWrapper = (function () {\n        function MapWrapper() {\n        }\n        MapWrapper.clone = function (m) { return createMapFromMap(m); };\n        MapWrapper.createFromStringMap = function (stringMap) {\n            var result = new Map$1();\n            for (var prop in stringMap) {\n                result.set(prop, stringMap[prop]);\n            }\n            return result;\n        };\n        MapWrapper.toStringMap = function (m) {\n            var r = {};\n            m.forEach(function (v, k) { return r[k] = v; });\n            return r;\n        };\n        MapWrapper.createFromPairs = function (pairs) { return createMapFromPairs(pairs); };\n        MapWrapper.clearValues = function (m) { _clearValues(m); };\n        MapWrapper.iterable = function (m) { return m; };\n        MapWrapper.keys = function (m) { return _arrayFromMap(m, false); };\n        MapWrapper.values = function (m) { return _arrayFromMap(m, true); };\n        return MapWrapper;\n    }());\n    /**\n     * Wraps Javascript Objects\n     */\n    var StringMapWrapper = (function () {\n        function StringMapWrapper() {\n        }\n        StringMapWrapper.create = function () {\n            // Note: We are not using Object.create(null) here due to\n            // performance!\n            // http://jsperf.com/ng2-object-create-null\n            return {};\n        };\n        StringMapWrapper.contains = function (map, key) {\n            return map.hasOwnProperty(key);\n        };\n        StringMapWrapper.get = function (map, key) {\n            return map.hasOwnProperty(key) ? map[key] : undefined;\n        };\n        StringMapWrapper.set = function (map, key, value) { map[key] = value; };\n        StringMapWrapper.keys = function (map) { return Object.keys(map); };\n        StringMapWrapper.values = function (map) {\n            return Object.keys(map).map(function (k) { return map[k]; });\n        };\n        StringMapWrapper.isEmpty = function (map) {\n            for (var prop in map) {\n                return false;\n            }\n            return true;\n        };\n        StringMapWrapper.delete = function (map, key) { delete map[key]; };\n        StringMapWrapper.forEach = function (map, callback) {\n            for (var _i = 0, _a = Object.keys(map); _i < _a.length; _i++) {\n                var k = _a[_i];\n                callback(map[k], k);\n            }\n        };\n        StringMapWrapper.merge = function (m1, m2) {\n            var m = {};\n            for (var _i = 0, _a = Object.keys(m1); _i < _a.length; _i++) {\n                var k = _a[_i];\n                m[k] = m1[k];\n            }\n            for (var _b = 0, _c = Object.keys(m2); _b < _c.length; _b++) {\n                var k = _c[_b];\n                m[k] = m2[k];\n            }\n            return m;\n        };\n        StringMapWrapper.equals = function (m1, m2) {\n            var k1 = Object.keys(m1);\n            var k2 = Object.keys(m2);\n            if (k1.length != k2.length) {\n                return false;\n            }\n            for (var i = 0; i < k1.length; i++) {\n                var key = k1[i];\n                if (m1[key] !== m2[key]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        return StringMapWrapper;\n    }());\n    var ListWrapper = (function () {\n        function ListWrapper() {\n        }\n        // JS has no way to express a statically fixed size list, but dart does so we\n        // keep both methods.\n        ListWrapper.createFixedSize = function (size) { return new Array(size); };\n        ListWrapper.createGrowableSize = function (size) { return new Array(size); };\n        ListWrapper.clone = function (array) { return array.slice(0); };\n        ListWrapper.forEachWithIndex = function (array, fn) {\n            for (var i = 0; i < array.length; i++) {\n                fn(array[i], i);\n            }\n        };\n        ListWrapper.first = function (array) {\n            if (!array)\n                return null;\n            return array[0];\n        };\n        ListWrapper.last = function (array) {\n            if (!array || array.length == 0)\n                return null;\n            return array[array.length - 1];\n        };\n        ListWrapper.indexOf = function (array, value, startIndex) {\n            if (startIndex === void 0) { startIndex = 0; }\n            return array.indexOf(value, startIndex);\n        };\n        ListWrapper.contains = function (list, el) { return list.indexOf(el) !== -1; };\n        ListWrapper.reversed = function (array) {\n            var a = ListWrapper.clone(array);\n            return a.reverse();\n        };\n        ListWrapper.concat = function (a, b) { return a.concat(b); };\n        ListWrapper.insert = function (list, index, value) { list.splice(index, 0, value); };\n        ListWrapper.removeAt = function (list, index) {\n            var res = list[index];\n            list.splice(index, 1);\n            return res;\n        };\n        ListWrapper.removeAll = function (list, items) {\n            for (var i = 0; i < items.length; ++i) {\n                var index = list.indexOf(items[i]);\n                list.splice(index, 1);\n            }\n        };\n        ListWrapper.remove = function (list, el) {\n            var index = list.indexOf(el);\n            if (index > -1) {\n                list.splice(index, 1);\n                return true;\n            }\n            return false;\n        };\n        ListWrapper.clear = function (list) { list.length = 0; };\n        ListWrapper.isEmpty = function (list) { return list.length == 0; };\n        ListWrapper.fill = function (list, value, start, end) {\n            if (start === void 0) { start = 0; }\n            if (end === void 0) { end = null; }\n            list.fill(value, start, end === null ? list.length : end);\n        };\n        ListWrapper.equals = function (a, b) {\n            if (a.length != b.length)\n                return false;\n            for (var i = 0; i < a.length; ++i) {\n                if (a[i] !== b[i])\n                    return false;\n            }\n            return true;\n        };\n        ListWrapper.slice = function (l, from, to) {\n            if (from === void 0) { from = 0; }\n            if (to === void 0) { to = null; }\n            return l.slice(from, to === null ? undefined : to);\n        };\n        ListWrapper.splice = function (l, from, length) { return l.splice(from, length); };\n        ListWrapper.sort = function (l, compareFn) {\n            if (isPresent(compareFn)) {\n                l.sort(compareFn);\n            }\n            else {\n                l.sort();\n            }\n        };\n        ListWrapper.toString = function (l) { return l.toString(); };\n        ListWrapper.toJSON = function (l) { return JSON.stringify(l); };\n        ListWrapper.maximum = function (list, predicate) {\n            if (list.length == 0) {\n                return null;\n            }\n            var solution = null;\n            var maxValue = -Infinity;\n            for (var index = 0; index < list.length; index++) {\n                var candidate = list[index];\n                if (isBlank(candidate)) {\n                    continue;\n                }\n                var candidateValue = predicate(candidate);\n                if (candidateValue > maxValue) {\n                    solution = candidate;\n                    maxValue = candidateValue;\n                }\n            }\n            return solution;\n        };\n        ListWrapper.flatten = function (list) {\n            var target = [];\n            _flattenArray(list, target);\n            return target;\n        };\n        ListWrapper.addAll = function (list, source) {\n            for (var i = 0; i < source.length; i++) {\n                list.push(source[i]);\n            }\n        };\n        return ListWrapper;\n    }());\n    function _flattenArray(source, target) {\n        if (isPresent(source)) {\n            for (var i = 0; i < source.length; i++) {\n                var item = source[i];\n                if (isArray(item)) {\n                    _flattenArray(item, target);\n                }\n                else {\n                    target.push(item);\n                }\n            }\n        }\n        return target;\n    }\n    // Safari and Internet Explorer do not support the iterable parameter to the\n    // Set constructor.  We work around that by manually adding the items.\n    var createSetFromList = (function () {\n        var test = new Set([1, 2, 3]);\n        if (test.size === 3) {\n            return function createSetFromList(lst) { return new Set(lst); };\n        }\n        else {\n            return function createSetAndPopulateFromList(lst) {\n                var res = new Set(lst);\n                if (res.size !== lst.length) {\n                    for (var i = 0; i < lst.length; i++) {\n                        res.add(lst[i]);\n                    }\n                }\n                return res;\n            };\n        }\n    })();\n\n    /**\n     * Providers for validators to be used for {@link FormControl}s in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * ### Example\n     *\n     * {@example core/forms/ts/ng_validators/ng_validators.ts region='ng_validators'}\n     * @stable\n     */\n    var NG_VALIDATORS = new _angular_core.OpaqueToken('NgValidators');\n    /**\n     * Providers for asynchronous validators to be used for {@link FormControl}s\n     * in a form.\n     *\n     * Provide this using `multi: true` to add validators.\n     *\n     * See {@link NG_VALIDATORS} for more details.\n     *\n     * @stable\n     */\n    var NG_ASYNC_VALIDATORS = new _angular_core.OpaqueToken('NgAsyncValidators');\n    /**\n     * Provides a set of validators used by form controls.\n     *\n     * A validator is a function that processes a {@link FormControl} or collection of\n     * controls and returns a map of errors. A null map means that validation has passed.\n     *\n     * ### Example\n     *\n     * ```typescript\n     * var loginControl = new FormControl(\"\", Validators.required)\n     * ```\n     *\n     * @stable\n     */\n    var Validators = (function () {\n        function Validators() {\n        }\n        /**\n         * Validator that requires controls to have a non-empty value.\n         */\n        Validators.required = function (control) {\n            return isBlank(control.value) || (isString(control.value) && control.value == '') ?\n                { 'required': true } :\n                null;\n        };\n        /**\n         * Validator that requires controls to have a value of a minimum length.\n         */\n        Validators.minLength = function (minLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length < minLength ?\n                    { 'minlength': { 'requiredLength': minLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires controls to have a value of a maximum length.\n         */\n        Validators.maxLength = function (maxLength) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var v = control.value;\n                return v.length > maxLength ?\n                    { 'maxlength': { 'requiredLength': maxLength, 'actualLength': v.length } } :\n                    null;\n            };\n        };\n        /**\n         * Validator that requires a control to match a regex to its value.\n         */\n        Validators.pattern = function (pattern) {\n            return function (control) {\n                if (isPresent(Validators.required(control)))\n                    return null;\n                var regex = new RegExp(\"^\" + pattern + \"$\");\n                var v = control.value;\n                return regex.test(v) ? null :\n                    { 'pattern': { 'requiredPattern': \"^\" + pattern + \"$\", 'actualValue': v } };\n            };\n        };\n        /**\n         * No-op validator.\n         */\n        Validators.nullValidator = function (c) { return null; };\n        /**\n         * Compose multiple validators into a single function that returns the union\n         * of the individual error maps.\n         */\n        Validators.compose = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                return _mergeErrors(_executeValidators(control, presentValidators));\n            };\n        };\n        Validators.composeAsync = function (validators) {\n            if (isBlank(validators))\n                return null;\n            var presentValidators = validators.filter(isPresent);\n            if (presentValidators.length == 0)\n                return null;\n            return function (control) {\n                var promises = _executeAsyncValidators(control, presentValidators).map(_convertToPromise);\n                return Promise.all(promises).then(_mergeErrors);\n            };\n        };\n        return Validators;\n    }());\n    function _convertToPromise(obj) {\n        return isPromise(obj) ? obj : rxjs_operator_toPromise.toPromise.call(obj);\n    }\n    function _executeValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _executeAsyncValidators(control, validators) {\n        return validators.map(function (v) { return v(control); });\n    }\n    function _mergeErrors(arrayOfErrors) {\n        var res = arrayOfErrors.reduce(function (res, errors) {\n            return isPresent(errors) ? StringMapWrapper.merge(res, errors) : res;\n        }, {});\n        return StringMapWrapper.isEmpty(res) ? null : res;\n    }\n\n    /**\n     * Used to provide a {@link ControlValueAccessor} for form controls.\n     *\n     * See {@link DefaultValueAccessor} for how to implement one.\n     * @stable\n     */\n    var NG_VALUE_ACCESSOR = new _angular_core.OpaqueToken('NgValueAccessor');\n\n    var CHECKBOX_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return CheckboxControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a value and listening to changes on a checkbox input element.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"checkbox\" name=\"rememberLogin\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var CheckboxControlValueAccessor = (function () {\n        function CheckboxControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        CheckboxControlValueAccessor.prototype.writeValue = function (value) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', value);\n        };\n        CheckboxControlValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        CheckboxControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        CheckboxControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        CheckboxControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=checkbox][formControlName],input[type=checkbox][formControl],input[type=checkbox][ngModel]',\n                        host: { '(change)': 'onChange($event.target.checked)', '(blur)': 'onTouched()' },\n                        providers: [CHECKBOX_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        CheckboxControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return CheckboxControlValueAccessor;\n    }());\n\n    var DEFAULT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return DefaultValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The default accessor for writing a value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"text\" name=\"searchQuery\" ngModel>\n     *  ```\n     *\n     *  @stable\n     */\n    var DefaultValueAccessor = (function () {\n        function DefaultValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        DefaultValueAccessor.prototype.writeValue = function (value) {\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        DefaultValueAccessor.prototype.registerOnChange = function (fn) { this.onChange = fn; };\n        DefaultValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        DefaultValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        DefaultValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]',\n                        // TODO: vsavkin replace the above selector with the one below it once\n                        // https://github.com/angular/angular/issues/3011 is implemented\n                        // selector: '[ngControl],[ngModel],[ngFormControl]',\n                        host: { '(input)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [DEFAULT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        DefaultValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return DefaultValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    function normalizeValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n    function normalizeAsyncValidator(validator) {\n        if (validator.validate !== undefined) {\n            return function (c) { return validator.validate(c); };\n        }\n        else {\n            return validator;\n        }\n    }\n\n    var NUMBER_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return NumberValueAccessor; }),\n        multi: true\n    };\n    /**\n     * The accessor for writing a number value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  <input type=\"number\" [(ngModel)]=\"age\">\n     *  ```\n     */\n    var NumberValueAccessor = (function () {\n        function NumberValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        NumberValueAccessor.prototype.writeValue = function (value) {\n            // The value needs to be normalized for IE9, otherwise it is set to 'null' when null\n            var normalizedValue = isBlank(value) ? '' : value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', normalizedValue);\n        };\n        NumberValueAccessor.prototype.registerOnChange = function (fn) {\n            this.onChange = function (value) { fn(value == '' ? null : parseFloat(value)); };\n        };\n        NumberValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        NumberValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        NumberValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]',\n                        host: {\n                            '(change)': 'onChange($event.target.value)',\n                            '(input)': 'onChange($event.target.value)',\n                            '(blur)': 'onTouched()'\n                        },\n                        providers: [NUMBER_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        NumberValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return NumberValueAccessor;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$2 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    function unimplemented() {\n        throw new Error('unimplemented');\n    }\n    /**\n     * A base class that all control directive extend.\n     * It binds a {@link FormControl} object to a DOM element.\n     *\n     * Used internally by Angular forms.\n     *\n     * @stable\n     */\n    var NgControl = (function (_super) {\n        __extends$2(NgControl, _super);\n        function NgControl() {\n            _super.apply(this, arguments);\n            /** @internal */\n            this._parent = null;\n            this.name = null;\n            this.valueAccessor = null;\n            /** @internal */\n            this._rawValidators = [];\n            /** @internal */\n            this._rawAsyncValidators = [];\n        }\n        Object.defineProperty(NgControl.prototype, \"validator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgControl.prototype, \"asyncValidator\", {\n            get: function () { return unimplemented(); },\n            enumerable: true,\n            configurable: true\n        });\n        return NgControl;\n    }(AbstractControlDirective));\n\n    var RADIO_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return RadioControlValueAccessor; }),\n        multi: true\n    };\n    /**\n     * Internal class used by Angular to uncheck radio buttons with the matching name.\n     */\n    var RadioControlRegistry = (function () {\n        function RadioControlRegistry() {\n            this._accessors = [];\n        }\n        RadioControlRegistry.prototype.add = function (control, accessor) {\n            this._accessors.push([control, accessor]);\n        };\n        RadioControlRegistry.prototype.remove = function (accessor) {\n            var indexToRemove = -1;\n            for (var i = 0; i < this._accessors.length; ++i) {\n                if (this._accessors[i][1] === accessor) {\n                    indexToRemove = i;\n                }\n            }\n            ListWrapper.removeAt(this._accessors, indexToRemove);\n        };\n        RadioControlRegistry.prototype.select = function (accessor) {\n            var _this = this;\n            this._accessors.forEach(function (c) {\n                if (_this._isSameGroup(c, accessor) && c[1] !== accessor) {\n                    c[1].fireUncheck(accessor.value);\n                }\n            });\n        };\n        RadioControlRegistry.prototype._isSameGroup = function (controlPair, accessor) {\n            if (!controlPair[0].control)\n                return false;\n            return controlPair[0]._parent === accessor._control._parent &&\n                controlPair[1].name === accessor.name;\n        };\n        RadioControlRegistry.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        RadioControlRegistry.ctorParameters = [];\n        return RadioControlRegistry;\n    }());\n    /**\n     * The accessor for writing a radio control value and listening to changes that is used by the\n     * {@link NgModel}, {@link FormControlDirective}, and {@link FormControlName} directives.\n     *\n     *  ### Example\n     *  ```\n     *  @Component({\n     *    template: `\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"chicken\">\n     *      <input type=\"radio\" name=\"food\" [(ngModel)]=\"food\" value=\"fish\">\n     *    `\n     *  })\n     *  class FoodCmp {\n     *    food = 'chicken';\n     *  }\n     *  ```\n     */\n    var RadioControlValueAccessor = (function () {\n        function RadioControlValueAccessor(_renderer, _elementRef, _registry, _injector) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            this._registry = _registry;\n            this._injector = _injector;\n            this.onChange = function () { };\n            this.onTouched = function () { };\n        }\n        RadioControlValueAccessor.prototype.ngOnInit = function () {\n            this._control = this._injector.get(NgControl);\n            this._checkName();\n            this._registry.add(this._control, this);\n        };\n        RadioControlValueAccessor.prototype.ngOnDestroy = function () { this._registry.remove(this); };\n        RadioControlValueAccessor.prototype.writeValue = function (value) {\n            this._state = value === this.value;\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'checked', this._state);\n        };\n        RadioControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this._fn = fn;\n            this.onChange = function () {\n                fn(_this.value);\n                _this._registry.select(_this);\n            };\n        };\n        RadioControlValueAccessor.prototype.fireUncheck = function (value) { this.writeValue(value); };\n        RadioControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        RadioControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        RadioControlValueAccessor.prototype._checkName = function () {\n            if (this.name && this.formControlName && this.name !== this.formControlName) {\n                this._throwNameError();\n            }\n            if (!this.name && this.formControlName)\n                this.name = this.formControlName;\n        };\n        RadioControlValueAccessor.prototype._throwNameError = function () {\n            throw new Error(\"\\n      If you define both a name and a formControlName attribute on your radio button, their values\\n      must match. Ex: <input type=\\\"radio\\\" formControlName=\\\"food\\\" name=\\\"food\\\">\\n    \");\n        };\n        RadioControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'input[type=radio][formControlName],input[type=radio][formControl],input[type=radio][ngModel]',\n                        host: { '(change)': 'onChange()', '(blur)': 'onTouched()' },\n                        providers: [RADIO_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        RadioControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n            { type: RadioControlRegistry, },\n            { type: _angular_core.Injector, },\n        ];\n        RadioControlValueAccessor.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'formControlName': [{ type: _angular_core.Input },],\n            'value': [{ type: _angular_core.Input },],\n        };\n        return RadioControlValueAccessor;\n    }());\n\n    var SELECT_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * Note: We have to listen to the 'change' event because 'input' events aren't fired\n     * for selects in Firefox and IE:\n     * https://bugzilla.mozilla.org/show_bug.cgi?id=1024350\n     * https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/4660045/\n     *\n     * @stable\n     */\n    var SelectControlValueAccessor = (function () {\n        function SelectControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectControlValueAccessor.prototype.writeValue = function (value) {\n            this.value = value;\n            var valueString = _buildValueString(this._getOptionId(value), value);\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'value', valueString);\n        };\n        SelectControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (valueString) {\n                _this.value = valueString;\n                fn(_this._getOptionValue(valueString));\n            };\n        };\n        SelectControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._registerOption = function () { return (this._idCounter++).toString(); };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id), value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var value = this._optionMap.get(_extractId(valueString));\n            return isPresent(value) ? value : valueString;\n        };\n        SelectControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]',\n                        host: { '(change)': 'onChange($event.target.value)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     *\n     * @stable\n     */\n    var NgSelectOption = (function () {\n        function NgSelectOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select))\n                this.id = this._select._registerOption();\n        }\n        Object.defineProperty(NgSelectOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._select._optionMap.set(this.id, value);\n                this._setElementValue(_buildValueString(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectOption.prototype, \"value\", {\n            set: function (value) {\n                this._setElementValue(value);\n                if (isPresent(this._select))\n                    this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        NgSelectOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectOption;\n    }());\n\n    var SELECT_MULTIPLE_VALUE_ACCESSOR = {\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: _angular_core.forwardRef(function () { return SelectMultipleControlValueAccessor; }),\n        multi: true\n    };\n    function _buildValueString$1(id, value) {\n        if (isBlank(id))\n            return \"\" + value;\n        if (isString(value))\n            value = \"'\" + value + \"'\";\n        if (!isPrimitive(value))\n            value = 'Object';\n        return StringWrapper.slice(id + \": \" + value, 0, 50);\n    }\n    function _extractId$1(valueString) {\n        return valueString.split(':')[0];\n    }\n    /**\n     * The accessor for writing a value and listening to changes on a select element.\n     *\n     * @stable\n     */\n    var SelectMultipleControlValueAccessor = (function () {\n        function SelectMultipleControlValueAccessor(_renderer, _elementRef) {\n            this._renderer = _renderer;\n            this._elementRef = _elementRef;\n            /** @internal */\n            this._optionMap = new Map();\n            /** @internal */\n            this._idCounter = 0;\n            this.onChange = function (_) { };\n            this.onTouched = function () { };\n        }\n        SelectMultipleControlValueAccessor.prototype.writeValue = function (value) {\n            var _this = this;\n            this.value = value;\n            if (value == null)\n                return;\n            var values = value;\n            // convert values to ids\n            var ids = values.map(function (v) { return _this._getOptionId(v); });\n            this._optionMap.forEach(function (opt, o) { opt._setSelected(ids.indexOf(o.toString()) > -1); });\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnChange = function (fn) {\n            var _this = this;\n            this.onChange = function (_) {\n                var selected = [];\n                if (_.hasOwnProperty('selectedOptions')) {\n                    var options = _.selectedOptions;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        var val = _this._getOptionValue(opt.value);\n                        selected.push(val);\n                    }\n                }\n                else {\n                    var options = _.options;\n                    for (var i = 0; i < options.length; i++) {\n                        var opt = options.item(i);\n                        if (opt.selected) {\n                            var val = _this._getOptionValue(opt.value);\n                            selected.push(val);\n                        }\n                    }\n                }\n                fn(selected);\n            };\n        };\n        SelectMultipleControlValueAccessor.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };\n        SelectMultipleControlValueAccessor.prototype.setDisabledState = function (isDisabled) {\n            this._renderer.setElementProperty(this._elementRef.nativeElement, 'disabled', isDisabled);\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._registerOption = function (value) {\n            var id = (this._idCounter++).toString();\n            this._optionMap.set(id, value);\n            return id;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionId = function (value) {\n            for (var _i = 0, _a = MapWrapper.keys(this._optionMap); _i < _a.length; _i++) {\n                var id = _a[_i];\n                if (looseIdentical(this._optionMap.get(id)._value, value))\n                    return id;\n            }\n            return null;\n        };\n        /** @internal */\n        SelectMultipleControlValueAccessor.prototype._getOptionValue = function (valueString) {\n            var opt = this._optionMap.get(_extractId$1(valueString));\n            return isPresent(opt) ? opt._value : valueString;\n        };\n        SelectMultipleControlValueAccessor.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'select[multiple][formControlName],select[multiple][formControl],select[multiple][ngModel]',\n                        host: { '(change)': 'onChange($event.target)', '(blur)': 'onTouched()' },\n                        providers: [SELECT_MULTIPLE_VALUE_ACCESSOR]\n                    },] },\n        ];\n        /** @nocollapse */\n        SelectMultipleControlValueAccessor.ctorParameters = [\n            { type: _angular_core.Renderer, },\n            { type: _angular_core.ElementRef, },\n        ];\n        return SelectMultipleControlValueAccessor;\n    }());\n    /**\n     * Marks `<option>` as dynamic, so Angular can be notified when options change.\n     *\n     * ### Example\n     *\n     * ```\n     * <select multiple name=\"city\" ngModel>\n     *   <option *ngFor=\"let c of cities\" [value]=\"c\"></option>\n     * </select>\n     * ```\n     */\n    var NgSelectMultipleOption = (function () {\n        function NgSelectMultipleOption(_element, _renderer, _select) {\n            this._element = _element;\n            this._renderer = _renderer;\n            this._select = _select;\n            if (isPresent(this._select)) {\n                this.id = this._select._registerOption(this);\n            }\n        }\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"ngValue\", {\n            set: function (value) {\n                if (this._select == null)\n                    return;\n                this._value = value;\n                this._setElementValue(_buildValueString$1(this.id, value));\n                this._select.writeValue(this._select.value);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgSelectMultipleOption.prototype, \"value\", {\n            set: function (value) {\n                if (isPresent(this._select)) {\n                    this._value = value;\n                    this._setElementValue(_buildValueString$1(this.id, value));\n                    this._select.writeValue(this._select.value);\n                }\n                else {\n                    this._setElementValue(value);\n                }\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        NgSelectMultipleOption.prototype._setElementValue = function (value) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'value', value);\n        };\n        /** @internal */\n        NgSelectMultipleOption.prototype._setSelected = function (selected) {\n            this._renderer.setElementProperty(this._element.nativeElement, 'selected', selected);\n        };\n        NgSelectMultipleOption.prototype.ngOnDestroy = function () {\n            if (isPresent(this._select)) {\n                this._select._optionMap.delete(this.id);\n                this._select.writeValue(this._select.value);\n            }\n        };\n        NgSelectMultipleOption.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: 'option' },] },\n        ];\n        /** @nocollapse */\n        NgSelectMultipleOption.ctorParameters = [\n            { type: _angular_core.ElementRef, },\n            { type: _angular_core.Renderer, },\n            { type: SelectMultipleControlValueAccessor, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n        ];\n        NgSelectMultipleOption.propDecorators = {\n            'ngValue': [{ type: _angular_core.Input, args: ['ngValue',] },],\n            'value': [{ type: _angular_core.Input, args: ['value',] },],\n        };\n        return NgSelectMultipleOption;\n    }());\n\n    function controlPath(name, parent) {\n        var p = ListWrapper.clone(parent.path);\n        p.push(name);\n        return p;\n    }\n    function setUpControl(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        if (isBlank(dir.valueAccessor))\n            _throwError(dir, 'No value accessor for form control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n        dir.valueAccessor.writeValue(control.value);\n        // view -> model\n        dir.valueAccessor.registerOnChange(function (newValue) {\n            dir.viewToModelUpdate(newValue);\n            control.markAsDirty();\n            control.setValue(newValue, { emitModelToViewChange: false });\n        });\n        // touched\n        dir.valueAccessor.registerOnTouched(function () { return control.markAsTouched(); });\n        control.registerOnChange(function (newValue, emitModelEvent) {\n            // control -> view\n            dir.valueAccessor.writeValue(newValue);\n            // control -> ngModel\n            if (emitModelEvent)\n                dir.viewToModelUpdate(newValue);\n        });\n        if (dir.valueAccessor.setDisabledState) {\n            control.registerOnDisabledChange(function (isDisabled) { dir.valueAccessor.setDisabledState(isDisabled); });\n        }\n        // re-run validation when validator binding changes, e.g. minlength=3 -> minlength=4\n        dir._rawValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n        dir._rawAsyncValidators.forEach(function (validator) {\n            if (validator.registerOnValidatorChange)\n                validator.registerOnValidatorChange(function () { return control.updateValueAndValidity(); });\n        });\n    }\n    function cleanUpControl(control, dir) {\n        dir.valueAccessor.registerOnChange(function () { return _noControlError(dir); });\n        dir.valueAccessor.registerOnTouched(function () { return _noControlError(dir); });\n        dir._rawValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        dir._rawAsyncValidators.forEach(function (validator) { return validator.registerOnValidatorChange(null); });\n        if (control)\n            control._clearChangeFns();\n    }\n    function setUpFormContainer(control, dir) {\n        if (isBlank(control))\n            _throwError(dir, 'Cannot find control with');\n        control.validator = Validators.compose([control.validator, dir.validator]);\n        control.asyncValidator = Validators.composeAsync([control.asyncValidator, dir.asyncValidator]);\n    }\n    function _noControlError(dir) {\n        return _throwError(dir, 'There is no FormControl instance attached to form control element with');\n    }\n    function _throwError(dir, message) {\n        var messageEnd;\n        if (dir.path.length > 1) {\n            messageEnd = \"path: '\" + dir.path.join(' -> ') + \"'\";\n        }\n        else if (dir.path[0]) {\n            messageEnd = \"name: '\" + dir.path + \"'\";\n        }\n        else {\n            messageEnd = 'unspecified name attribute';\n        }\n        throw new Error(message + \" \" + messageEnd);\n    }\n    function composeValidators(validators) {\n        return isPresent(validators) ? Validators.compose(validators.map(normalizeValidator)) : null;\n    }\n    function composeAsyncValidators(validators) {\n        return isPresent(validators) ? Validators.composeAsync(validators.map(normalizeAsyncValidator)) :\n            null;\n    }\n    function isPropertyUpdated(changes, viewModel) {\n        if (!StringMapWrapper.contains(changes, 'model'))\n            return false;\n        var change = changes['model'];\n        if (change.isFirstChange())\n            return true;\n        return !looseIdentical(viewModel, change.currentValue);\n    }\n    function isBuiltInAccessor(valueAccessor) {\n        return (hasConstructor(valueAccessor, CheckboxControlValueAccessor) ||\n            hasConstructor(valueAccessor, NumberValueAccessor) ||\n            hasConstructor(valueAccessor, SelectControlValueAccessor) ||\n            hasConstructor(valueAccessor, SelectMultipleControlValueAccessor) ||\n            hasConstructor(valueAccessor, RadioControlValueAccessor));\n    }\n    // TODO: vsavkin remove it once https://github.com/angular/angular/issues/3011 is implemented\n    function selectValueAccessor(dir, valueAccessors) {\n        if (isBlank(valueAccessors))\n            return null;\n        var defaultAccessor;\n        var builtinAccessor;\n        var customAccessor;\n        valueAccessors.forEach(function (v) {\n            if (hasConstructor(v, DefaultValueAccessor)) {\n                defaultAccessor = v;\n            }\n            else if (isBuiltInAccessor(v)) {\n                if (isPresent(builtinAccessor))\n                    _throwError(dir, 'More than one built-in value accessor matches form control with');\n                builtinAccessor = v;\n            }\n            else {\n                if (isPresent(customAccessor))\n                    _throwError(dir, 'More than one custom value accessor matches form control with');\n                customAccessor = v;\n            }\n        });\n        if (isPresent(customAccessor))\n            return customAccessor;\n        if (isPresent(builtinAccessor))\n            return builtinAccessor;\n        if (isPresent(defaultAccessor))\n            return defaultAccessor;\n        _throwError(dir, 'No valid value accessor for form control with');\n        return null;\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * This is a base class for code shared between {@link NgModelGroup} and {@link FormGroupName}.\n     *\n     * @stable\n     */\n    var AbstractFormGroupDirective = (function (_super) {\n        __extends(AbstractFormGroupDirective, _super);\n        function AbstractFormGroupDirective() {\n            _super.apply(this, arguments);\n        }\n        AbstractFormGroupDirective.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormGroup(this);\n        };\n        AbstractFormGroupDirective.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormGroup(this);\n            }\n        };\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"control\", {\n            /**\n             * Get the {@link FormGroup} backing this binding.\n             */\n            get: function () { return this.formDirective.getFormGroup(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"path\", {\n            /**\n             * Get the path to this control group.\n             */\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"formDirective\", {\n            /**\n             * Get the {@link Form} to which this group belongs.\n             */\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractFormGroupDirective.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractFormGroupDirective.prototype._checkParentType = function () { };\n        return AbstractFormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$3 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var AbstractControlStatus = (function () {\n        function AbstractControlStatus(cd) {\n            this._cd = cd;\n        }\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassUntouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.untouched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassTouched\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.touched : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassPristine\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.pristine : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassDirty\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.dirty : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassValid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.valid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControlStatus.prototype, \"ngClassInvalid\", {\n            get: function () {\n                return isPresent(this._cd.control) ? this._cd.control.invalid : false;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        return AbstractControlStatus;\n    }());\n    var ngControlStatusHost = {\n        '[class.ng-untouched]': 'ngClassUntouched',\n        '[class.ng-touched]': 'ngClassTouched',\n        '[class.ng-pristine]': 'ngClassPristine',\n        '[class.ng-dirty]': 'ngClassDirty',\n        '[class.ng-valid]': 'ngClassValid',\n        '[class.ng-invalid]': 'ngClassInvalid'\n    };\n    /**\n     * Directive automatically applied to Angular form controls that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatus = (function (_super) {\n        __extends$3(NgControlStatus, _super);\n        function NgControlStatus(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatus.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName],[ngModel],[formControl]', host: ngControlStatusHost },] },\n        ];\n        /** @nocollapse */\n        NgControlStatus.ctorParameters = [\n            { type: NgControl, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatus;\n    }(AbstractControlStatus));\n    /**\n     * Directive automatically applied to Angular form groups that sets CSS classes\n     * based on control status (valid/invalid/dirty/etc).\n     *\n     * @stable\n     */\n    var NgControlStatusGroup = (function (_super) {\n        __extends$3(NgControlStatusGroup, _super);\n        function NgControlStatusGroup(cd) {\n            _super.call(this, cd);\n        }\n        NgControlStatusGroup.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]',\n                        host: ngControlStatusHost\n                    },] },\n        ];\n        /** @nocollapse */\n        NgControlStatusGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Self },] },\n        ];\n        return NgControlStatusGroup;\n    }(AbstractControlStatus));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$5 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Use by directives and components to emit custom Events.\n     *\n     * ### Examples\n     *\n     * In the following example, `Zippy` alternatively emits `open` and `close` events when its\n     * title gets clicked:\n     *\n     * ```\n     * @Component({\n     *   selector: 'zippy',\n     *   template: `\n     *   <div class=\"zippy\">\n     *     <div (click)=\"toggle()\">Toggle</div>\n     *     <div [hidden]=\"!visible\">\n     *       <ng-content></ng-content>\n     *     </div>\n     *  </div>`})\n     * export class Zippy {\n     *   visible: boolean = true;\n     *   @Output() open: EventEmitter<any> = new EventEmitter();\n     *   @Output() close: EventEmitter<any> = new EventEmitter();\n     *\n     *   toggle() {\n     *     this.visible = !this.visible;\n     *     if (this.visible) {\n     *       this.open.emit(null);\n     *     } else {\n     *       this.close.emit(null);\n     *     }\n     *   }\n     * }\n     * ```\n     *\n     * The events payload can be accessed by the parameter `$event` on the components output event\n     * handler:\n     *\n     * ```\n     * <zippy (open)=\"onOpen($event)\" (close)=\"onClose($event)\"></zippy>\n     * ```\n     *\n     * Uses Rx.Observable but provides an adapter to make it work as specified here:\n     * https://github.com/jhusain/observable-spec\n     *\n     * Once a reference implementation of the spec is available, switch to it.\n     * @stable\n     */\n    var EventEmitter = (function (_super) {\n        __extends$5(EventEmitter, _super);\n        /**\n         * Creates an instance of [EventEmitter], which depending on [isAsync],\n         * delivers events synchronously or asynchronously.\n         */\n        function EventEmitter(isAsync) {\n            if (isAsync === void 0) { isAsync = false; }\n            _super.call(this);\n            this.__isAsync = isAsync;\n        }\n        EventEmitter.prototype.emit = function (value) { _super.prototype.next.call(this, value); };\n        EventEmitter.prototype.subscribe = function (generatorOrNext, error, complete) {\n            var schedulerFn;\n            var errorFn = function (err) { return null; };\n            var completeFn = function () { return null; };\n            if (generatorOrNext && typeof generatorOrNext === 'object') {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext.next(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext.next(value); };\n                if (generatorOrNext.error) {\n                    errorFn = this.__isAsync ? function (err) { setTimeout(function () { return generatorOrNext.error(err); }); } :\n                        function (err) { generatorOrNext.error(err); };\n                }\n                if (generatorOrNext.complete) {\n                    completeFn = this.__isAsync ? function () { setTimeout(function () { return generatorOrNext.complete(); }); } :\n                        function () { generatorOrNext.complete(); };\n                }\n            }\n            else {\n                schedulerFn = this.__isAsync ? function (value /** TODO #9100 */) {\n                    setTimeout(function () { return generatorOrNext(value); });\n                } : function (value /** TODO #9100 */) { generatorOrNext(value); };\n                if (error) {\n                    errorFn =\n                        this.__isAsync ? function (err) { setTimeout(function () { return error(err); }); } : function (err) { error(err); };\n                }\n                if (complete) {\n                    completeFn =\n                        this.__isAsync ? function () { setTimeout(function () { return complete(); }); } : function () { complete(); };\n                }\n            }\n            return _super.prototype.subscribe.call(this, schedulerFn, errorFn, completeFn);\n        };\n        return EventEmitter;\n    }(rxjs_Subject.Subject));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$6 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    /**\n     * Indicates that a FormControl is valid, i.e. that no errors exist in the input value.\n     */\n    var VALID = 'VALID';\n    /**\n     * Indicates that a FormControl is invalid, i.e. that an error exists in the input value.\n     */\n    var INVALID = 'INVALID';\n    /**\n     * Indicates that a FormControl is pending, i.e. that async validation is occurring and\n     * errors are not yet available for the input value.\n     */\n    var PENDING = 'PENDING';\n    /**\n     * Indicates that a FormControl is disabled, i.e. that the control is exempt from ancestor\n     * calculations of validity or value.\n     */\n    var DISABLED = 'DISABLED';\n    function _find(control, path, delimiter) {\n        if (isBlank(path))\n            return null;\n        if (!(path instanceof Array)) {\n            path = path.split(delimiter);\n        }\n        if (path instanceof Array && ListWrapper.isEmpty(path))\n            return null;\n        return path.reduce(function (v, name) {\n            if (v instanceof FormGroup) {\n                return isPresent(v.controls[name]) ? v.controls[name] : null;\n            }\n            else if (v instanceof FormArray) {\n                var index = name;\n                return isPresent(v.at(index)) ? v.at(index) : null;\n            }\n            else {\n                return null;\n            }\n        }, control);\n    }\n    function toObservable(r) {\n        return isPromise(r) ? rxjs_observable_fromPromise.fromPromise(r) : r;\n    }\n    function coerceToValidator(validator) {\n        return Array.isArray(validator) ? composeValidators(validator) : validator;\n    }\n    function coerceToAsyncValidator(asyncValidator) {\n        return Array.isArray(asyncValidator) ? composeAsyncValidators(asyncValidator) : asyncValidator;\n    }\n    /**\n     * @whatItDoes This is the base class for {@link FormControl}, {@link FormGroup}, and\n     * {@link FormArray}.\n     *\n     * It provides some of the shared behavior that all controls and groups of controls have, like\n     * running validators, calculating status, and resetting state. It also defines the properties\n     * that are shared between all sub-classes, like `value`, `valid`, and `dirty`. It shouldn't be\n     * instantiated directly.\n     *\n     * @stable\n     */\n    var AbstractControl = (function () {\n        function AbstractControl(validator, asyncValidator) {\n            this.validator = validator;\n            this.asyncValidator = asyncValidator;\n            /** @internal */\n            this._onCollectionChange = function () { };\n            this._pristine = true;\n            this._touched = false;\n        }\n        Object.defineProperty(AbstractControl.prototype, \"value\", {\n            /**\n             * The value of the control.\n             */\n            get: function () { return this._value; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"status\", {\n            /**\n             * The validation status of the control. There are four possible\n             * validation statuses:\n             *\n             * * **VALID**:  control has passed all validation checks\n             * * **INVALID**: control has failed at least one validation check\n             * * **PENDING**: control is in the midst of conducting a validation check\n             * * **DISABLED**: control is exempt from validation checks\n             *\n             * These statuses are mutually exclusive, so a control cannot be\n             * both valid AND invalid or invalid AND disabled.\n             */\n            get: function () { return this._status; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valid\", {\n            /**\n             * A control is `valid` when its `status === VALID`.\n             *\n             * In order to have this status, the control must have passed all its\n             * validation checks.\n             */\n            get: function () { return this._status === VALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"invalid\", {\n            /**\n             * A control is `invalid` when its `status === INVALID`.\n             *\n             * In order to have this status, the control must have failed\n             * at least one of its validation checks.\n             */\n            get: function () { return this._status === INVALID; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pending\", {\n            /**\n             * A control is `pending` when its `status === PENDING`.\n             *\n             * In order to have this status, the control must be in the\n             * middle of conducting a validation check.\n             */\n            get: function () { return this._status == PENDING; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"disabled\", {\n            /**\n             * A control is `disabled` when its `status === DISABLED`.\n             *\n             * Disabled controls are exempt from validation checks and\n             * are not included in the aggregate value of their ancestor\n             * controls.\n             */\n            get: function () { return this._status === DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"enabled\", {\n            /**\n             * A control is `enabled` as long as its `status !== DISABLED`.\n             *\n             * In other words, it has a status of `VALID`, `INVALID`, or\n             * `PENDING`.\n             */\n            get: function () { return this._status !== DISABLED; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"errors\", {\n            /**\n             * Returns any errors generated by failing validation. If there\n             * are no errors, it will return null.\n             */\n            get: function () { return this._errors; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"pristine\", {\n            /**\n             * A control is `pristine` if the user has not yet changed\n             * the value in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return this._pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"dirty\", {\n            /**\n             * A control is `dirty` if the user has changed the value\n             * in the UI.\n             *\n             * Note that programmatic changes to a control's value will\n             * *not* mark it dirty.\n             */\n            get: function () { return !this.pristine; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"touched\", {\n            /**\n            * A control is marked `touched` once the user has triggered\n            * a `blur` event on it.\n            */\n            get: function () { return this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"untouched\", {\n            /**\n             * A control is `untouched` if the user has not yet triggered\n             * a `blur` event on it.\n             */\n            get: function () { return !this._touched; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"valueChanges\", {\n            /**\n             * Emits an event every time the value of the control changes, in\n             * the UI or programmatically.\n             */\n            get: function () { return this._valueChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(AbstractControl.prototype, \"statusChanges\", {\n            /**\n             * Emits an event every time the validation status of the control\n             * is re-calculated.\n             */\n            get: function () { return this._statusChanges; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         * Sets the synchronous validators that are active on this control.  Calling\n         * this will overwrite any existing sync validators.\n         */\n        AbstractControl.prototype.setValidators = function (newValidator) {\n            this.validator = coerceToValidator(newValidator);\n        };\n        /**\n         * Sets the async validators that are active on this control. Calling this\n         * will overwrite any existing async validators.\n         */\n        AbstractControl.prototype.setAsyncValidators = function (newValidator) {\n            this.asyncValidator = coerceToAsyncValidator(newValidator);\n        };\n        /**\n         * Empties out the sync validator list.\n         */\n        AbstractControl.prototype.clearValidators = function () { this.validator = null; };\n        /**\n         * Empties out the async validator list.\n         */\n        AbstractControl.prototype.clearAsyncValidators = function () { this.asyncValidator = null; };\n        /**\n         * Marks the control as `touched`.\n         *\n         * This will also mark all direct ancestors as `touched` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._touched = true;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `untouched`.\n         *\n         * If the control has any children, it will also mark all children as `untouched`\n         * to maintain the model, and re-calculate the `touched` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsUntouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = false;\n            this._forEachChild(function (control) { control.markAsUntouched({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `dirty`.\n         *\n         * This will also mark all direct ancestors as `dirty` to maintain\n         * the model.\n         */\n        AbstractControl.prototype.markAsDirty = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._pristine = false;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsDirty({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pristine`.\n         *\n         * If the control has any children, it will also mark all children as `pristine`\n         * to maintain the model, and re-calculate the `pristine` status of all parent\n         * controls.\n         */\n        AbstractControl.prototype.markAsPristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = true;\n            this._forEachChild(function (control) { control.markAsPristine({ onlySelf: true }); });\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Marks the control as `pending`.\n         */\n        AbstractControl.prototype.markAsPending = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            onlySelf = normalizeBool(onlySelf);\n            this._status = PENDING;\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.markAsPending({ onlySelf: onlySelf });\n            }\n        };\n        /**\n         * Disables the control. This means the control will be exempt from validation checks and\n         * excluded from the aggregate value of any parent. Its status is `DISABLED`.\n         *\n         * If the control has children, all children will be disabled to maintain the model.\n         */\n        AbstractControl.prototype.disable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._status = DISABLED;\n            this._errors = null;\n            this._forEachChild(function (control) { control.disable({ onlySelf: true }); });\n            this._updateValue();\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(true);\n        };\n        /**\n         * Enables the control. This means the control will be included in validation checks and\n         * the aggregate value of its parent. Its status is re-calculated based on its value and\n         * its validators.\n         *\n         * If the control has children, all children will be enabled.\n         */\n        AbstractControl.prototype.enable = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            this._status = VALID;\n            this._forEachChild(function (control) { control.enable({ onlySelf: true }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n            this._updateAncestors(onlySelf);\n            this._onDisabledChange(false);\n        };\n        AbstractControl.prototype._updateAncestors = function (onlySelf) {\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity();\n                this._parent._updatePristine();\n                this._parent._updateTouched();\n            }\n        };\n        AbstractControl.prototype.setParent = function (parent) { this._parent = parent; };\n        /**\n         * Re-calculates the value and validation status of the control.\n         *\n         * By default, it will also update the value and validity of its ancestors.\n         */\n        AbstractControl.prototype.updateValueAndValidity = function (_a) {\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent;\n            onlySelf = normalizeBool(onlySelf);\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._setInitialStatus();\n            this._updateValue();\n            if (this.enabled) {\n                this._errors = this._runValidator();\n                this._status = this._calculateStatus();\n                if (this._status === VALID || this._status === PENDING) {\n                    this._runAsyncValidator(emitEvent);\n                }\n            }\n            if (emitEvent) {\n                this._valueChanges.emit(this._value);\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTreeValidity = function (_a) {\n            var emitEvent = (_a === void 0 ? { emitEvent: true } : _a).emitEvent;\n            this._forEachChild(function (ctrl) { return ctrl._updateTreeValidity({ emitEvent: emitEvent }); });\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: emitEvent });\n        };\n        AbstractControl.prototype._setInitialStatus = function () { this._status = this._allControlsDisabled() ? DISABLED : VALID; };\n        AbstractControl.prototype._runValidator = function () {\n            return isPresent(this.validator) ? this.validator(this) : null;\n        };\n        AbstractControl.prototype._runAsyncValidator = function (emitEvent) {\n            var _this = this;\n            if (isPresent(this.asyncValidator)) {\n                this._status = PENDING;\n                this._cancelExistingSubscription();\n                var obs = toObservable(this.asyncValidator(this));\n                this._asyncValidationSubscription = obs.subscribe({ next: function (res) { return _this.setErrors(res, { emitEvent: emitEvent }); } });\n            }\n        };\n        AbstractControl.prototype._cancelExistingSubscription = function () {\n            if (isPresent(this._asyncValidationSubscription)) {\n                this._asyncValidationSubscription.unsubscribe();\n            }\n        };\n        /**\n         * Sets errors on a form control.\n         *\n         * This is used when validations are run manually by the user, rather than automatically.\n         *\n         * Calling `setErrors` will also update the validity of the parent control.\n         *\n         * ### Example\n         *\n         * ```\n         * const login = new FormControl(\"someLogin\");\n         * login.setErrors({\n         *   \"notUnique\": true\n         * });\n         *\n         * expect(login.valid).toEqual(false);\n         * expect(login.errors).toEqual({\"notUnique\": true});\n         *\n         * login.setValue(\"someOtherLogin\");\n         *\n         * expect(login.valid).toEqual(true);\n         * ```\n         */\n        AbstractControl.prototype.setErrors = function (errors, _a) {\n            var emitEvent = (_a === void 0 ? {} : _a).emitEvent;\n            emitEvent = isPresent(emitEvent) ? emitEvent : true;\n            this._errors = errors;\n            this._updateControlsErrors(emitEvent);\n        };\n        /**\n         * Retrieves a child control given the control's name or path.\n         *\n         * Paths can be passed in as an array or a string delimited by a dot.\n         *\n         * To get a control nested within a `person` sub-group:\n         *\n         * * `this.form.get('person.name');`\n         *\n         * -OR-\n         *\n         * * `this.form.get(['person', 'name']);`\n         */\n        AbstractControl.prototype.get = function (path) { return _find(this, path, '.'); };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns null or undefined.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.getError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            var control = isPresent(path) && !ListWrapper.isEmpty(path) ? this.get(path) : this;\n            if (isPresent(control) && isPresent(control._errors)) {\n                return StringMapWrapper.get(control._errors, errorCode);\n            }\n            else {\n                return null;\n            }\n        };\n        /**\n         * Returns true if the control with the given path has the error specified. Otherwise\n         * returns false.\n         *\n         * If no path is given, it checks for the error on the present control.\n         */\n        AbstractControl.prototype.hasError = function (errorCode, path) {\n            if (path === void 0) { path = null; }\n            return isPresent(this.getError(errorCode, path));\n        };\n        Object.defineProperty(AbstractControl.prototype, \"root\", {\n            /**\n             * Retrieves the top-level ancestor of this control.\n             */\n            get: function () {\n                var x = this;\n                while (isPresent(x._parent)) {\n                    x = x._parent;\n                }\n                return x;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        /** @internal */\n        AbstractControl.prototype._updateControlsErrors = function (emitEvent) {\n            this._status = this._calculateStatus();\n            if (emitEvent) {\n                this._statusChanges.emit(this._status);\n            }\n            if (isPresent(this._parent)) {\n                this._parent._updateControlsErrors(emitEvent);\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._initObservables = function () {\n            this._valueChanges = new EventEmitter();\n            this._statusChanges = new EventEmitter();\n        };\n        AbstractControl.prototype._calculateStatus = function () {\n            if (this._allControlsDisabled())\n                return DISABLED;\n            if (isPresent(this._errors))\n                return INVALID;\n            if (this._anyControlsHaveStatus(PENDING))\n                return PENDING;\n            if (this._anyControlsHaveStatus(INVALID))\n                return INVALID;\n            return VALID;\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsHaveStatus = function (status) {\n            return this._anyControls(function (control) { return control.status == status; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsDirty = function () {\n            return this._anyControls(function (control) { return control.dirty; });\n        };\n        /** @internal */\n        AbstractControl.prototype._anyControlsTouched = function () {\n            return this._anyControls(function (control) { return control.touched; });\n        };\n        /** @internal */\n        AbstractControl.prototype._updatePristine = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._pristine = !this._anyControlsDirty();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updatePristine({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._updateTouched = function (_a) {\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._touched = this._anyControlsTouched();\n            if (isPresent(this._parent) && !onlySelf) {\n                this._parent._updateTouched({ onlySelf: onlySelf });\n            }\n        };\n        /** @internal */\n        AbstractControl.prototype._onDisabledChange = function (isDisabled) { };\n        /** @internal */\n        AbstractControl.prototype._isBoxedValue = function (formState) {\n            return isStringMap(formState) && Object.keys(formState).length === 2 && 'value' in formState &&\n                'disabled' in formState;\n        };\n        /** @internal */\n        AbstractControl.prototype._registerOnCollectionChange = function (fn) { this._onCollectionChange = fn; };\n        return AbstractControl;\n    }());\n    /**\n     * @whatItDoes Tracks the value and validation status of an individual form control.\n     *\n     * It is one of the three fundamental building blocks of Angular forms, along with\n     * {@link FormGroup} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormControl}, you can pass in an initial value as the\n     * first argument. Example:\n     *\n     * ```ts\n     * const ctrl = new FormControl('some value');\n     * console.log(ctrl.value);     // 'some value'\n     *```\n     *\n     * You can also initialize the control with a form state object on instantiation,\n     * which includes both the value and whether or not the control is disabled.\n     *\n     * ```ts\n     * const ctrl = new FormControl({value: 'n/a', disabled: true});\n     * console.log(ctrl.value);     // 'n/a'\n     * console.log(ctrl.status);   // 'DISABLED'\n     * ```\n     *\n     * To include a sync validator (or an array of sync validators) with the control,\n     * pass it in as the second argument. Async validators are also supported, but\n     * have to be passed in separately as the third arg.\n     *\n     * ```ts\n     * const ctrl = new FormControl('', Validators.required);\n     * console.log(ctrl.value);     // ''\n     * console.log(ctrl.status);   // 'INVALID'\n     * ```\n     *\n     * See its superclass, {@link AbstractControl}, for more properties and methods.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormControl = (function (_super) {\n        __extends$6(FormControl, _super);\n        function FormControl(formState, validator, asyncValidator) {\n            if (formState === void 0) { formState = null; }\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, coerceToValidator(validator), coerceToAsyncValidator(asyncValidator));\n            /** @internal */\n            this._onChange = [];\n            this._applyFormState(formState);\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n            this._initObservables();\n        }\n        /**\n         * Set the value of the form control to `value`.\n         *\n         * If `onlySelf` is `true`, this change will only affect the validation of this `FormControl`\n         * and not its parent component. This defaults to false.\n         *\n         * If `emitEvent` is `true`, this\n         * change will cause a `valueChanges` event on the `FormControl` to be emitted. This defaults\n         * to true (as it falls through to `updateValueAndValidity`).\n         *\n         * If `emitModelToViewChange` is `true`, the view will be notified about the new value\n         * via an `onChange` event. This is the default behavior if `emitModelToViewChange` is not\n         * specified.\n         *\n         * If `emitViewToModelChange` is `true`, an ngModelChange event will be fired to update the\n         * model.  This is the default behavior if `emitViewToModelChange` is not specified.\n         */\n        FormControl.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var _b = _a === void 0 ? {} : _a, onlySelf = _b.onlySelf, emitEvent = _b.emitEvent, emitModelToViewChange = _b.emitModelToViewChange, emitViewToModelChange = _b.emitViewToModelChange;\n            emitModelToViewChange = isPresent(emitModelToViewChange) ? emitModelToViewChange : true;\n            emitViewToModelChange = isPresent(emitViewToModelChange) ? emitViewToModelChange : true;\n            this._value = value;\n            if (this._onChange.length && emitModelToViewChange) {\n                this._onChange.forEach(function (changeFn) { return changeFn(_this._value, emitViewToModelChange); });\n            }\n            this.updateValueAndValidity({ onlySelf: onlySelf, emitEvent: emitEvent });\n        };\n        /**\n         * Patches the value of a control.\n         *\n         * This function is functionally the same as {@link FormControl.setValue} at this level.\n         * It exists for symmetry with {@link FormGroup.patchValue} on `FormGroups` and `FormArrays`,\n         * where it does behave differently.\n         */\n        FormControl.prototype.patchValue = function (value, options) {\n            if (options === void 0) { options = {}; }\n            this.setValue(value, options);\n        };\n        /**\n         * Resets the form control. This means by default:\n         *\n         * * it is marked as `pristine`\n         * * it is marked as `untouched`\n         * * value is set to null\n         *\n         * You can also reset to a specific form state by passing through a standalone\n         * value or a form state object that contains both a value and a disabled state\n         * (these are the only two properties that cannot be calculated).\n         *\n         * Ex:\n         *\n         * ```ts\n         * this.control.reset('Nancy');\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * ```\n         *\n         * OR\n         *\n         * ```\n         * this.control.reset({value: 'Nancy', disabled: true});\n         *\n         * console.log(this.control.value);  // 'Nancy'\n         * console.log(this.control.status);  // 'DISABLED'\n         * ```\n         */\n        FormControl.prototype.reset = function (formState, _a) {\n            if (formState === void 0) { formState = null; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._applyFormState(formState);\n            this.markAsPristine({ onlySelf: onlySelf });\n            this.markAsUntouched({ onlySelf: onlySelf });\n            this.setValue(this._value, { onlySelf: onlySelf });\n        };\n        /**\n         * @internal\n         */\n        FormControl.prototype._updateValue = function () { };\n        /**\n         * @internal\n         */\n        FormControl.prototype._anyControls = function (condition) { return false; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._allControlsDisabled = function () { return this.disabled; };\n        /**\n         * Register a listener for change events.\n         */\n        FormControl.prototype.registerOnChange = function (fn) { this._onChange.push(fn); };\n        /**\n         * @internal\n         */\n        FormControl.prototype._clearChangeFns = function () {\n            this._onChange = [];\n            this._onDisabledChange = null;\n            this._onCollectionChange = function () { };\n        };\n        /**\n         * Register a listener for disabled events.\n         */\n        FormControl.prototype.registerOnDisabledChange = function (fn) { this._onDisabledChange = fn; };\n        /**\n         * @internal\n         */\n        FormControl.prototype._forEachChild = function (cb) { };\n        FormControl.prototype._applyFormState = function (formState) {\n            if (this._isBoxedValue(formState)) {\n                this._value = formState.value;\n                formState.disabled ? this.disable({ onlySelf: true, emitEvent: false }) :\n                    this.enable({ onlySelf: true, emitEvent: false });\n            }\n            else {\n                this._value = formState;\n            }\n        };\n        return FormControl;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of a group of {@link FormControl}\n     * instances.\n     *\n     * A `FormGroup` aggregates the values of each child {@link FormControl} into one object,\n     * with each control name as the key.  It calculates its status by reducing the statuses\n     * of its children. For example, if one of the controls in a group is invalid, the entire\n     * group becomes invalid.\n     *\n     * `FormGroup` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormArray}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormGroup}, pass in a collection of child controls as the first\n     * argument. The key for each child will be the name under which it is registered.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   first: new FormControl('Nancy', Validators.minLength(2)),\n     *   last: new FormControl('Drew'),\n     * });\n     *\n     * console.log(form.value);   // {first: 'Nancy', last; 'Drew'}\n     * console.log(form.status);  // 'VALID'\n     * ```\n     *\n     * You can also include group-level validators as the second arg, or group-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Example\n     *\n     * ```\n     * const form = new FormGroup({\n     *   password: new FormControl('', Validators.minLength(2)),\n     *   passwordConfirm: new FormControl('', Validators.minLength(2)),\n     * }, passwordMatchValidator);\n     *\n     *\n     * function passwordMatchValidator(g: FormGroup) {\n     *    return g.get('password').value === g.get('passwordConfirm').value\n     *       ? null : {'mismatch': true};\n     * }\n     * ```\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormGroup = (function (_super) {\n        __extends$6(FormGroup, _super);\n        function FormGroup(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Registers a control with the group's list of controls.\n         *\n         * This method does not update value or validity of the control, so for\n         * most cases you'll want to use {@link FormGroup.addControl} instead.\n         */\n        FormGroup.prototype.registerControl = function (name, control) {\n            if (this.controls[name])\n                return this.controls[name];\n            this.controls[name] = control;\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n            return control;\n        };\n        /**\n         * Add a control to this group.\n         */\n        FormGroup.prototype.addControl = function (name, control) {\n            this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove a control from this group.\n         */\n        FormGroup.prototype.removeControl = function (name) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            StringMapWrapper.delete(this.controls, name);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormGroup.prototype.setControl = function (name, control) {\n            if (this.controls[name])\n                this.controls[name]._registerOnCollectionChange(function () { });\n            StringMapWrapper.delete(this.controls, name);\n            if (control)\n                this.registerControl(name, control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Check whether there is an enabled control with the given name in the group.\n         *\n         * It will return false for disabled controls. If you'd like to check for\n         * existence in the group only, use {@link AbstractControl.get} instead.\n         */\n        FormGroup.prototype.contains = function (controlName) {\n            return this.controls.hasOwnProperty(controlName) && this.controls[controlName].enabled;\n        };\n        /**\n         *  Sets the value of the {@link FormGroup}. It accepts an object that matches\n         *  the structure of the group, with control names as keys.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.setValue({first: 'Nancy', last: 'Drew'});\n         *  console.log(form.value);   // {first: 'Nancy', last: 'Drew'}\n         *\n         *  ```\n         */\n        FormGroup.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                _this._throwIfControlMissing(name);\n                _this.controls[name].setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormGroup}. It accepts an object with control\n         *  names as keys, and will do its best to match the values to the correct controls\n         *  in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the group without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const form = new FormGroup({\n         *     first: new FormControl(),\n         *     last: new FormControl()\n         *  });\n         *  console.log(form.value);   // {first: null, last: null}\n         *\n         *  form.patchValue({first: 'Nancy'});\n         *  console.log(form.value);   // {first: 'Nancy', last: null}\n         *\n         *  ```\n         */\n        FormGroup.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            StringMapWrapper.forEach(value, function (newValue, name) {\n                if (_this.controls[name]) {\n                    _this.controls[name].patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormGroup}. This means by default:\n         *\n         * * The group and all descendants are marked `pristine`\n         * * The group and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in a map of states\n         * that matches the structure of your form, with control names as keys. The state\n         * can be a standalone value or a form state object with both a value and a disabled\n         * status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.form.reset({first: 'name', last; 'last name'});\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.form.reset({\n         *   first: {value: 'name', disabled: true},\n         *   last: 'last'\n         * });\n         *\n         * console.log(this.form.value);  // {first: 'name', last: 'last name'}\n         * console.log(this.form.get('first').status);  // 'DISABLED'\n         * ```\n         */\n        FormGroup.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = {}; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, name) {\n                control.reset(value[name], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the {@link FormGroup}, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the group.\n         */\n        FormGroup.prototype.getRawValue = function () {\n            return this._reduceChildren({}, function (acc, control, name) {\n                acc[name] = control.value;\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._throwIfControlMissing = function (name) {\n            if (!Object.keys(this.controls).length) {\n                throw new Error(\"\\n        There are no form controls registered with this group yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.controls[name]) {\n                throw new Error(\"Cannot find form control with name: \" + name + \".\");\n            }\n        };\n        /** @internal */\n        FormGroup.prototype._forEachChild = function (cb) {\n            StringMapWrapper.forEach(this.controls, cb);\n        };\n        /** @internal */\n        FormGroup.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) {\n                control.setParent(_this);\n                control._registerOnCollectionChange(_this._onCollectionChange);\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._updateValue = function () { this._value = this._reduceValue(); };\n        /** @internal */\n        FormGroup.prototype._anyControls = function (condition) {\n            var _this = this;\n            var res = false;\n            this._forEachChild(function (control, name) {\n                res = res || (_this.contains(name) && condition(control));\n            });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._reduceValue = function () {\n            var _this = this;\n            return this._reduceChildren({}, function (acc, control, name) {\n                if (control.enabled || _this.disabled) {\n                    acc[name] = control.value;\n                }\n                return acc;\n            });\n        };\n        /** @internal */\n        FormGroup.prototype._reduceChildren = function (initValue, fn) {\n            var res = initValue;\n            this._forEachChild(function (control, name) { res = fn(res, control, name); });\n            return res;\n        };\n        /** @internal */\n        FormGroup.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = Object.keys(this.controls); _i < _a.length; _i++) {\n                var controlName = _a[_i];\n                if (this.controls[controlName].enabled) {\n                    return false;\n                }\n            }\n            return Object.keys(this.controls).length > 0 || this.disabled;\n        };\n        /** @internal */\n        FormGroup.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, name) {\n                if (value[name] === undefined) {\n                    throw new Error(\"Must supply a value for form control with name: '\" + name + \"'.\");\n                }\n            });\n        };\n        return FormGroup;\n    }(AbstractControl));\n    /**\n     * @whatItDoes Tracks the value and validity state of an array of {@link FormControl}\n     * instances.\n     *\n     * A `FormArray` aggregates the values of each child {@link FormControl} into an array.\n     * It calculates its status by reducing the statuses of its children. For example, if one of\n     * the controls in a `FormArray` is invalid, the entire array becomes invalid.\n     *\n     * `FormArray` is one of the three fundamental building blocks used to define forms in Angular,\n     * along with {@link FormControl} and {@link FormGroup}.\n     *\n     * @howToUse\n     *\n     * When instantiating a {@link FormArray}, pass in an array of child controls as the first\n     * argument.\n     *\n     * ### Example\n     *\n     * ```\n     * const arr = new FormArray([\n     *   new FormControl('Nancy', Validators.minLength(2)),\n     *   new FormControl('Drew'),\n     * ]);\n     *\n     * console.log(arr.value);   // ['Nancy', 'Drew']\n     * console.log(arr.status);  // 'VALID'\n     * ```\n     *\n     * You can also include array-level validators as the second arg, or array-level async\n     * validators as the third arg. These come in handy when you want to perform validation\n     * that considers the value of more than one child control.\n     *\n     * ### Adding or removing controls\n     *\n     * To change the controls in the array, use the `push`, `insert`, or `removeAt` methods\n     * in `FormArray` itself. These methods ensure the controls are properly tracked in the\n     * form's hierarchy. Do not modify the array of `AbstractControl`s used to instantiate\n     * the `FormArray` directly, as that will result in strange and unexpected behavior such\n     * as broken change detection.\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * @stable\n     */\n    var FormArray = (function (_super) {\n        __extends$6(FormArray, _super);\n        function FormArray(controls, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            _super.call(this, validator, asyncValidator);\n            this.controls = controls;\n            this._initObservables();\n            this._setUpControls();\n            this.updateValueAndValidity({ onlySelf: true, emitEvent: false });\n        }\n        /**\n         * Get the {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.at = function (index) { return this.controls[index]; };\n        /**\n         * Insert a new {@link AbstractControl} at the end of the array.\n         */\n        FormArray.prototype.push = function (control) {\n            this.controls.push(control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Insert a new {@link AbstractControl} at the given `index` in the array.\n         */\n        FormArray.prototype.insert = function (index, control) {\n            ListWrapper.insert(this.controls, index, control);\n            this._registerControl(control);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Remove the control at the given `index` in the array.\n         */\n        FormArray.prototype.removeAt = function (index) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            ListWrapper.removeAt(this.controls, index);\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        /**\n         * Replace an existing control.\n         */\n        FormArray.prototype.setControl = function (index, control) {\n            if (this.controls[index])\n                this.controls[index]._registerOnCollectionChange(function () { });\n            ListWrapper.removeAt(this.controls, index);\n            if (control) {\n                ListWrapper.insert(this.controls, index, control);\n                this._registerControl(control);\n            }\n            this.updateValueAndValidity();\n            this._onCollectionChange();\n        };\n        Object.defineProperty(FormArray.prototype, \"length\", {\n            /**\n             * Length of the control array.\n             */\n            get: function () { return this.controls.length; },\n            enumerable: true,\n            configurable: true\n        });\n        /**\n         *  Sets the value of the {@link FormArray}. It accepts an array that matches\n         *  the structure of the control.\n         *\n         * This method performs strict checks, so it will throw an error if you try\n         * to set the value of a control that doesn't exist or if you exclude the\n         * value of a control.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.setValue(['Nancy', 'Drew']);\n         *  console.log(arr.value);   // ['Nancy', 'Drew']\n         *  ```\n         */\n        FormArray.prototype.setValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._checkAllValuesPresent(value);\n            value.forEach(function (newValue, index) {\n                _this._throwIfControlMissing(index);\n                _this.at(index).setValue(newValue, { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         *  Patches the value of the {@link FormArray}. It accepts an array that matches the\n         *  structure of the control, and will do its best to match the values to the correct\n         *  controls in the group.\n         *\n         *  It accepts both super-sets and sub-sets of the array without throwing an error.\n         *\n         *  ### Example\n         *\n         *  ```\n         *  const arr = new FormArray([\n         *     new FormControl(),\n         *     new FormControl()\n         *  ]);\n         *  console.log(arr.value);   // [null, null]\n         *\n         *  arr.patchValue(['Nancy']);\n         *  console.log(arr.value);   // ['Nancy', null]\n         *  ```\n         */\n        FormArray.prototype.patchValue = function (value, _a) {\n            var _this = this;\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            value.forEach(function (newValue, index) {\n                if (_this.at(index)) {\n                    _this.at(index).patchValue(newValue, { onlySelf: true });\n                }\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n        };\n        /**\n         * Resets the {@link FormArray}. This means by default:\n         *\n         * * The array and all descendants are marked `pristine`\n         * * The array and all descendants are marked `untouched`\n         * * The value of all descendants will be null or null maps\n         *\n         * You can also reset to a specific form state by passing in an array of states\n         * that matches the structure of the control. The state can be a standalone value\n         * or a form state object with both a value and a disabled status.\n         *\n         * ### Example\n         *\n         * ```ts\n         * this.arr.reset(['name', 'last name']);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * ```\n         *\n         * - OR -\n         *\n         * ```\n         * this.arr.reset([\n         *   {value: 'name', disabled: true},\n         *   'last'\n         * ]);\n         *\n         * console.log(this.arr.value);  // ['name', 'last name']\n         * console.log(this.arr.get(0).status);  // 'DISABLED'\n         * ```\n         */\n        FormArray.prototype.reset = function (value, _a) {\n            if (value === void 0) { value = []; }\n            var onlySelf = (_a === void 0 ? {} : _a).onlySelf;\n            this._forEachChild(function (control, index) {\n                control.reset(value[index], { onlySelf: true });\n            });\n            this.updateValueAndValidity({ onlySelf: onlySelf });\n            this._updatePristine({ onlySelf: onlySelf });\n            this._updateTouched({ onlySelf: onlySelf });\n        };\n        /**\n         * The aggregate value of the array, including any disabled controls.\n         *\n         * If you'd like to include all values regardless of disabled status, use this method.\n         * Otherwise, the `value` property is the best way to get the value of the array.\n         */\n        FormArray.prototype.getRawValue = function () { return this.controls.map(function (control) { return control.value; }); };\n        /** @internal */\n        FormArray.prototype._throwIfControlMissing = function (index) {\n            if (!this.controls.length) {\n                throw new Error(\"\\n        There are no form controls registered with this array yet.  If you're using ngModel,\\n        you may want to check next tick (e.g. use setTimeout).\\n      \");\n            }\n            if (!this.at(index)) {\n                throw new Error(\"Cannot find form control at index \" + index);\n            }\n        };\n        /** @internal */\n        FormArray.prototype._forEachChild = function (cb) {\n            this.controls.forEach(function (control, index) { cb(control, index); });\n        };\n        /** @internal */\n        FormArray.prototype._updateValue = function () {\n            var _this = this;\n            this._value = this.controls.filter(function (control) { return control.enabled || _this.disabled; })\n                .map(function (control) { return control.value; });\n        };\n        /** @internal */\n        FormArray.prototype._anyControls = function (condition) {\n            return this.controls.some(function (control) { return control.enabled && condition(control); });\n        };\n        /** @internal */\n        FormArray.prototype._setUpControls = function () {\n            var _this = this;\n            this._forEachChild(function (control) { return _this._registerControl(control); });\n        };\n        /** @internal */\n        FormArray.prototype._checkAllValuesPresent = function (value) {\n            this._forEachChild(function (control, i) {\n                if (value[i] === undefined) {\n                    throw new Error(\"Must supply a value for form control at index: \" + i + \".\");\n                }\n            });\n        };\n        /** @internal */\n        FormArray.prototype._allControlsDisabled = function () {\n            for (var _i = 0, _a = this.controls; _i < _a.length; _i++) {\n                var control = _a[_i];\n                if (control.enabled)\n                    return false;\n            }\n            return this.controls.length > 0 || this.disabled;\n        };\n        FormArray.prototype._registerControl = function (control) {\n            control.setParent(this);\n            control._registerOnCollectionChange(this._onCollectionChange);\n        };\n        return FormArray;\n    }(AbstractControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$4 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgForm; })\n    };\n    var resolvedPromise = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a top-level {@link FormGroup} instance and binds it to a form\n     * to track aggregate form value and validation status.\n     *\n     * @howToUse\n     *\n     * As soon as you import the `FormsModule`, this directive becomes active by default on\n     * all `<form>` tags.  You don't need to add a special selector.\n     *\n     * You can export the directive into a local template variable using `ngForm` as the key\n     * (ex: `#myForm=\"ngForm\"`). This is optional, but useful.  Many properties from the underlying\n     * {@link FormGroup} instance are duplicated on the directive itself, so a reference to it\n     * will give you access to the aggregate value and validity status of the form, as well as\n     * user interaction properties like `dirty` and `touched`.\n     *\n     * To register child controls with the form, you'll want to use {@link NgModel} with a\n     * `name` attribute.  You can also use {@link NgModelGroup} if you'd like to create\n     * sub-groups within the form.\n     *\n     * You can listen to the directive's `ngSubmit` event to be notified when the user has\n     * triggered a form submission.\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgForm = (function (_super) {\n        __extends$4(NgForm, _super);\n        function NgForm(validators, asyncValidators) {\n            _super.call(this);\n            this._submitted = false;\n            this.ngSubmit = new EventEmitter();\n            this.form =\n                new FormGroup({}, composeValidators(validators), composeAsyncValidators(asyncValidators));\n        }\n        Object.defineProperty(NgForm.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgForm.prototype, \"controls\", {\n            get: function () { return this.form.controls; },\n            enumerable: true,\n            configurable: true\n        });\n        NgForm.prototype.addControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                dir._control = container.registerControl(dir.name, dir.control);\n                setUpControl(dir.control, dir);\n                dir.control.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.removeControl = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.addFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                var group = new FormGroup({});\n                setUpFormContainer(group, dir);\n                container.registerControl(dir.name, group);\n                group.updateValueAndValidity({ emitEvent: false });\n            });\n        };\n        NgForm.prototype.removeFormGroup = function (dir) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var container = _this._findContainer(dir.path);\n                if (isPresent(container)) {\n                    container.removeControl(dir.name);\n                }\n            });\n        };\n        NgForm.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        NgForm.prototype.updateModel = function (dir, value) {\n            var _this = this;\n            resolvedPromise.then(function () {\n                var ctrl = _this.form.get(dir.path);\n                ctrl.setValue(value);\n            });\n        };\n        NgForm.prototype.setValue = function (value) { this.control.setValue(value); };\n        NgForm.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        NgForm.prototype.onReset = function () { this.resetForm(); };\n        NgForm.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        NgForm.prototype._findContainer = function (path) {\n            path.pop();\n            return ListWrapper.isEmpty(path) ? this.form : this.form.get(path);\n        };\n        NgForm.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: 'form:not([ngNoForm]):not([formGroup]),ngForm,[ngForm]',\n                        providers: [formDirectiveProvider],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        outputs: ['ngSubmit'],\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgForm.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        return NgForm;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var Examples = {\n        formControlName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <input formControlName=\\\"firstName\\\">\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       firstName: new FormControl()\\n    });\",\n        formGroupName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <div formGroupName=\\\"person\\\">\\n          <input formControlName=\\\"firstName\\\">\\n       </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.myGroup = new FormGroup({\\n       person: new FormGroup({ firstName: new FormControl() })\\n    });\",\n        formArrayName: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n      <div formArrayName=\\\"cities\\\">\\n        <div *ngFor=\\\"let city of cityArray.controls; let i=index\\\">\\n          <input [formControlName]=\\\"i\\\">\\n        </div>\\n      </div>\\n    </div>\\n\\n    In your class:\\n\\n    this.cityArray = new FormArray([new FormControl('SF')]);\\n    this.myGroup = new FormGroup({\\n      cities: this.cityArray\\n    });\",\n        ngModelGroup: \"\\n    <form>\\n       <div ngModelGroup=\\\"person\\\">\\n          <input [(ngModel)]=\\\"person.name\\\" name=\\\"firstName\\\">\\n       </div>\\n    </form>\",\n        ngModelWithFormGroup: \"\\n    <div [formGroup]=\\\"myGroup\\\">\\n       <input formControlName=\\\"firstName\\\">\\n       <input [(ngModel)]=\\\"showMoreControls\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\\n    </div>\\n  \"\n    };\n\n    var TemplateDrivenErrors = (function () {\n        function TemplateDrivenErrors() {\n        }\n        TemplateDrivenErrors.modelParentException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroup directive.  Try using\\n      formGroup's partner directive \\\"formControlName\\\" instead.  Example:\\n\\n      \" + Examples.formControlName + \"\\n\\n      Or, if you'd like to avoid registering this form control, indicate that it's standalone in ngModelOptions:\\n\\n      Example:\\n\\n      \" + Examples.ngModelWithFormGroup);\n        };\n        TemplateDrivenErrors.formGroupNameException = function () {\n            throw new Error(\"\\n      ngModel cannot be used to register form controls with a parent formGroupName or formArrayName directive.\\n\\n      Option 1: Use formControlName instead of ngModel (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Update ngModel's parent be ngModelGroup (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        TemplateDrivenErrors.missingNameException = function () {\n            throw new Error(\"If ngModel is used within a form tag, either the name attribute must be set or the form\\n      control must be defined as 'standalone' in ngModelOptions.\\n\\n      Example 1: <input [(ngModel)]=\\\"person.firstName\\\" name=\\\"first\\\">\\n      Example 2: <input [(ngModel)]=\\\"person.firstName\\\" [ngModelOptions]=\\\"{standalone: true}\\\">\");\n        };\n        TemplateDrivenErrors.modelGroupParentException = function () {\n            throw new Error(\"\\n      ngModelGroup cannot be used with a parent formGroup directive.\\n\\n      Option 1: Use formGroupName instead of ngModelGroup (reactive strategy):\\n\\n      \" + Examples.formGroupName + \"\\n\\n      Option 2:  Use a regular form tag instead of the formGroup directive (template-driven strategy):\\n\\n      \" + Examples.ngModelGroup);\n        };\n        return TemplateDrivenErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$8 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var modelGroupProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return NgModelGroup; })\n    };\n    /**\n     * @whatItDoes Creates and binds a {@link FormGroup} instance to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used as a child of {@link NgForm} (or in other words,\n     * within `<form>` tags).\n     *\n     * Use this directive if you'd like to create a sub-group within a form. This can\n     * come in handy if you want to validate a sub-group of your form separately from\n     * the rest of your form, or if some values in your domain model make more sense to\n     * consume together in a nested object.\n     *\n     * Pass in the name you'd like this sub-group to have and it will become the key\n     * for the sub-group in the form's full value. You can also export the directive into\n     * a local template variable using `ngModelGroup` (ex: `#myGroup=\"ngModelGroup\"`).\n     *\n     * {@example forms/ts/ngModelGroup/ng_model_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `FormsModule`\n     *\n     * @stable\n     */\n    var NgModelGroup = (function (_super) {\n        __extends$8(NgModelGroup, _super);\n        function NgModelGroup(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        NgModelGroup.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelGroupParentException();\n            }\n        };\n        NgModelGroup.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[ngModelGroup]', providers: [modelGroupProvider], exportAs: 'ngModelGroup' },] },\n        ];\n        /** @nocollapse */\n        NgModelGroup.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        NgModelGroup.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['ngModelGroup',] },],\n        };\n        return NgModelGroup;\n    }(AbstractFormGroupDirective));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$7 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return NgModel; })\n    };\n    var resolvedPromise$1 = Promise.resolve(null);\n    /**\n     * @whatItDoes Creates a {@link FormControl} instance from a domain model and binds it\n     * to a form control element.\n     *\n     * The {@link FormControl} instance will track the value, user interaction, and\n     * validation status of the control and keep the view synced with the model. If used\n     * within a parent form, the directive will also register itself with the form as a child\n     * control.\n     *\n     * @howToUse\n     *\n     * This directive can be used by itself or as part of a larger form. All you need is the\n     * `ngModel` selector to activate it.\n     *\n     * It accepts a domain model as an optional {@link @Input}. If you have a one-way binding\n     * to `ngModel` with `[]` syntax, changing the value of the domain model in the component\n     * class will set the value in the view. If you have a two-way binding with `[()]` syntax\n     * (also known as 'banana-box syntax'), the value in the UI will always be synced back to\n     * the domain model in your class as well.\n     *\n     * If you wish to inspect the properties of the associated {@link FormControl} (like\n     * validity state), you can also export the directive into a local template variable using\n     * `ngModel` as the key (ex: `#myVar=\"ngModel\"`). You can then access the control using the\n     * directive's `control` property, but most properties you'll need (like `valid` and `dirty`)\n     * will fall through to the control anyway, so you can access them directly. You can see a\n     * full list of properties directly available in {@link AbstractControlDirective}.\n     *\n     * The following is an example of a simple standalone control using `ngModel`:\n     *\n     * {@example forms/ts/simpleNgModel/simple_ng_model_example.ts region='Component'}\n     *\n     * When using the `ngModel` within `<form>` tags, you'll also need to supply a `name` attribute\n     * so that the control can be registered with the parent form under that name.\n     *\n     * It's worth noting that in the context of a parent form, you often can skip one-way or\n     * two-way binding because the parent form will sync the value for you. You can access\n     * its properties by exporting it into a local template variable using `ngForm` (ex:\n     * `#f=\"ngForm\"`). Then you can pass it where it needs to go on submit.\n     *\n     * If you do need to populate initial values into your form, using a one-way binding for\n     * `ngModel` tends to be sufficient as long as you use the exported form's value rather\n     * than the domain model's value on submit.\n     *\n     * Take a look at an example of using `ngModel` within a form:\n     *\n     * {@example forms/ts/simpleForm/simple_form_example.ts region='Component'}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: `FormsModule`\n     *\n     *  @stable\n     */\n    var NgModel = (function (_super) {\n        __extends$7(NgModel, _super);\n        function NgModel(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            /** @internal */\n            this._control = new FormControl();\n            /** @internal */\n            this._registered = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        NgModel.prototype.ngOnChanges = function (changes) {\n            this._checkForErrors();\n            if (!this._registered)\n                this._setUpControl();\n            if ('isDisabled' in changes) {\n                this._updateDisabled(changes);\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this._updateValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        NgModel.prototype.ngOnDestroy = function () { this.formDirective && this.formDirective.removeControl(this); };\n        Object.defineProperty(NgModel.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"path\", {\n            get: function () {\n                return this._parent ? controlPath(this.name, this._parent) : [this.name];\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(NgModel.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        NgModel.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        NgModel.prototype._setUpControl = function () {\n            this._isStandalone() ? this._setUpStandalone() :\n                this.formDirective.addControl(this);\n            this._registered = true;\n        };\n        NgModel.prototype._isStandalone = function () {\n            return !this._parent || (this.options && this.options.standalone);\n        };\n        NgModel.prototype._setUpStandalone = function () {\n            setUpControl(this._control, this);\n            this._control.updateValueAndValidity({ emitEvent: false });\n        };\n        NgModel.prototype._checkForErrors = function () {\n            if (!this._isStandalone()) {\n                this._checkParentType();\n            }\n            this._checkName();\n        };\n        NgModel.prototype._checkParentType = function () {\n            if (!(this._parent instanceof NgModelGroup) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                TemplateDrivenErrors.formGroupNameException();\n            }\n            else if (!(this._parent instanceof NgModelGroup) && !(this._parent instanceof NgForm)) {\n                TemplateDrivenErrors.modelParentException();\n            }\n        };\n        NgModel.prototype._checkName = function () {\n            if (this.options && this.options.name)\n                this.name = this.options.name;\n            if (!this._isStandalone() && !this.name) {\n                TemplateDrivenErrors.missingNameException();\n            }\n        };\n        NgModel.prototype._updateValue = function (value) {\n            var _this = this;\n            resolvedPromise$1.then(function () { _this.control.setValue(value, { emitViewToModelChange: false }); });\n        };\n        NgModel.prototype._updateDisabled = function (changes) {\n            var _this = this;\n            var disabledValue = changes['isDisabled'].currentValue;\n            var isDisabled = disabledValue != null && disabledValue != false;\n            resolvedPromise$1.then(function () {\n                if (isDisabled && !_this.control.disabled) {\n                    _this.control.disable();\n                }\n                else if (!isDisabled && _this.control.disabled) {\n                    _this.control.enable();\n                }\n            });\n        };\n        NgModel.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[ngModel]:not([formControlName]):not([formControl])',\n                        providers: [formControlBinding],\n                        exportAs: 'ngModel'\n                    },] },\n        ];\n        /** @nocollapse */\n        NgModel.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        NgModel.propDecorators = {\n            'name': [{ type: _angular_core.Input },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'options': [{ type: _angular_core.Input, args: ['ngModelOptions',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n        };\n        return NgModel;\n    }(NgControl));\n\n    var ReactiveErrors = (function () {\n        function ReactiveErrors() {\n        }\n        ReactiveErrors.controlParentException = function () {\n            throw new Error(\"formControlName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formControlName);\n        };\n        ReactiveErrors.ngModelGroupException = function () {\n            throw new Error(\"formControlName cannot be used with an ngModelGroup parent. It is only compatible with parents\\n       that also have a \\\"form\\\" prefix: formGroupName, formArrayName, or formGroup.\\n\\n       Option 1:  Update the parent to be formGroupName (reactive form strategy)\\n\\n        \" + Examples.formGroupName + \"\\n\\n        Option 2: Use ngModel instead of formControlName (template-driven strategy)\\n\\n        \" + Examples.ngModelGroup);\n        };\n        ReactiveErrors.missingFormException = function () {\n            throw new Error(\"formGroup expects a FormGroup instance. Please pass one in.\\n\\n       Example:\\n\\n       \" + Examples.formControlName);\n        };\n        ReactiveErrors.groupParentException = function () {\n            throw new Error(\"formGroupName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n      directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n      Example:\\n\\n      \" + Examples.formGroupName);\n        };\n        ReactiveErrors.arrayParentException = function () {\n            throw new Error(\"formArrayName must be used with a parent formGroup directive.  You'll want to add a formGroup\\n       directive and pass it an existing FormGroup instance (you can create one in your class).\\n\\n        Example:\\n\\n        \" + Examples.formArrayName);\n        };\n        ReactiveErrors.disabledAttrWarning = function () {\n            console.warn(\"\\n      It looks like you're using the disabled attribute with a reactive form directive. If you set disabled to true\\n      when you set up this control in your component class, the disabled attribute will actually be set in the DOM for\\n      you. We recommend using this approach to avoid 'changed after checked' errors.\\n       \\n      Example: \\n      form = new FormGroup({\\n        first: new FormControl({value: 'Nancy', disabled: true}, Validators.required),\\n        last: new FormControl('Drew', Validators.required)\\n      });\\n    \");\n        };\n        return ReactiveErrors;\n    }());\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$9 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formControlBinding$1 = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlDirective; })\n    };\n    /**\n     * @whatItDoes Syncs a standalone {@link FormControl} instance to a form control element.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * Use this directive if you'd like to create and manage a {@link FormControl} instance directly.\n     * Simply create a {@link FormControl}, save it to your component class, and pass it into the\n     * {@link FormControlDirective}.\n     *\n     * This directive is designed to be used as a standalone control.  Unlike {@link FormControlName},\n     * it does not require that your {@link FormControl} instance be part of any parent\n     * {@link FormGroup}, and it won't be registered to any {@link FormGroupDirective} that\n     * exists above it.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormControl} instance. See a full list of available properties in\n     * {@link AbstractControl}.\n     *\n     * **Set the value**: You can pass in an initial value when instantiating the {@link FormControl},\n     * or you can set it programmatically later using {@link AbstractControl.setValue} or\n     * {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/simpleFormControl/simple_form_control_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     *  @stable\n     */\n    var FormControlDirective = (function (_super) {\n        __extends$9(FormControlDirective, _super);\n        function FormControlDirective(validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this.update = new EventEmitter();\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlDirective.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.ngOnChanges = function (changes) {\n            if (this._isControlChanged(changes)) {\n                setUpControl(this.form, this);\n                if (this.control.disabled)\n                    this.valueAccessor.setDisabledState(true);\n                this.form.updateValueAndValidity({ emitEvent: false });\n            }\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.form.setValue(this.model);\n                this.viewModel = this.model;\n            }\n        };\n        Object.defineProperty(FormControlDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlDirective.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        FormControlDirective.prototype._isControlChanged = function (changes) {\n            return StringMapWrapper.contains(changes, 'form');\n        };\n        FormControlDirective.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControl]', providers: [formControlBinding$1], exportAs: 'ngForm' },] },\n        ];\n        /** @nocollapse */\n        FormControlDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formControl',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlDirective;\n    }(NgControl));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$11 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formDirectiveProvider$1 = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupDirective; })\n    };\n    /**\n     * @whatItDoes Binds an existing {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive accepts an existing {@link FormGroup} instance. It will then use this\n     * {@link FormGroup} instance to match any child {@link FormControl}, {@link FormGroup},\n     * and {@link FormArray} instances to child {@link FormControlName}, {@link FormGroupName},\n     * and {@link FormArrayName} directives.\n     *\n     * **Set value**: You can set the form's initial value when instantiating the\n     * {@link FormGroup}, or you can set it programmatically later using the {@link FormGroup}'s\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue} methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the form, you can subscribe\n     * to the {@link FormGroup}'s {@link AbstractControl.valueChanges} event.  You can also listen to\n     * its {@link AbstractControl.statusChanges} event to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     * **npm package**: `@angular/forms`\n     *\n     * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormGroupDirective = (function (_super) {\n        __extends$11(FormGroupDirective, _super);\n        function FormGroupDirective(_validators, _asyncValidators) {\n            _super.call(this);\n            this._validators = _validators;\n            this._asyncValidators = _asyncValidators;\n            this._submitted = false;\n            this.directives = [];\n            this.form = null;\n            this.ngSubmit = new EventEmitter();\n        }\n        FormGroupDirective.prototype.ngOnChanges = function (changes) {\n            this._checkFormPresent();\n            if (StringMapWrapper.contains(changes, 'form')) {\n                this._updateValidators();\n                this._updateDomValue();\n                this._updateRegistrations();\n            }\n        };\n        Object.defineProperty(FormGroupDirective.prototype, \"submitted\", {\n            get: function () { return this._submitted; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"formDirective\", {\n            get: function () { return this; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"control\", {\n            get: function () { return this.form; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormGroupDirective.prototype, \"path\", {\n            get: function () { return []; },\n            enumerable: true,\n            configurable: true\n        });\n        FormGroupDirective.prototype.addControl = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpControl(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n            this.directives.push(dir);\n            return ctrl;\n        };\n        FormGroupDirective.prototype.getControl = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.removeControl = function (dir) { ListWrapper.remove(this.directives, dir); };\n        FormGroupDirective.prototype.addFormGroup = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormGroup = function (dir) { };\n        FormGroupDirective.prototype.getFormGroup = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.addFormArray = function (dir) {\n            var ctrl = this.form.get(dir.path);\n            setUpFormContainer(ctrl, dir);\n            ctrl.updateValueAndValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype.removeFormArray = function (dir) { };\n        FormGroupDirective.prototype.getFormArray = function (dir) { return this.form.get(dir.path); };\n        FormGroupDirective.prototype.updateModel = function (dir, value) {\n            var ctrl = this.form.get(dir.path);\n            ctrl.setValue(value);\n        };\n        FormGroupDirective.prototype.onSubmit = function () {\n            this._submitted = true;\n            this.ngSubmit.emit(null);\n            return false;\n        };\n        FormGroupDirective.prototype.onReset = function () { this.resetForm(); };\n        FormGroupDirective.prototype.resetForm = function (value) {\n            if (value === void 0) { value = undefined; }\n            this.form.reset(value);\n            this._submitted = false;\n        };\n        /** @internal */\n        FormGroupDirective.prototype._updateDomValue = function () {\n            var _this = this;\n            this.directives.forEach(function (dir) {\n                var newCtrl = _this.form.get(dir.path);\n                if (dir._control !== newCtrl) {\n                    cleanUpControl(dir._control, dir);\n                    if (newCtrl)\n                        setUpControl(newCtrl, dir);\n                    dir._control = newCtrl;\n                }\n            });\n            this.form._updateTreeValidity({ emitEvent: false });\n        };\n        FormGroupDirective.prototype._updateRegistrations = function () {\n            var _this = this;\n            this.form._registerOnCollectionChange(function () { return _this._updateDomValue(); });\n            if (this._oldForm)\n                this._oldForm._registerOnCollectionChange(function () { });\n            this._oldForm = this.form;\n        };\n        FormGroupDirective.prototype._updateValidators = function () {\n            var sync = composeValidators(this._validators);\n            this.form.validator = Validators.compose([this.form.validator, sync]);\n            var async = composeAsyncValidators(this._asyncValidators);\n            this.form.asyncValidator = Validators.composeAsync([this.form.asyncValidator, async]);\n        };\n        FormGroupDirective.prototype._checkFormPresent = function () {\n            if (isBlank(this.form)) {\n                ReactiveErrors.missingFormException();\n            }\n        };\n        FormGroupDirective.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[formGroup]',\n                        providers: [formDirectiveProvider$1],\n                        host: { '(submit)': 'onSubmit()', '(reset)': 'onReset()' },\n                        exportAs: 'ngForm'\n                    },] },\n        ];\n        /** @nocollapse */\n        FormGroupDirective.ctorParameters = [\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupDirective.propDecorators = {\n            'form': [{ type: _angular_core.Input, args: ['formGroup',] },],\n            'ngSubmit': [{ type: _angular_core.Output },],\n        };\n        return FormGroupDirective;\n    }(ControlContainer));\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$12 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var formGroupNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormGroupName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormGroup} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive can only be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormGroup} you want to link, and\n     * will look for a {@link FormGroup} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form groups can come in handy when you want to validate a sub-group of a\n     * form separately from the rest or when you'd like to group the values of certain\n     * controls into their own nested object.\n     *\n     * **Access the group**: You can access the associated {@link FormGroup} using the\n     * {@link AbstractControl.get} method. Ex: `this.form.get('name')`.\n     *\n     * You can also access individual controls within the group using dot syntax.\n     * Ex: `this.form.get('name.first')`\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormGroup}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormGroup}, or you can set it programmatically later using\n     * {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the group, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormGroup/nested_form_group_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormGroupName = (function (_super) {\n        __extends$12(FormGroupName, _super);\n        function FormGroupName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        /** @internal */\n        FormGroupName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.groupParentException();\n            }\n        };\n        FormGroupName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formGroupName]', providers: [formGroupNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormGroupName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormGroupName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formGroupName',] },],\n        };\n        return FormGroupName;\n    }(AbstractFormGroupDirective));\n    var formArrayNameProvider = {\n        provide: ControlContainer,\n        useExisting: _angular_core.forwardRef(function () { return FormArrayName; })\n    };\n    /**\n     * @whatItDoes Syncs a nested {@link FormArray} to a DOM element.\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the nested {@link FormArray} you want to link, and\n     * will look for a {@link FormArray} registered with that name in the parent\n     * {@link FormGroup} instance you passed into {@link FormGroupDirective}.\n     *\n     * Nested form arrays can come in handy when you have a group of form controls but\n     * you're not sure how many there will be. Form arrays allow you to create new\n     * form controls dynamically.\n     *\n     * **Access the array**: You can access the associated {@link FormArray} using the\n     * {@link AbstractControl.get} method on the parent {@link FormGroup}.\n     * Ex: `this.form.get('cities')`.\n     *\n     * **Get the value**: the `value` property is always synced and available on the\n     * {@link FormArray}. See a full list of available properties in {@link AbstractControl}.\n     *\n     * **Set the value**: You can set an initial value for each child control when instantiating\n     * the {@link FormArray}, or you can set the value programmatically later using the\n     * {@link FormArray}'s {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}\n     * methods.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the array, you can\n     * subscribe to the {@link FormArray}'s {@link AbstractControl.valueChanges} event.  You can also\n     * listen to its {@link AbstractControl.statusChanges} event to be notified when the validation\n     * status is re-calculated.\n     *\n     * **Add new controls**: You can add new controls to the {@link FormArray} dynamically by\n     * calling its {@link FormArray.push} method.\n     *  Ex: `this.form.get('cities').push(new FormControl());`\n     *\n     * ### Example\n     *\n     * {@example forms/ts/nestedFormArray/nested_form_array_example.ts region='Component'}\n     *\n     * * **npm package**: `@angular/forms`\n     *\n     * * **NgModule**: `ReactiveFormsModule`\n     *\n     * @stable\n     */\n    var FormArrayName = (function (_super) {\n        __extends$12(FormArrayName, _super);\n        function FormArrayName(parent, validators, asyncValidators) {\n            _super.call(this);\n            this._parent = parent;\n            this._validators = validators;\n            this._asyncValidators = asyncValidators;\n        }\n        FormArrayName.prototype.ngOnInit = function () {\n            this._checkParentType();\n            this.formDirective.addFormArray(this);\n        };\n        FormArrayName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeFormArray(this);\n            }\n        };\n        Object.defineProperty(FormArrayName.prototype, \"control\", {\n            get: function () { return this.formDirective.getFormArray(this); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"formDirective\", {\n            get: function () {\n                return this._parent ? this._parent.formDirective : null;\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._validators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormArrayName.prototype, \"asyncValidator\", {\n            get: function () { return composeAsyncValidators(this._asyncValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        FormArrayName.prototype._checkParentType = function () {\n            if (_hasInvalidParent(this._parent)) {\n                ReactiveErrors.arrayParentException();\n            }\n        };\n        FormArrayName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formArrayName]', providers: [formArrayNameProvider] },] },\n        ];\n        /** @nocollapse */\n        FormArrayName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n        ];\n        FormArrayName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formArrayName',] },],\n        };\n        return FormArrayName;\n    }(ControlContainer));\n    function _hasInvalidParent(parent) {\n        return !(parent instanceof FormGroupName) && !(parent instanceof FormGroupDirective) &&\n            !(parent instanceof FormArrayName);\n    }\n\n    /**\n     * @license\n     * Copyright Google Inc. All Rights Reserved.\n     *\n     * Use of this source code is governed by an MIT-style license that can be\n     * found in the LICENSE file at https://angular.io/license\n     */\n    var __extends$10 = (this && this.__extends) || function (d, b) {\n        for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n    var controlNameBinding = {\n        provide: NgControl,\n        useExisting: _angular_core.forwardRef(function () { return FormControlName; })\n    };\n    /**\n     * @whatItDoes  Syncs a {@link FormControl} in an existing {@link FormGroup} to a form control\n     * element by name.\n     *\n     * In other words, this directive ensures that any values written to the {@link FormControl}\n     * instance programmatically will be written to the DOM element (model -> view). Conversely,\n     * any values written to the DOM element through user input will be reflected in the\n     * {@link FormControl} instance (view -> model).\n     *\n     * @howToUse\n     *\n     * This directive is designed to be used with a parent {@link FormGroupDirective} (selector:\n     * `[formGroup]`).\n     *\n     * It accepts the string name of the {@link FormControl} instance you want to\n     * link, and will look for a {@link FormControl} registered with that name in the\n     * closest {@link FormGroup} or {@link FormArray} above it.\n     *\n     * **Access the control**: You can access the {@link FormControl} associated with\n     * this directive by using the {@link AbstractControl.get} method.\n     * Ex: `this.form.get('first');`\n     *\n     * **Get value**: the `value` property is always synced and available on the {@link FormControl}.\n     * See a full list of available properties in {@link AbstractControl}.\n     *\n     *  **Set value**: You can set an initial value for the control when instantiating the\n     *  {@link FormControl}, or you can set it programmatically later using\n     *  {@link AbstractControl.setValue} or {@link AbstractControl.patchValue}.\n     *\n     * **Listen to value**: If you want to listen to changes in the value of the control, you can\n     * subscribe to the {@link AbstractControl.valueChanges} event.  You can also listen to\n     * {@link AbstractControl.statusChanges} to be notified when the validation status is\n     * re-calculated.\n     *\n     * ### Example\n     *\n     * In this example, we create form controls for first name and last name.\n     *\n     * {@example forms/ts/simpleFormGroup/simple_form_group_example.ts region='Component'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  * **NgModule**: {@link ReactiveFormsModule}\n     *\n     *  @stable\n     */\n    var FormControlName = (function (_super) {\n        __extends$10(FormControlName, _super);\n        function FormControlName(parent, validators, asyncValidators, valueAccessors) {\n            _super.call(this);\n            this._added = false;\n            this.update = new EventEmitter();\n            this._parent = parent;\n            this._rawValidators = validators || [];\n            this._rawAsyncValidators = asyncValidators || [];\n            this.valueAccessor = selectValueAccessor(this, valueAccessors);\n        }\n        Object.defineProperty(FormControlName.prototype, \"isDisabled\", {\n            set: function (isDisabled) { ReactiveErrors.disabledAttrWarning(); },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype.ngOnChanges = function (changes) {\n            if (!this._added)\n                this._setUpControl();\n            if (isPropertyUpdated(changes, this.viewModel)) {\n                this.viewModel = this.model;\n                this.formDirective.updateModel(this, this.model);\n            }\n        };\n        FormControlName.prototype.ngOnDestroy = function () {\n            if (this.formDirective) {\n                this.formDirective.removeControl(this);\n            }\n        };\n        FormControlName.prototype.viewToModelUpdate = function (newValue) {\n            this.viewModel = newValue;\n            this.update.emit(newValue);\n        };\n        Object.defineProperty(FormControlName.prototype, \"path\", {\n            get: function () { return controlPath(this.name, this._parent); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"formDirective\", {\n            get: function () { return this._parent ? this._parent.formDirective : null; },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"validator\", {\n            get: function () { return composeValidators(this._rawValidators); },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"asyncValidator\", {\n            get: function () {\n                return composeAsyncValidators(this._rawAsyncValidators);\n            },\n            enumerable: true,\n            configurable: true\n        });\n        Object.defineProperty(FormControlName.prototype, \"control\", {\n            get: function () { return this._control; },\n            enumerable: true,\n            configurable: true\n        });\n        FormControlName.prototype._checkParentType = function () {\n            if (!(this._parent instanceof FormGroupName) &&\n                this._parent instanceof AbstractFormGroupDirective) {\n                ReactiveErrors.ngModelGroupException();\n            }\n            else if (!(this._parent instanceof FormGroupName) && !(this._parent instanceof FormGroupDirective) &&\n                !(this._parent instanceof FormArrayName)) {\n                ReactiveErrors.controlParentException();\n            }\n        };\n        FormControlName.prototype._setUpControl = function () {\n            this._checkParentType();\n            this._control = this.formDirective.addControl(this);\n            if (this.control.disabled)\n                this.valueAccessor.setDisabledState(true);\n            this._added = true;\n        };\n        FormControlName.decorators = [\n            { type: _angular_core.Directive, args: [{ selector: '[formControlName]', providers: [controlNameBinding] },] },\n        ];\n        /** @nocollapse */\n        FormControlName.ctorParameters = [\n            { type: ControlContainer, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Host }, { type: _angular_core.SkipSelf },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_ASYNC_VALIDATORS,] },] },\n            { type: Array, decorators: [{ type: _angular_core.Optional }, { type: _angular_core.Self }, { type: _angular_core.Inject, args: [NG_VALUE_ACCESSOR,] },] },\n        ];\n        FormControlName.propDecorators = {\n            'name': [{ type: _angular_core.Input, args: ['formControlName',] },],\n            'model': [{ type: _angular_core.Input, args: ['ngModel',] },],\n            'update': [{ type: _angular_core.Output, args: ['ngModelChange',] },],\n            'isDisabled': [{ type: _angular_core.Input, args: ['disabled',] },],\n        };\n        return FormControlName;\n    }(NgControl));\n\n    var REQUIRED_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return RequiredValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `required` validator to any controls marked with the\n     * `required` attribute, via the {@link NG_VALIDATORS} binding.\n     *\n     * ### Example\n     *\n     * ```\n     * <input name=\"fullName\" ngModel required>\n     * ```\n     *\n     * @stable\n     */\n    var RequiredValidator = (function () {\n        function RequiredValidator() {\n        }\n        Object.defineProperty(RequiredValidator.prototype, \"required\", {\n            get: function () { return this._required; },\n            set: function (value) {\n                this._required = isPresent(value) && \"\" + value !== 'false';\n                if (this._onChange)\n                    this._onChange();\n            },\n            enumerable: true,\n            configurable: true\n        });\n        RequiredValidator.prototype.validate = function (c) {\n            return this.required ? Validators.required(c) : null;\n        };\n        RequiredValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        RequiredValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[required][formControlName],[required][formControl],[required][ngModel]',\n                        providers: [REQUIRED_VALIDATOR],\n                        host: { '[attr.required]': 'required? \"\" : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        RequiredValidator.ctorParameters = [];\n        RequiredValidator.propDecorators = {\n            'required': [{ type: _angular_core.Input },],\n        };\n        return RequiredValidator;\n    }());\n    /**\n     * Provider which adds {@link MinLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='min'}\n     */\n    var MIN_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MinLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MinLengthValidator} for any `formControlName`,\n     * `formControl`, or control with `ngModel` that also has a `minlength` attribute.\n     *\n     * @stable\n     */\n    var MinLengthValidator = (function () {\n        function MinLengthValidator() {\n        }\n        MinLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.minLength(parseInt(this.minlength, 10));\n        };\n        MinLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['minlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MinLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.minlength) ? this._validator(c) : null;\n        };\n        MinLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MinLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[minlength][formControlName],[minlength][formControl],[minlength][ngModel]',\n                        providers: [MIN_LENGTH_VALIDATOR],\n                        host: { '[attr.minlength]': 'minlength? minlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MinLengthValidator.ctorParameters = [];\n        MinLengthValidator.propDecorators = {\n            'minlength': [{ type: _angular_core.Input },],\n        };\n        return MinLengthValidator;\n    }());\n    /**\n     * Provider which adds {@link MaxLengthValidator} to {@link NG_VALIDATORS}.\n     *\n     * ## Example:\n     *\n     * {@example common/forms/ts/validators/validators.ts region='max'}\n     */\n    var MAX_LENGTH_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return MaxLengthValidator; }),\n        multi: true\n    };\n    /**\n     * A directive which installs the {@link MaxLengthValidator} for any `formControlName,\n     * `formControl`,\n     * or control with `ngModel` that also has a `maxlength` attribute.\n     *\n     * @stable\n     */\n    var MaxLengthValidator = (function () {\n        function MaxLengthValidator() {\n        }\n        MaxLengthValidator.prototype._createValidator = function () {\n            this._validator = Validators.maxLength(parseInt(this.maxlength, 10));\n        };\n        MaxLengthValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['maxlength']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        MaxLengthValidator.prototype.validate = function (c) {\n            return isPresent(this.maxlength) ? this._validator(c) : null;\n        };\n        MaxLengthValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        MaxLengthValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]',\n                        providers: [MAX_LENGTH_VALIDATOR],\n                        host: { '[attr.maxlength]': 'maxlength? maxlength : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        MaxLengthValidator.ctorParameters = [];\n        MaxLengthValidator.propDecorators = {\n            'maxlength': [{ type: _angular_core.Input },],\n        };\n        return MaxLengthValidator;\n    }());\n    var PATTERN_VALIDATOR = {\n        provide: NG_VALIDATORS,\n        useExisting: _angular_core.forwardRef(function () { return PatternValidator; }),\n        multi: true\n    };\n    /**\n     * A Directive that adds the `pattern` validator to any controls marked with the\n     * `pattern` attribute, via the {@link NG_VALIDATORS} binding. Uses attribute value\n     * as the regex to validate Control value against.  Follows pattern attribute\n     * semantics; i.e. regex must match entire Control value.\n     *\n     * ### Example\n     *\n     * ```\n     * <input [name]=\"fullName\" pattern=\"[a-zA-Z ]*\" ngModel>\n     * ```\n     * @stable\n     */\n    var PatternValidator = (function () {\n        function PatternValidator() {\n        }\n        PatternValidator.prototype._createValidator = function () { this._validator = Validators.pattern(this.pattern); };\n        PatternValidator.prototype.ngOnChanges = function (changes) {\n            if (changes['pattern']) {\n                this._createValidator();\n                if (this._onChange)\n                    this._onChange();\n            }\n        };\n        PatternValidator.prototype.validate = function (c) {\n            return isPresent(this.pattern) ? this._validator(c) : null;\n        };\n        PatternValidator.prototype.registerOnValidatorChange = function (fn) { this._onChange = fn; };\n        PatternValidator.decorators = [\n            { type: _angular_core.Directive, args: [{\n                        selector: '[pattern][formControlName],[pattern][formControl],[pattern][ngModel]',\n                        providers: [PATTERN_VALIDATOR],\n                        host: { '[attr.pattern]': 'pattern? pattern : null' }\n                    },] },\n        ];\n        /** @nocollapse */\n        PatternValidator.ctorParameters = [];\n        PatternValidator.propDecorators = {\n            'pattern': [{ type: _angular_core.Input },],\n        };\n        return PatternValidator;\n    }());\n\n    /**\n     * @whatItDoes Creates an {@link AbstractControl} from a user-specified configuration.\n     *\n     * It is essentially syntactic sugar that shortens the `new FormGroup()`,\n     * `new FormControl()`, and `new FormArray()` boilerplate that can build up in larger\n     * forms.\n     *\n     * @howToUse\n     *\n     * To use, inject `FormBuilder` into your component class. You can then call its methods\n     * directly.\n     *\n     * {@example forms/ts/formBuilder/form_builder_example.ts region='Component'}\n     *\n     *  * **npm package**: `@angular/forms`\n     *\n     *  * **NgModule**: {@link ReactiveFormsModule}\n     *\n     * @stable\n     */\n    var FormBuilder = (function () {\n        function FormBuilder() {\n        }\n        /**\n         * Construct a new {@link FormGroup} with the given map of configuration.\n         * Valid keys for the `extra` parameter map are `validator` and `asyncValidator`.\n         *\n         * See the {@link FormGroup} constructor for more details.\n         */\n        FormBuilder.prototype.group = function (controlsConfig, extra) {\n            if (extra === void 0) { extra = null; }\n            var controls = this._reduceControls(controlsConfig);\n            var validator = isPresent(extra) ? StringMapWrapper.get(extra, 'validator') : null;\n            var asyncValidator = isPresent(extra) ? StringMapWrapper.get(extra, 'asyncValidator') : null;\n            return new FormGroup(controls, validator, asyncValidator);\n        };\n        /**\n         * Construct a new {@link FormControl} with the given `formState`,`validator`, and\n         * `asyncValidator`.\n         *\n         * `formState` can either be a standalone value for the form control or an object\n         * that contains both a value and a disabled status.\n         *\n         */\n        FormBuilder.prototype.control = function (formState, validator, asyncValidator) {\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            return new FormControl(formState, validator, asyncValidator);\n        };\n        /**\n         * Construct a {@link FormArray} from the given `controlsConfig` array of\n         * configuration, with the given optional `validator` and `asyncValidator`.\n         */\n        FormBuilder.prototype.array = function (controlsConfig, validator, asyncValidator) {\n            var _this = this;\n            if (validator === void 0) { validator = null; }\n            if (asyncValidator === void 0) { asyncValidator = null; }\n            var controls = controlsConfig.map(function (c) { return _this._createControl(c); });\n            return new FormArray(controls, validator, asyncValidator);\n        };\n        /** @internal */\n        FormBuilder.prototype._reduceControls = function (controlsConfig) {\n            var _this = this;\n            var controls = {};\n            StringMapWrapper.forEach(controlsConfig, function (controlConfig, controlName) {\n                controls[controlName] = _this._createControl(controlConfig);\n            });\n            return controls;\n        };\n        /** @internal */\n        FormBuilder.prototype._createControl = function (controlConfig) {\n            if (controlConfig instanceof FormControl || controlConfig instanceof FormGroup ||\n                controlConfig instanceof FormArray) {\n                return controlConfig;\n            }\n            else if (isArray(controlConfig)) {\n                var value = controlConfig[0];\n                var validator = controlConfig.length > 1 ? controlConfig[1] : null;\n                var asyncValidator = controlConfig.length > 2 ? controlConfig[2] : null;\n                return this.control(value, validator, asyncValidator);\n            }\n            else {\n                return this.control(controlConfig);\n            }\n        };\n        FormBuilder.decorators = [\n            { type: _angular_core.Injectable },\n        ];\n        /** @nocollapse */\n        FormBuilder.ctorParameters = [];\n        return FormBuilder;\n    }());\n\n    var SHARED_FORM_DIRECTIVES = [\n        NgSelectOption, NgSelectMultipleOption, DefaultValueAccessor, NumberValueAccessor,\n        CheckboxControlValueAccessor, SelectControlValueAccessor, SelectMultipleControlValueAccessor,\n        RadioControlValueAccessor, NgControlStatus, NgControlStatusGroup, RequiredValidator,\n        MinLengthValidator, MaxLengthValidator, PatternValidator\n    ];\n    var TEMPLATE_DRIVEN_DIRECTIVES = [NgModel, NgModelGroup, NgForm];\n    var REACTIVE_DRIVEN_DIRECTIVES = [FormControlDirective, FormGroupDirective, FormControlName, FormGroupName, FormArrayName];\n    /**\n     * Internal module used for sharing directives between FormsModule and ReactiveFormsModule\n     */\n    var InternalFormsSharedModule = (function () {\n        function InternalFormsSharedModule() {\n        }\n        InternalFormsSharedModule.decorators = [\n            { type: _angular_core.NgModule, args: [{ declarations: SHARED_FORM_DIRECTIVES, exports: SHARED_FORM_DIRECTIVES },] },\n        ];\n        /** @nocollapse */\n        InternalFormsSharedModule.ctorParameters = [];\n        return InternalFormsSharedModule;\n    }());\n\n    /**\n     * The ng module for forms.\n     * @stable\n     */\n    var FormsModule = (function () {\n        function FormsModule() {\n        }\n        FormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: TEMPLATE_DRIVEN_DIRECTIVES,\n                        providers: [RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, TEMPLATE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        FormsModule.ctorParameters = [];\n        return FormsModule;\n    }());\n    /**\n     * The ng module for reactive forms.\n     * @stable\n     */\n    var ReactiveFormsModule = (function () {\n        function ReactiveFormsModule() {\n        }\n        ReactiveFormsModule.decorators = [\n            { type: _angular_core.NgModule, args: [{\n                        declarations: [REACTIVE_DRIVEN_DIRECTIVES],\n                        providers: [FormBuilder, RadioControlRegistry],\n                        exports: [InternalFormsSharedModule, REACTIVE_DRIVEN_DIRECTIVES]\n                    },] },\n        ];\n        /** @nocollapse */\n        ReactiveFormsModule.ctorParameters = [];\n        return ReactiveFormsModule;\n    }());\n\n    exports.AbstractControlDirective = AbstractControlDirective;\n    exports.AbstractFormGroupDirective = AbstractFormGroupDirective;\n    exports.CheckboxControlValueAccessor = CheckboxControlValueAccessor;\n    exports.ControlContainer = ControlContainer;\n    exports.NG_VALUE_ACCESSOR = NG_VALUE_ACCESSOR;\n    exports.DefaultValueAccessor = DefaultValueAccessor;\n    exports.NgControl = NgControl;\n    exports.NgControlStatus = NgControlStatus;\n    exports.NgControlStatusGroup = NgControlStatusGroup;\n    exports.NgForm = NgForm;\n    exports.NgModel = NgModel;\n    exports.NgModelGroup = NgModelGroup;\n    exports.FormControlDirective = FormControlDirective;\n    exports.FormControlName = FormControlName;\n    exports.FormGroupDirective = FormGroupDirective;\n    exports.FormArrayName = FormArrayName;\n    exports.FormGroupName = FormGroupName;\n    exports.NgSelectOption = NgSelectOption;\n    exports.SelectControlValueAccessor = SelectControlValueAccessor;\n    exports.SelectMultipleControlValueAccessor = SelectMultipleControlValueAccessor;\n    exports.MaxLengthValidator = MaxLengthValidator;\n    exports.MinLengthValidator = MinLengthValidator;\n    exports.PatternValidator = PatternValidator;\n    exports.RequiredValidator = RequiredValidator;\n    exports.FormBuilder = FormBuilder;\n    exports.AbstractControl = AbstractControl;\n    exports.FormArray = FormArray;\n    exports.FormControl = FormControl;\n    exports.FormGroup = FormGroup;\n    exports.NG_ASYNC_VALIDATORS = NG_ASYNC_VALIDATORS;\n    exports.NG_VALIDATORS = NG_VALIDATORS;\n    exports.Validators = Validators;\n    exports.FormsModule = FormsModule;\n    exports.ReactiveFormsModule = ReactiveFormsModule;\n\n}));\n\n/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L0Bhbmd1bGFyL2Zvcm1zL2J1bmRsZXMvZm9ybXMudW1kLmpzPzkxMjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx5Q0FBeUM7QUFDbEYsQ0FBQywwSEFBMEg7O0FBRTNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGtDQUFrQztBQUN4Rix3REFBd0QsNEJBQTRCO0FBQ3BGLG9EQUFvRCx3QkFBd0I7QUFDNUUsaURBQWlELGlCQUFpQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsY0FBYztBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLFFBQVE7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFVBQVU7QUFDNUMsZ0NBQWdDLFdBQVc7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1QkFBdUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsdURBQXVELGdDQUFnQztBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsOERBQThELGtDQUFrQztBQUNoRywrQ0FBK0MsZ0JBQWdCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixZQUFZLEVBQUU7QUFDNUM7QUFDQTtBQUNBLFNBQVM7QUFDVCxvREFBb0QsMENBQTBDO0FBQzlGLGdEQUFnRCxxQkFBcUI7QUFDckUsb0RBQW9ELGdDQUFnQztBQUNwRjtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQyxFQUFFO0FBQ2xFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsNERBQTRELEVBQUU7QUFDNUY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4Qiw0REFBNEQsRUFBRTtBQUM1RjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLDhEQUE4RCxFQUFFO0FBQzlGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsOERBQThELEVBQUU7QUFDOUY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QiwrREFBK0QsRUFBRTtBQUMvRjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLDREQUE0RCxFQUFFO0FBQzVGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsOERBQThELEVBQUU7QUFDOUY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QixnRUFBZ0UsRUFBRTtBQUNoRztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLCtEQUErRCxFQUFFO0FBQy9GO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsOERBQThELEVBQUU7QUFDOUY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QixhQUFhLEVBQUU7QUFDN0M7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLG1DQUFtQyxtQkFBbUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGdCQUFnQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGFBQWEsRUFBRTtBQUM3QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGFBQWEsRUFBRTtBQUM3QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCx5QkFBeUI7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtCQUFrQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHFEQUFxRCxxQkFBcUI7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGVBQWUsRUFBRTtBQUN4RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxnQkFBZ0IsRUFBRTtBQUM3RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsNEJBQTRCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxpQkFBaUIsRUFBRTtBQUMxRDtBQUNBO0FBQ0EsdURBQXVELGtDQUFrQztBQUN6RiwrQ0FBK0MsaUJBQWlCO0FBQ2hFLDRDQUE0QyxVQUFVO0FBQ3RELHdDQUF3QyxnQ0FBZ0M7QUFDeEUsMENBQTBDLCtCQUErQjtBQUN6RTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsa0JBQWtCO0FBQzdFLGdEQUFnRCx5QkFBeUI7QUFDekU7QUFDQSxzREFBc0QsZUFBZSxFQUFFO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGlCQUFpQjtBQUN4RTtBQUNBLG1EQUFtRCxnQkFBZ0I7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELGdCQUFnQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQSxrREFBa0QsZ0JBQWdCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsZUFBZTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsd0JBQXdCO0FBQy9FLDBEQUEwRCx3QkFBd0I7QUFDbEYsOENBQThDLHVCQUF1QjtBQUNyRTtBQUNBLDJCQUEyQixrQkFBa0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0I7QUFDeEQ7QUFDQTtBQUNBLG9EQUFvRCxnQ0FBZ0M7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsb0JBQW9CO0FBQ2xFLDREQUE0RCw4QkFBOEI7QUFDMUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGtCQUFrQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkMsaUJBQWlCO0FBQzlELCtDQUErQyx5QkFBeUI7QUFDeEU7QUFDQSxtQ0FBbUMsV0FBVztBQUM5QyxpQ0FBaUMsWUFBWTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGNBQWM7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFVBQVU7QUFDNUMsZ0NBQWdDLFdBQVc7QUFDM0M7QUFDQTtBQUNBLHlEQUF5RCwrQkFBK0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUI7QUFDbEUsMkNBQTJDLDBCQUEwQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IscUJBQXFCO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLDJCQUEyQixtQkFBbUI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QscUJBQXFCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsZ0JBQWdCO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQSxnREFBZ0Qsa0JBQWtCO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2REFBNkQsa0JBQWtCO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsa0JBQWtCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixlQUFlLHdEQUF3RCxFQUFFO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixlQUFlLHdEQUF3RCxFQUFFO0FBQzlGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLGFBQWEsMkRBQTJEO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsYUFBYTtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLG1CQUFtQixFQUFFO0FBQ2pFO0FBQ0E7QUFDQSw0Q0FBNEMsbUJBQW1CLEVBQUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLElBQUk7QUFDYjtBQUNBOztBQUVBO0FBQ0EsMEJBQTBCLDJCQUEyQjtBQUNyRDtBQUNBLFlBQVksMkJBQTJCO0FBQ3ZDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsMkRBQTJELHFDQUFxQyxFQUFFO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGlGQUFpRixvQkFBb0I7QUFDckcsa0ZBQWtGLHFCQUFxQjtBQUN2RztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLCtCQUErQix5RUFBeUU7QUFDeEc7QUFDQSxxQkFBcUIsSUFBSTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdDQUFnQztBQUM3QyxhQUFhLGtDQUFrQztBQUMvQztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsMkRBQTJELDZCQUE2QixFQUFFO0FBQzFGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxjQUFjLEdBQUcsMkJBQTJCLE9BQU8sc0JBQXNCO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlFQUF5RSxvQkFBb0I7QUFDN0YsMEVBQTBFLHFCQUFxQjtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixzRUFBc0U7QUFDckc7QUFDQSxxQkFBcUIsSUFBSTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdDQUFnQztBQUM3QyxhQUFhLGtDQUFrQztBQUMvQztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsOEJBQThCO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDLDhCQUE4QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyREFBMkQsNEJBQTRCLEVBQUU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGNBQWMsR0FBRywyQkFBMkIsT0FBTyxzQkFBc0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7QUFDMUMsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLDRDQUE0QztBQUMxRjtBQUNBLHlFQUF5RSxxQkFBcUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWEsa0NBQWtDO0FBQy9DO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHdCQUF3QixFQUFFO0FBQ3hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsd0JBQXdCLEVBQUU7QUFDeEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLDJEQUEyRCxrQ0FBa0MsRUFBRTtBQUMvRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsaUNBQWlDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxRQUFRLGNBQWMsR0FBRywyQkFBMkIsT0FBTyxzQkFBc0I7QUFDakY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDO0FBQ3pDLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1RUFBdUUsNkJBQTZCO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRFQUE0RSx3QkFBd0I7QUFDcEcsK0VBQStFLHFCQUFxQjtBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsK0JBQStCLG9EQUFvRDtBQUNuRjtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWEsa0NBQWtDO0FBQy9DLGFBQWEsOEJBQThCO0FBQzNDLGFBQWEsZ0NBQWdDO0FBQzdDO0FBQ0E7QUFDQSxzQkFBc0IsNEJBQTRCO0FBQ2xELGlDQUFpQyw0QkFBNEI7QUFDN0QsdUJBQXVCLDRCQUE0QjtBQUNuRDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsMkRBQTJELG1DQUFtQyxFQUFFO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnRkFBZ0YscUJBQXFCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLHVDQUF1QztBQUNuSDtBQUNBO0FBQ0EsbUVBQW1FLGdCQUFnQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSwrQkFBK0IsdUVBQXVFO0FBQ3RHO0FBQ0EscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0EsYUFBYSxnQ0FBZ0M7QUFDN0MsYUFBYSxrQ0FBa0M7QUFDL0M7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx3Q0FBd0MscUJBQXFCLElBQUk7QUFDOUU7QUFDQTtBQUNBO0FBQ0EsYUFBYSxrQ0FBa0M7QUFDL0MsYUFBYSxnQ0FBZ0M7QUFDN0MsYUFBYSxpREFBaUQsK0JBQStCLEdBQUcsMkJBQTJCLElBQUk7QUFDL0g7QUFDQTtBQUNBLHlCQUF5QixnREFBZ0Q7QUFDekUsdUJBQXVCLDhDQUE4QztBQUNyRTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0EsMkRBQTJELDJDQUEyQyxFQUFFO0FBQ3hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQywwQ0FBMEM7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyw4QkFBOEIsRUFBRTtBQUMvRSx1REFBdUQsa0RBQWtELEVBQUU7QUFDM0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsb0JBQW9CO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLG9CQUFvQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdGQUF3RixxQkFBcUI7QUFDN0c7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxnQkFBZ0I7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsK0JBQStCLGlFQUFpRTtBQUNoRztBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsZ0NBQWdDO0FBQzdDLGFBQWEsa0NBQWtDO0FBQy9DO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdDQUF3QyxxQkFBcUIsSUFBSTtBQUM5RTtBQUNBO0FBQ0E7QUFDQSxhQUFhLGtDQUFrQztBQUMvQyxhQUFhLGdDQUFnQztBQUM3QyxhQUFhLHlEQUF5RCwrQkFBK0IsR0FBRywyQkFBMkIsSUFBSTtBQUN2STtBQUNBO0FBQ0EseUJBQXlCLGdEQUFnRDtBQUN6RSx1QkFBdUIsOENBQThDO0FBQ3JFO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0MsK0JBQStCO0FBQ3ZFLFNBQVM7QUFDVDtBQUNBLHlEQUF5RCxnQ0FBZ0MsRUFBRTtBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSxvRUFBb0UsZ0RBQWdELEVBQUU7QUFDdEg7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpRUFBaUUseUNBQXlDLEVBQUU7QUFDNUcsU0FBUztBQUNUO0FBQ0E7QUFDQSxpRUFBaUUseUNBQXlDLEVBQUU7QUFDNUcsU0FBUztBQUNUO0FBQ0E7QUFDQSx3REFBd0QsNkJBQTZCLEVBQUU7QUFDdkYseURBQXlELDZCQUE2QixFQUFFO0FBQ3hGLHlEQUF5RCxrREFBa0QsRUFBRTtBQUM3Ryw4REFBOEQsa0RBQWtELEVBQUU7QUFDbEg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQSxxREFBcUQsbUJBQW1CLE1BQU0sb0JBQW9CO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdCQUFnQjtBQUN4QztBQUNBLDhCQUE4Qiw4Q0FBOEMsRUFBRTtBQUM5RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZDQUE2QyxFQUFFO0FBQzdFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHdCQUF3QixXQUFXO0FBQ25DO0FBQ0EsOEJBQThCLHlEQUF5RCxFQUFFO0FBQ3pGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsNENBQTRDLEVBQUU7QUFDNUU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QixzREFBc0QsRUFBRTtBQUN0RjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0JBQXNCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdDQUF3QyxtRkFBbUYsSUFBSTtBQUM1STtBQUNBO0FBQ0E7QUFDQSxhQUFhLGdDQUFnQywyQkFBMkIsSUFBSTtBQUM1RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1Q0FBdUMsMkJBQTJCLElBQUk7QUFDbkY7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxpQkFBaUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELHlDQUF5QztBQUNqRztBQUNBO0FBQ0EsMENBQTBDLGFBQWE7QUFDdkQsMENBQTBDLGFBQWE7QUFDdkQ7QUFDQTtBQUNBLDRDQUE0QyxvQ0FBb0MsRUFBRTtBQUNsRixpQkFBaUIsdUNBQXVDLDZCQUE2QjtBQUNyRjtBQUNBLCtEQUErRCx5QkFBeUIsbUNBQW1DLEVBQUUsRUFBRSxFQUFFO0FBQ2pJLHdDQUF3Qyw0QkFBNEI7QUFDcEU7QUFDQTtBQUNBLCtEQUErRCx5QkFBeUIsbUNBQW1DLEVBQUUsRUFBRSxFQUFFO0FBQ2pJLHFDQUFxQyw0QkFBNEI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsK0JBQStCLEVBQUU7QUFDN0UsaUJBQWlCLHVDQUF1Qyx3QkFBd0I7QUFDaEY7QUFDQTtBQUNBLHlEQUF5RCx5QkFBeUIsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLG1CQUFtQixZQUFZO0FBQzFJO0FBQ0E7QUFDQTtBQUNBLHNEQUFzRCx5QkFBeUIsbUJBQW1CLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixZQUFZO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0Msa0JBQWtCLEdBQUcsZ0JBQWdCO0FBQ3BGLFFBQVEsZ0JBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9EO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLG9CQUFvQixFQUFFO0FBQ3BEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIscUJBQXFCLEVBQUU7QUFDckQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QiwrQkFBK0IsRUFBRTtBQUMvRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGlDQUFpQyxFQUFFO0FBQ2pFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsZ0NBQWdDLEVBQUU7QUFDaEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtDQUFrQyxFQUFFO0FBQ2xFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsa0NBQWtDLEVBQUU7QUFDbEU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHFCQUFxQixFQUFFO0FBQ3JEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix1QkFBdUIsRUFBRTtBQUN2RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsdUJBQXVCLEVBQUU7QUFDdkQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLHNCQUFzQixFQUFFO0FBQ3REO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix1QkFBdUIsRUFBRTtBQUN2RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsMkJBQTJCLEVBQUU7QUFDM0Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDRCQUE0QixFQUFFO0FBQzVEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFpRSx1QkFBdUI7QUFDeEY7QUFDQTtBQUNBO0FBQ0Esc0VBQXNFLDRCQUE0QjtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMscUJBQXFCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0EsbURBQW1ELDBCQUEwQixpQkFBaUIsRUFBRSxFQUFFO0FBQ2xHO0FBQ0EsNkNBQTZDLHFCQUFxQjtBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLHFCQUFxQjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBLG1EQUFtRCx5QkFBeUIsaUJBQWlCLEVBQUUsRUFBRTtBQUNqRztBQUNBLDhDQUE4QyxxQkFBcUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxxQkFBcUI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxrQkFBa0IsaUJBQWlCLEVBQUUsRUFBRTtBQUMxRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBLG1EQUFtRCxpQkFBaUIsaUJBQWlCLEVBQUUsRUFBRTtBQUN6Rix5Q0FBeUMsdUNBQXVDO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLHVCQUF1QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxREFBcUQsMkNBQTJDO0FBQ2hHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLGtCQUFrQjtBQUNoRSxnREFBZ0Qsa0NBQWtDLHVCQUF1QixFQUFFLEVBQUU7QUFDN0cseUNBQXlDLHVDQUF1QztBQUNoRjtBQUNBLG1FQUFtRSwrREFBK0Q7QUFDbEk7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLHVCQUF1Qiw4QkFBOEIsdUJBQXVCLEVBQUUsRUFBRSxFQUFFO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBLHlDQUF5QyxrQkFBa0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQSx5REFBeUQsK0JBQStCO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsaUNBQWlDLEVBQUU7QUFDNUY7QUFDQTtBQUNBO0FBQ0EseURBQXlELHNCQUFzQixFQUFFO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCx3QkFBd0IsRUFBRTtBQUNuRjtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLDhDQUE4QyxxQkFBcUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLDZDQUE2QyxxQkFBcUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0EsNkVBQTZFO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSwrQkFBK0I7QUFDOUc7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQixNQUFNLGdCQUFnQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsa0JBQWtCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyw2QkFBNkI7QUFDbEUsK0JBQStCO0FBQy9CLGdDQUFnQztBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsNEJBQTRCLHNCQUFzQjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCx1Q0FBdUMsa0JBQWtCO0FBQ3pELDRDQUE0Qyx1QkFBdUI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMsbUNBQW1DO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxzREFBc0QsRUFBRTtBQUNwSDtBQUNBLHlDQUF5QywyQ0FBMkM7QUFDcEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsMkJBQTJCO0FBQ2pGLHdDQUF3QywyQkFBMkI7QUFDbkU7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLGNBQWM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsK0JBQStCO0FBQzlEO0FBQ0EsMkNBQTJDO0FBQzNDLDRDQUE0QztBQUM1QztBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsa0JBQWtCO0FBQ3pELDhDQUE4QztBQUM5QztBQUNBLGlDQUFpQyxxQkFBcUI7QUFDdEQsa0NBQWtDLHFCQUFxQjtBQUN2RCx3Q0FBd0MscUJBQXFCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBEO0FBQzFEO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSxjQUFjO0FBQ2pGO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxzQkFBc0I7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLHlCQUF5QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3RUFBd0UsNkJBQTZCO0FBQ3JHO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsbUNBQW1DO0FBQ3RGLGlDQUFpQyxtQ0FBbUM7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0Esc0VBQXNFO0FBQ3RFO0FBQ0E7QUFDQSwwREFBMEQsa0JBQWtCO0FBQzVFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCLE1BQU0sZ0JBQWdCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QixnQkFBZ0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBLCtCQUErQixPQUFPLHFCQUFxQjtBQUMzRCxnQ0FBZ0M7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCw0Q0FBNEMsdUJBQXVCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1DQUFtQztBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLDJCQUEyQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxFQUFFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxFQUFFO0FBQy9FO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLDBCQUEwQjtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2Isb0NBQW9DLE9BQU87QUFDM0M7QUFDQSwyQkFBMkIsNkJBQTZCO0FBQ3hELG9DQUFvQyxPQUFPO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBO0FBQ0EseURBQXlELGlCQUFpQjtBQUMxRSxhQUFhO0FBQ2IseUNBQXlDLHFCQUFxQjtBQUM5RDtBQUNBO0FBQ0Esc0NBQXNDLGdCQUFnQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLG9DQUFvQyxPQUFPO0FBQzNDO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUMsb0NBQW9DLE9BQU87QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0EsK0RBQStELGlCQUFpQjtBQUNoRjtBQUNBLGFBQWE7QUFDYix5Q0FBeUMscUJBQXFCO0FBQzlEO0FBQ0E7QUFDQSx1QkFBdUIsZ0JBQWdCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQixhQUFhO0FBQzdEO0FBQ0Esd0NBQXdDLE1BQU07QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLDhCQUE4QjtBQUNuRDtBQUNBLFlBQVk7QUFDWjtBQUNBLHdDQUF3QyxNQUFNO0FBQzlDLHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUMsWUFBWTtBQUMvQyw4Q0FBOEM7QUFDOUM7QUFDQSw0Q0FBNEMsaUJBQWlCO0FBQzdELGFBQWE7QUFDYix5Q0FBeUMscUJBQXFCO0FBQzlELGtDQUFrQyxxQkFBcUI7QUFDdkQsaUNBQWlDLHFCQUFxQjtBQUN0RDtBQUNBO0FBQ0EsdUNBQXVDLGdCQUFnQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0Esd0RBQXdELG1DQUFtQztBQUMzRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBDQUEwQztBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCw4QkFBOEIsRUFBRTtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxnQkFBZ0I7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHVFQUF1RTtBQUN2RTtBQUNBO0FBQ0EsMERBQTBELGtCQUFrQjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixrQkFBa0IsTUFBTSxnQkFBZ0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGdCQUFnQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QiwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCw0Q0FBNEMsdUJBQXVCO0FBQ25FO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1DQUFtQztBQUM1RTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBLG1EQUFtRCw2QkFBNkI7QUFDaEY7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsc0JBQXNCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxFQUFFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhFQUE4RSxFQUFFO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qiw2QkFBNkIsRUFBRTtBQUM3RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQztBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxpQkFBaUI7QUFDckUsYUFBYTtBQUNiLHlDQUF5QyxxQkFBcUI7QUFDOUQ7QUFDQTtBQUNBLHNDQUFzQyxnQkFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQTtBQUNBLDBEQUEwRCxpQkFBaUI7QUFDM0U7QUFDQSxhQUFhO0FBQ2IseUNBQXlDLHFCQUFxQjtBQUM5RDtBQUNBO0FBQ0EsdUJBQXVCLGdCQUFnQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsOEJBQThCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QztBQUN2QywrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFlBQVk7QUFDL0MsOENBQThDO0FBQzlDO0FBQ0EsNkNBQTZDLGlCQUFpQjtBQUM5RCxhQUFhO0FBQ2IseUNBQXlDLHFCQUFxQjtBQUM5RCxrQ0FBa0MscUJBQXFCO0FBQ3ZELGlDQUFpQyxxQkFBcUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1REFBdUQsOENBQThDLHNCQUFzQixFQUFFLEVBQUU7QUFDL0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZEQUE2RCxvQkFBb0IsRUFBRTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1FQUFtRSwwQ0FBMEMsRUFBRTtBQUMvRyx5Q0FBeUMsc0JBQXNCLEVBQUU7QUFDakU7QUFDQTtBQUNBO0FBQ0EsMERBQTBELDhDQUE4QyxFQUFFO0FBQzFHO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbURBQW1ELHdDQUF3QyxFQUFFO0FBQzdGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxnQkFBZ0I7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxlQUFlLEVBQUU7QUFDNUU7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLGdCQUFnQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQjtBQUN4QjtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsY0FBYztBQUNuRiw0Q0FBNEMsbUJBQW1CO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQztBQUNoQztBQUNBO0FBQ0EsOEJBQThCLHdCQUF3QixFQUFFO0FBQ3hEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsYUFBYSxFQUFFO0FBQzdDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsa0JBQWtCLEVBQUU7QUFDbEQ7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QixXQUFXLEVBQUU7QUFDM0M7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QiwyQkFBMkIsRUFBRTtBQUMzRDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxtQkFBbUI7QUFDdkUsYUFBYTtBQUNiO0FBQ0Esc0RBQXNELGdDQUFnQztBQUN0RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQSw4Q0FBOEMsbUJBQW1CO0FBQ2pFLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esd0RBQXdELGdDQUFnQztBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0Esc0RBQXNELDhCQUE4QjtBQUNwRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELGtCQUFrQjtBQUNsRTtBQUNBLG1DQUFtQyxtQkFBbUI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSwrQkFBK0IsbURBQW1EO0FBQ2xGO0FBQ0E7QUFDQSxxQkFBcUIsSUFBSTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyxxREFBcUQsSUFBSTtBQUNsSyxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywyREFBMkQsSUFBSTtBQUN4SztBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0xBQWtMLDRDQUE0QyxFQUFFO0FBQ2hPLDBPQUEwTyxnQ0FBZ0MsK0JBQStCLFFBQVEsRUFBRTtBQUNuVCx3SkFBd0osMExBQTBMLG9DQUFvQyxxQ0FBcUMsRUFBRTtBQUM3WjtBQUNBLHFMQUFxTCxpQkFBaUI7QUFDdE07O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpVkFBaVYsaUJBQWlCO0FBQ2xXO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQscUJBQXFCLEVBQUU7QUFDbEY7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0I7QUFDeEQ7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELGFBQWE7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0NBQXdDLHdGQUF3RixJQUFJO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBLGFBQWEsdUNBQXVDLDJCQUEyQixHQUFHLCtCQUErQixJQUFJO0FBQ3JILGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHFEQUFxRCxJQUFJO0FBQ2xLLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLDJEQUEyRCxJQUFJO0FBQ3hLO0FBQ0E7QUFDQSxzQkFBc0IscURBQXFEO0FBQzNFO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsZ0JBQWdCLEVBQUU7QUFDN0U7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLGtCQUFrQjtBQUNoRDtBQUNBO0FBQ0EsWUFBWSxrQkFBa0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGFBQWE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxrQkFBa0I7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzREFBc0QsK0JBQStCO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscURBQXFELDhEQUE4RDtBQUNuSDtBQUNBLDhCQUE4QixzQkFBc0IsRUFBRTtBQUN0RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLHlEQUF5RCxFQUFFO0FBQ3pGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsK0NBQStDLEVBQUU7QUFDL0U7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG1CQUFtQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdEQUFnRCxnQ0FBZ0MsK0JBQStCLEVBQUUsRUFBRTtBQUNuSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsSUFBSTtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVDQUF1QywrQkFBK0IsR0FBRywyQkFBMkIsSUFBSTtBQUNySCxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyxxREFBcUQsSUFBSTtBQUNsSyxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywyREFBMkQsSUFBSTtBQUN4SyxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyx5REFBeUQsSUFBSTtBQUN0SztBQUNBO0FBQ0Esc0JBQXNCLDRCQUE0QjtBQUNsRCw0QkFBNEIsaURBQWlEO0FBQzdFLHVCQUF1QixnREFBZ0Q7QUFDdkUseUJBQXlCLHVEQUF1RDtBQUNoRix3QkFBd0IsdURBQXVEO0FBQy9FO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscVpBQXFaLGtDQUFrQywrQkFBK0IsNEZBQTRGLEVBQUU7QUFDcGpCO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsNkJBQTZCLEVBQUU7QUFDMUY7QUFDQTtBQUNBLHVDQUF1QyxrQkFBa0I7QUFDekQ7QUFDQSw4RUFBOEU7QUFDOUU7QUFDQTtBQUNBLFFBQVEsa0JBQWtCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxrQkFBa0I7QUFDbEYsd0JBQXdCLGtCQUFrQjtBQUMxQyxRQUFRLDJCQUEyQjtBQUNuQztBQUNBLCtFQUErRSxzQkFBc0I7QUFDckcsc0NBQXNDLGtCQUFrQjtBQUN4RCxRQUFRLGdCQUFnQixxQ0FBcUMseUJBQXlCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLFFBQVEsa0JBQWtCO0FBQzFCLFFBQVEsc0JBQXNCO0FBQzlCO0FBQ0EsbUZBQW1GLGtCQUFrQjtBQUNyRyx1REFBdUQsK0JBQStCO0FBQ3RGLFFBQVEsaUNBQWlDO0FBQ3pDO0FBQ0E7QUFDQSx5QkFBeUIsbUNBQW1DO0FBQzVELFFBQVEsb0NBQW9DO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0Msc0NBQXNDLEVBQUU7QUFDaEY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0RBQWtELG1CQUFtQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixXQUFXLEVBQUU7QUFDM0M7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QiwrQ0FBK0MsRUFBRTtBQUMvRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLGtCQUFrQixFQUFFO0FBQ2xEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsd0NBQXdDLG1GQUFtRixJQUFJO0FBQzVJO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHFEQUFxRCxJQUFJO0FBQ2xLLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLDJEQUEyRCxJQUFJO0FBQ3hLLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHlEQUF5RCxJQUFJO0FBQ3RLO0FBQ0E7QUFDQSxzQkFBc0Isb0RBQW9EO0FBQzFFLHVCQUF1QixnREFBZ0Q7QUFDdkUsd0JBQXdCLHVEQUF1RDtBQUMvRSw0QkFBNEIsaURBQWlEO0FBQzdFO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsMkJBQTJCLEVBQUU7QUFDeEY7QUFDQTtBQUNBLHNDQUFzQyxnQkFBZ0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLGdCQUFnQjtBQUMzRCxRQUFRLGdCQUFnQiw4QkFBOEIsa0JBQWtCLEdBQUcsZ0JBQWdCO0FBQzNGLFlBQVksZ0JBQWdCLHFCQUFxQixzQkFBc0IsR0FBRyxvQkFBb0I7QUFDOUYsWUFBWSxvQkFBb0I7QUFDaEM7QUFDQTtBQUNBLFFBQVEsZ0JBQWdCLHNEQUFzRCxnQkFBZ0I7QUFDOUYsUUFBUSwrQkFBK0IsS0FBSyxpQ0FBaUM7QUFDN0U7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCLElBQUksbUNBQW1DO0FBQ3RFLFlBQVksb0NBQW9DO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4Qix3QkFBd0IsRUFBRTtBQUN4RDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLGFBQWEsRUFBRTtBQUM3QztBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLGtCQUFrQixFQUFFO0FBQ2xEO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsV0FBVyxFQUFFO0FBQzNDO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1CQUFtQjtBQUM1RDtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0NBQWdDO0FBQ2xHLHFFQUFxRSwwQ0FBMEM7QUFDL0c7QUFDQTtBQUNBO0FBQ0EseUNBQXlDLG1CQUFtQjtBQUM1RDtBQUNBLHVFQUF1RTtBQUN2RSxvRUFBb0UsZ0NBQWdDO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxtQkFBbUI7QUFDNUQ7QUFDQSx1RUFBdUU7QUFDdkUsb0VBQW9FLGdDQUFnQztBQUNwRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsa0JBQWtCO0FBQzlFO0FBQ0EsbUNBQW1DLG1CQUFtQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLDJDQUEyQyxtQkFBbUI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0EsK0RBQStELGdDQUFnQyxFQUFFO0FBQ2pHO0FBQ0EsdUVBQXVFLEVBQUU7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsK0JBQStCLG1EQUFtRDtBQUNsRjtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLHFEQUFxRCxJQUFJO0FBQ2xLLGFBQWEsNEJBQTRCLCtCQUErQixHQUFHLDJCQUEyQixHQUFHLDJEQUEyRCxJQUFJO0FBQ3hLO0FBQ0E7QUFDQSxzQkFBc0Isa0RBQWtEO0FBQ3hFLDBCQUEwQiw2QkFBNkI7QUFDdkQ7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHNCQUFzQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDJEQUEyRCxzQkFBc0IsRUFBRTtBQUNuRjtBQUNBO0FBQ0EsbUNBQW1DLGdCQUFnQjtBQUNuRDtBQUNBO0FBQ0E7QUFDQSxzREFBc0QseUJBQXlCO0FBQy9FO0FBQ0E7QUFDQSxpREFBaUQsZ0JBQWdCO0FBQ2pFLHdCQUF3QixnQkFBZ0I7QUFDeEMsUUFBUSxnQkFBZ0IsMkJBQTJCLHlCQUF5QjtBQUM1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGdCQUFnQjtBQUM1RSxRQUFRLDBCQUEwQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxnQkFBZ0IsOENBQThDLHNCQUFzQjtBQUM1RjtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUIsUUFBUSwrQkFBK0IsS0FBSyxpQ0FBaUM7QUFDN0U7QUFDQTtBQUNBLHlCQUF5QixtQ0FBbUM7QUFDNUQsUUFBUSxvQ0FBb0M7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdDQUF3QyxrRUFBa0UsSUFBSTtBQUMzSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVDQUF1QywrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywrQkFBK0IsSUFBSTtBQUN2SixhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyxxREFBcUQsSUFBSTtBQUNsSyxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywyREFBMkQsSUFBSTtBQUN4SztBQUNBO0FBQ0Esc0JBQXNCLHNEQUFzRDtBQUM1RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwyREFBMkQsc0JBQXNCLEVBQUU7QUFDbkY7QUFDQTtBQUNBLG1DQUFtQyxnQkFBZ0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsNERBQTRELHlCQUF5QjtBQUNyRjtBQUNBO0FBQ0EsaURBQWlELGdCQUFnQjtBQUNqRSx3QkFBd0IsZ0JBQWdCO0FBQ3hDLFFBQVEsZ0JBQWdCLDJCQUEyQix5QkFBeUI7QUFDNUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxnQkFBZ0I7QUFDNUUsUUFBUSwwQkFBMEIsdUJBQXVCLGdCQUFnQjtBQUN6RTtBQUNBO0FBQ0E7QUFDQSxRQUFRLGdCQUFnQiw4Q0FBOEMsc0JBQXNCO0FBQzVGO0FBQ0E7QUFDQSxZQUFZLGdCQUFnQjtBQUM1QixRQUFRLGdCQUFnQixJQUFJLCtCQUErQixLQUFLO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixnQkFBZ0IsSUFBSSxtQ0FBbUM7QUFDaEYsc0JBQXNCLG9DQUFvQztBQUMxRDtBQUNBO0FBQ0EsOERBQThELGdCQUFnQjtBQUM5RSxvQkFBb0IscUJBQXFCO0FBQ3pDLDZEQUE2RDtBQUM3RDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsOENBQThDLEVBQUU7QUFDOUU7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4Qiw2Q0FBNkMsRUFBRTtBQUM3RTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLDRDQUE0QyxFQUFFO0FBQzVFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIsc0RBQXNELEVBQUU7QUFDdEY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLHdDQUF3QyxrRUFBa0UsSUFBSTtBQUMzSDtBQUNBO0FBQ0E7QUFDQSxhQUFhLHVDQUF1QywrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywrQkFBK0IsSUFBSTtBQUN2SixhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRyxxREFBcUQsSUFBSTtBQUNsSyxhQUFhLDRCQUE0QiwrQkFBK0IsR0FBRywyQkFBMkIsR0FBRywyREFBMkQsSUFBSTtBQUN4SztBQUNBO0FBQ0Esc0JBQXNCLHNEQUFzRDtBQUM1RTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsd0JBQXdCLEVBQUU7QUFDckY7QUFDQTtBQUNBLDZCQUE2QixrQkFBa0IsaUJBQWlCLGdCQUFnQjtBQUNoRjtBQUNBO0FBQ0EsOEVBQThFO0FBQzlFO0FBQ0E7QUFDQSxRQUFRLGtCQUFrQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSw0REFBNEQseUJBQXlCO0FBQ3JGO0FBQ0E7QUFDQSwwQ0FBMEMsa0JBQWtCO0FBQzVELGtDQUFrQyxrQkFBa0I7QUFDcEQsZ0JBQWdCLGdCQUFnQixLQUFLLGdCQUFnQjtBQUNyRDtBQUNBLG1EQUFtRCxrQkFBa0I7QUFDckUsb0NBQW9DLDBCQUEwQjtBQUM5RCxtQ0FBbUM7QUFDbkM7QUFDQSxrRkFBa0Ysa0JBQWtCO0FBQ3BHLG1EQUFtRCxzQkFBc0I7QUFDekU7QUFDQTtBQUNBLFNBQVMsa0JBQWtCO0FBQzNCLFNBQVMsK0JBQStCLEtBQUssaUNBQWlDO0FBQzlFO0FBQ0E7QUFDQSx5QkFBeUIsbUNBQW1DO0FBQzVELFFBQVEsb0NBQW9DO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLHNDQUFzQyxFQUFFO0FBQ2hGO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEJBQThCLDZDQUE2QyxFQUFFO0FBQzdFO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSw4QkFBOEIseURBQXlELEVBQUU7QUFDekY7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLDhCQUE4QiwrQ0FBK0MsRUFBRTtBQUMvRTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsOEJBQThCLHNCQUFzQixFQUFFO0FBQ3REO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSx3Q0FBd0MsaUVBQWlFLElBQUk7QUFDMUg7QUFDQTtBQUNBO0FBQ0EsYUFBYSx1Q0FBdUMsK0JBQStCLEdBQUcsMkJBQTJCLEdBQUcsK0JBQStCLElBQUk7QUFDdkosYUFBYSw0QkFBNEIsK0JBQStCLEdBQUcsMkJBQTJCLEdBQUcscURBQXFELElBQUk7QUFDbEssYUFBYSw0QkFBNEIsK0JBQStCLEdBQUcsMkJBQTJCLEdBQUcsMkRBQTJELElBQUk7QUFDeEssYUFBYSw0QkFBNEIsK0JBQStCLEdBQUcsMkJBQTJCLEdBQUcseURBQXlELElBQUk7QUFDdEs7QUFDQTtBQUNBLHNCQUFzQix3REFBd0Q7QUFDOUUsdUJBQXVCLGdEQUFnRDtBQUN2RSx3QkFBd0IsdURBQXVEO0FBQy9FLDRCQUE0QixpREFBaUQ7QUFDN0U7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBLDJEQUEyRCwwQkFBMEIsRUFBRTtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQyxvQkFBb0I7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsdUJBQXVCLEVBQUU7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UscUJBQXFCO0FBQ3BHO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0IscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNEJBQTRCO0FBQ3REO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw0QkFBNEIseUJBQXlCLEtBQUssb0JBQW9CO0FBQzlFO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQSwyREFBMkQsMkJBQTJCLEVBQUU7QUFDeEY7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLHlCQUF5QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLHFCQUFxQjtBQUNyRztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsNEJBQTRCLHlCQUF5QixLQUFLLG9CQUFvQjtBQUM5RTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELDJCQUEyQixFQUFFO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBLHVDQUF1Qyx5QkFBeUI7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0ZBQWdGLHFCQUFxQjtBQUNyRztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLDRCQUE0QjtBQUN2RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSwyREFBMkQseUJBQXlCLEVBQUU7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsb0JBQW9CO0FBQ3pEO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsb0RBQW9EO0FBQ3ZIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLHFCQUFxQjtBQUNuRztBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLDRCQUE0QjtBQUNyRDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLCtCQUErQixzQkFBc0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGdCQUFnQjtBQUM1QztBQUNBO0FBQ0Esb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0EsbUNBQW1DLGNBQWM7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGtCQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxrQkFBa0I7QUFDekQsNENBQTRDLHVCQUF1QjtBQUNuRTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLGtCQUFrQjtBQUN6RCw0Q0FBNEMsdUJBQXVCO0FBQ25FLDREQUE0RCxnQ0FBZ0MsRUFBRTtBQUM5RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxpQ0FBaUM7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsdUNBQXVDLHdFQUF3RSxJQUFJO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixJQUFJO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLElBQUk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLENBQUMiLCJmaWxlIjoiMzYyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZSBBbmd1bGFyIHYyLjAuMFxuICogKGMpIDIwMTAtMjAxNiBHb29nbGUsIEluYy4gaHR0cHM6Ly9hbmd1bGFyLmlvL1xuICogTGljZW5zZTogTUlUXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzLCByZXF1aXJlKCdAYW5ndWxhci9jb3JlJyksIHJlcXVpcmUoJ3J4anMvb3BlcmF0b3IvdG9Qcm9taXNlJyksIHJlcXVpcmUoJ3J4anMvU3ViamVjdCcpLCByZXF1aXJlKCdyeGpzL09ic2VydmFibGUnKSwgcmVxdWlyZSgncnhqcy9vYnNlcnZhYmxlL2Zyb21Qcm9taXNlJykpIDpcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ0Bhbmd1bGFyL2NvcmUnLCAncnhqcy9vcGVyYXRvci90b1Byb21pc2UnLCAncnhqcy9TdWJqZWN0JywgJ3J4anMvT2JzZXJ2YWJsZScsICdyeGpzL29ic2VydmFibGUvZnJvbVByb21pc2UnXSwgZmFjdG9yeSkgOlxuICAgIChmYWN0b3J5KChnbG9iYWwubmcgPSBnbG9iYWwubmcgfHwge30sIGdsb2JhbC5uZy5mb3JtcyA9IGdsb2JhbC5uZy5mb3JtcyB8fCB7fSksZ2xvYmFsLm5nLmNvcmUsZ2xvYmFsLlJ4Lk9ic2VydmFibGUucHJvdG90eXBlLGdsb2JhbC5SeCxnbG9iYWwuUngsZ2xvYmFsLlJ4Lk9ic2VydmFibGUpKTtcbn0odGhpcywgZnVuY3Rpb24gKGV4cG9ydHMsX2FuZ3VsYXJfY29yZSxyeGpzX29wZXJhdG9yX3RvUHJvbWlzZSxyeGpzX1N1YmplY3Qscnhqc19PYnNlcnZhYmxlLHJ4anNfb2JzZXJ2YWJsZV9mcm9tUHJvbWlzZSkgeyAndXNlIHN0cmljdCc7XG5cbiAgICAvKipcbiAgICAgKiBAbGljZW5zZVxuICAgICAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgICAqXG4gICAgICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gICAgICovXG4gICAgdmFyIGdsb2JhbFNjb3BlO1xuICAgIGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAodHlwZW9mIFdvcmtlckdsb2JhbFNjb3BlICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmIGluc3RhbmNlb2YgV29ya2VyR2xvYmFsU2NvcGUpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgYW55IHdpdGggV29ya2VyR2xvYmFsU2NvcGUgZnJvbSBsaWIud2Vid29ya2VyLmQudHMgIzM0OTJcbiAgICAgICAgICAgIGdsb2JhbFNjb3BlID0gc2VsZjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGdsb2JhbFNjb3BlID0gZ2xvYmFsO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBnbG9iYWxTY29wZSA9IHdpbmRvdztcbiAgICB9XG4gICAgLy8gTmVlZCB0byBkZWNsYXJlIGEgbmV3IHZhcmlhYmxlIGZvciBnbG9iYWwgaGVyZSBzaW5jZSBUeXBlU2NyaXB0XG4gICAgLy8gZXhwb3J0cyB0aGUgb3JpZ2luYWwgdmFsdWUgb2YgdGhlIHN5bWJvbC5cbiAgICB2YXIgZ2xvYmFsJDEgPSBnbG9iYWxTY29wZTtcbiAgICAvLyBUT0RPOiByZW1vdmUgY2FsbHMgdG8gYXNzZXJ0IGluIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRcbiAgICAvLyBOb3RlOiBDYW4ndCBqdXN0IGV4cG9ydCB0aGlzIGFuZCBpbXBvcnQgaW4gaW4gb3RoZXIgZmlsZXNcbiAgICAvLyBhcyBgYXNzZXJ0YCBpcyBhIHJlc2VydmVkIGtleXdvcmQgaW4gRGFydFxuICAgIGdsb2JhbCQxLmFzc2VydCA9IGZ1bmN0aW9uIGFzc2VydChjb25kaXRpb24pIHtcbiAgICAgICAgLy8gVE9ETzogdG8gYmUgZml4ZWQgcHJvcGVybHkgdmlhICMyODMwLCBub29wIGZvciBub3dcbiAgICB9O1xuICAgIGZ1bmN0aW9uIGlzUHJlc2VudChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiAhPT0gdW5kZWZpbmVkICYmIG9iaiAhPT0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNCbGFuayhvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkIHx8IG9iaiA9PT0gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnc3RyaW5nJztcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNGdW5jdGlvbihvYmopIHtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzU3RyaW5nTWFwKG9iaikge1xuICAgICAgICByZXR1cm4gdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgb2JqICE9PSBudWxsO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1Byb21pc2Uob2JqKSB7XG4gICAgICAgIC8vIGFsbG93IGFueSBQcm9taXNlL0ErIGNvbXBsaWFudCB0aGVuYWJsZS5cbiAgICAgICAgLy8gSXQncyB1cCB0byB0aGUgY2FsbGVyIHRvIGVuc3VyZSB0aGF0IG9iai50aGVuIGNvbmZvcm1zIHRvIHRoZSBzcGVjXG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQob2JqKSAmJiBpc0Z1bmN0aW9uKG9iai50aGVuKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNBcnJheShvYmopIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKTtcbiAgICB9XG4gICAgdmFyIFN0cmluZ1dyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTdHJpbmdXcmFwcGVyKCkge1xuICAgICAgICB9XG4gICAgICAgIFN0cmluZ1dyYXBwZXIuZnJvbUNoYXJDb2RlID0gZnVuY3Rpb24gKGNvZGUpIHsgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoY29kZSk7IH07XG4gICAgICAgIFN0cmluZ1dyYXBwZXIuY2hhckNvZGVBdCA9IGZ1bmN0aW9uIChzLCBpbmRleCkgeyByZXR1cm4gcy5jaGFyQ29kZUF0KGluZGV4KTsgfTtcbiAgICAgICAgU3RyaW5nV3JhcHBlci5zcGxpdCA9IGZ1bmN0aW9uIChzLCByZWdFeHApIHsgcmV0dXJuIHMuc3BsaXQocmVnRXhwKTsgfTtcbiAgICAgICAgU3RyaW5nV3JhcHBlci5lcXVhbHMgPSBmdW5jdGlvbiAocywgczIpIHsgcmV0dXJuIHMgPT09IHMyOyB9O1xuICAgICAgICBTdHJpbmdXcmFwcGVyLnN0cmlwTGVmdCA9IGZ1bmN0aW9uIChzLCBjaGFyVmFsKSB7XG4gICAgICAgICAgICBpZiAocyAmJiBzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIHZhciBwb3MgPSAwO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoc1tpXSAhPSBjaGFyVmFsKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIHBvcysrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzID0gcy5zdWJzdHJpbmcocG9zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzO1xuICAgICAgICB9O1xuICAgICAgICBTdHJpbmdXcmFwcGVyLnN0cmlwUmlnaHQgPSBmdW5jdGlvbiAocywgY2hhclZhbCkge1xuICAgICAgICAgICAgaWYgKHMgJiYgcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB2YXIgcG9zID0gcy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNbaV0gIT0gY2hhclZhbClcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBwb3MtLTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcyA9IHMuc3Vic3RyaW5nKDAsIHBvcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcztcbiAgICAgICAgfTtcbiAgICAgICAgU3RyaW5nV3JhcHBlci5yZXBsYWNlID0gZnVuY3Rpb24gKHMsIGZyb20sIHJlcGxhY2UpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoZnJvbSwgcmVwbGFjZSk7XG4gICAgICAgIH07XG4gICAgICAgIFN0cmluZ1dyYXBwZXIucmVwbGFjZUFsbCA9IGZ1bmN0aW9uIChzLCBmcm9tLCByZXBsYWNlKSB7XG4gICAgICAgICAgICByZXR1cm4gcy5yZXBsYWNlKGZyb20sIHJlcGxhY2UpO1xuICAgICAgICB9O1xuICAgICAgICBTdHJpbmdXcmFwcGVyLnNsaWNlID0gZnVuY3Rpb24gKHMsIGZyb20sIHRvKSB7XG4gICAgICAgICAgICBpZiAoZnJvbSA9PT0gdm9pZCAwKSB7IGZyb20gPSAwOyB9XG4gICAgICAgICAgICBpZiAodG8gPT09IHZvaWQgMCkgeyB0byA9IG51bGw7IH1cbiAgICAgICAgICAgIHJldHVybiBzLnNsaWNlKGZyb20sIHRvID09PSBudWxsID8gdW5kZWZpbmVkIDogdG8pO1xuICAgICAgICB9O1xuICAgICAgICBTdHJpbmdXcmFwcGVyLnJlcGxhY2VBbGxNYXBwZWQgPSBmdW5jdGlvbiAocywgZnJvbSwgY2IpIHtcbiAgICAgICAgICAgIHJldHVybiBzLnJlcGxhY2UoZnJvbSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICAgICAgbWF0Y2hlc1tfaSAtIDBdID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlIG9mZnNldCAmIHN0cmluZyBmcm9tIHRoZSByZXN1bHQgYXJyYXlcbiAgICAgICAgICAgICAgICBtYXRjaGVzLnNwbGljZSgtMiwgMik7XG4gICAgICAgICAgICAgICAgLy8gVGhlIGNhbGxiYWNrIHJlY2VpdmVzIG1hdGNoLCBwMSwgLi4uLCBwblxuICAgICAgICAgICAgICAgIHJldHVybiBjYihtYXRjaGVzKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBTdHJpbmdXcmFwcGVyLmNvbnRhaW5zID0gZnVuY3Rpb24gKHMsIHN1YnN0cikgeyByZXR1cm4gcy5pbmRleE9mKHN1YnN0cikgIT0gLTE7IH07XG4gICAgICAgIFN0cmluZ1dyYXBwZXIuY29tcGFyZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICBpZiAoYSA8IGIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChhID4gYikge1xuICAgICAgICAgICAgICAgIHJldHVybiAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBTdHJpbmdXcmFwcGVyO1xuICAgIH0oKSk7XG4gICAgdmFyIE51bWJlcldyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBOdW1iZXJXcmFwcGVyKCkge1xuICAgICAgICB9XG4gICAgICAgIE51bWJlcldyYXBwZXIudG9GaXhlZCA9IGZ1bmN0aW9uIChuLCBmcmFjdGlvbkRpZ2l0cykgeyByZXR1cm4gbi50b0ZpeGVkKGZyYWN0aW9uRGlnaXRzKTsgfTtcbiAgICAgICAgTnVtYmVyV3JhcHBlci5lcXVhbCA9IGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhID09PSBiOyB9O1xuICAgICAgICBOdW1iZXJXcmFwcGVyLnBhcnNlSW50QXV0b1JhZGl4ID0gZnVuY3Rpb24gKHRleHQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUludCh0ZXh0KTtcbiAgICAgICAgICAgIGlmIChpc05hTihyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIGludGVnZXIgbGl0ZXJhbCB3aGVuIHBhcnNpbmcgJyArIHRleHQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfTtcbiAgICAgICAgTnVtYmVyV3JhcHBlci5wYXJzZUludCA9IGZ1bmN0aW9uICh0ZXh0LCByYWRpeCkge1xuICAgICAgICAgICAgaWYgKHJhZGl4ID09IDEwKSB7XG4gICAgICAgICAgICAgICAgaWYgKC9eKFxcLXxcXCspP1swLTldKyQvLnRlc3QodGV4dCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KHRleHQsIHJhZGl4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChyYWRpeCA9PSAxNikge1xuICAgICAgICAgICAgICAgIGlmICgvXihcXC18XFwrKT9bMC05QUJDREVGYWJjZGVmXSskLy50ZXN0KHRleHQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXJzZUludCh0ZXh0LCByYWRpeCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHBhcnNlSW50KHRleHQsIHJhZGl4KTtcbiAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgaW50ZWdlciBsaXRlcmFsIHdoZW4gcGFyc2luZyAnICsgdGV4dCArICcgaW4gYmFzZSAnICsgcmFkaXgpO1xuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTnVtYmVyV3JhcHBlciwgXCJOYU5cIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBOYU47IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBOdW1iZXJXcmFwcGVyLmlzTnVtZXJpYyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm4gIWlzTmFOKHZhbHVlIC0gcGFyc2VGbG9hdCh2YWx1ZSkpOyB9O1xuICAgICAgICBOdW1iZXJXcmFwcGVyLmlzTmFOID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBpc05hTih2YWx1ZSk7IH07XG4gICAgICAgIE51bWJlcldyYXBwZXIuaXNJbnRlZ2VyID0gZnVuY3Rpb24gKHZhbHVlKSB7IHJldHVybiBOdW1iZXIuaXNJbnRlZ2VyKHZhbHVlKTsgfTtcbiAgICAgICAgcmV0dXJuIE51bWJlcldyYXBwZXI7XG4gICAgfSgpKTtcbiAgICAvLyBKUyBoYXMgTmFOICE9PSBOYU5cbiAgICBmdW5jdGlvbiBsb29zZUlkZW50aWNhbChhLCBiKSB7XG4gICAgICAgIHJldHVybiBhID09PSBiIHx8IHR5cGVvZiBhID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgYiA9PT0gJ251bWJlcicgJiYgaXNOYU4oYSkgJiYgaXNOYU4oYik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZUJvb2wob2JqKSB7XG4gICAgICAgIHJldHVybiBpc0JsYW5rKG9iaikgPyBmYWxzZSA6IG9iajtcbiAgICB9XG4gICAgZnVuY3Rpb24gaXNKc09iamVjdChvKSB7XG4gICAgICAgIHJldHVybiBvICE9PSBudWxsICYmICh0eXBlb2YgbyA9PT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgbyA9PT0gJ29iamVjdCcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBpc1ByaW1pdGl2ZShvYmopIHtcbiAgICAgICAgcmV0dXJuICFpc0pzT2JqZWN0KG9iaik7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGhhc0NvbnN0cnVjdG9yKHZhbHVlLCB0eXBlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZS5jb25zdHJ1Y3RvciA9PT0gdHlwZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCYXNlIGNsYXNzIGZvciBjb250cm9sIGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiBPbmx5IHVzZWQgaW50ZXJuYWxseSBpbiB0aGUgZm9ybXMgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUoKSB7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiY29udHJvbFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgdGhyb3cgbmV3IEVycm9yKCd1bmltcGxlbWVudGVkJyk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLnZhbHVlIDogbnVsbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInZhbGlkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wudmFsaWQgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiaW52YWxpZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLmludmFsaWQgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwicGVuZGluZ1wiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLnBlbmRpbmcgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZXJyb3JzXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC5lcnJvcnMgOiBudWxsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInByaXN0aW5lXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wucHJpc3RpbmUgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZGlydHlcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC5kaXJ0eSA6IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ0b3VjaGVkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wudG91Y2hlZCA6IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ1bnRvdWNoZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC51bnRvdWNoZWQgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBpc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC5kaXNhYmxlZCA6IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJlbmFibGVkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaXNQcmVzZW50KHRoaXMuY29udHJvbCkgPyB0aGlzLmNvbnRyb2wuZW5hYmxlZCA6IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJzdGF0dXNDaGFuZ2VzXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5jb250cm9sKSA/IHRoaXMuY29udHJvbC5zdGF0dXNDaGFuZ2VzIDogbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJ2YWx1ZUNoYW5nZXNcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLmNvbnRyb2wpID8gdGhpcy5jb250cm9sLnZhbHVlQ2hhbmdlcyA6IG51bGw7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwicGF0aFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IHZvaWQgMCkgeyB2YWx1ZSA9IHVuZGVmaW5lZDsgfVxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLmNvbnRyb2wpKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbC5yZXNldCh2YWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmU7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIEBsaWNlbnNlXG4gICAgICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICAgICAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB2YXIgX19leHRlbmRzJDEgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIGRpcmVjdGl2ZSB0aGF0IGNvbnRhaW5zIG11bHRpcGxlIHtAbGluayBOZ0NvbnRyb2x9cy5cbiAgICAgKlxuICAgICAqIE9ubHkgdXNlZCBieSB0aGUgZm9ybXMgbW9kdWxlLlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBDb250cm9sQ29udGFpbmVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzJDEoQ29udHJvbENvbnRhaW5lciwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQ29udHJvbENvbnRhaW5lcigpIHtcbiAgICAgICAgICAgIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb250cm9sQ29udGFpbmVyLnByb3RvdHlwZSwgXCJmb3JtRGlyZWN0aXZlXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBmb3JtIHRvIHdoaWNoIHRoaXMgY29udGFpbmVyIGJlbG9uZ3MuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb250cm9sQ29udGFpbmVyLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogR2V0IHRoZSBwYXRoIHRvIHRoaXMgY29udGFpbmVyLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQ29udHJvbENvbnRhaW5lcjtcbiAgICB9KEFic3RyYWN0Q29udHJvbERpcmVjdGl2ZSkpO1xuXG4gICAgdmFyIE1hcCQxID0gZ2xvYmFsJDEuTWFwO1xuICAgIHZhciBTZXQgPSBnbG9iYWwkMS5TZXQ7XG4gICAgLy8gU2FmYXJpIGFuZCBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgaXRlcmFibGUgcGFyYW1ldGVyIHRvIHRoZVxuICAgIC8vIE1hcCBjb25zdHJ1Y3Rvci4gIFdlIHdvcmsgYXJvdW5kIHRoYXQgYnkgbWFudWFsbHkgYWRkaW5nIHRoZSBpdGVtcy5cbiAgICB2YXIgY3JlYXRlTWFwRnJvbVBhaXJzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChuZXcgTWFwJDEoW1sxLCAyXV0pLnNpemUgPT09IDEpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlTWFwRnJvbVBhaXJzKHBhaXJzKSB7IHJldHVybiBuZXcgTWFwJDEocGFpcnMpOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hcEFuZFBvcHVsYXRlRnJvbVBhaXJzKHBhaXJzKSB7XG4gICAgICAgICAgICB2YXIgbWFwID0gbmV3IE1hcCQxKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHBhaXIgPSBwYWlyc1tpXTtcbiAgICAgICAgICAgICAgICBtYXAuc2V0KHBhaXJbMF0sIHBhaXJbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1hcDtcbiAgICAgICAgfTtcbiAgICB9KSgpO1xuICAgIHZhciBjcmVhdGVNYXBGcm9tTWFwID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmIChuZXcgTWFwJDEobmV3IE1hcCQxKCkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hcEZyb21NYXAobSkgeyByZXR1cm4gbmV3IE1hcCQxKG0pOyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZU1hcEFuZFBvcHVsYXRlRnJvbU1hcChtKSB7XG4gICAgICAgICAgICB2YXIgbWFwID0gbmV3IE1hcCQxKCk7XG4gICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgbWFwLnNldChrLCB2KTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gbWFwO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG4gICAgdmFyIF9jbGVhclZhbHVlcyA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICgobmV3IE1hcCQxKCkpLmtleXMoKS5uZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gX2NsZWFyVmFsdWVzKG0pIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5SXRlcmF0b3IgPSBtLmtleXMoKTtcbiAgICAgICAgICAgICAgICB2YXIgaztcbiAgICAgICAgICAgICAgICB3aGlsZSAoISgoayA9IGtleUl0ZXJhdG9yLm5leHQoKSkuZG9uZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbS5zZXQoay52YWx1ZSwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiBfY2xlYXJWYWx1ZXNXaXRoRm9yZUVhY2gobSkge1xuICAgICAgICAgICAgICAgIG0uZm9yRWFjaChmdW5jdGlvbiAodiwgaykgeyBtLnNldChrLCBudWxsKTsgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfSkoKTtcbiAgICAvLyBTYWZhcmkgZG9lc24ndCBpbXBsZW1lbnQgTWFwSXRlcmF0b3IubmV4dCgpLCB3aGljaCBpcyB1c2VkIGlzIFRyYWNldXIncyBwb2x5ZmlsbCBvZiBBcnJheS5mcm9tXG4gICAgLy8gVE9ETyhtbGF2YWwpOiByZW1vdmUgdGhlIHdvcmsgYXJvdW5kIG9uY2Ugd2UgaGF2ZSBhIHdvcmtpbmcgcG9seWZpbGwgb2YgQXJyYXkuZnJvbVxuICAgIHZhciBfYXJyYXlGcm9tTWFwID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICgobmV3IE1hcCQxKCkpLnZhbHVlcygpLm5leHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWFwKG0sIGdldFZhbHVlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZ2V0VmFsdWVzID8gQXJyYXkuZnJvbShtLnZhbHVlcygpKSA6IEFycmF5LmZyb20obS5rZXlzKCkpO1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlQXJyYXlGcm9tTWFwV2l0aEZvcmVhY2gobSwgZ2V0VmFsdWVzKSB7XG4gICAgICAgICAgICB2YXIgcmVzID0gTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplKG0uc2l6ZSksIGkgPSAwO1xuICAgICAgICAgICAgbS5mb3JFYWNoKGZ1bmN0aW9uICh2LCBrKSB7XG4gICAgICAgICAgICAgICAgcmVzW2ldID0gZ2V0VmFsdWVzID8gdiA6IGs7XG4gICAgICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgIH0pKCk7XG4gICAgdmFyIE1hcFdyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBNYXBXcmFwcGVyKCkge1xuICAgICAgICB9XG4gICAgICAgIE1hcFdyYXBwZXIuY2xvbmUgPSBmdW5jdGlvbiAobSkgeyByZXR1cm4gY3JlYXRlTWFwRnJvbU1hcChtKTsgfTtcbiAgICAgICAgTWFwV3JhcHBlci5jcmVhdGVGcm9tU3RyaW5nTWFwID0gZnVuY3Rpb24gKHN0cmluZ01hcCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBNYXAkMSgpO1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBzdHJpbmdNYXApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQuc2V0KHByb3AsIHN0cmluZ01hcFtwcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9O1xuICAgICAgICBNYXBXcmFwcGVyLnRvU3RyaW5nTWFwID0gZnVuY3Rpb24gKG0pIHtcbiAgICAgICAgICAgIHZhciByID0ge307XG4gICAgICAgICAgICBtLmZvckVhY2goZnVuY3Rpb24gKHYsIGspIHsgcmV0dXJuIHJba10gPSB2OyB9KTtcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICB9O1xuICAgICAgICBNYXBXcmFwcGVyLmNyZWF0ZUZyb21QYWlycyA9IGZ1bmN0aW9uIChwYWlycykgeyByZXR1cm4gY3JlYXRlTWFwRnJvbVBhaXJzKHBhaXJzKTsgfTtcbiAgICAgICAgTWFwV3JhcHBlci5jbGVhclZhbHVlcyA9IGZ1bmN0aW9uIChtKSB7IF9jbGVhclZhbHVlcyhtKTsgfTtcbiAgICAgICAgTWFwV3JhcHBlci5pdGVyYWJsZSA9IGZ1bmN0aW9uIChtKSB7IHJldHVybiBtOyB9O1xuICAgICAgICBNYXBXcmFwcGVyLmtleXMgPSBmdW5jdGlvbiAobSkgeyByZXR1cm4gX2FycmF5RnJvbU1hcChtLCBmYWxzZSk7IH07XG4gICAgICAgIE1hcFdyYXBwZXIudmFsdWVzID0gZnVuY3Rpb24gKG0pIHsgcmV0dXJuIF9hcnJheUZyb21NYXAobSwgdHJ1ZSk7IH07XG4gICAgICAgIHJldHVybiBNYXBXcmFwcGVyO1xuICAgIH0oKSk7XG4gICAgLyoqXG4gICAgICogV3JhcHMgSmF2YXNjcmlwdCBPYmplY3RzXG4gICAgICovXG4gICAgdmFyIFN0cmluZ01hcFdyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTdHJpbmdNYXBXcmFwcGVyKCkge1xuICAgICAgICB9XG4gICAgICAgIFN0cmluZ01hcFdyYXBwZXIuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gTm90ZTogV2UgYXJlIG5vdCB1c2luZyBPYmplY3QuY3JlYXRlKG51bGwpIGhlcmUgZHVlIHRvXG4gICAgICAgICAgICAvLyBwZXJmb3JtYW5jZSFcbiAgICAgICAgICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL25nMi1vYmplY3QtY3JlYXRlLW51bGxcbiAgICAgICAgICAgIHJldHVybiB7fTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5jb250YWlucyA9IGZ1bmN0aW9uIChtYXAsIGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpO1xuICAgICAgICB9O1xuICAgICAgICBTdHJpbmdNYXBXcmFwcGVyLmdldCA9IGZ1bmN0aW9uIChtYXAsIGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIG1hcC5oYXNPd25Qcm9wZXJ0eShrZXkpID8gbWFwW2tleV0gOiB1bmRlZmluZWQ7XG4gICAgICAgIH07XG4gICAgICAgIFN0cmluZ01hcFdyYXBwZXIuc2V0ID0gZnVuY3Rpb24gKG1hcCwga2V5LCB2YWx1ZSkgeyBtYXBba2V5XSA9IHZhbHVlOyB9O1xuICAgICAgICBTdHJpbmdNYXBXcmFwcGVyLmtleXMgPSBmdW5jdGlvbiAobWFwKSB7IHJldHVybiBPYmplY3Qua2V5cyhtYXApOyB9O1xuICAgICAgICBTdHJpbmdNYXBXcmFwcGVyLnZhbHVlcyA9IGZ1bmN0aW9uIChtYXApIHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyhtYXApLm1hcChmdW5jdGlvbiAoaykgeyByZXR1cm4gbWFwW2tdOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5pc0VtcHR5ID0gZnVuY3Rpb24gKG1hcCkge1xuICAgICAgICAgICAgZm9yICh2YXIgcHJvcCBpbiBtYXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5kZWxldGUgPSBmdW5jdGlvbiAobWFwLCBrZXkpIHsgZGVsZXRlIG1hcFtrZXldOyB9O1xuICAgICAgICBTdHJpbmdNYXBXcmFwcGVyLmZvckVhY2ggPSBmdW5jdGlvbiAobWFwLCBjYWxsYmFjaykge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IE9iamVjdC5rZXlzKG1hcCk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobWFwW2tdLCBrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5tZXJnZSA9IGZ1bmN0aW9uIChtMSwgbTIpIHtcbiAgICAgICAgICAgIHZhciBtID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXMobTEpOyBfaSA8IF9hLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgICAgIHZhciBrID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIG1ba10gPSBtMVtrXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gMCwgX2MgPSBPYmplY3Qua2V5cyhtMik7IF9iIDwgX2MubGVuZ3RoOyBfYisrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGsgPSBfY1tfYl07XG4gICAgICAgICAgICAgICAgbVtrXSA9IG0yW2tdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG07XG4gICAgICAgIH07XG4gICAgICAgIFN0cmluZ01hcFdyYXBwZXIuZXF1YWxzID0gZnVuY3Rpb24gKG0xLCBtMikge1xuICAgICAgICAgICAgdmFyIGsxID0gT2JqZWN0LmtleXMobTEpO1xuICAgICAgICAgICAgdmFyIGsyID0gT2JqZWN0LmtleXMobTIpO1xuICAgICAgICAgICAgaWYgKGsxLmxlbmd0aCAhPSBrMi5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGsxLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IGsxW2ldO1xuICAgICAgICAgICAgICAgIGlmIChtMVtrZXldICE9PSBtMltrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFN0cmluZ01hcFdyYXBwZXI7XG4gICAgfSgpKTtcbiAgICB2YXIgTGlzdFdyYXBwZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBMaXN0V3JhcHBlcigpIHtcbiAgICAgICAgfVxuICAgICAgICAvLyBKUyBoYXMgbm8gd2F5IHRvIGV4cHJlc3MgYSBzdGF0aWNhbGx5IGZpeGVkIHNpemUgbGlzdCwgYnV0IGRhcnQgZG9lcyBzbyB3ZVxuICAgICAgICAvLyBrZWVwIGJvdGggbWV0aG9kcy5cbiAgICAgICAgTGlzdFdyYXBwZXIuY3JlYXRlRml4ZWRTaXplID0gZnVuY3Rpb24gKHNpemUpIHsgcmV0dXJuIG5ldyBBcnJheShzaXplKTsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuY3JlYXRlR3Jvd2FibGVTaXplID0gZnVuY3Rpb24gKHNpemUpIHsgcmV0dXJuIG5ldyBBcnJheShzaXplKTsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuY2xvbmUgPSBmdW5jdGlvbiAoYXJyYXkpIHsgcmV0dXJuIGFycmF5LnNsaWNlKDApOyB9O1xuICAgICAgICBMaXN0V3JhcHBlci5mb3JFYWNoV2l0aEluZGV4ID0gZnVuY3Rpb24gKGFycmF5LCBmbikge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGZuKGFycmF5W2ldLCBpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuZmlyc3QgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIGlmICghYXJyYXkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlbMF07XG4gICAgICAgIH07XG4gICAgICAgIExpc3RXcmFwcGVyLmxhc3QgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIGlmICghYXJyYXkgfHwgYXJyYXkubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgICAgIH07XG4gICAgICAgIExpc3RXcmFwcGVyLmluZGV4T2YgPSBmdW5jdGlvbiAoYXJyYXksIHZhbHVlLCBzdGFydEluZGV4KSB7XG4gICAgICAgICAgICBpZiAoc3RhcnRJbmRleCA9PT0gdm9pZCAwKSB7IHN0YXJ0SW5kZXggPSAwOyB9XG4gICAgICAgICAgICByZXR1cm4gYXJyYXkuaW5kZXhPZih2YWx1ZSwgc3RhcnRJbmRleCk7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RXcmFwcGVyLmNvbnRhaW5zID0gZnVuY3Rpb24gKGxpc3QsIGVsKSB7IHJldHVybiBsaXN0LmluZGV4T2YoZWwpICE9PSAtMTsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIucmV2ZXJzZWQgPSBmdW5jdGlvbiAoYXJyYXkpIHtcbiAgICAgICAgICAgIHZhciBhID0gTGlzdFdyYXBwZXIuY2xvbmUoYXJyYXkpO1xuICAgICAgICAgICAgcmV0dXJuIGEucmV2ZXJzZSgpO1xuICAgICAgICB9O1xuICAgICAgICBMaXN0V3JhcHBlci5jb25jYXQgPSBmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5jb25jYXQoYik7IH07XG4gICAgICAgIExpc3RXcmFwcGVyLmluc2VydCA9IGZ1bmN0aW9uIChsaXN0LCBpbmRleCwgdmFsdWUpIHsgbGlzdC5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIucmVtb3ZlQXQgPSBmdW5jdGlvbiAobGlzdCwgaW5kZXgpIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBsaXN0W2luZGV4XTtcbiAgICAgICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIHJldHVybiByZXM7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RXcmFwcGVyLnJlbW92ZUFsbCA9IGZ1bmN0aW9uIChsaXN0LCBpdGVtcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpdGVtcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihpdGVtc1tpXSk7XG4gICAgICAgICAgICAgICAgbGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBMaXN0V3JhcHBlci5yZW1vdmUgPSBmdW5jdGlvbiAobGlzdCwgZWwpIHtcbiAgICAgICAgICAgIHZhciBpbmRleCA9IGxpc3QuaW5kZXhPZihlbCk7XG4gICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuY2xlYXIgPSBmdW5jdGlvbiAobGlzdCkgeyBsaXN0Lmxlbmd0aCA9IDA7IH07XG4gICAgICAgIExpc3RXcmFwcGVyLmlzRW1wdHkgPSBmdW5jdGlvbiAobGlzdCkgeyByZXR1cm4gbGlzdC5sZW5ndGggPT0gMDsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuZmlsbCA9IGZ1bmN0aW9uIChsaXN0LCB2YWx1ZSwgc3RhcnQsIGVuZCkge1xuICAgICAgICAgICAgaWYgKHN0YXJ0ID09PSB2b2lkIDApIHsgc3RhcnQgPSAwOyB9XG4gICAgICAgICAgICBpZiAoZW5kID09PSB2b2lkIDApIHsgZW5kID0gbnVsbDsgfVxuICAgICAgICAgICAgbGlzdC5maWxsKHZhbHVlLCBzdGFydCwgZW5kID09PSBudWxsID8gbGlzdC5sZW5ndGggOiBlbmQpO1xuICAgICAgICB9O1xuICAgICAgICBMaXN0V3JhcHBlci5lcXVhbHMgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgICAgICAgaWYgKGEubGVuZ3RoICE9IGIubGVuZ3RoKVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChhW2ldICE9PSBiW2ldKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuc2xpY2UgPSBmdW5jdGlvbiAobCwgZnJvbSwgdG8pIHtcbiAgICAgICAgICAgIGlmIChmcm9tID09PSB2b2lkIDApIHsgZnJvbSA9IDA7IH1cbiAgICAgICAgICAgIGlmICh0byA9PT0gdm9pZCAwKSB7IHRvID0gbnVsbDsgfVxuICAgICAgICAgICAgcmV0dXJuIGwuc2xpY2UoZnJvbSwgdG8gPT09IG51bGwgPyB1bmRlZmluZWQgOiB0byk7XG4gICAgICAgIH07XG4gICAgICAgIExpc3RXcmFwcGVyLnNwbGljZSA9IGZ1bmN0aW9uIChsLCBmcm9tLCBsZW5ndGgpIHsgcmV0dXJuIGwuc3BsaWNlKGZyb20sIGxlbmd0aCk7IH07XG4gICAgICAgIExpc3RXcmFwcGVyLnNvcnQgPSBmdW5jdGlvbiAobCwgY29tcGFyZUZuKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KGNvbXBhcmVGbikpIHtcbiAgICAgICAgICAgICAgICBsLnNvcnQoY29tcGFyZUZuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGwuc29ydCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBMaXN0V3JhcHBlci50b1N0cmluZyA9IGZ1bmN0aW9uIChsKSB7IHJldHVybiBsLnRvU3RyaW5nKCk7IH07XG4gICAgICAgIExpc3RXcmFwcGVyLnRvSlNPTiA9IGZ1bmN0aW9uIChsKSB7IHJldHVybiBKU09OLnN0cmluZ2lmeShsKTsgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIubWF4aW11bSA9IGZ1bmN0aW9uIChsaXN0LCBwcmVkaWNhdGUpIHtcbiAgICAgICAgICAgIGlmIChsaXN0Lmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc29sdXRpb24gPSBudWxsO1xuICAgICAgICAgICAgdmFyIG1heFZhbHVlID0gLUluZmluaXR5O1xuICAgICAgICAgICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxpc3QubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IGxpc3RbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChpc0JsYW5rKGNhbmRpZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBjYW5kaWRhdGVWYWx1ZSA9IHByZWRpY2F0ZShjYW5kaWRhdGUpO1xuICAgICAgICAgICAgICAgIGlmIChjYW5kaWRhdGVWYWx1ZSA+IG1heFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHNvbHV0aW9uID0gY2FuZGlkYXRlO1xuICAgICAgICAgICAgICAgICAgICBtYXhWYWx1ZSA9IGNhbmRpZGF0ZVZhbHVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzb2x1dGlvbjtcbiAgICAgICAgfTtcbiAgICAgICAgTGlzdFdyYXBwZXIuZmxhdHRlbiA9IGZ1bmN0aW9uIChsaXN0KSB7XG4gICAgICAgICAgICB2YXIgdGFyZ2V0ID0gW107XG4gICAgICAgICAgICBfZmxhdHRlbkFycmF5KGxpc3QsIHRhcmdldCk7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgICAgICB9O1xuICAgICAgICBMaXN0V3JhcHBlci5hZGRBbGwgPSBmdW5jdGlvbiAobGlzdCwgc291cmNlKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNvdXJjZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGxpc3QucHVzaChzb3VyY2VbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTGlzdFdyYXBwZXI7XG4gICAgfSgpKTtcbiAgICBmdW5jdGlvbiBfZmxhdHRlbkFycmF5KHNvdXJjZSwgdGFyZ2V0KSB7XG4gICAgICAgIGlmIChpc1ByZXNlbnQoc291cmNlKSkge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaXRlbSA9IHNvdXJjZVtpXTtcbiAgICAgICAgICAgICAgICBpZiAoaXNBcnJheShpdGVtKSkge1xuICAgICAgICAgICAgICAgICAgICBfZmxhdHRlbkFycmF5KGl0ZW0sIHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldDtcbiAgICB9XG4gICAgLy8gU2FmYXJpIGFuZCBJbnRlcm5ldCBFeHBsb3JlciBkbyBub3Qgc3VwcG9ydCB0aGUgaXRlcmFibGUgcGFyYW1ldGVyIHRvIHRoZVxuICAgIC8vIFNldCBjb25zdHJ1Y3Rvci4gIFdlIHdvcmsgYXJvdW5kIHRoYXQgYnkgbWFudWFsbHkgYWRkaW5nIHRoZSBpdGVtcy5cbiAgICB2YXIgY3JlYXRlU2V0RnJvbUxpc3QgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgdGVzdCA9IG5ldyBTZXQoWzEsIDIsIDNdKTtcbiAgICAgICAgaWYgKHRlc3Quc2l6ZSA9PT0gMykge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVNldEZyb21MaXN0KGxzdCkgeyByZXR1cm4gbmV3IFNldChsc3QpOyB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZVNldEFuZFBvcHVsYXRlRnJvbUxpc3QobHN0KSB7XG4gICAgICAgICAgICAgICAgdmFyIHJlcyA9IG5ldyBTZXQobHN0KTtcbiAgICAgICAgICAgICAgICBpZiAocmVzLnNpemUgIT09IGxzdC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcy5hZGQobHN0W2ldKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH0pKCk7XG5cbiAgICAvKipcbiAgICAgKiBQcm92aWRlcnMgZm9yIHZhbGlkYXRvcnMgdG8gYmUgdXNlZCBmb3Ige0BsaW5rIEZvcm1Db250cm9sfXMgaW4gYSBmb3JtLlxuICAgICAqXG4gICAgICogUHJvdmlkZSB0aGlzIHVzaW5nIGBtdWx0aTogdHJ1ZWAgdG8gYWRkIHZhbGlkYXRvcnMuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICoge0BleGFtcGxlIGNvcmUvZm9ybXMvdHMvbmdfdmFsaWRhdG9ycy9uZ192YWxpZGF0b3JzLnRzIHJlZ2lvbj0nbmdfdmFsaWRhdG9ycyd9XG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBOR19WQUxJREFUT1JTID0gbmV3IF9hbmd1bGFyX2NvcmUuT3BhcXVlVG9rZW4oJ05nVmFsaWRhdG9ycycpO1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVycyBmb3IgYXN5bmNocm9ub3VzIHZhbGlkYXRvcnMgdG8gYmUgdXNlZCBmb3Ige0BsaW5rIEZvcm1Db250cm9sfXNcbiAgICAgKiBpbiBhIGZvcm0uXG4gICAgICpcbiAgICAgKiBQcm92aWRlIHRoaXMgdXNpbmcgYG11bHRpOiB0cnVlYCB0byBhZGQgdmFsaWRhdG9ycy5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgTkdfVkFMSURBVE9SU30gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgKlxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgTkdfQVNZTkNfVkFMSURBVE9SUyA9IG5ldyBfYW5ndWxhcl9jb3JlLk9wYXF1ZVRva2VuKCdOZ0FzeW5jVmFsaWRhdG9ycycpO1xuICAgIC8qKlxuICAgICAqIFByb3ZpZGVzIGEgc2V0IG9mIHZhbGlkYXRvcnMgdXNlZCBieSBmb3JtIGNvbnRyb2xzLlxuICAgICAqXG4gICAgICogQSB2YWxpZGF0b3IgaXMgYSBmdW5jdGlvbiB0aGF0IHByb2Nlc3NlcyBhIHtAbGluayBGb3JtQ29udHJvbH0gb3IgY29sbGVjdGlvbiBvZlxuICAgICAqIGNvbnRyb2xzIGFuZCByZXR1cm5zIGEgbWFwIG9mIGVycm9ycy4gQSBudWxsIG1hcCBtZWFucyB0aGF0IHZhbGlkYXRpb24gaGFzIHBhc3NlZC5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogdmFyIGxvZ2luQ29udHJvbCA9IG5ldyBGb3JtQ29udHJvbChcIlwiLCBWYWxpZGF0b3JzLnJlcXVpcmVkKVxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBWYWxpZGF0b3JzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gVmFsaWRhdG9ycygpIHtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogVmFsaWRhdG9yIHRoYXQgcmVxdWlyZXMgY29udHJvbHMgdG8gaGF2ZSBhIG5vbi1lbXB0eSB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIFZhbGlkYXRvcnMucmVxdWlyZWQgPSBmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQmxhbmsoY29udHJvbC52YWx1ZSkgfHwgKGlzU3RyaW5nKGNvbnRyb2wudmFsdWUpICYmIGNvbnRyb2wudmFsdWUgPT0gJycpID9cbiAgICAgICAgICAgICAgICB7ICdyZXF1aXJlZCc6IHRydWUgfSA6XG4gICAgICAgICAgICAgICAgbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1pbmltdW0gbGVuZ3RoLlxuICAgICAgICAgKi9cbiAgICAgICAgVmFsaWRhdG9ycy5taW5MZW5ndGggPSBmdW5jdGlvbiAobWluTGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGNvbnRyb2wudmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYubGVuZ3RoIDwgbWluTGVuZ3RoID9cbiAgICAgICAgICAgICAgICAgICAgeyAnbWlubGVuZ3RoJzogeyAncmVxdWlyZWRMZW5ndGgnOiBtaW5MZW5ndGgsICdhY3R1YWxMZW5ndGgnOiB2Lmxlbmd0aCB9IH0gOlxuICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGNvbnRyb2xzIHRvIGhhdmUgYSB2YWx1ZSBvZiBhIG1heGltdW0gbGVuZ3RoLlxuICAgICAgICAgKi9cbiAgICAgICAgVmFsaWRhdG9ycy5tYXhMZW5ndGggPSBmdW5jdGlvbiAobWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGNvbnRyb2wudmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHYubGVuZ3RoID4gbWF4TGVuZ3RoID9cbiAgICAgICAgICAgICAgICAgICAgeyAnbWF4bGVuZ3RoJzogeyAncmVxdWlyZWRMZW5ndGgnOiBtYXhMZW5ndGgsICdhY3R1YWxMZW5ndGgnOiB2Lmxlbmd0aCB9IH0gOlxuICAgICAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZhbGlkYXRvciB0aGF0IHJlcXVpcmVzIGEgY29udHJvbCB0byBtYXRjaCBhIHJlZ2V4IHRvIGl0cyB2YWx1ZS5cbiAgICAgICAgICovXG4gICAgICAgIFZhbGlkYXRvcnMucGF0dGVybiA9IGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KFZhbGlkYXRvcnMucmVxdWlyZWQoY29udHJvbCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICB2YXIgcmVnZXggPSBuZXcgUmVnRXhwKFwiXlwiICsgcGF0dGVybiArIFwiJFwiKTtcbiAgICAgICAgICAgICAgICB2YXIgdiA9IGNvbnRyb2wudmFsdWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlZ2V4LnRlc3QodikgPyBudWxsIDpcbiAgICAgICAgICAgICAgICAgICAgeyAncGF0dGVybic6IHsgJ3JlcXVpcmVkUGF0dGVybic6IFwiXlwiICsgcGF0dGVybiArIFwiJFwiLCAnYWN0dWFsVmFsdWUnOiB2IH0gfTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOby1vcCB2YWxpZGF0b3IuXG4gICAgICAgICAqL1xuICAgICAgICBWYWxpZGF0b3JzLm51bGxWYWxpZGF0b3IgPSBmdW5jdGlvbiAoYykgeyByZXR1cm4gbnVsbDsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbXBvc2UgbXVsdGlwbGUgdmFsaWRhdG9ycyBpbnRvIGEgc2luZ2xlIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdW5pb25cbiAgICAgICAgICogb2YgdGhlIGluZGl2aWR1YWwgZXJyb3IgbWFwcy5cbiAgICAgICAgICovXG4gICAgICAgIFZhbGlkYXRvcnMuY29tcG9zZSA9IGZ1bmN0aW9uICh2YWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBpZiAoaXNCbGFuayh2YWxpZGF0b3JzKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIHZhciBwcmVzZW50VmFsaWRhdG9ycyA9IHZhbGlkYXRvcnMuZmlsdGVyKGlzUHJlc2VudCk7XG4gICAgICAgICAgICBpZiAocHJlc2VudFZhbGlkYXRvcnMubGVuZ3RoID09IDApXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX21lcmdlRXJyb3JzKF9leGVjdXRlVmFsaWRhdG9ycyhjb250cm9sLCBwcmVzZW50VmFsaWRhdG9ycykpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgVmFsaWRhdG9ycy5jb21wb3NlQXN5bmMgPSBmdW5jdGlvbiAodmFsaWRhdG9ycykge1xuICAgICAgICAgICAgaWYgKGlzQmxhbmsodmFsaWRhdG9ycykpXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB2YXIgcHJlc2VudFZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzLmZpbHRlcihpc1ByZXNlbnQpO1xuICAgICAgICAgICAgaWYgKHByZXNlbnRWYWxpZGF0b3JzLmxlbmd0aCA9PSAwKVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjb250cm9sKSB7XG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2VzID0gX2V4ZWN1dGVBc3luY1ZhbGlkYXRvcnMoY29udHJvbCwgcHJlc2VudFZhbGlkYXRvcnMpLm1hcChfY29udmVydFRvUHJvbWlzZSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKF9tZXJnZUVycm9ycyk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVmFsaWRhdG9ycztcbiAgICB9KCkpO1xuICAgIGZ1bmN0aW9uIF9jb252ZXJ0VG9Qcm9taXNlKG9iaikge1xuICAgICAgICByZXR1cm4gaXNQcm9taXNlKG9iaikgPyBvYmogOiByeGpzX29wZXJhdG9yX3RvUHJvbWlzZS50b1Byb21pc2UuY2FsbChvYmopO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZXhlY3V0ZVZhbGlkYXRvcnMoY29udHJvbCwgdmFsaWRhdG9ycykge1xuICAgICAgICByZXR1cm4gdmFsaWRhdG9ycy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHYoY29udHJvbCk7IH0pO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfZXhlY3V0ZUFzeW5jVmFsaWRhdG9ycyhjb250cm9sLCB2YWxpZGF0b3JzKSB7XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JzLm1hcChmdW5jdGlvbiAodikgeyByZXR1cm4gdihjb250cm9sKTsgfSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9tZXJnZUVycm9ycyhhcnJheU9mRXJyb3JzKSB7XG4gICAgICAgIHZhciByZXMgPSBhcnJheU9mRXJyb3JzLnJlZHVjZShmdW5jdGlvbiAocmVzLCBlcnJvcnMpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQoZXJyb3JzKSA/IFN0cmluZ01hcFdyYXBwZXIubWVyZ2UocmVzLCBlcnJvcnMpIDogcmVzO1xuICAgICAgICB9LCB7fSk7XG4gICAgICAgIHJldHVybiBTdHJpbmdNYXBXcmFwcGVyLmlzRW1wdHkocmVzKSA/IG51bGwgOiByZXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXNlZCB0byBwcm92aWRlIGEge0BsaW5rIENvbnRyb2xWYWx1ZUFjY2Vzc29yfSBmb3IgZm9ybSBjb250cm9scy5cbiAgICAgKlxuICAgICAqIFNlZSB7QGxpbmsgRGVmYXVsdFZhbHVlQWNjZXNzb3J9IGZvciBob3cgdG8gaW1wbGVtZW50IG9uZS5cbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIE5HX1ZBTFVFX0FDQ0VTU09SID0gbmV3IF9hbmd1bGFyX2NvcmUuT3BhcXVlVG9rZW4oJ05nVmFsdWVBY2Nlc3NvcicpO1xuXG4gICAgdmFyIENIRUNLQk9YX1ZBTFVFX0FDQ0VTU09SID0ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yOyB9KSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRoZSBhY2Nlc3NvciBmb3Igd3JpdGluZyBhIHZhbHVlIGFuZCBsaXN0ZW5pbmcgdG8gY2hhbmdlcyBvbiBhIGNoZWNrYm94IGlucHV0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiAgIyMjIEV4YW1wbGVcbiAgICAgKiAgYGBgXG4gICAgICogIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBuYW1lPVwicmVtZW1iZXJMb2dpblwiIG5nTW9kZWw+XG4gICAgICogIGBgYFxuICAgICAqXG4gICAgICogIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3NvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IoX3JlbmRlcmVyLCBfZWxlbWVudFJlZikge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50UmVmID0gX2VsZW1lbnRSZWY7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKF8pIHsgfTtcbiAgICAgICAgICAgIHRoaXMub25Ub3VjaGVkID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB9XG4gICAgICAgIENoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEVsZW1lbnRQcm9wZXJ0eSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjaGVja2VkJywgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uQ2hhbmdlID0gZnVuY3Rpb24gKGZuKSB7IHRoaXMub25DaGFuZ2UgPSBmbjsgfTtcbiAgICAgICAgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcbiAgICAgICAgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3Nvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnaW5wdXRbdHlwZT1jaGVja2JveF1bZm9ybUNvbnRyb2xOYW1lXSxpbnB1dFt0eXBlPWNoZWNrYm94XVtmb3JtQ29udHJvbF0saW5wdXRbdHlwZT1jaGVja2JveF1bbmdNb2RlbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC5jaGVja2VkKScsICcoYmx1ciknOiAnb25Ub3VjaGVkKCknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtDSEVDS0JPWF9WQUxVRV9BQ0NFU1NPUl1cbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkVsZW1lbnRSZWYsIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgREVGQVVMVF9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBfYW5ndWxhcl9jb3JlLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gRGVmYXVsdFZhbHVlQWNjZXNzb3I7IH0pLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIGRlZmF1bHQgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSB2YWx1ZSBhbmQgbGlzdGVuaW5nIHRvIGNoYW5nZXMgdGhhdCBpcyB1c2VkIGJ5IHRoZVxuICAgICAqIHtAbGluayBOZ01vZGVsfSwge0BsaW5rIEZvcm1Db250cm9sRGlyZWN0aXZlfSwgYW5kIHtAbGluayBGb3JtQ29udHJvbE5hbWV9IGRpcmVjdGl2ZXMuXG4gICAgICpcbiAgICAgKiAgIyMjIEV4YW1wbGVcbiAgICAgKiAgYGBgXG4gICAgICogIDxpbnB1dCB0eXBlPVwidGV4dFwiIG5hbWU9XCJzZWFyY2hRdWVyeVwiIG5nTW9kZWw+XG4gICAgICogIGBgYFxuICAgICAqXG4gICAgICogIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgRGVmYXVsdFZhbHVlQWNjZXNzb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBEZWZhdWx0VmFsdWVBY2Nlc3NvcihfcmVuZGVyZXIsIF9lbGVtZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBfZWxlbWVudFJlZjtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoXykgeyB9O1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIH1cbiAgICAgICAgRGVmYXVsdFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLndyaXRlVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBub3JtYWxpemVkVmFsdWUgPSBpc0JsYW5rKHZhbHVlKSA/ICcnIDogdmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAndmFsdWUnLCBub3JtYWxpemVkVmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICBEZWZhdWx0VmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLm9uQ2hhbmdlID0gZm47IH07XG4gICAgICAgIERlZmF1bHRWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uVG91Y2hlZCA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLm9uVG91Y2hlZCA9IGZuOyB9O1xuICAgICAgICBEZWZhdWx0VmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgRGVmYXVsdFZhbHVlQWNjZXNzb3IuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0Om5vdChbdHlwZT1jaGVja2JveF0pW2Zvcm1Db250cm9sTmFtZV0sdGV4dGFyZWFbZm9ybUNvbnRyb2xOYW1lXSxpbnB1dDpub3QoW3R5cGU9Y2hlY2tib3hdKVtmb3JtQ29udHJvbF0sdGV4dGFyZWFbZm9ybUNvbnRyb2xdLGlucHV0Om5vdChbdHlwZT1jaGVja2JveF0pW25nTW9kZWxdLHRleHRhcmVhW25nTW9kZWxdLFtuZ0RlZmF1bHRDb250cm9sXScsXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB2c2F2a2luIHJlcGxhY2UgdGhlIGFib3ZlIHNlbGVjdG9yIHdpdGggdGhlIG9uZSBiZWxvdyBpdCBvbmNlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zMDExIGlzIGltcGxlbWVudGVkXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWxlY3RvcjogJ1tuZ0NvbnRyb2xdLFtuZ01vZGVsXSxbbmdGb3JtQ29udHJvbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnKGlucHV0KSc6ICdvbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKScsICcoYmx1ciknOiAnb25Ub3VjaGVkKCknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtERUZBVUxUX1ZBTFVFX0FDQ0VTU09SXVxuICAgICAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIERlZmF1bHRWYWx1ZUFjY2Vzc29yLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkVsZW1lbnRSZWYsIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBEZWZhdWx0VmFsdWVBY2Nlc3NvcjtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIGZ1bmN0aW9uIG5vcm1hbGl6ZVZhbGlkYXRvcih2YWxpZGF0b3IpIHtcbiAgICAgICAgaWYgKHZhbGlkYXRvci52YWxpZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHZhbGlkYXRvci52YWxpZGF0ZShjKTsgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YWxpZGF0b3I7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gbm9ybWFsaXplQXN5bmNWYWxpZGF0b3IodmFsaWRhdG9yKSB7XG4gICAgICAgIGlmICh2YWxpZGF0b3IudmFsaWRhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjKSB7IHJldHVybiB2YWxpZGF0b3IudmFsaWRhdGUoYyk7IH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsaWRhdG9yO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIE5VTUJFUl9WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBfYW5ndWxhcl9jb3JlLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gTnVtYmVyVmFsdWVBY2Nlc3NvcjsgfSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGUgYWNjZXNzb3IgZm9yIHdyaXRpbmcgYSBudW1iZXIgdmFsdWUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAgICAgKiB7QGxpbmsgTmdNb2RlbH0sIHtAbGluayBGb3JtQ29udHJvbERpcmVjdGl2ZX0sIGFuZCB7QGxpbmsgRm9ybUNvbnRyb2xOYW1lfSBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogICMjIyBFeGFtcGxlXG4gICAgICogIGBgYFxuICAgICAqICA8aW5wdXQgdHlwZT1cIm51bWJlclwiIFsobmdNb2RlbCldPVwiYWdlXCI+XG4gICAgICogIGBgYFxuICAgICAqL1xuICAgIHZhciBOdW1iZXJWYWx1ZUFjY2Vzc29yID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gTnVtYmVyVmFsdWVBY2Nlc3NvcihfcmVuZGVyZXIsIF9lbGVtZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBfZWxlbWVudFJlZjtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoXykgeyB9O1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIH1cbiAgICAgICAgTnVtYmVyVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgLy8gVGhlIHZhbHVlIG5lZWRzIHRvIGJlIG5vcm1hbGl6ZWQgZm9yIElFOSwgb3RoZXJ3aXNlIGl0IGlzIHNldCB0byAnbnVsbCcgd2hlbiBudWxsXG4gICAgICAgICAgICB2YXIgbm9ybWFsaXplZFZhbHVlID0gaXNCbGFuayh2YWx1ZSkgPyAnJyA6IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFByb3BlcnR5KHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgbm9ybWFsaXplZFZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgTnVtYmVyVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgICAgdGhpcy5vbkNoYW5nZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyBmbih2YWx1ZSA9PSAnJyA/IG51bGwgOiBwYXJzZUZsb2F0KHZhbHVlKSk7IH07XG4gICAgICAgIH07XG4gICAgICAgIE51bWJlclZhbHVlQWNjZXNzb3IucHJvdG90eXBlLnJlZ2lzdGVyT25Ub3VjaGVkID0gZnVuY3Rpb24gKGZuKSB7IHRoaXMub25Ub3VjaGVkID0gZm47IH07XG4gICAgICAgIE51bWJlclZhbHVlQWNjZXNzb3IucHJvdG90eXBlLnNldERpc2FibGVkU3RhdGUgPSBmdW5jdGlvbiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFByb3BlcnR5KHRoaXMuX2VsZW1lbnRSZWYubmF0aXZlRWxlbWVudCwgJ2Rpc2FibGVkJywgaXNEaXNhYmxlZCk7XG4gICAgICAgIH07XG4gICAgICAgIE51bWJlclZhbHVlQWNjZXNzb3IuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0W3R5cGU9bnVtYmVyXVtmb3JtQ29udHJvbE5hbWVdLGlucHV0W3R5cGU9bnVtYmVyXVtmb3JtQ29udHJvbF0saW5wdXRbdHlwZT1udW1iZXJdW25nTW9kZWxdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICcoaW5wdXQpJzogJ29uQ2hhbmdlKCRldmVudC50YXJnZXQudmFsdWUpJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW05VTUJFUl9WQUxVRV9BQ0NFU1NPUl1cbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOdW1iZXJWYWx1ZUFjY2Vzc29yLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkVsZW1lbnRSZWYsIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBOdW1iZXJWYWx1ZUFjY2Vzc29yO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBAbGljZW5zZVxuICAgICAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgICAqXG4gICAgICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gICAgICovXG4gICAgdmFyIF9fZXh0ZW5kcyQyID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG4gICAgZnVuY3Rpb24gdW5pbXBsZW1lbnRlZCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bmltcGxlbWVudGVkJyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEEgYmFzZSBjbGFzcyB0aGF0IGFsbCBjb250cm9sIGRpcmVjdGl2ZSBleHRlbmQuXG4gICAgICogSXQgYmluZHMgYSB7QGxpbmsgRm9ybUNvbnRyb2x9IG9iamVjdCB0byBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogVXNlZCBpbnRlcm5hbGx5IGJ5IEFuZ3VsYXIgZm9ybXMuXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIE5nQ29udHJvbCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyQyKE5nQ29udHJvbCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTmdDb250cm9sKCkge1xuICAgICAgICAgICAgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMudmFsdWVBY2Nlc3NvciA9IG51bGw7XG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgICAgICB0aGlzLl9yYXdWYWxpZGF0b3JzID0gW107XG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgICAgICB0aGlzLl9yYXdBc3luY1ZhbGlkYXRvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sLnByb3RvdHlwZSwgXCJ2YWxpZGF0b3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmltcGxlbWVudGVkKCk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdDb250cm9sLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuaW1wbGVtZW50ZWQoKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBOZ0NvbnRyb2w7XG4gICAgfShBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmUpKTtcblxuICAgIHZhciBSQURJT19WQUxVRV9BQ0NFU1NPUiA9IHtcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXG4gICAgICAgIHVzZUV4aXN0aW5nOiBfYW5ndWxhcl9jb3JlLmZvcndhcmRSZWYoZnVuY3Rpb24gKCkgeyByZXR1cm4gUmFkaW9Db250cm9sVmFsdWVBY2Nlc3NvcjsgfSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBjbGFzcyB1c2VkIGJ5IEFuZ3VsYXIgdG8gdW5jaGVjayByYWRpbyBidXR0b25zIHdpdGggdGhlIG1hdGNoaW5nIG5hbWUuXG4gICAgICovXG4gICAgdmFyIFJhZGlvQ29udHJvbFJlZ2lzdHJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUmFkaW9Db250cm9sUmVnaXN0cnkoKSB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NvcnMgPSBbXTtcbiAgICAgICAgfVxuICAgICAgICBSYWRpb0NvbnRyb2xSZWdpc3RyeS5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKGNvbnRyb2wsIGFjY2Vzc29yKSB7XG4gICAgICAgICAgICB0aGlzLl9hY2Nlc3NvcnMucHVzaChbY29udHJvbCwgYWNjZXNzb3JdKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sUmVnaXN0cnkucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uIChhY2Nlc3Nvcikge1xuICAgICAgICAgICAgdmFyIGluZGV4VG9SZW1vdmUgPSAtMTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fYWNjZXNzb3JzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FjY2Vzc29yc1tpXVsxXSA9PT0gYWNjZXNzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhUb1JlbW92ZSA9IGk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgTGlzdFdyYXBwZXIucmVtb3ZlQXQodGhpcy5fYWNjZXNzb3JzLCBpbmRleFRvUmVtb3ZlKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sUmVnaXN0cnkucHJvdG90eXBlLnNlbGVjdCA9IGZ1bmN0aW9uIChhY2Nlc3Nvcikge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX2FjY2Vzc29ycy5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLl9pc1NhbWVHcm91cChjLCBhY2Nlc3NvcikgJiYgY1sxXSAhPT0gYWNjZXNzb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgY1sxXS5maXJlVW5jaGVjayhhY2Nlc3Nvci52YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFJhZGlvQ29udHJvbFJlZ2lzdHJ5LnByb3RvdHlwZS5faXNTYW1lR3JvdXAgPSBmdW5jdGlvbiAoY29udHJvbFBhaXIsIGFjY2Vzc29yKSB7XG4gICAgICAgICAgICBpZiAoIWNvbnRyb2xQYWlyWzBdLmNvbnRyb2wpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xQYWlyWzBdLl9wYXJlbnQgPT09IGFjY2Vzc29yLl9jb250cm9sLl9wYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBjb250cm9sUGFpclsxXS5uYW1lID09PSBhY2Nlc3Nvci5uYW1lO1xuICAgICAgICB9O1xuICAgICAgICBSYWRpb0NvbnRyb2xSZWdpc3RyeS5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIFJhZGlvQ29udHJvbFJlZ2lzdHJ5LmN0b3JQYXJhbWV0ZXJzID0gW107XG4gICAgICAgIHJldHVybiBSYWRpb0NvbnRyb2xSZWdpc3RyeTtcbiAgICB9KCkpO1xuICAgIC8qKlxuICAgICAqIFRoZSBhY2Nlc3NvciBmb3Igd3JpdGluZyBhIHJhZGlvIGNvbnRyb2wgdmFsdWUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIHRoYXQgaXMgdXNlZCBieSB0aGVcbiAgICAgKiB7QGxpbmsgTmdNb2RlbH0sIHtAbGluayBGb3JtQ29udHJvbERpcmVjdGl2ZX0sIGFuZCB7QGxpbmsgRm9ybUNvbnRyb2xOYW1lfSBkaXJlY3RpdmVzLlxuICAgICAqXG4gICAgICogICMjIyBFeGFtcGxlXG4gICAgICogIGBgYFxuICAgICAqICBAQ29tcG9uZW50KHtcbiAgICAgKiAgICB0ZW1wbGF0ZTogYFxuICAgICAqICAgICAgPGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJmb29kXCIgWyhuZ01vZGVsKV09XCJmb29kXCIgdmFsdWU9XCJjaGlja2VuXCI+XG4gICAgICogICAgICA8aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cImZvb2RcIiBbKG5nTW9kZWwpXT1cImZvb2RcIiB2YWx1ZT1cImZpc2hcIj5cbiAgICAgKiAgICBgXG4gICAgICogIH0pXG4gICAgICogIGNsYXNzIEZvb2RDbXAge1xuICAgICAqICAgIGZvb2QgPSAnY2hpY2tlbic7XG4gICAgICogIH1cbiAgICAgKiAgYGBgXG4gICAgICovXG4gICAgdmFyIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBSYWRpb0NvbnRyb2xWYWx1ZUFjY2Vzc29yKF9yZW5kZXJlciwgX2VsZW1lbnRSZWYsIF9yZWdpc3RyeSwgX2luamVjdG9yKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBfZWxlbWVudFJlZjtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdHJ5ID0gX3JlZ2lzdHJ5O1xuICAgICAgICAgICAgdGhpcy5faW5qZWN0b3IgPSBfaW5qZWN0b3I7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIH1cbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sID0gdGhpcy5faW5qZWN0b3IuZ2V0KE5nQ29udHJvbCk7XG4gICAgICAgICAgICB0aGlzLl9jaGVja05hbWUoKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdHJ5LmFkZCh0aGlzLl9jb250cm9sLCB0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7IHRoaXMuX3JlZ2lzdHJ5LnJlbW92ZSh0aGlzKTsgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fc3RhdGUgPSB2YWx1ZSA9PT0gdGhpcy52YWx1ZTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEVsZW1lbnRQcm9wZXJ0eSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICdjaGVja2VkJywgdGhpcy5fc3RhdGUpO1xuICAgICAgICB9O1xuICAgICAgICBSYWRpb0NvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uQ2hhbmdlID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5fZm4gPSBmbjtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgZm4oX3RoaXMudmFsdWUpO1xuICAgICAgICAgICAgICAgIF90aGlzLl9yZWdpc3RyeS5zZWxlY3QoX3RoaXMpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuZmlyZVVuY2hlY2sgPSBmdW5jdGlvbiAodmFsdWUpIHsgdGhpcy53cml0ZVZhbHVlKHZhbHVlKTsgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuX2NoZWNrTmFtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm5hbWUgJiYgdGhpcy5mb3JtQ29udHJvbE5hbWUgJiYgdGhpcy5uYW1lICE9PSB0aGlzLmZvcm1Db250cm9sTmFtZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Rocm93TmFtZUVycm9yKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIXRoaXMubmFtZSAmJiB0aGlzLmZvcm1Db250cm9sTmFtZSlcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmZvcm1Db250cm9sTmFtZTtcbiAgICAgICAgfTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuX3Rocm93TmFtZUVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxuICAgICAgSWYgeW91IGRlZmluZSBib3RoIGEgbmFtZSBhbmQgYSBmb3JtQ29udHJvbE5hbWUgYXR0cmlidXRlIG9uIHlvdXIgcmFkaW8gYnV0dG9uLCB0aGVpciB2YWx1ZXNcXG4gICAgICBtdXN0IG1hdGNoLiBFeDogPGlucHV0IHR5cGU9XFxcInJhZGlvXFxcIiBmb3JtQ29udHJvbE5hbWU9XFxcImZvb2RcXFwiIG5hbWU9XFxcImZvb2RcXFwiPlxcbiAgICBcIik7XG4gICAgICAgIH07XG4gICAgICAgIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ2lucHV0W3R5cGU9cmFkaW9dW2Zvcm1Db250cm9sTmFtZV0saW5wdXRbdHlwZT1yYWRpb11bZm9ybUNvbnRyb2xdLGlucHV0W3R5cGU9cmFkaW9dW25nTW9kZWxdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJyhjaGFuZ2UpJzogJ29uQ2hhbmdlKCknLCAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbUkFESU9fVkFMVUVfQUNDRVNTT1JdXG4gICAgICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5jdG9yUGFyYW1ldGVycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5SZW5kZXJlciwgfSxcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5FbGVtZW50UmVmLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBSYWRpb0NvbnRyb2xSZWdpc3RyeSwgfSxcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3RvciwgfSxcbiAgICAgICAgXTtcbiAgICAgICAgUmFkaW9Db250cm9sVmFsdWVBY2Nlc3Nvci5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgICAgICduYW1lJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCB9LF0sXG4gICAgICAgICAgICAnZm9ybUNvbnRyb2xOYW1lJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCB9LF0sXG4gICAgICAgICAgICAndmFsdWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0IH0sXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3I7XG4gICAgfSgpKTtcblxuICAgIHZhciBTRUxFQ1RfVkFMVUVfQUNDRVNTT1IgPSB7XG4gICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yOyB9KSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIF9idWlsZFZhbHVlU3RyaW5nKGlkLCB2YWx1ZSkge1xuICAgICAgICBpZiAoaXNCbGFuayhpZCkpXG4gICAgICAgICAgICByZXR1cm4gXCJcIiArIHZhbHVlO1xuICAgICAgICBpZiAoIWlzUHJpbWl0aXZlKHZhbHVlKSlcbiAgICAgICAgICAgIHZhbHVlID0gJ09iamVjdCc7XG4gICAgICAgIHJldHVybiBTdHJpbmdXcmFwcGVyLnNsaWNlKGlkICsgXCI6IFwiICsgdmFsdWUsIDAsIDUwKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX2V4dHJhY3RJZCh2YWx1ZVN0cmluZykge1xuICAgICAgICByZXR1cm4gdmFsdWVTdHJpbmcuc3BsaXQoJzonKVswXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGFjY2Vzc29yIGZvciB3cml0aW5nIGEgdmFsdWUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIG9uIGEgc2VsZWN0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBOb3RlOiBXZSBoYXZlIHRvIGxpc3RlbiB0byB0aGUgJ2NoYW5nZScgZXZlbnQgYmVjYXVzZSAnaW5wdXQnIGV2ZW50cyBhcmVuJ3QgZmlyZWRcbiAgICAgKiBmb3Igc2VsZWN0cyBpbiBGaXJlZm94IGFuZCBJRTpcbiAgICAgKiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD0xMDI0MzUwXG4gICAgICogaHR0cHM6Ly9kZXZlbG9wZXIubWljcm9zb2Z0LmNvbS9lbi11cy9taWNyb3NvZnQtZWRnZS9wbGF0Zm9ybS9pc3N1ZXMvNDY2MDA0NS9cbiAgICAgKlxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvcihfcmVuZGVyZXIsIF9lbGVtZW50UmVmKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRSZWYgPSBfZWxlbWVudFJlZjtcbiAgICAgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgICAgIHRoaXMuX29wdGlvbk1hcCA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgICAgIHRoaXMuX2lkQ291bnRlciA9IDA7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKF8pIHsgfTtcbiAgICAgICAgICAgIHRoaXMub25Ub3VjaGVkID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgICAgICB9XG4gICAgICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS53cml0ZVZhbHVlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICB2YXIgdmFsdWVTdHJpbmcgPSBfYnVpbGRWYWx1ZVN0cmluZyh0aGlzLl9nZXRPcHRpb25JZCh2YWx1ZSksIHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEVsZW1lbnRQcm9wZXJ0eSh0aGlzLl9lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQsICd2YWx1ZScsIHZhbHVlU3RyaW5nKTtcbiAgICAgICAgfTtcbiAgICAgICAgU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLnJlZ2lzdGVyT25DaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKHZhbHVlU3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudmFsdWUgPSB2YWx1ZVN0cmluZztcbiAgICAgICAgICAgICAgICBmbihfdGhpcy5fZ2V0T3B0aW9uVmFsdWUodmFsdWVTdHJpbmcpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5yZWdpc3Rlck9uVG91Y2hlZCA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLm9uVG91Y2hlZCA9IGZuOyB9O1xuICAgICAgICBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuX3JlZ2lzdGVyT3B0aW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gKHRoaXMuX2lkQ291bnRlcisrKS50b1N0cmluZygpOyB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fZ2V0T3B0aW9uSWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBNYXBXcmFwcGVyLmtleXModGhpcy5fb3B0aW9uTWFwKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKGxvb3NlSWRlbnRpY2FsKHRoaXMuX29wdGlvbk1hcC5nZXQoaWQpLCB2YWx1ZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fZ2V0T3B0aW9uVmFsdWUgPSBmdW5jdGlvbiAodmFsdWVTdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX29wdGlvbk1hcC5nZXQoX2V4dHJhY3RJZCh2YWx1ZVN0cmluZykpO1xuICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh2YWx1ZSkgPyB2YWx1ZSA6IHZhbHVlU3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3Nvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnc2VsZWN0Om5vdChbbXVsdGlwbGVdKVtmb3JtQ29udHJvbE5hbWVdLHNlbGVjdDpub3QoW211bHRpcGxlXSlbZm9ybUNvbnRyb2xdLHNlbGVjdDpub3QoW211bHRpcGxlXSlbbmdNb2RlbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnKGNoYW5nZSknOiAnb25DaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLCAnKGJsdXIpJzogJ29uVG91Y2hlZCgpJyB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbU0VMRUNUX1ZBTFVFX0FDQ0VTU09SXVxuICAgICAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkVsZW1lbnRSZWYsIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvcjtcbiAgICB9KCkpO1xuICAgIC8qKlxuICAgICAqIE1hcmtzIGA8b3B0aW9uPmAgYXMgZHluYW1pYywgc28gQW5ndWxhciBjYW4gYmUgbm90aWZpZWQgd2hlbiBvcHRpb25zIGNoYW5nZS5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8c2VsZWN0IG5hbWU9XCJjaXR5XCIgbmdNb2RlbD5cbiAgICAgKiAgIDxvcHRpb24gKm5nRm9yPVwibGV0IGMgb2YgY2l0aWVzXCIgW3ZhbHVlXT1cImNcIj48L29wdGlvbj5cbiAgICAgKiA8L3NlbGVjdD5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgTmdTZWxlY3RPcHRpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBOZ1NlbGVjdE9wdGlvbihfZWxlbWVudCwgX3JlbmRlcmVyLCBfc2VsZWN0KSB7XG4gICAgICAgICAgICB0aGlzLl9lbGVtZW50ID0gX2VsZW1lbnQ7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IF9yZW5kZXJlcjtcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdCA9IF9zZWxlY3Q7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3NlbGVjdCkpXG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuX3NlbGVjdC5fcmVnaXN0ZXJPcHRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdTZWxlY3RPcHRpb24ucHJvdG90eXBlLCBcIm5nVmFsdWVcIiwge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3QuX29wdGlvbk1hcC5zZXQodGhpcy5pZCwgdmFsdWUpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEVsZW1lbnRWYWx1ZShfYnVpbGRWYWx1ZVN0cmluZyh0aGlzLmlkLCB2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdC53cml0ZVZhbHVlKHRoaXMuX3NlbGVjdC52YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nU2VsZWN0T3B0aW9uLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9zZWxlY3QpKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Qud3JpdGVWYWx1ZSh0aGlzLl9zZWxlY3QudmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgTmdTZWxlY3RPcHRpb24ucHJvdG90eXBlLl9zZXRFbGVtZW50VmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLnNldEVsZW1lbnRQcm9wZXJ0eSh0aGlzLl9lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsICd2YWx1ZScsIHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgTmdTZWxlY3RPcHRpb24ucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9zZWxlY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0Ll9vcHRpb25NYXAuZGVsZXRlKHRoaXMuaWQpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdC53cml0ZVZhbHVlKHRoaXMuX3NlbGVjdC52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE5nU2VsZWN0T3B0aW9uLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ29wdGlvbicgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOZ1NlbGVjdE9wdGlvbi5jdG9yUGFyYW1ldGVycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5FbGVtZW50UmVmLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlJlbmRlcmVyLCB9LFxuICAgICAgICAgICAgeyB0eXBlOiBTZWxlY3RDb250cm9sVmFsdWVBY2Nlc3NvciwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSG9zdCB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgTmdTZWxlY3RPcHRpb24ucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICAgICAnbmdWYWx1ZSc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQsIGFyZ3M6IFsnbmdWYWx1ZScsXSB9LF0sXG4gICAgICAgICAgICAndmFsdWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ3ZhbHVlJyxdIH0sXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE5nU2VsZWN0T3B0aW9uO1xuICAgIH0oKSk7XG5cbiAgICB2YXIgU0VMRUNUX01VTFRJUExFX1ZBTFVFX0FDQ0VTU09SID0ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yOyB9KSxcbiAgICAgICAgbXVsdGk6IHRydWVcbiAgICB9O1xuICAgIGZ1bmN0aW9uIF9idWlsZFZhbHVlU3RyaW5nJDEoaWQsIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0JsYW5rKGlkKSlcbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgdmFsdWU7XG4gICAgICAgIGlmIChpc1N0cmluZyh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9IFwiJ1wiICsgdmFsdWUgKyBcIidcIjtcbiAgICAgICAgaWYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkpXG4gICAgICAgICAgICB2YWx1ZSA9ICdPYmplY3QnO1xuICAgICAgICByZXR1cm4gU3RyaW5nV3JhcHBlci5zbGljZShpZCArIFwiOiBcIiArIHZhbHVlLCAwLCA1MCk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIF9leHRyYWN0SWQkMSh2YWx1ZVN0cmluZykge1xuICAgICAgICByZXR1cm4gdmFsdWVTdHJpbmcuc3BsaXQoJzonKVswXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIGFjY2Vzc29yIGZvciB3cml0aW5nIGEgdmFsdWUgYW5kIGxpc3RlbmluZyB0byBjaGFuZ2VzIG9uIGEgc2VsZWN0IGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIFNlbGVjdE11bHRpcGxlQ29udHJvbFZhbHVlQWNjZXNzb3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yKF9yZW5kZXJlciwgX2VsZW1lbnRSZWYpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyID0gX3JlbmRlcmVyO1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudFJlZiA9IF9lbGVtZW50UmVmO1xuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICAgICAgdGhpcy5fb3B0aW9uTWFwID0gbmV3IE1hcCgpO1xuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICAgICAgdGhpcy5faWRDb3VudGVyID0gMDtcbiAgICAgICAgICAgIHRoaXMub25DaGFuZ2UgPSBmdW5jdGlvbiAoXykgeyB9O1xuICAgICAgICAgICAgdGhpcy5vblRvdWNoZWQgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIH1cbiAgICAgICAgU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUud3JpdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHZhciB2YWx1ZXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIGNvbnZlcnQgdmFsdWVzIHRvIGlkc1xuICAgICAgICAgICAgdmFyIGlkcyA9IHZhbHVlcy5tYXAoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIF90aGlzLl9nZXRPcHRpb25JZCh2KTsgfSk7XG4gICAgICAgICAgICB0aGlzLl9vcHRpb25NYXAuZm9yRWFjaChmdW5jdGlvbiAob3B0LCBvKSB7IG9wdC5fc2V0U2VsZWN0ZWQoaWRzLmluZGV4T2Yoby50b1N0cmluZygpKSA+IC0xKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIFNlbGVjdE11bHRpcGxlQ29udHJvbFZhbHVlQWNjZXNzb3IucHJvdG90eXBlLnJlZ2lzdGVyT25DaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAoXy5oYXNPd25Qcm9wZXJ0eSgnc2VsZWN0ZWRPcHRpb25zJykpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSBfLnNlbGVjdGVkT3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0ID0gb3B0aW9ucy5pdGVtKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbCA9IF90aGlzLl9nZXRPcHRpb25WYWx1ZShvcHQudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQucHVzaCh2YWwpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9ucyA9IF8ub3B0aW9ucztcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0ID0gb3B0aW9ucy5pdGVtKGkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdC5zZWxlY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWwgPSBfdGhpcy5fZ2V0T3B0aW9uVmFsdWUob3B0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5wdXNoKHZhbCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZm4oc2VsZWN0ZWQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfTtcbiAgICAgICAgU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUucmVnaXN0ZXJPblRvdWNoZWQgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5vblRvdWNoZWQgPSBmbjsgfTtcbiAgICAgICAgU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3Nvci5wcm90b3R5cGUuc2V0RGlzYWJsZWRTdGF0ZSA9IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5zZXRFbGVtZW50UHJvcGVydHkodGhpcy5fZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCAnZGlzYWJsZWQnLCBpc0Rpc2FibGVkKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fcmVnaXN0ZXJPcHRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBpZCA9ICh0aGlzLl9pZENvdW50ZXIrKykudG9TdHJpbmcoKTtcbiAgICAgICAgICAgIHRoaXMuX29wdGlvbk1hcC5zZXQoaWQsIHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiBpZDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fZ2V0T3B0aW9uSWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pID0gMCwgX2EgPSBNYXBXcmFwcGVyLmtleXModGhpcy5fb3B0aW9uTWFwKTsgX2kgPCBfYS5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgaWQgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKGxvb3NlSWRlbnRpY2FsKHRoaXMuX29wdGlvbk1hcC5nZXQoaWQpLl92YWx1ZSwgdmFsdWUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yLnByb3RvdHlwZS5fZ2V0T3B0aW9uVmFsdWUgPSBmdW5jdGlvbiAodmFsdWVTdHJpbmcpIHtcbiAgICAgICAgICAgIHZhciBvcHQgPSB0aGlzLl9vcHRpb25NYXAuZ2V0KF9leHRyYWN0SWQkMSh2YWx1ZVN0cmluZykpO1xuICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudChvcHQpID8gb3B0Ll92YWx1ZSA6IHZhbHVlU3RyaW5nO1xuICAgICAgICB9O1xuICAgICAgICBTZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdzZWxlY3RbbXVsdGlwbGVdW2Zvcm1Db250cm9sTmFtZV0sc2VsZWN0W211bHRpcGxlXVtmb3JtQ29udHJvbF0sc2VsZWN0W211bHRpcGxlXVtuZ01vZGVsXScsXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0OiB7ICcoY2hhbmdlKSc6ICdvbkNoYW5nZSgkZXZlbnQudGFyZ2V0KScsICcoYmx1ciknOiAnb25Ub3VjaGVkKCknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtTRUxFQ1RfTVVMVElQTEVfVkFMVUVfQUNDRVNTT1JdXG4gICAgICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICAgICAgU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3Nvci5jdG9yUGFyYW1ldGVycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5SZW5kZXJlciwgfSxcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5FbGVtZW50UmVmLCB9LFxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3NvcjtcbiAgICB9KCkpO1xuICAgIC8qKlxuICAgICAqIE1hcmtzIGA8b3B0aW9uPmAgYXMgZHluYW1pYywgc28gQW5ndWxhciBjYW4gYmUgbm90aWZpZWQgd2hlbiBvcHRpb25zIGNoYW5nZS5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8c2VsZWN0IG11bHRpcGxlIG5hbWU9XCJjaXR5XCIgbmdNb2RlbD5cbiAgICAgKiAgIDxvcHRpb24gKm5nRm9yPVwibGV0IGMgb2YgY2l0aWVzXCIgW3ZhbHVlXT1cImNcIj48L29wdGlvbj5cbiAgICAgKiA8L3NlbGVjdD5cbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICB2YXIgTmdTZWxlY3RNdWx0aXBsZU9wdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE5nU2VsZWN0TXVsdGlwbGVPcHRpb24oX2VsZW1lbnQsIF9yZW5kZXJlciwgX3NlbGVjdCkge1xuICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IF9lbGVtZW50O1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIgPSBfcmVuZGVyZXI7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3QgPSBfc2VsZWN0O1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9zZWxlY3QpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMuX3NlbGVjdC5fcmVnaXN0ZXJPcHRpb24odGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5nU2VsZWN0TXVsdGlwbGVPcHRpb24ucHJvdG90eXBlLCBcIm5nVmFsdWVcIiwge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2VsZWN0ID09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuX3NldEVsZW1lbnRWYWx1ZShfYnVpbGRWYWx1ZVN0cmluZyQxKHRoaXMuaWQsIHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0LndyaXRlVmFsdWUodGhpcy5fc2VsZWN0LnZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdTZWxlY3RNdWx0aXBsZU9wdGlvbi5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3NlbGVjdCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RWxlbWVudFZhbHVlKF9idWlsZFZhbHVlU3RyaW5nJDEodGhpcy5pZCwgdmFsdWUpKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0LndyaXRlVmFsdWUodGhpcy5fc2VsZWN0LnZhbHVlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEVsZW1lbnRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgTmdTZWxlY3RNdWx0aXBsZU9wdGlvbi5wcm90b3R5cGUuX3NldEVsZW1lbnRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFByb3BlcnR5KHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3ZhbHVlJywgdmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIE5nU2VsZWN0TXVsdGlwbGVPcHRpb24ucHJvdG90eXBlLl9zZXRTZWxlY3RlZCA9IGZ1bmN0aW9uIChzZWxlY3RlZCkge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuc2V0RWxlbWVudFByb3BlcnR5KHRoaXMuX2VsZW1lbnQubmF0aXZlRWxlbWVudCwgJ3NlbGVjdGVkJywgc2VsZWN0ZWQpO1xuICAgICAgICB9O1xuICAgICAgICBOZ1NlbGVjdE11bHRpcGxlT3B0aW9uLnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fc2VsZWN0KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdC5fb3B0aW9uTWFwLmRlbGV0ZSh0aGlzLmlkKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Qud3JpdGVWYWx1ZSh0aGlzLl9zZWxlY3QudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBOZ1NlbGVjdE11bHRpcGxlT3B0aW9uLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRGlyZWN0aXZlLCBhcmdzOiBbeyBzZWxlY3RvcjogJ29wdGlvbicgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOZ1NlbGVjdE11bHRpcGxlT3B0aW9uLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkVsZW1lbnRSZWYsIH0sXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuUmVuZGVyZXIsIH0sXG4gICAgICAgICAgICB7IHR5cGU6IFNlbGVjdE11bHRpcGxlQ29udHJvbFZhbHVlQWNjZXNzb3IsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkhvc3QgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIE5nU2VsZWN0TXVsdGlwbGVPcHRpb24ucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICAgICAnbmdWYWx1ZSc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQsIGFyZ3M6IFsnbmdWYWx1ZScsXSB9LF0sXG4gICAgICAgICAgICAndmFsdWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ3ZhbHVlJyxdIH0sXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIE5nU2VsZWN0TXVsdGlwbGVPcHRpb247XG4gICAgfSgpKTtcblxuICAgIGZ1bmN0aW9uIGNvbnRyb2xQYXRoKG5hbWUsIHBhcmVudCkge1xuICAgICAgICB2YXIgcCA9IExpc3RXcmFwcGVyLmNsb25lKHBhcmVudC5wYXRoKTtcbiAgICAgICAgcC5wdXNoKG5hbWUpO1xuICAgICAgICByZXR1cm4gcDtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VXBDb250cm9sKGNvbnRyb2wsIGRpcikge1xuICAgICAgICBpZiAoaXNCbGFuayhjb250cm9sKSlcbiAgICAgICAgICAgIF90aHJvd0Vycm9yKGRpciwgJ0Nhbm5vdCBmaW5kIGNvbnRyb2wgd2l0aCcpO1xuICAgICAgICBpZiAoaXNCbGFuayhkaXIudmFsdWVBY2Nlc3NvcikpXG4gICAgICAgICAgICBfdGhyb3dFcnJvcihkaXIsICdObyB2YWx1ZSBhY2Nlc3NvciBmb3IgZm9ybSBjb250cm9sIHdpdGgnKTtcbiAgICAgICAgY29udHJvbC52YWxpZGF0b3IgPSBWYWxpZGF0b3JzLmNvbXBvc2UoW2NvbnRyb2wudmFsaWRhdG9yLCBkaXIudmFsaWRhdG9yXSk7XG4gICAgICAgIGNvbnRyb2wuYXN5bmNWYWxpZGF0b3IgPSBWYWxpZGF0b3JzLmNvbXBvc2VBc3luYyhbY29udHJvbC5hc3luY1ZhbGlkYXRvciwgZGlyLmFzeW5jVmFsaWRhdG9yXSk7XG4gICAgICAgIGRpci52YWx1ZUFjY2Vzc29yLndyaXRlVmFsdWUoY29udHJvbC52YWx1ZSk7XG4gICAgICAgIC8vIHZpZXcgLT4gbW9kZWxcbiAgICAgICAgZGlyLnZhbHVlQWNjZXNzb3IucmVnaXN0ZXJPbkNoYW5nZShmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIGRpci52aWV3VG9Nb2RlbFVwZGF0ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICBjb250cm9sLm1hcmtBc0RpcnR5KCk7XG4gICAgICAgICAgICBjb250cm9sLnNldFZhbHVlKG5ld1ZhbHVlLCB7IGVtaXRNb2RlbFRvVmlld0NoYW5nZTogZmFsc2UgfSk7XG4gICAgICAgIH0pO1xuICAgICAgICAvLyB0b3VjaGVkXG4gICAgICAgIGRpci52YWx1ZUFjY2Vzc29yLnJlZ2lzdGVyT25Ub3VjaGVkKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyb2wubWFya0FzVG91Y2hlZCgpOyB9KTtcbiAgICAgICAgY29udHJvbC5yZWdpc3Rlck9uQ2hhbmdlKGZ1bmN0aW9uIChuZXdWYWx1ZSwgZW1pdE1vZGVsRXZlbnQpIHtcbiAgICAgICAgICAgIC8vIGNvbnRyb2wgLT4gdmlld1xuICAgICAgICAgICAgZGlyLnZhbHVlQWNjZXNzb3Iud3JpdGVWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICAvLyBjb250cm9sIC0+IG5nTW9kZWxcbiAgICAgICAgICAgIGlmIChlbWl0TW9kZWxFdmVudClcbiAgICAgICAgICAgICAgICBkaXIudmlld1RvTW9kZWxVcGRhdGUobmV3VmFsdWUpO1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGRpci52YWx1ZUFjY2Vzc29yLnNldERpc2FibGVkU3RhdGUpIHtcbiAgICAgICAgICAgIGNvbnRyb2wucmVnaXN0ZXJPbkRpc2FibGVkQ2hhbmdlKGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7IGRpci52YWx1ZUFjY2Vzc29yLnNldERpc2FibGVkU3RhdGUoaXNEaXNhYmxlZCk7IH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlLXJ1biB2YWxpZGF0aW9uIHdoZW4gdmFsaWRhdG9yIGJpbmRpbmcgY2hhbmdlcywgZS5nLiBtaW5sZW5ndGg9MyAtPiBtaW5sZW5ndGg9NFxuICAgICAgICBkaXIuX3Jhd1ZhbGlkYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UpXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7IH0pO1xuICAgICAgICB9KTtcbiAgICAgICAgZGlyLl9yYXdBc3luY1ZhbGlkYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UpXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY2xlYW5VcENvbnRyb2woY29udHJvbCwgZGlyKSB7XG4gICAgICAgIGRpci52YWx1ZUFjY2Vzc29yLnJlZ2lzdGVyT25DaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX25vQ29udHJvbEVycm9yKGRpcik7IH0pO1xuICAgICAgICBkaXIudmFsdWVBY2Nlc3Nvci5yZWdpc3Rlck9uVG91Y2hlZChmdW5jdGlvbiAoKSB7IHJldHVybiBfbm9Db250cm9sRXJyb3IoZGlyKTsgfSk7XG4gICAgICAgIGRpci5fcmF3VmFsaWRhdG9ycy5mb3JFYWNoKGZ1bmN0aW9uICh2YWxpZGF0b3IpIHsgcmV0dXJuIHZhbGlkYXRvci5yZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlKG51bGwpOyB9KTtcbiAgICAgICAgZGlyLl9yYXdBc3luY1ZhbGlkYXRvcnMuZm9yRWFjaChmdW5jdGlvbiAodmFsaWRhdG9yKSB7IHJldHVybiB2YWxpZGF0b3IucmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZShudWxsKTsgfSk7XG4gICAgICAgIGlmIChjb250cm9sKVxuICAgICAgICAgICAgY29udHJvbC5fY2xlYXJDaGFuZ2VGbnMoKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gc2V0VXBGb3JtQ29udGFpbmVyKGNvbnRyb2wsIGRpcikge1xuICAgICAgICBpZiAoaXNCbGFuayhjb250cm9sKSlcbiAgICAgICAgICAgIF90aHJvd0Vycm9yKGRpciwgJ0Nhbm5vdCBmaW5kIGNvbnRyb2wgd2l0aCcpO1xuICAgICAgICBjb250cm9sLnZhbGlkYXRvciA9IFZhbGlkYXRvcnMuY29tcG9zZShbY29udHJvbC52YWxpZGF0b3IsIGRpci52YWxpZGF0b3JdKTtcbiAgICAgICAgY29udHJvbC5hc3luY1ZhbGlkYXRvciA9IFZhbGlkYXRvcnMuY29tcG9zZUFzeW5jKFtjb250cm9sLmFzeW5jVmFsaWRhdG9yLCBkaXIuYXN5bmNWYWxpZGF0b3JdKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gX25vQ29udHJvbEVycm9yKGRpcikge1xuICAgICAgICByZXR1cm4gX3Rocm93RXJyb3IoZGlyLCAnVGhlcmUgaXMgbm8gRm9ybUNvbnRyb2wgaW5zdGFuY2UgYXR0YWNoZWQgdG8gZm9ybSBjb250cm9sIGVsZW1lbnQgd2l0aCcpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBfdGhyb3dFcnJvcihkaXIsIG1lc3NhZ2UpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2VFbmQ7XG4gICAgICAgIGlmIChkaXIucGF0aC5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBtZXNzYWdlRW5kID0gXCJwYXRoOiAnXCIgKyBkaXIucGF0aC5qb2luKCcgLT4gJykgKyBcIidcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChkaXIucGF0aFswXSkge1xuICAgICAgICAgICAgbWVzc2FnZUVuZCA9IFwibmFtZTogJ1wiICsgZGlyLnBhdGggKyBcIidcIjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG1lc3NhZ2VFbmQgPSAndW5zcGVjaWZpZWQgbmFtZSBhdHRyaWJ1dGUnO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlICsgXCIgXCIgKyBtZXNzYWdlRW5kKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcG9zZVZhbGlkYXRvcnModmFsaWRhdG9ycykge1xuICAgICAgICByZXR1cm4gaXNQcmVzZW50KHZhbGlkYXRvcnMpID8gVmFsaWRhdG9ycy5jb21wb3NlKHZhbGlkYXRvcnMubWFwKG5vcm1hbGl6ZVZhbGlkYXRvcikpIDogbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyh2YWxpZGF0b3JzKSB7XG4gICAgICAgIHJldHVybiBpc1ByZXNlbnQodmFsaWRhdG9ycykgPyBWYWxpZGF0b3JzLmNvbXBvc2VBc3luYyh2YWxpZGF0b3JzLm1hcChub3JtYWxpemVBc3luY1ZhbGlkYXRvcikpIDpcbiAgICAgICAgICAgIG51bGw7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzUHJvcGVydHlVcGRhdGVkKGNoYW5nZXMsIHZpZXdNb2RlbCkge1xuICAgICAgICBpZiAoIVN0cmluZ01hcFdyYXBwZXIuY29udGFpbnMoY2hhbmdlcywgJ21vZGVsJykpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIHZhciBjaGFuZ2UgPSBjaGFuZ2VzWydtb2RlbCddO1xuICAgICAgICBpZiAoY2hhbmdlLmlzRmlyc3RDaGFuZ2UoKSlcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICByZXR1cm4gIWxvb3NlSWRlbnRpY2FsKHZpZXdNb2RlbCwgY2hhbmdlLmN1cnJlbnRWYWx1ZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGlzQnVpbHRJbkFjY2Vzc29yKHZhbHVlQWNjZXNzb3IpIHtcbiAgICAgICAgcmV0dXJuIChoYXNDb25zdHJ1Y3Rvcih2YWx1ZUFjY2Vzc29yLCBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yKSB8fFxuICAgICAgICAgICAgaGFzQ29uc3RydWN0b3IodmFsdWVBY2Nlc3NvciwgTnVtYmVyVmFsdWVBY2Nlc3NvcikgfHxcbiAgICAgICAgICAgIGhhc0NvbnN0cnVjdG9yKHZhbHVlQWNjZXNzb3IsIFNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yKSB8fFxuICAgICAgICAgICAgaGFzQ29uc3RydWN0b3IodmFsdWVBY2Nlc3NvciwgU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3NvcikgfHxcbiAgICAgICAgICAgIGhhc0NvbnN0cnVjdG9yKHZhbHVlQWNjZXNzb3IsIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IpKTtcbiAgICB9XG4gICAgLy8gVE9ETzogdnNhdmtpbiByZW1vdmUgaXQgb25jZSBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8zMDExIGlzIGltcGxlbWVudGVkXG4gICAgZnVuY3Rpb24gc2VsZWN0VmFsdWVBY2Nlc3NvcihkaXIsIHZhbHVlQWNjZXNzb3JzKSB7XG4gICAgICAgIGlmIChpc0JsYW5rKHZhbHVlQWNjZXNzb3JzKSlcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB2YXIgZGVmYXVsdEFjY2Vzc29yO1xuICAgICAgICB2YXIgYnVpbHRpbkFjY2Vzc29yO1xuICAgICAgICB2YXIgY3VzdG9tQWNjZXNzb3I7XG4gICAgICAgIHZhbHVlQWNjZXNzb3JzLmZvckVhY2goZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgIGlmIChoYXNDb25zdHJ1Y3Rvcih2LCBEZWZhdWx0VmFsdWVBY2Nlc3NvcikpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0QWNjZXNzb3IgPSB2O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoaXNCdWlsdEluQWNjZXNzb3IodikpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KGJ1aWx0aW5BY2Nlc3NvcikpXG4gICAgICAgICAgICAgICAgICAgIF90aHJvd0Vycm9yKGRpciwgJ01vcmUgdGhhbiBvbmUgYnVpbHQtaW4gdmFsdWUgYWNjZXNzb3IgbWF0Y2hlcyBmb3JtIGNvbnRyb2wgd2l0aCcpO1xuICAgICAgICAgICAgICAgIGJ1aWx0aW5BY2Nlc3NvciA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KGN1c3RvbUFjY2Vzc29yKSlcbiAgICAgICAgICAgICAgICAgICAgX3Rocm93RXJyb3IoZGlyLCAnTW9yZSB0aGFuIG9uZSBjdXN0b20gdmFsdWUgYWNjZXNzb3IgbWF0Y2hlcyBmb3JtIGNvbnRyb2wgd2l0aCcpO1xuICAgICAgICAgICAgICAgIGN1c3RvbUFjY2Vzc29yID0gdjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChpc1ByZXNlbnQoY3VzdG9tQWNjZXNzb3IpKVxuICAgICAgICAgICAgcmV0dXJuIGN1c3RvbUFjY2Vzc29yO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGJ1aWx0aW5BY2Nlc3NvcikpXG4gICAgICAgICAgICByZXR1cm4gYnVpbHRpbkFjY2Vzc29yO1xuICAgICAgICBpZiAoaXNQcmVzZW50KGRlZmF1bHRBY2Nlc3NvcikpXG4gICAgICAgICAgICByZXR1cm4gZGVmYXVsdEFjY2Vzc29yO1xuICAgICAgICBfdGhyb3dFcnJvcihkaXIsICdObyB2YWxpZCB2YWx1ZSBhY2Nlc3NvciBmb3IgZm9ybSBjb250cm9sIHdpdGgnKTtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGlzIGEgYmFzZSBjbGFzcyBmb3IgY29kZSBzaGFyZWQgYmV0d2VlbiB7QGxpbmsgTmdNb2RlbEdyb3VwfSBhbmQge0BsaW5rIEZvcm1Hcm91cE5hbWV9LlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyhBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUoKSB7XG4gICAgICAgICAgICBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgICBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1BhcmVudFR5cGUoKTtcbiAgICAgICAgICAgIHRoaXMuZm9ybURpcmVjdGl2ZS5hZGRGb3JtR3JvdXAodGhpcyk7XG4gICAgICAgIH07XG4gICAgICAgIEFic3RyYWN0Rm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5uZ09uRGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmZvcm1EaXJlY3RpdmUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1EaXJlY3RpdmUucmVtb3ZlRm9ybUdyb3VwKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIHtAbGluayBGb3JtR3JvdXB9IGJhY2tpbmcgdGhpcyBiaW5kaW5nLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZm9ybURpcmVjdGl2ZS5nZXRGb3JtR3JvdXAodGhpcyk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLCBcInBhdGhcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBHZXQgdGhlIHBhdGggdG8gdGhpcyBjb250cm9sIGdyb3VwLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyb2xQYXRoKHRoaXMubmFtZSwgdGhpcy5fcGFyZW50KTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiZm9ybURpcmVjdGl2ZVwiLCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEdldCB0aGUge0BsaW5rIEZvcm19IHRvIHdoaWNoIHRoaXMgZ3JvdXAgYmVsb25ncy5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wYXJlbnQgPyB0aGlzLl9wYXJlbnQuZm9ybURpcmVjdGl2ZSA6IG51bGw7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLCBcInZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBvc2VWYWxpZGF0b3JzKHRoaXMuX3ZhbGlkYXRvcnMpOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Rm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBvc2VBc3luY1ZhbGlkYXRvcnModGhpcy5fYXN5bmNWYWxpZGF0b3JzKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLl9jaGVja1BhcmVudFR5cGUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIHJldHVybiBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZTtcbiAgICB9KENvbnRyb2xDb250YWluZXIpKTtcblxuICAgIC8qKlxuICAgICAqIEBsaWNlbnNlXG4gICAgICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICAgICAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB2YXIgX19leHRlbmRzJDMgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbiAgICB2YXIgQWJzdHJhY3RDb250cm9sU3RhdHVzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gQWJzdHJhY3RDb250cm9sU3RhdHVzKGNkKSB7XG4gICAgICAgICAgICB0aGlzLl9jZCA9IGNkO1xuICAgICAgICB9XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NVbnRvdWNoZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLl9jZC5jb250cm9sKSA/IHRoaXMuX2NkLmNvbnRyb2wudW50b3VjaGVkIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbFN0YXR1cy5wcm90b3R5cGUsIFwibmdDbGFzc1RvdWNoZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLl9jZC5jb250cm9sKSA/IHRoaXMuX2NkLmNvbnRyb2wudG91Y2hlZCA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NQcmlzdGluZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gdGhpcy5fY2QuY29udHJvbC5wcmlzdGluZSA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NEaXJ0eVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gdGhpcy5fY2QuY29udHJvbC5kaXJ0eSA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NWYWxpZFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuX2NkLmNvbnRyb2wpID8gdGhpcy5fY2QuY29udHJvbC52YWxpZCA6IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2xTdGF0dXMucHJvdG90eXBlLCBcIm5nQ2xhc3NJbnZhbGlkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5fY2QuY29udHJvbCkgPyB0aGlzLl9jZC5jb250cm9sLmludmFsaWQgOiBmYWxzZTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gQWJzdHJhY3RDb250cm9sU3RhdHVzO1xuICAgIH0oKSk7XG4gICAgdmFyIG5nQ29udHJvbFN0YXR1c0hvc3QgPSB7XG4gICAgICAgICdbY2xhc3MubmctdW50b3VjaGVkXSc6ICduZ0NsYXNzVW50b3VjaGVkJyxcbiAgICAgICAgJ1tjbGFzcy5uZy10b3VjaGVkXSc6ICduZ0NsYXNzVG91Y2hlZCcsXG4gICAgICAgICdbY2xhc3MubmctcHJpc3RpbmVdJzogJ25nQ2xhc3NQcmlzdGluZScsXG4gICAgICAgICdbY2xhc3MubmctZGlydHldJzogJ25nQ2xhc3NEaXJ0eScsXG4gICAgICAgICdbY2xhc3MubmctdmFsaWRdJzogJ25nQ2xhc3NWYWxpZCcsXG4gICAgICAgICdbY2xhc3MubmctaW52YWxpZF0nOiAnbmdDbGFzc0ludmFsaWQnXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEaXJlY3RpdmUgYXV0b21hdGljYWxseSBhcHBsaWVkIHRvIEFuZ3VsYXIgZm9ybSBjb250cm9scyB0aGF0IHNldHMgQ1NTIGNsYXNzZXNcbiAgICAgKiBiYXNlZCBvbiBjb250cm9sIHN0YXR1cyAodmFsaWQvaW52YWxpZC9kaXJ0eS9ldGMpLlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBOZ0NvbnRyb2xTdGF0dXMgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkMyhOZ0NvbnRyb2xTdGF0dXMsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE5nQ29udHJvbFN0YXR1cyhjZCkge1xuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgY2QpO1xuICAgICAgICB9XG4gICAgICAgIE5nQ29udHJvbFN0YXR1cy5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbZm9ybUNvbnRyb2xOYW1lXSxbbmdNb2RlbF0sW2Zvcm1Db250cm9sXScsIGhvc3Q6IG5nQ29udHJvbFN0YXR1c0hvc3QgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOZ0NvbnRyb2xTdGF0dXMuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IE5nQ29udHJvbCwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICByZXR1cm4gTmdDb250cm9sU3RhdHVzO1xuICAgIH0oQWJzdHJhY3RDb250cm9sU3RhdHVzKSk7XG4gICAgLyoqXG4gICAgICogRGlyZWN0aXZlIGF1dG9tYXRpY2FsbHkgYXBwbGllZCB0byBBbmd1bGFyIGZvcm0gZ3JvdXBzIHRoYXQgc2V0cyBDU1MgY2xhc3Nlc1xuICAgICAqIGJhc2VkIG9uIGNvbnRyb2wgc3RhdHVzICh2YWxpZC9pbnZhbGlkL2RpcnR5L2V0YykuXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIE5nQ29udHJvbFN0YXR1c0dyb3VwID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzJDMoTmdDb250cm9sU3RhdHVzR3JvdXAsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE5nQ29udHJvbFN0YXR1c0dyb3VwKGNkKSB7XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCBjZCk7XG4gICAgICAgIH1cbiAgICAgICAgTmdDb250cm9sU3RhdHVzR3JvdXAuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBOYW1lXSxbZm9ybUFycmF5TmFtZV0sW25nTW9kZWxHcm91cF0sW2Zvcm1Hcm91cF0sZm9ybTpub3QoW25nTm9Gb3JtXSksW25nRm9ybV0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogbmdDb250cm9sU3RhdHVzSG9zdFxuICAgICAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIE5nQ29udHJvbFN0YXR1c0dyb3VwLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBDb250cm9sQ29udGFpbmVyLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNlbGYgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBOZ0NvbnRyb2xTdGF0dXNHcm91cDtcbiAgICB9KEFic3RyYWN0Q29udHJvbFN0YXR1cykpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMkNSA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZSBieSBkaXJlY3RpdmVzIGFuZCBjb21wb25lbnRzIHRvIGVtaXQgY3VzdG9tIEV2ZW50cy5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlc1xuICAgICAqXG4gICAgICogSW4gdGhlIGZvbGxvd2luZyBleGFtcGxlLCBgWmlwcHlgIGFsdGVybmF0aXZlbHkgZW1pdHMgYG9wZW5gIGFuZCBgY2xvc2VgIGV2ZW50cyB3aGVuIGl0c1xuICAgICAqIHRpdGxlIGdldHMgY2xpY2tlZDpcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIEBDb21wb25lbnQoe1xuICAgICAqICAgc2VsZWN0b3I6ICd6aXBweScsXG4gICAgICogICB0ZW1wbGF0ZTogYFxuICAgICAqICAgPGRpdiBjbGFzcz1cInppcHB5XCI+XG4gICAgICogICAgIDxkaXYgKGNsaWNrKT1cInRvZ2dsZSgpXCI+VG9nZ2xlPC9kaXY+XG4gICAgICogICAgIDxkaXYgW2hpZGRlbl09XCIhdmlzaWJsZVwiPlxuICAgICAqICAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgICAgKiAgICAgPC9kaXY+XG4gICAgICogIDwvZGl2PmB9KVxuICAgICAqIGV4cG9ydCBjbGFzcyBaaXBweSB7XG4gICAgICogICB2aXNpYmxlOiBib29sZWFuID0gdHJ1ZTtcbiAgICAgKiAgIEBPdXRwdXQoKSBvcGVuOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgKiAgIEBPdXRwdXQoKSBjbG9zZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICpcbiAgICAgKiAgIHRvZ2dsZSgpIHtcbiAgICAgKiAgICAgdGhpcy52aXNpYmxlID0gIXRoaXMudmlzaWJsZTtcbiAgICAgKiAgICAgaWYgKHRoaXMudmlzaWJsZSkge1xuICAgICAqICAgICAgIHRoaXMub3Blbi5lbWl0KG51bGwpO1xuICAgICAqICAgICB9IGVsc2Uge1xuICAgICAqICAgICAgIHRoaXMuY2xvc2UuZW1pdChudWxsKTtcbiAgICAgKiAgICAgfVxuICAgICAqICAgfVxuICAgICAqIH1cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIFRoZSBldmVudHMgcGF5bG9hZCBjYW4gYmUgYWNjZXNzZWQgYnkgdGhlIHBhcmFtZXRlciBgJGV2ZW50YCBvbiB0aGUgY29tcG9uZW50cyBvdXRwdXQgZXZlbnRcbiAgICAgKiBoYW5kbGVyOlxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPHppcHB5IChvcGVuKT1cIm9uT3BlbigkZXZlbnQpXCIgKGNsb3NlKT1cIm9uQ2xvc2UoJGV2ZW50KVwiPjwvemlwcHk+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBVc2VzIFJ4Lk9ic2VydmFibGUgYnV0IHByb3ZpZGVzIGFuIGFkYXB0ZXIgdG8gbWFrZSBpdCB3b3JrIGFzIHNwZWNpZmllZCBoZXJlOlxuICAgICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9qaHVzYWluL29ic2VydmFibGUtc3BlY1xuICAgICAqXG4gICAgICogT25jZSBhIHJlZmVyZW5jZSBpbXBsZW1lbnRhdGlvbiBvZiB0aGUgc3BlYyBpcyBhdmFpbGFibGUsIHN3aXRjaCB0byBpdC5cbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEV2ZW50RW1pdHRlciA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyQ1KEV2ZW50RW1pdHRlciwgX3N1cGVyKTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgW0V2ZW50RW1pdHRlcl0sIHdoaWNoIGRlcGVuZGluZyBvbiBbaXNBc3luY10sXG4gICAgICAgICAqIGRlbGl2ZXJzIGV2ZW50cyBzeW5jaHJvbm91c2x5IG9yIGFzeW5jaHJvbm91c2x5LlxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gRXZlbnRFbWl0dGVyKGlzQXN5bmMpIHtcbiAgICAgICAgICAgIGlmIChpc0FzeW5jID09PSB2b2lkIDApIHsgaXNBc3luYyA9IGZhbHNlOyB9XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX19pc0FzeW5jID0gaXNBc3luYztcbiAgICAgICAgfVxuICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAodmFsdWUpIHsgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgdmFsdWUpOyB9O1xuICAgICAgICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChnZW5lcmF0b3JPck5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICAgICAgdmFyIHNjaGVkdWxlckZuO1xuICAgICAgICAgICAgdmFyIGVycm9yRm4gPSBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBudWxsOyB9O1xuICAgICAgICAgICAgdmFyIGNvbXBsZXRlRm4gPSBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9O1xuICAgICAgICAgICAgaWYgKGdlbmVyYXRvck9yTmV4dCAmJiB0eXBlb2YgZ2VuZXJhdG9yT3JOZXh0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgIHNjaGVkdWxlckZuID0gdGhpcy5fX2lzQXN5bmMgPyBmdW5jdGlvbiAodmFsdWUgLyoqIFRPRE8gIzkxMDAgKi8pIHtcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBnZW5lcmF0b3JPck5leHQubmV4dCh2YWx1ZSk7IH0pO1xuICAgICAgICAgICAgICAgIH0gOiBmdW5jdGlvbiAodmFsdWUgLyoqIFRPRE8gIzkxMDAgKi8pIHsgZ2VuZXJhdG9yT3JOZXh0Lm5leHQodmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIGlmIChnZW5lcmF0b3JPck5leHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKGVycikgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGdlbmVyYXRvck9yTmV4dC5lcnJvcihlcnIpOyB9KTsgfSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZXJyKSB7IGdlbmVyYXRvck9yTmV4dC5lcnJvcihlcnIpOyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZ2VuZXJhdG9yT3JOZXh0LmNvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlRm4gPSB0aGlzLl9faXNBc3luYyA/IGZ1bmN0aW9uICgpIHsgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBnZW5lcmF0b3JPck5leHQuY29tcGxldGUoKTsgfSk7IH0gOlxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKCkgeyBnZW5lcmF0b3JPck5leHQuY29tcGxldGUoKTsgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzY2hlZHVsZXJGbiA9IHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKHZhbHVlIC8qKiBUT0RPICM5MTAwICovKSB7XG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gZ2VuZXJhdG9yT3JOZXh0KHZhbHVlKTsgfSk7XG4gICAgICAgICAgICAgICAgfSA6IGZ1bmN0aW9uICh2YWx1ZSAvKiogVE9ETyAjOTEwMCAqLykgeyBnZW5lcmF0b3JPck5leHQodmFsdWUpOyB9O1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICBlcnJvckZuID1cbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX19pc0FzeW5jID8gZnVuY3Rpb24gKGVycikgeyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVycm9yKGVycik7IH0pOyB9IDogZnVuY3Rpb24gKGVycikgeyBlcnJvcihlcnIpOyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoY29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGxldGVGbiA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9faXNBc3luYyA/IGZ1bmN0aW9uICgpIHsgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBjb21wbGV0ZSgpOyB9KTsgfSA6IGZ1bmN0aW9uICgpIHsgY29tcGxldGUoKTsgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gX3N1cGVyLnByb3RvdHlwZS5zdWJzY3JpYmUuY2FsbCh0aGlzLCBzY2hlZHVsZXJGbiwgZXJyb3JGbiwgY29tcGxldGVGbik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBFdmVudEVtaXR0ZXI7XG4gICAgfShyeGpzX1N1YmplY3QuU3ViamVjdCkpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMkNiA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyB0aGF0IGEgRm9ybUNvbnRyb2wgaXMgdmFsaWQsIGkuZS4gdGhhdCBubyBlcnJvcnMgZXhpc3QgaW4gdGhlIGlucHV0IHZhbHVlLlxuICAgICAqL1xuICAgIHZhciBWQUxJRCA9ICdWQUxJRCc7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgYSBGb3JtQ29udHJvbCBpcyBpbnZhbGlkLCBpLmUuIHRoYXQgYW4gZXJyb3IgZXhpc3RzIGluIHRoZSBpbnB1dCB2YWx1ZS5cbiAgICAgKi9cbiAgICB2YXIgSU5WQUxJRCA9ICdJTlZBTElEJztcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgdGhhdCBhIEZvcm1Db250cm9sIGlzIHBlbmRpbmcsIGkuZS4gdGhhdCBhc3luYyB2YWxpZGF0aW9uIGlzIG9jY3VycmluZyBhbmRcbiAgICAgKiBlcnJvcnMgYXJlIG5vdCB5ZXQgYXZhaWxhYmxlIGZvciB0aGUgaW5wdXQgdmFsdWUuXG4gICAgICovXG4gICAgdmFyIFBFTkRJTkcgPSAnUEVORElORyc7XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIHRoYXQgYSBGb3JtQ29udHJvbCBpcyBkaXNhYmxlZCwgaS5lLiB0aGF0IHRoZSBjb250cm9sIGlzIGV4ZW1wdCBmcm9tIGFuY2VzdG9yXG4gICAgICogY2FsY3VsYXRpb25zIG9mIHZhbGlkaXR5IG9yIHZhbHVlLlxuICAgICAqL1xuICAgIHZhciBESVNBQkxFRCA9ICdESVNBQkxFRCc7XG4gICAgZnVuY3Rpb24gX2ZpbmQoY29udHJvbCwgcGF0aCwgZGVsaW1pdGVyKSB7XG4gICAgICAgIGlmIChpc0JsYW5rKHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIGlmICghKHBhdGggaW5zdGFuY2VvZiBBcnJheSkpIHtcbiAgICAgICAgICAgIHBhdGggPSBwYXRoLnNwbGl0KGRlbGltaXRlcik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhdGggaW5zdGFuY2VvZiBBcnJheSAmJiBMaXN0V3JhcHBlci5pc0VtcHR5KHBhdGgpKVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIHJldHVybiBwYXRoLnJlZHVjZShmdW5jdGlvbiAodiwgbmFtZSkge1xuICAgICAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBGb3JtR3JvdXApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHYuY29udHJvbHNbbmFtZV0pID8gdi5jb250cm9sc1tuYW1lXSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh2IGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gbmFtZTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHYuYXQoaW5kZXgpKSA/IHYuYXQoaW5kZXgpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBjb250cm9sKTtcbiAgICB9XG4gICAgZnVuY3Rpb24gdG9PYnNlcnZhYmxlKHIpIHtcbiAgICAgICAgcmV0dXJuIGlzUHJvbWlzZShyKSA/IHJ4anNfb2JzZXJ2YWJsZV9mcm9tUHJvbWlzZS5mcm9tUHJvbWlzZShyKSA6IHI7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGNvZXJjZVRvVmFsaWRhdG9yKHZhbGlkYXRvcikge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2YWxpZGF0b3IpID8gY29tcG9zZVZhbGlkYXRvcnModmFsaWRhdG9yKSA6IHZhbGlkYXRvcjtcbiAgICB9XG4gICAgZnVuY3Rpb24gY29lcmNlVG9Bc3luY1ZhbGlkYXRvcihhc3luY1ZhbGlkYXRvcikge1xuICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShhc3luY1ZhbGlkYXRvcikgPyBjb21wb3NlQXN5bmNWYWxpZGF0b3JzKGFzeW5jVmFsaWRhdG9yKSA6IGFzeW5jVmFsaWRhdG9yO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBAd2hhdEl0RG9lcyBUaGlzIGlzIHRoZSBiYXNlIGNsYXNzIGZvciB7QGxpbmsgRm9ybUNvbnRyb2x9LCB7QGxpbmsgRm9ybUdyb3VwfSwgYW5kXG4gICAgICoge0BsaW5rIEZvcm1BcnJheX0uXG4gICAgICpcbiAgICAgKiBJdCBwcm92aWRlcyBzb21lIG9mIHRoZSBzaGFyZWQgYmVoYXZpb3IgdGhhdCBhbGwgY29udHJvbHMgYW5kIGdyb3VwcyBvZiBjb250cm9scyBoYXZlLCBsaWtlXG4gICAgICogcnVubmluZyB2YWxpZGF0b3JzLCBjYWxjdWxhdGluZyBzdGF0dXMsIGFuZCByZXNldHRpbmcgc3RhdGUuIEl0IGFsc28gZGVmaW5lcyB0aGUgcHJvcGVydGllc1xuICAgICAqIHRoYXQgYXJlIHNoYXJlZCBiZXR3ZWVuIGFsbCBzdWItY2xhc3NlcywgbGlrZSBgdmFsdWVgLCBgdmFsaWRgLCBhbmQgYGRpcnR5YC4gSXQgc2hvdWxkbid0IGJlXG4gICAgICogaW5zdGFudGlhdGVkIGRpcmVjdGx5LlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBBYnN0cmFjdENvbnRyb2wgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBBYnN0cmFjdENvbnRyb2wodmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcikge1xuICAgICAgICAgICAgdGhpcy52YWxpZGF0b3IgPSB2YWxpZGF0b3I7XG4gICAgICAgICAgICB0aGlzLmFzeW5jVmFsaWRhdG9yID0gYXN5bmNWYWxpZGF0b3I7XG4gICAgICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgICAgICB0aGlzLl9vbkNvbGxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgICAgICB0aGlzLl9wcmlzdGluZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLl90b3VjaGVkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgdmFsdWUgb2YgdGhlIGNvbnRyb2wuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdmFsdWU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJzdGF0dXNcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaGUgdmFsaWRhdGlvbiBzdGF0dXMgb2YgdGhlIGNvbnRyb2wuIFRoZXJlIGFyZSBmb3VyIHBvc3NpYmxlXG4gICAgICAgICAgICAgKiB2YWxpZGF0aW9uIHN0YXR1c2VzOlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqICogKipWQUxJRCoqOiAgY29udHJvbCBoYXMgcGFzc2VkIGFsbCB2YWxpZGF0aW9uIGNoZWNrc1xuICAgICAgICAgICAgICogKiAqKklOVkFMSUQqKjogY29udHJvbCBoYXMgZmFpbGVkIGF0IGxlYXN0IG9uZSB2YWxpZGF0aW9uIGNoZWNrXG4gICAgICAgICAgICAgKiAqICoqUEVORElORyoqOiBjb250cm9sIGlzIGluIHRoZSBtaWRzdCBvZiBjb25kdWN0aW5nIGEgdmFsaWRhdGlvbiBjaGVja1xuICAgICAgICAgICAgICogKiAqKkRJU0FCTEVEKio6IGNvbnRyb2wgaXMgZXhlbXB0IGZyb20gdmFsaWRhdGlvbiBjaGVja3NcbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBUaGVzZSBzdGF0dXNlcyBhcmUgbXV0dWFsbHkgZXhjbHVzaXZlLCBzbyBhIGNvbnRyb2wgY2Fubm90IGJlXG4gICAgICAgICAgICAgKiBib3RoIHZhbGlkIEFORCBpbnZhbGlkIG9yIGludmFsaWQgQU5EIGRpc2FibGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3N0YXR1czsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInZhbGlkXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjb250cm9sIGlzIGB2YWxpZGAgd2hlbiBpdHMgYHN0YXR1cyA9PT0gVkFMSURgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEluIG9yZGVyIHRvIGhhdmUgdGhpcyBzdGF0dXMsIHRoZSBjb250cm9sIG11c3QgaGF2ZSBwYXNzZWQgYWxsIGl0c1xuICAgICAgICAgICAgICogdmFsaWRhdGlvbiBjaGVja3MuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBWQUxJRDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcImludmFsaWRcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGNvbnRyb2wgaXMgYGludmFsaWRgIHdoZW4gaXRzIGBzdGF0dXMgPT09IElOVkFMSURgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIEluIG9yZGVyIHRvIGhhdmUgdGhpcyBzdGF0dXMsIHRoZSBjb250cm9sIG11c3QgaGF2ZSBmYWlsZWRcbiAgICAgICAgICAgICAqIGF0IGxlYXN0IG9uZSBvZiBpdHMgdmFsaWRhdGlvbiBjaGVja3MuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBJTlZBTElEOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwicGVuZGluZ1wiLCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEEgY29udHJvbCBpcyBgcGVuZGluZ2Agd2hlbiBpdHMgYHN0YXR1cyA9PT0gUEVORElOR2AuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogSW4gb3JkZXIgdG8gaGF2ZSB0aGlzIHN0YXR1cywgdGhlIGNvbnRyb2wgbXVzdCBiZSBpbiB0aGVcbiAgICAgICAgICAgICAqIG1pZGRsZSBvZiBjb25kdWN0aW5nIGEgdmFsaWRhdGlvbiBjaGVjay5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdGF0dXMgPT0gUEVORElORzsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcImRpc2FibGVkXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjb250cm9sIGlzIGBkaXNhYmxlZGAgd2hlbiBpdHMgYHN0YXR1cyA9PT0gRElTQUJMRURgLlxuICAgICAgICAgICAgICpcbiAgICAgICAgICAgICAqIERpc2FibGVkIGNvbnRyb2xzIGFyZSBleGVtcHQgZnJvbSB2YWxpZGF0aW9uIGNoZWNrcyBhbmRcbiAgICAgICAgICAgICAqIGFyZSBub3QgaW5jbHVkZWQgaW4gdGhlIGFnZ3JlZ2F0ZSB2YWx1ZSBvZiB0aGVpciBhbmNlc3RvclxuICAgICAgICAgICAgICogY29udHJvbHMuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fc3RhdHVzID09PSBESVNBQkxFRDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcImVuYWJsZWRcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBBIGNvbnRyb2wgaXMgYGVuYWJsZWRgIGFzIGxvbmcgYXMgaXRzIGBzdGF0dXMgIT09IERJU0FCTEVEYC5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBJbiBvdGhlciB3b3JkcywgaXQgaGFzIGEgc3RhdHVzIG9mIGBWQUxJRGAsIGBJTlZBTElEYCwgb3JcbiAgICAgICAgICAgICAqIGBQRU5ESU5HYC5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdGF0dXMgIT09IERJU0FCTEVEOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwiZXJyb3JzXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUmV0dXJucyBhbnkgZXJyb3JzIGdlbmVyYXRlZCBieSBmYWlsaW5nIHZhbGlkYXRpb24uIElmIHRoZXJlXG4gICAgICAgICAgICAgKiBhcmUgbm8gZXJyb3JzLCBpdCB3aWxsIHJldHVybiBudWxsLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2Vycm9yczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInByaXN0aW5lXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjb250cm9sIGlzIGBwcmlzdGluZWAgaWYgdGhlIHVzZXIgaGFzIG5vdCB5ZXQgY2hhbmdlZFxuICAgICAgICAgICAgICogdGhlIHZhbHVlIGluIHRoZSBVSS5cbiAgICAgICAgICAgICAqXG4gICAgICAgICAgICAgKiBOb3RlIHRoYXQgcHJvZ3JhbW1hdGljIGNoYW5nZXMgdG8gYSBjb250cm9sJ3MgdmFsdWUgd2lsbFxuICAgICAgICAgICAgICogKm5vdCogbWFyayBpdCBkaXJ0eS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcmlzdGluZTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcImRpcnR5XCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjb250cm9sIGlzIGBkaXJ0eWAgaWYgdGhlIHVzZXIgaGFzIGNoYW5nZWQgdGhlIHZhbHVlXG4gICAgICAgICAgICAgKiBpbiB0aGUgVUkuXG4gICAgICAgICAgICAgKlxuICAgICAgICAgICAgICogTm90ZSB0aGF0IHByb2dyYW1tYXRpYyBjaGFuZ2VzIHRvIGEgY29udHJvbCdzIHZhbHVlIHdpbGxcbiAgICAgICAgICAgICAqICpub3QqIG1hcmsgaXQgZGlydHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gIXRoaXMucHJpc3RpbmU7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJ0b3VjaGVkXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgKiBBIGNvbnRyb2wgaXMgbWFya2VkIGB0b3VjaGVkYCBvbmNlIHRoZSB1c2VyIGhhcyB0cmlnZ2VyZWRcbiAgICAgICAgICAgICogYSBgYmx1cmAgZXZlbnQgb24gaXQuXG4gICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl90b3VjaGVkOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwidW50b3VjaGVkXCIsIHtcbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQSBjb250cm9sIGlzIGB1bnRvdWNoZWRgIGlmIHRoZSB1c2VyIGhhcyBub3QgeWV0IHRyaWdnZXJlZFxuICAgICAgICAgICAgICogYSBgYmx1cmAgZXZlbnQgb24gaXQuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gIXRoaXMuX3RvdWNoZWQ7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZSwgXCJ2YWx1ZUNoYW5nZXNcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbWl0cyBhbiBldmVudCBldmVyeSB0aW1lIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbCBjaGFuZ2VzLCBpblxuICAgICAgICAgICAgICogdGhlIFVJIG9yIHByb2dyYW1tYXRpY2FsbHkuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fdmFsdWVDaGFuZ2VzOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUsIFwic3RhdHVzQ2hhbmdlc1wiLCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVtaXRzIGFuIGV2ZW50IGV2ZXJ5IHRpbWUgdGhlIHZhbGlkYXRpb24gc3RhdHVzIG9mIHRoZSBjb250cm9sXG4gICAgICAgICAgICAgKiBpcyByZS1jYWxjdWxhdGVkLlxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3N0YXR1c0NoYW5nZXM7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgc3luY2hyb25vdXMgdmFsaWRhdG9ycyB0aGF0IGFyZSBhY3RpdmUgb24gdGhpcyBjb250cm9sLiAgQ2FsbGluZ1xuICAgICAgICAgKiB0aGlzIHdpbGwgb3ZlcndyaXRlIGFueSBleGlzdGluZyBzeW5jIHZhbGlkYXRvcnMuXG4gICAgICAgICAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLnNldFZhbGlkYXRvcnMgPSBmdW5jdGlvbiAobmV3VmFsaWRhdG9yKSB7XG4gICAgICAgICAgICB0aGlzLnZhbGlkYXRvciA9IGNvZXJjZVRvVmFsaWRhdG9yKG5ld1ZhbGlkYXRvcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBhc3luYyB2YWxpZGF0b3JzIHRoYXQgYXJlIGFjdGl2ZSBvbiB0aGlzIGNvbnRyb2wuIENhbGxpbmcgdGhpc1xuICAgICAgICAgKiB3aWxsIG92ZXJ3cml0ZSBhbnkgZXhpc3RpbmcgYXN5bmMgdmFsaWRhdG9ycy5cbiAgICAgICAgICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuc2V0QXN5bmNWYWxpZGF0b3JzID0gZnVuY3Rpb24gKG5ld1ZhbGlkYXRvcikge1xuICAgICAgICAgICAgdGhpcy5hc3luY1ZhbGlkYXRvciA9IGNvZXJjZVRvQXN5bmNWYWxpZGF0b3IobmV3VmFsaWRhdG9yKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtcHRpZXMgb3V0IHRoZSBzeW5jIHZhbGlkYXRvciBsaXN0LlxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5jbGVhclZhbGlkYXRvcnMgPSBmdW5jdGlvbiAoKSB7IHRoaXMudmFsaWRhdG9yID0gbnVsbDsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVtcHRpZXMgb3V0IHRoZSBhc3luYyB2YWxpZGF0b3IgbGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuY2xlYXJBc3luY1ZhbGlkYXRvcnMgPSBmdW5jdGlvbiAoKSB7IHRoaXMuYXN5bmNWYWxpZGF0b3IgPSBudWxsOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFya3MgdGhlIGNvbnRyb2wgYXMgYHRvdWNoZWRgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIHdpbGwgYWxzbyBtYXJrIGFsbCBkaXJlY3QgYW5jZXN0b3JzIGFzIGB0b3VjaGVkYCB0byBtYWludGFpblxuICAgICAgICAgKiB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLm1hcmtBc1RvdWNoZWQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICBvbmx5U2VsZiA9IG5vcm1hbGl6ZUJvb2wob25seVNlbGYpO1xuICAgICAgICAgICAgdGhpcy5fdG91Y2hlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Lm1hcmtBc1RvdWNoZWQoeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXJrcyB0aGUgY29udHJvbCBhcyBgdW50b3VjaGVkYC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIGNvbnRyb2wgaGFzIGFueSBjaGlsZHJlbiwgaXQgd2lsbCBhbHNvIG1hcmsgYWxsIGNoaWxkcmVuIGFzIGB1bnRvdWNoZWRgXG4gICAgICAgICAqIHRvIG1haW50YWluIHRoZSBtb2RlbCwgYW5kIHJlLWNhbGN1bGF0ZSB0aGUgYHRvdWNoZWRgIHN0YXR1cyBvZiBhbGwgcGFyZW50XG4gICAgICAgICAqIGNvbnRyb2xzLlxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5tYXJrQXNVbnRvdWNoZWQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICB0aGlzLl90b3VjaGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLl9mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNvbnRyb2wpIHsgY29udHJvbC5tYXJrQXNVbnRvdWNoZWQoeyBvbmx5U2VsZjogdHJ1ZSB9KTsgfSk7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGVUb3VjaGVkKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogTWFya3MgdGhlIGNvbnRyb2wgYXMgYGRpcnR5YC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyB3aWxsIGFsc28gbWFyayBhbGwgZGlyZWN0IGFuY2VzdG9ycyBhcyBgZGlydHlgIHRvIG1haW50YWluXG4gICAgICAgICAqIHRoZSBtb2RlbC5cbiAgICAgICAgICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUubWFya0FzRGlydHkgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICBvbmx5U2VsZiA9IG5vcm1hbGl6ZUJvb2wob25seVNlbGYpO1xuICAgICAgICAgICAgdGhpcy5fcHJpc3RpbmUgPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fcGFyZW50KSAmJiAhb25seVNlbGYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQubWFya0FzRGlydHkoeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBNYXJrcyB0aGUgY29udHJvbCBhcyBgcHJpc3RpbmVgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB0aGUgY29udHJvbCBoYXMgYW55IGNoaWxkcmVuLCBpdCB3aWxsIGFsc28gbWFyayBhbGwgY2hpbGRyZW4gYXMgYHByaXN0aW5lYFxuICAgICAgICAgKiB0byBtYWludGFpbiB0aGUgbW9kZWwsIGFuZCByZS1jYWxjdWxhdGUgdGhlIGBwcmlzdGluZWAgc3RhdHVzIG9mIGFsbCBwYXJlbnRcbiAgICAgICAgICogY29udHJvbHMuXG4gICAgICAgICAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLm1hcmtBc1ByaXN0aW5lID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgb25seVNlbGYgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLm9ubHlTZWxmO1xuICAgICAgICAgICAgdGhpcy5fcHJpc3RpbmUgPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjb250cm9sKSB7IGNvbnRyb2wubWFya0FzUHJpc3RpbmUoeyBvbmx5U2VsZjogdHJ1ZSB9KTsgfSk7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGVQcmlzdGluZSh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIE1hcmtzIHRoZSBjb250cm9sIGFzIGBwZW5kaW5nYC5cbiAgICAgICAgICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUubWFya0FzUGVuZGluZyA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG9ubHlTZWxmID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5vbmx5U2VsZjtcbiAgICAgICAgICAgIG9ubHlTZWxmID0gbm9ybWFsaXplQm9vbChvbmx5U2VsZik7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBQRU5ESU5HO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9wYXJlbnQpICYmICFvbmx5U2VsZikge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhcmVudC5tYXJrQXNQZW5kaW5nKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogRGlzYWJsZXMgdGhlIGNvbnRyb2wuIFRoaXMgbWVhbnMgdGhlIGNvbnRyb2wgd2lsbCBiZSBleGVtcHQgZnJvbSB2YWxpZGF0aW9uIGNoZWNrcyBhbmRcbiAgICAgICAgICogZXhjbHVkZWQgZnJvbSB0aGUgYWdncmVnYXRlIHZhbHVlIG9mIGFueSBwYXJlbnQuIEl0cyBzdGF0dXMgaXMgYERJU0FCTEVEYC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIGNvbnRyb2wgaGFzIGNoaWxkcmVuLCBhbGwgY2hpbGRyZW4gd2lsbCBiZSBkaXNhYmxlZCB0byBtYWludGFpbiB0aGUgbW9kZWwuXG4gICAgICAgICAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLmRpc2FibGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBvbmx5U2VsZiA9IF9iLm9ubHlTZWxmLCBlbWl0RXZlbnQgPSBfYi5lbWl0RXZlbnQ7XG4gICAgICAgICAgICBlbWl0RXZlbnQgPSBpc1ByZXNlbnQoZW1pdEV2ZW50KSA/IGVtaXRFdmVudCA6IHRydWU7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBESVNBQkxFRDtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9ycyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLl9mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNvbnRyb2wpIHsgY29udHJvbC5kaXNhYmxlKHsgb25seVNlbGY6IHRydWUgfSk7IH0pO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsdWUoKTtcbiAgICAgICAgICAgIGlmIChlbWl0RXZlbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZUNoYW5nZXMuZW1pdCh0aGlzLl92YWx1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzQ2hhbmdlcy5lbWl0KHRoaXMuX3N0YXR1cyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVBbmNlc3RvcnMob25seVNlbGYpO1xuICAgICAgICAgICAgdGhpcy5fb25EaXNhYmxlZENoYW5nZSh0cnVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZXMgdGhlIGNvbnRyb2wuIFRoaXMgbWVhbnMgdGhlIGNvbnRyb2wgd2lsbCBiZSBpbmNsdWRlZCBpbiB2YWxpZGF0aW9uIGNoZWNrcyBhbmRcbiAgICAgICAgICogdGhlIGFnZ3JlZ2F0ZSB2YWx1ZSBvZiBpdHMgcGFyZW50LiBJdHMgc3RhdHVzIGlzIHJlLWNhbGN1bGF0ZWQgYmFzZWQgb24gaXRzIHZhbHVlIGFuZFxuICAgICAgICAgKiBpdHMgdmFsaWRhdG9ycy5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgdGhlIGNvbnRyb2wgaGFzIGNoaWxkcmVuLCBhbGwgY2hpbGRyZW4gd2lsbCBiZSBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5lbmFibGUgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBvbmx5U2VsZiA9IF9iLm9ubHlTZWxmLCBlbWl0RXZlbnQgPSBfYi5lbWl0RXZlbnQ7XG4gICAgICAgICAgICB0aGlzLl9zdGF0dXMgPSBWQUxJRDtcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY29udHJvbCkgeyBjb250cm9sLmVuYWJsZSh7IG9ubHlTZWxmOiB0cnVlIH0pOyB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOiB0cnVlLCBlbWl0RXZlbnQ6IGVtaXRFdmVudCB9KTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUFuY2VzdG9ycyhvbmx5U2VsZik7XG4gICAgICAgICAgICB0aGlzLl9vbkRpc2FibGVkQ2hhbmdlKGZhbHNlKTtcbiAgICAgICAgfTtcbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fdXBkYXRlQW5jZXN0b3JzID0gZnVuY3Rpb24gKG9ubHlTZWxmKSB7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50LnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQuX3VwZGF0ZVByaXN0aW5lKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGVUb3VjaGVkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuc2V0UGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkgeyB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZS1jYWxjdWxhdGVzIHRoZSB2YWx1ZSBhbmQgdmFsaWRhdGlvbiBzdGF0dXMgb2YgdGhlIGNvbnRyb2wuXG4gICAgICAgICAqXG4gICAgICAgICAqIEJ5IGRlZmF1bHQsIGl0IHdpbGwgYWxzbyB1cGRhdGUgdGhlIHZhbHVlIGFuZCB2YWxpZGl0eSBvZiBpdHMgYW5jZXN0b3JzLlxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgX2IgPSBfYSA9PT0gdm9pZCAwID8ge30gOiBfYSwgb25seVNlbGYgPSBfYi5vbmx5U2VsZiwgZW1pdEV2ZW50ID0gX2IuZW1pdEV2ZW50O1xuICAgICAgICAgICAgb25seVNlbGYgPSBub3JtYWxpemVCb29sKG9ubHlTZWxmKTtcbiAgICAgICAgICAgIGVtaXRFdmVudCA9IGlzUHJlc2VudChlbWl0RXZlbnQpID8gZW1pdEV2ZW50IDogdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX3NldEluaXRpYWxTdGF0dXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVZhbHVlKCk7XG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fZXJyb3JzID0gdGhpcy5fcnVuVmFsaWRhdG9yKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhdHVzID0gdGhpcy5fY2FsY3VsYXRlU3RhdHVzKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0YXR1cyA9PT0gVkFMSUQgfHwgdGhpcy5fc3RhdHVzID09PSBQRU5ESU5HKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3J1bkFzeW5jVmFsaWRhdG9yKGVtaXRFdmVudCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVtaXRFdmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ2hhbmdlcy5lbWl0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGF0dXNDaGFuZ2VzLmVtaXQodGhpcy5fc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fcGFyZW50KSAmJiAhb25seVNlbGYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOiBvbmx5U2VsZiwgZW1pdEV2ZW50OiBlbWl0RXZlbnQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fdXBkYXRlVHJlZVZhbGlkaXR5ID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICB2YXIgZW1pdEV2ZW50ID0gKF9hID09PSB2b2lkIDAgPyB7IGVtaXRFdmVudDogdHJ1ZSB9IDogX2EpLmVtaXRFdmVudDtcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY3RybCkgeyByZXR1cm4gY3RybC5fdXBkYXRlVHJlZVZhbGlkaXR5KHsgZW1pdEV2ZW50OiBlbWl0RXZlbnQgfSk7IH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IHRydWUsIGVtaXRFdmVudDogZW1pdEV2ZW50IH0pO1xuICAgICAgICB9O1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLl9zZXRJbml0aWFsU3RhdHVzID0gZnVuY3Rpb24gKCkgeyB0aGlzLl9zdGF0dXMgPSB0aGlzLl9hbGxDb250cm9sc0Rpc2FibGVkKCkgPyBESVNBQkxFRCA6IFZBTElEOyB9O1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLl9ydW5WYWxpZGF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMudmFsaWRhdG9yKSA/IHRoaXMudmFsaWRhdG9yKHRoaXMpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fcnVuQXN5bmNWYWxpZGF0b3IgPSBmdW5jdGlvbiAoZW1pdEV2ZW50KSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLmFzeW5jVmFsaWRhdG9yKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IFBFTkRJTkc7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2FuY2VsRXhpc3RpbmdTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzID0gdG9PYnNlcnZhYmxlKHRoaXMuYXN5bmNWYWxpZGF0b3IodGhpcykpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FzeW5jVmFsaWRhdGlvblN1YnNjcmlwdGlvbiA9IG9icy5zdWJzY3JpYmUoeyBuZXh0OiBmdW5jdGlvbiAocmVzKSB7IHJldHVybiBfdGhpcy5zZXRFcnJvcnMocmVzLCB7IGVtaXRFdmVudDogZW1pdEV2ZW50IH0pOyB9IH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLl9jYW5jZWxFeGlzdGluZ1N1YnNjcmlwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fYXN5bmNWYWxpZGF0aW9uU3Vic2NyaXB0aW9uKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2FzeW5jVmFsaWRhdGlvblN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyBlcnJvcnMgb24gYSBmb3JtIGNvbnRyb2wuXG4gICAgICAgICAqXG4gICAgICAgICAqIFRoaXMgaXMgdXNlZCB3aGVuIHZhbGlkYXRpb25zIGFyZSBydW4gbWFudWFsbHkgYnkgdGhlIHVzZXIsIHJhdGhlciB0aGFuIGF1dG9tYXRpY2FsbHkuXG4gICAgICAgICAqXG4gICAgICAgICAqIENhbGxpbmcgYHNldEVycm9yc2Agd2lsbCBhbHNvIHVwZGF0ZSB0aGUgdmFsaWRpdHkgb2YgdGhlIHBhcmVudCBjb250cm9sLlxuICAgICAgICAgKlxuICAgICAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogY29uc3QgbG9naW4gPSBuZXcgRm9ybUNvbnRyb2woXCJzb21lTG9naW5cIik7XG4gICAgICAgICAqIGxvZ2luLnNldEVycm9ycyh7XG4gICAgICAgICAqICAgXCJub3RVbmlxdWVcIjogdHJ1ZVxuICAgICAgICAgKiB9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogZXhwZWN0KGxvZ2luLnZhbGlkKS50b0VxdWFsKGZhbHNlKTtcbiAgICAgICAgICogZXhwZWN0KGxvZ2luLmVycm9ycykudG9FcXVhbCh7XCJub3RVbmlxdWVcIjogdHJ1ZX0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBsb2dpbi5zZXRWYWx1ZShcInNvbWVPdGhlckxvZ2luXCIpO1xuICAgICAgICAgKlxuICAgICAgICAgKiBleHBlY3QobG9naW4udmFsaWQpLnRvRXF1YWwodHJ1ZSk7XG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5zZXRFcnJvcnMgPSBmdW5jdGlvbiAoZXJyb3JzLCBfYSkge1xuICAgICAgICAgICAgdmFyIGVtaXRFdmVudCA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkuZW1pdEV2ZW50O1xuICAgICAgICAgICAgZW1pdEV2ZW50ID0gaXNQcmVzZW50KGVtaXRFdmVudCkgPyBlbWl0RXZlbnQgOiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fZXJyb3JzID0gZXJyb3JzO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ29udHJvbHNFcnJvcnMoZW1pdEV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHJpZXZlcyBhIGNoaWxkIGNvbnRyb2wgZ2l2ZW4gdGhlIGNvbnRyb2wncyBuYW1lIG9yIHBhdGguXG4gICAgICAgICAqXG4gICAgICAgICAqIFBhdGhzIGNhbiBiZSBwYXNzZWQgaW4gYXMgYW4gYXJyYXkgb3IgYSBzdHJpbmcgZGVsaW1pdGVkIGJ5IGEgZG90LlxuICAgICAgICAgKlxuICAgICAgICAgKiBUbyBnZXQgYSBjb250cm9sIG5lc3RlZCB3aXRoaW4gYSBgcGVyc29uYCBzdWItZ3JvdXA6XG4gICAgICAgICAqXG4gICAgICAgICAqICogYHRoaXMuZm9ybS5nZXQoJ3BlcnNvbi5uYW1lJyk7YFxuICAgICAgICAgKlxuICAgICAgICAgKiAtT1ItXG4gICAgICAgICAqXG4gICAgICAgICAqICogYHRoaXMuZm9ybS5nZXQoWydwZXJzb24nLCAnbmFtZSddKTtgXG4gICAgICAgICAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLmdldCA9IGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybiBfZmluZCh0aGlzLCBwYXRoLCAnLicpOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBjb250cm9sIHdpdGggdGhlIGdpdmVuIHBhdGggaGFzIHRoZSBlcnJvciBzcGVjaWZpZWQuIE90aGVyd2lzZVxuICAgICAgICAgKiByZXR1cm5zIG51bGwgb3IgdW5kZWZpbmVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBubyBwYXRoIGlzIGdpdmVuLCBpdCBjaGVja3MgZm9yIHRoZSBlcnJvciBvbiB0aGUgcHJlc2VudCBjb250cm9sLlxuICAgICAgICAgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5nZXRFcnJvciA9IGZ1bmN0aW9uIChlcnJvckNvZGUsIHBhdGgpIHtcbiAgICAgICAgICAgIGlmIChwYXRoID09PSB2b2lkIDApIHsgcGF0aCA9IG51bGw7IH1cbiAgICAgICAgICAgIHZhciBjb250cm9sID0gaXNQcmVzZW50KHBhdGgpICYmICFMaXN0V3JhcHBlci5pc0VtcHR5KHBhdGgpID8gdGhpcy5nZXQocGF0aCkgOiB0aGlzO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudChjb250cm9sKSAmJiBpc1ByZXNlbnQoY29udHJvbC5fZXJyb3JzKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmdNYXBXcmFwcGVyLmdldChjb250cm9sLl9lcnJvcnMsIGVycm9yQ29kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgY29udHJvbCB3aXRoIHRoZSBnaXZlbiBwYXRoIGhhcyB0aGUgZXJyb3Igc3BlY2lmaWVkLiBPdGhlcndpc2VcbiAgICAgICAgICogcmV0dXJucyBmYWxzZS5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgbm8gcGF0aCBpcyBnaXZlbiwgaXQgY2hlY2tzIGZvciB0aGUgZXJyb3Igb24gdGhlIHByZXNlbnQgY29udHJvbC5cbiAgICAgICAgICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuaGFzRXJyb3IgPSBmdW5jdGlvbiAoZXJyb3JDb2RlLCBwYXRoKSB7XG4gICAgICAgICAgICBpZiAocGF0aCA9PT0gdm9pZCAwKSB7IHBhdGggPSBudWxsOyB9XG4gICAgICAgICAgICByZXR1cm4gaXNQcmVzZW50KHRoaXMuZ2V0RXJyb3IoZXJyb3JDb2RlLCBwYXRoKSk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLCBcInJvb3RcIiwge1xuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXRyaWV2ZXMgdGhlIHRvcC1sZXZlbCBhbmNlc3RvciBvZiB0aGlzIGNvbnRyb2wuXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciB4ID0gdGhpcztcbiAgICAgICAgICAgICAgICB3aGlsZSAoaXNQcmVzZW50KHguX3BhcmVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgeCA9IHguX3BhcmVudDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHg7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLl91cGRhdGVDb250cm9sc0Vycm9ycyA9IGZ1bmN0aW9uIChlbWl0RXZlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuX3N0YXR1cyA9IHRoaXMuX2NhbGN1bGF0ZVN0YXR1cygpO1xuICAgICAgICAgICAgaWYgKGVtaXRFdmVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N0YXR1c0NoYW5nZXMuZW1pdCh0aGlzLl9zdGF0dXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9wYXJlbnQpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGVDb250cm9sc0Vycm9ycyhlbWl0RXZlbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX2luaXRPYnNlcnZhYmxlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbHVlQ2hhbmdlcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3N0YXR1c0NoYW5nZXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX2NhbGN1bGF0ZVN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbGxDb250cm9sc0Rpc2FibGVkKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIERJU0FCTEVEO1xuICAgICAgICAgICAgaWYgKGlzUHJlc2VudCh0aGlzLl9lcnJvcnMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBJTlZBTElEO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2FueUNvbnRyb2xzSGF2ZVN0YXR1cyhQRU5ESU5HKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gUEVORElORztcbiAgICAgICAgICAgIGlmICh0aGlzLl9hbnlDb250cm9sc0hhdmVTdGF0dXMoSU5WQUxJRCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIElOVkFMSUQ7XG4gICAgICAgICAgICByZXR1cm4gVkFMSUQ7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fYW55Q29udHJvbHNIYXZlU3RhdHVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FueUNvbnRyb2xzKGZ1bmN0aW9uIChjb250cm9sKSB7IHJldHVybiBjb250cm9sLnN0YXR1cyA9PSBzdGF0dXM7IH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX2FueUNvbnRyb2xzRGlydHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fYW55Q29udHJvbHMoZnVuY3Rpb24gKGNvbnRyb2wpIHsgcmV0dXJuIGNvbnRyb2wuZGlydHk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX2FueUNvbnRyb2xzVG91Y2hlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9hbnlDb250cm9scyhmdW5jdGlvbiAoY29udHJvbCkgeyByZXR1cm4gY29udHJvbC50b3VjaGVkOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBBYnN0cmFjdENvbnRyb2wucHJvdG90eXBlLl91cGRhdGVQcmlzdGluZSA9IGZ1bmN0aW9uIChfYSkge1xuICAgICAgICAgICAgdmFyIG9ubHlTZWxmID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5vbmx5U2VsZjtcbiAgICAgICAgICAgIHRoaXMuX3ByaXN0aW5lID0gIXRoaXMuX2FueUNvbnRyb2xzRGlydHkoKTtcbiAgICAgICAgICAgIGlmIChpc1ByZXNlbnQodGhpcy5fcGFyZW50KSAmJiAhb25seVNlbGYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQuX3VwZGF0ZVByaXN0aW5lKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX3VwZGF0ZVRvdWNoZWQgPSBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICB0aGlzLl90b3VjaGVkID0gdGhpcy5fYW55Q29udHJvbHNUb3VjaGVkKCk7XG4gICAgICAgICAgICBpZiAoaXNQcmVzZW50KHRoaXMuX3BhcmVudCkgJiYgIW9ubHlTZWxmKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50Ll91cGRhdGVUb3VjaGVkKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX29uRGlzYWJsZWRDaGFuZ2UgPSBmdW5jdGlvbiAoaXNEaXNhYmxlZCkgeyB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEFic3RyYWN0Q29udHJvbC5wcm90b3R5cGUuX2lzQm94ZWRWYWx1ZSA9IGZ1bmN0aW9uIChmb3JtU3RhdGUpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1N0cmluZ01hcChmb3JtU3RhdGUpICYmIE9iamVjdC5rZXlzKGZvcm1TdGF0ZSkubGVuZ3RoID09PSAyICYmICd2YWx1ZScgaW4gZm9ybVN0YXRlICYmXG4gICAgICAgICAgICAgICAgJ2Rpc2FibGVkJyBpbiBmb3JtU3RhdGU7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgQWJzdHJhY3RDb250cm9sLnByb3RvdHlwZS5fcmVnaXN0ZXJPbkNvbGxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlID0gZm47IH07XG4gICAgICAgIHJldHVybiBBYnN0cmFjdENvbnRyb2w7XG4gICAgfSgpKTtcbiAgICAvKipcbiAgICAgKiBAd2hhdEl0RG9lcyBUcmFja3MgdGhlIHZhbHVlIGFuZCB2YWxpZGF0aW9uIHN0YXR1cyBvZiBhbiBpbmRpdmlkdWFsIGZvcm0gY29udHJvbC5cbiAgICAgKlxuICAgICAqIEl0IGlzIG9uZSBvZiB0aGUgdGhyZWUgZnVuZGFtZW50YWwgYnVpbGRpbmcgYmxvY2tzIG9mIEFuZ3VsYXIgZm9ybXMsIGFsb25nIHdpdGhcbiAgICAgKiB7QGxpbmsgRm9ybUdyb3VwfSBhbmQge0BsaW5rIEZvcm1BcnJheX0uXG4gICAgICpcbiAgICAgKiBAaG93VG9Vc2VcbiAgICAgKlxuICAgICAqIFdoZW4gaW5zdGFudGlhdGluZyBhIHtAbGluayBGb3JtQ29udHJvbH0sIHlvdSBjYW4gcGFzcyBpbiBhbiBpbml0aWFsIHZhbHVlIGFzIHRoZVxuICAgICAqIGZpcnN0IGFyZ3VtZW50LiBFeGFtcGxlOlxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBjdHJsID0gbmV3IEZvcm1Db250cm9sKCdzb21lIHZhbHVlJyk7XG4gICAgICogY29uc29sZS5sb2coY3RybC52YWx1ZSk7ICAgICAvLyAnc29tZSB2YWx1ZSdcbiAgICAgKmBgYFxuICAgICAqXG4gICAgICogWW91IGNhbiBhbHNvIGluaXRpYWxpemUgdGhlIGNvbnRyb2wgd2l0aCBhIGZvcm0gc3RhdGUgb2JqZWN0IG9uIGluc3RhbnRpYXRpb24sXG4gICAgICogd2hpY2ggaW5jbHVkZXMgYm90aCB0aGUgdmFsdWUgYW5kIHdoZXRoZXIgb3Igbm90IHRoZSBjb250cm9sIGlzIGRpc2FibGVkLlxuICAgICAqXG4gICAgICogYGBgdHNcbiAgICAgKiBjb25zdCBjdHJsID0gbmV3IEZvcm1Db250cm9sKHt2YWx1ZTogJ24vYScsIGRpc2FibGVkOiB0cnVlfSk7XG4gICAgICogY29uc29sZS5sb2coY3RybC52YWx1ZSk7ICAgICAvLyAnbi9hJ1xuICAgICAqIGNvbnNvbGUubG9nKGN0cmwuc3RhdHVzKTsgICAvLyAnRElTQUJMRUQnXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBUbyBpbmNsdWRlIGEgc3luYyB2YWxpZGF0b3IgKG9yIGFuIGFycmF5IG9mIHN5bmMgdmFsaWRhdG9ycykgd2l0aCB0aGUgY29udHJvbCxcbiAgICAgKiBwYXNzIGl0IGluIGFzIHRoZSBzZWNvbmQgYXJndW1lbnQuIEFzeW5jIHZhbGlkYXRvcnMgYXJlIGFsc28gc3VwcG9ydGVkLCBidXRcbiAgICAgKiBoYXZlIHRvIGJlIHBhc3NlZCBpbiBzZXBhcmF0ZWx5IGFzIHRoZSB0aGlyZCBhcmcuXG4gICAgICpcbiAgICAgKiBgYGB0c1xuICAgICAqIGNvbnN0IGN0cmwgPSBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMucmVxdWlyZWQpO1xuICAgICAqIGNvbnNvbGUubG9nKGN0cmwudmFsdWUpOyAgICAgLy8gJydcbiAgICAgKiBjb25zb2xlLmxvZyhjdHJsLnN0YXR1cyk7ICAgLy8gJ0lOVkFMSUQnXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBTZWUgaXRzIHN1cGVyY2xhc3MsIHtAbGluayBBYnN0cmFjdENvbnRyb2x9LCBmb3IgbW9yZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzLlxuICAgICAqXG4gICAgICogKiAqKm5wbSBwYWNrYWdlKio6IGBAYW5ndWxhci9mb3Jtc2BcbiAgICAgKlxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgRm9ybUNvbnRyb2wgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkNihGb3JtQ29udHJvbCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUNvbnRyb2woZm9ybVN0YXRlLCB2YWxpZGF0b3IsIGFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBpZiAoZm9ybVN0YXRlID09PSB2b2lkIDApIHsgZm9ybVN0YXRlID0gbnVsbDsgfVxuICAgICAgICAgICAgaWYgKHZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IHZhbGlkYXRvciA9IG51bGw7IH1cbiAgICAgICAgICAgIGlmIChhc3luY1ZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IGFzeW5jVmFsaWRhdG9yID0gbnVsbDsgfVxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgY29lcmNlVG9WYWxpZGF0b3IodmFsaWRhdG9yKSwgY29lcmNlVG9Bc3luY1ZhbGlkYXRvcihhc3luY1ZhbGlkYXRvcikpO1xuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2FwcGx5Rm9ybVN0YXRlKGZvcm1TdGF0ZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBvbmx5U2VsZjogdHJ1ZSwgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIHRoaXMuX2luaXRPYnNlcnZhYmxlcygpO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXQgdGhlIHZhbHVlIG9mIHRoZSBmb3JtIGNvbnRyb2wgdG8gYHZhbHVlYC5cbiAgICAgICAgICpcbiAgICAgICAgICogSWYgYG9ubHlTZWxmYCBpcyBgdHJ1ZWAsIHRoaXMgY2hhbmdlIHdpbGwgb25seSBhZmZlY3QgdGhlIHZhbGlkYXRpb24gb2YgdGhpcyBgRm9ybUNvbnRyb2xgXG4gICAgICAgICAqIGFuZCBub3QgaXRzIHBhcmVudCBjb21wb25lbnQuIFRoaXMgZGVmYXVsdHMgdG8gZmFsc2UuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIGBlbWl0RXZlbnRgIGlzIGB0cnVlYCwgdGhpc1xuICAgICAgICAgKiBjaGFuZ2Ugd2lsbCBjYXVzZSBhIGB2YWx1ZUNoYW5nZXNgIGV2ZW50IG9uIHRoZSBgRm9ybUNvbnRyb2xgIHRvIGJlIGVtaXR0ZWQuIFRoaXMgZGVmYXVsdHNcbiAgICAgICAgICogdG8gdHJ1ZSAoYXMgaXQgZmFsbHMgdGhyb3VnaCB0byBgdXBkYXRlVmFsdWVBbmRWYWxpZGl0eWApLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlYCBpcyBgdHJ1ZWAsIHRoZSB2aWV3IHdpbGwgYmUgbm90aWZpZWQgYWJvdXQgdGhlIG5ldyB2YWx1ZVxuICAgICAgICAgKiB2aWEgYW4gYG9uQ2hhbmdlYCBldmVudC4gVGhpcyBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBpZiBgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlYCBpcyBub3RcbiAgICAgICAgICogc3BlY2lmaWVkLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiBgZW1pdFZpZXdUb01vZGVsQ2hhbmdlYCBpcyBgdHJ1ZWAsIGFuIG5nTW9kZWxDaGFuZ2UgZXZlbnQgd2lsbCBiZSBmaXJlZCB0byB1cGRhdGUgdGhlXG4gICAgICAgICAqIG1vZGVsLiAgVGhpcyBpcyB0aGUgZGVmYXVsdCBiZWhhdmlvciBpZiBgZW1pdFZpZXdUb01vZGVsQ2hhbmdlYCBpcyBub3Qgc3BlY2lmaWVkLlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUNvbnRyb2wucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBfYiA9IF9hID09PSB2b2lkIDAgPyB7fSA6IF9hLCBvbmx5U2VsZiA9IF9iLm9ubHlTZWxmLCBlbWl0RXZlbnQgPSBfYi5lbWl0RXZlbnQsIGVtaXRNb2RlbFRvVmlld0NoYW5nZSA9IF9iLmVtaXRNb2RlbFRvVmlld0NoYW5nZSwgZW1pdFZpZXdUb01vZGVsQ2hhbmdlID0gX2IuZW1pdFZpZXdUb01vZGVsQ2hhbmdlO1xuICAgICAgICAgICAgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlID0gaXNQcmVzZW50KGVtaXRNb2RlbFRvVmlld0NoYW5nZSkgPyBlbWl0TW9kZWxUb1ZpZXdDaGFuZ2UgOiB0cnVlO1xuICAgICAgICAgICAgZW1pdFZpZXdUb01vZGVsQ2hhbmdlID0gaXNQcmVzZW50KGVtaXRWaWV3VG9Nb2RlbENoYW5nZSkgPyBlbWl0Vmlld1RvTW9kZWxDaGFuZ2UgOiB0cnVlO1xuICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9vbkNoYW5nZS5sZW5ndGggJiYgZW1pdE1vZGVsVG9WaWV3Q2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fb25DaGFuZ2UuZm9yRWFjaChmdW5jdGlvbiAoY2hhbmdlRm4pIHsgcmV0dXJuIGNoYW5nZUZuKF90aGlzLl92YWx1ZSwgZW1pdFZpZXdUb01vZGVsQ2hhbmdlKTsgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBvbmx5U2VsZjogb25seVNlbGYsIGVtaXRFdmVudDogZW1pdEV2ZW50IH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUGF0Y2hlcyB0aGUgdmFsdWUgb2YgYSBjb250cm9sLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIGZ1bmN0aW9uIGlzIGZ1bmN0aW9uYWxseSB0aGUgc2FtZSBhcyB7QGxpbmsgRm9ybUNvbnRyb2wuc2V0VmFsdWV9IGF0IHRoaXMgbGV2ZWwuXG4gICAgICAgICAqIEl0IGV4aXN0cyBmb3Igc3ltbWV0cnkgd2l0aCB7QGxpbmsgRm9ybUdyb3VwLnBhdGNoVmFsdWV9IG9uIGBGb3JtR3JvdXBzYCBhbmQgYEZvcm1BcnJheXNgLFxuICAgICAgICAgKiB3aGVyZSBpdCBkb2VzIGJlaGF2ZSBkaWZmZXJlbnRseS5cbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Db250cm9sLnByb3RvdHlwZS5wYXRjaFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7IG9wdGlvbnMgPSB7fTsgfVxuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXNldHMgdGhlIGZvcm0gY29udHJvbC4gVGhpcyBtZWFucyBieSBkZWZhdWx0OlxuICAgICAgICAgKlxuICAgICAgICAgKiAqIGl0IGlzIG1hcmtlZCBhcyBgcHJpc3RpbmVgXG4gICAgICAgICAqICogaXQgaXMgbWFya2VkIGFzIGB1bnRvdWNoZWRgXG4gICAgICAgICAqICogdmFsdWUgaXMgc2V0IHRvIG51bGxcbiAgICAgICAgICpcbiAgICAgICAgICogWW91IGNhbiBhbHNvIHJlc2V0IHRvIGEgc3BlY2lmaWMgZm9ybSBzdGF0ZSBieSBwYXNzaW5nIHRocm91Z2ggYSBzdGFuZGFsb25lXG4gICAgICAgICAqIHZhbHVlIG9yIGEgZm9ybSBzdGF0ZSBvYmplY3QgdGhhdCBjb250YWlucyBib3RoIGEgdmFsdWUgYW5kIGEgZGlzYWJsZWQgc3RhdGVcbiAgICAgICAgICogKHRoZXNlIGFyZSB0aGUgb25seSB0d28gcHJvcGVydGllcyB0aGF0IGNhbm5vdCBiZSBjYWxjdWxhdGVkKS5cbiAgICAgICAgICpcbiAgICAgICAgICogRXg6XG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYHRzXG4gICAgICAgICAqIHRoaXMuY29udHJvbC5yZXNldCgnTmFuY3knKTtcbiAgICAgICAgICpcbiAgICAgICAgICogY29uc29sZS5sb2codGhpcy5jb250cm9sLnZhbHVlKTsgIC8vICdOYW5jeSdcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIE9SXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiB0aGlzLmNvbnRyb2wucmVzZXQoe3ZhbHVlOiAnTmFuY3knLCBkaXNhYmxlZDogdHJ1ZX0pO1xuICAgICAgICAgKlxuICAgICAgICAgKiBjb25zb2xlLmxvZyh0aGlzLmNvbnRyb2wudmFsdWUpOyAgLy8gJ05hbmN5J1xuICAgICAgICAgKiBjb25zb2xlLmxvZyh0aGlzLmNvbnRyb2wuc3RhdHVzKTsgIC8vICdESVNBQkxFRCdcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQ29udHJvbC5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiAoZm9ybVN0YXRlLCBfYSkge1xuICAgICAgICAgICAgaWYgKGZvcm1TdGF0ZSA9PT0gdm9pZCAwKSB7IGZvcm1TdGF0ZSA9IG51bGw7IH1cbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICB0aGlzLl9hcHBseUZvcm1TdGF0ZShmb3JtU3RhdGUpO1xuICAgICAgICAgICAgdGhpcy5tYXJrQXNQcmlzdGluZSh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcbiAgICAgICAgICAgIHRoaXMubWFya0FzVW50b3VjaGVkKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZSh0aGlzLl92YWx1ZSwgeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Db250cm9sLnByb3RvdHlwZS5fdXBkYXRlVmFsdWUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAaW50ZXJuYWxcbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Db250cm9sLnByb3RvdHlwZS5fYW55Q29udHJvbHMgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7IHJldHVybiBmYWxzZTsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUNvbnRyb2wucHJvdG90eXBlLl9hbGxDb250cm9sc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5kaXNhYmxlZDsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgZm9yIGNoYW5nZSBldmVudHMuXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQ29udHJvbC5wcm90b3R5cGUucmVnaXN0ZXJPbkNoYW5nZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLl9vbkNoYW5nZS5wdXNoKGZuKTsgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBpbnRlcm5hbFxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUNvbnRyb2wucHJvdG90eXBlLl9jbGVhckNoYW5nZUZucyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlID0gW107XG4gICAgICAgICAgICB0aGlzLl9vbkRpc2FibGVkQ2hhbmdlID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuX29uQ29sbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlZ2lzdGVyIGEgbGlzdGVuZXIgZm9yIGRpc2FibGVkIGV2ZW50cy5cbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Db250cm9sLnByb3RvdHlwZS5yZWdpc3Rlck9uRGlzYWJsZWRDaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25EaXNhYmxlZENoYW5nZSA9IGZuOyB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQGludGVybmFsXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQ29udHJvbC5wcm90b3R5cGUuX2ZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIChjYikgeyB9O1xuICAgICAgICBGb3JtQ29udHJvbC5wcm90b3R5cGUuX2FwcGx5Rm9ybVN0YXRlID0gZnVuY3Rpb24gKGZvcm1TdGF0ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQm94ZWRWYWx1ZShmb3JtU3RhdGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBmb3JtU3RhdGUudmFsdWU7XG4gICAgICAgICAgICAgICAgZm9ybVN0YXRlLmRpc2FibGVkID8gdGhpcy5kaXNhYmxlKHsgb25seVNlbGY6IHRydWUsIGVtaXRFdmVudDogZmFsc2UgfSkgOlxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuYWJsZSh7IG9ubHlTZWxmOiB0cnVlLCBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdmFsdWUgPSBmb3JtU3RhdGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGb3JtQ29udHJvbDtcbiAgICB9KEFic3RyYWN0Q29udHJvbCkpO1xuICAgIC8qKlxuICAgICAqIEB3aGF0SXREb2VzIFRyYWNrcyB0aGUgdmFsdWUgYW5kIHZhbGlkaXR5IHN0YXRlIG9mIGEgZ3JvdXAgb2Yge0BsaW5rIEZvcm1Db250cm9sfVxuICAgICAqIGluc3RhbmNlcy5cbiAgICAgKlxuICAgICAqIEEgYEZvcm1Hcm91cGAgYWdncmVnYXRlcyB0aGUgdmFsdWVzIG9mIGVhY2ggY2hpbGQge0BsaW5rIEZvcm1Db250cm9sfSBpbnRvIG9uZSBvYmplY3QsXG4gICAgICogd2l0aCBlYWNoIGNvbnRyb2wgbmFtZSBhcyB0aGUga2V5LiAgSXQgY2FsY3VsYXRlcyBpdHMgc3RhdHVzIGJ5IHJlZHVjaW5nIHRoZSBzdGF0dXNlc1xuICAgICAqIG9mIGl0cyBjaGlsZHJlbi4gRm9yIGV4YW1wbGUsIGlmIG9uZSBvZiB0aGUgY29udHJvbHMgaW4gYSBncm91cCBpcyBpbnZhbGlkLCB0aGUgZW50aXJlXG4gICAgICogZ3JvdXAgYmVjb21lcyBpbnZhbGlkLlxuICAgICAqXG4gICAgICogYEZvcm1Hcm91cGAgaXMgb25lIG9mIHRoZSB0aHJlZSBmdW5kYW1lbnRhbCBidWlsZGluZyBibG9ja3MgdXNlZCB0byBkZWZpbmUgZm9ybXMgaW4gQW5ndWxhcixcbiAgICAgKiBhbG9uZyB3aXRoIHtAbGluayBGb3JtQ29udHJvbH0gYW5kIHtAbGluayBGb3JtQXJyYXl9LlxuICAgICAqXG4gICAgICogQGhvd1RvVXNlXG4gICAgICpcbiAgICAgKiBXaGVuIGluc3RhbnRpYXRpbmcgYSB7QGxpbmsgRm9ybUdyb3VwfSwgcGFzcyBpbiBhIGNvbGxlY3Rpb24gb2YgY2hpbGQgY29udHJvbHMgYXMgdGhlIGZpcnN0XG4gICAgICogYXJndW1lbnQuIFRoZSBrZXkgZm9yIGVhY2ggY2hpbGQgd2lsbCBiZSB0aGUgbmFtZSB1bmRlciB3aGljaCBpdCBpcyByZWdpc3RlcmVkLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIGBgYFxuICAgICAqIGNvbnN0IGZvcm0gPSBuZXcgRm9ybUdyb3VwKHtcbiAgICAgKiAgIGZpcnN0OiBuZXcgRm9ybUNvbnRyb2woJ05hbmN5JywgVmFsaWRhdG9ycy5taW5MZW5ndGgoMikpLFxuICAgICAqICAgbGFzdDogbmV3IEZvcm1Db250cm9sKCdEcmV3JyksXG4gICAgICogfSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhmb3JtLnZhbHVlKTsgICAvLyB7Zmlyc3Q6ICdOYW5jeScsIGxhc3Q7ICdEcmV3J31cbiAgICAgKiBjb25zb2xlLmxvZyhmb3JtLnN0YXR1cyk7ICAvLyAnVkFMSUQnXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGFsc28gaW5jbHVkZSBncm91cC1sZXZlbCB2YWxpZGF0b3JzIGFzIHRoZSBzZWNvbmQgYXJnLCBvciBncm91cC1sZXZlbCBhc3luY1xuICAgICAqIHZhbGlkYXRvcnMgYXMgdGhlIHRoaXJkIGFyZy4gVGhlc2UgY29tZSBpbiBoYW5keSB3aGVuIHlvdSB3YW50IHRvIHBlcmZvcm0gdmFsaWRhdGlvblxuICAgICAqIHRoYXQgY29uc2lkZXJzIHRoZSB2YWx1ZSBvZiBtb3JlIHRoYW4gb25lIGNoaWxkIGNvbnRyb2wuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe1xuICAgICAqICAgcGFzc3dvcmQ6IG5ldyBGb3JtQ29udHJvbCgnJywgVmFsaWRhdG9ycy5taW5MZW5ndGgoMikpLFxuICAgICAqICAgcGFzc3dvcmRDb25maXJtOiBuZXcgRm9ybUNvbnRyb2woJycsIFZhbGlkYXRvcnMubWluTGVuZ3RoKDIpKSxcbiAgICAgKiB9LCBwYXNzd29yZE1hdGNoVmFsaWRhdG9yKTtcbiAgICAgKlxuICAgICAqXG4gICAgICogZnVuY3Rpb24gcGFzc3dvcmRNYXRjaFZhbGlkYXRvcihnOiBGb3JtR3JvdXApIHtcbiAgICAgKiAgICByZXR1cm4gZy5nZXQoJ3Bhc3N3b3JkJykudmFsdWUgPT09IGcuZ2V0KCdwYXNzd29yZENvbmZpcm0nKS52YWx1ZVxuICAgICAqICAgICAgID8gbnVsbCA6IHsnbWlzbWF0Y2gnOiB0cnVlfTtcbiAgICAgKiB9XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiAqICoqbnBtIHBhY2thZ2UqKjogYEBhbmd1bGFyL2Zvcm1zYFxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBGb3JtR3JvdXAgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkNihGb3JtR3JvdXAsIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIEZvcm1Hcm91cChjb250cm9scywgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcikge1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IHZhbGlkYXRvciA9IG51bGw7IH1cbiAgICAgICAgICAgIGlmIChhc3luY1ZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IGFzeW5jVmFsaWRhdG9yID0gbnVsbDsgfVxuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcywgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzID0gY29udHJvbHM7XG4gICAgICAgICAgICB0aGlzLl9pbml0T2JzZXJ2YWJsZXMoKTtcbiAgICAgICAgICAgIHRoaXMuX3NldFVwQ29udHJvbHMoKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOiB0cnVlLCBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZWdpc3RlcnMgYSBjb250cm9sIHdpdGggdGhlIGdyb3VwJ3MgbGlzdCBvZiBjb250cm9scy5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2QgZG9lcyBub3QgdXBkYXRlIHZhbHVlIG9yIHZhbGlkaXR5IG9mIHRoZSBjb250cm9sLCBzbyBmb3JcbiAgICAgICAgICogbW9zdCBjYXNlcyB5b3UnbGwgd2FudCB0byB1c2Uge0BsaW5rIEZvcm1Hcm91cC5hZGRDb250cm9sfSBpbnN0ZWFkLlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUdyb3VwLnByb3RvdHlwZS5yZWdpc3RlckNvbnRyb2wgPSBmdW5jdGlvbiAobmFtZSwgY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbHNbbmFtZV0pXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbHNbbmFtZV07XG4gICAgICAgICAgICB0aGlzLmNvbnRyb2xzW25hbWVdID0gY29udHJvbDtcbiAgICAgICAgICAgIGNvbnRyb2wuc2V0UGFyZW50KHRoaXMpO1xuICAgICAgICAgICAgY29udHJvbC5fcmVnaXN0ZXJPbkNvbGxlY3Rpb25DaGFuZ2UodGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlKTtcbiAgICAgICAgICAgIHJldHVybiBjb250cm9sO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQWRkIGEgY29udHJvbCB0byB0aGlzIGdyb3VwLlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUdyb3VwLnByb3RvdHlwZS5hZGRDb250cm9sID0gZnVuY3Rpb24gKG5hbWUsIGNvbnRyb2wpIHtcbiAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJDb250cm9sKG5hbWUsIGNvbnRyb2wpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICAgICAgICB0aGlzLl9vbkNvbGxlY3Rpb25DaGFuZ2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlbW92ZSBhIGNvbnRyb2wgZnJvbSB0aGlzIGdyb3VwLlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUdyb3VwLnByb3RvdHlwZS5yZW1vdmVDb250cm9sID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xzW25hbWVdKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNbbmFtZV0uX3JlZ2lzdGVyT25Db2xsZWN0aW9uQ2hhbmdlKGZ1bmN0aW9uICgpIHsgfSk7XG4gICAgICAgICAgICBTdHJpbmdNYXBXcmFwcGVyLmRlbGV0ZSh0aGlzLmNvbnRyb2xzLCBuYW1lKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgdGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXBsYWNlIGFuIGV4aXN0aW5nIGNvbnRyb2wuXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtR3JvdXAucHJvdG90eXBlLnNldENvbnRyb2wgPSBmdW5jdGlvbiAobmFtZSwgY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbHNbbmFtZV0pXG4gICAgICAgICAgICAgICAgdGhpcy5jb250cm9sc1tuYW1lXS5fcmVnaXN0ZXJPbkNvbGxlY3Rpb25DaGFuZ2UoZnVuY3Rpb24gKCkgeyB9KTtcbiAgICAgICAgICAgIFN0cmluZ01hcFdyYXBwZXIuZGVsZXRlKHRoaXMuY29udHJvbHMsIG5hbWUpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2wpXG4gICAgICAgICAgICAgICAgdGhpcy5yZWdpc3RlckNvbnRyb2wobmFtZSwgY29udHJvbCk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoKTtcbiAgICAgICAgICAgIHRoaXMuX29uQ29sbGVjdGlvbkNoYW5nZSgpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ2hlY2sgd2hldGhlciB0aGVyZSBpcyBhbiBlbmFibGVkIGNvbnRyb2wgd2l0aCB0aGUgZ2l2ZW4gbmFtZSBpbiB0aGUgZ3JvdXAuXG4gICAgICAgICAqXG4gICAgICAgICAqIEl0IHdpbGwgcmV0dXJuIGZhbHNlIGZvciBkaXNhYmxlZCBjb250cm9scy4gSWYgeW91J2QgbGlrZSB0byBjaGVjayBmb3JcbiAgICAgICAgICogZXhpc3RlbmNlIGluIHRoZSBncm91cCBvbmx5LCB1c2Uge0BsaW5rIEFic3RyYWN0Q29udHJvbC5nZXR9IGluc3RlYWQuXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtR3JvdXAucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKGNvbnRyb2xOYW1lKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9scy5oYXNPd25Qcm9wZXJ0eShjb250cm9sTmFtZSkgJiYgdGhpcy5jb250cm9sc1tjb250cm9sTmFtZV0uZW5hYmxlZDtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqICBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUge0BsaW5rIEZvcm1Hcm91cH0uIEl0IGFjY2VwdHMgYW4gb2JqZWN0IHRoYXQgbWF0Y2hlc1xuICAgICAgICAgKiAgdGhlIHN0cnVjdHVyZSBvZiB0aGUgZ3JvdXAsIHdpdGggY29udHJvbCBuYW1lcyBhcyBrZXlzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBUaGlzIG1ldGhvZCBwZXJmb3JtcyBzdHJpY3QgY2hlY2tzLCBzbyBpdCB3aWxsIHRocm93IGFuIGVycm9yIGlmIHlvdSB0cnlcbiAgICAgICAgICogdG8gc2V0IHRoZSB2YWx1ZSBvZiBhIGNvbnRyb2wgdGhhdCBkb2Vzbid0IGV4aXN0IG9yIGlmIHlvdSBleGNsdWRlIHRoZVxuICAgICAgICAgKiB2YWx1ZSBvZiBhIGNvbnRyb2wuXG4gICAgICAgICAqXG4gICAgICAgICAqICAjIyMgRXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgYGBgXG4gICAgICAgICAqICBjb25zdCBmb3JtID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgICAgICAqICAgICBmaXJzdDogbmV3IEZvcm1Db250cm9sKCksXG4gICAgICAgICAqICAgICBsYXN0OiBuZXcgRm9ybUNvbnRyb2woKVxuICAgICAgICAgKiAgfSk7XG4gICAgICAgICAqICBjb25zb2xlLmxvZyhmb3JtLnZhbHVlKTsgICAvLyB7Zmlyc3Q6IG51bGwsIGxhc3Q6IG51bGx9XG4gICAgICAgICAqXG4gICAgICAgICAqICBmb3JtLnNldFZhbHVlKHtmaXJzdDogJ05hbmN5JywgbGFzdDogJ0RyZXcnfSk7XG4gICAgICAgICAqICBjb25zb2xlLmxvZyhmb3JtLnZhbHVlKTsgICAvLyB7Zmlyc3Q6ICdOYW5jeScsIGxhc3Q6ICdEcmV3J31cbiAgICAgICAgICpcbiAgICAgICAgICogIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUdyb3VwLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgb25seVNlbGYgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLm9ubHlTZWxmO1xuICAgICAgICAgICAgdGhpcy5fY2hlY2tBbGxWYWx1ZXNQcmVzZW50KHZhbHVlKTtcbiAgICAgICAgICAgIFN0cmluZ01hcFdyYXBwZXIuZm9yRWFjaCh2YWx1ZSwgZnVuY3Rpb24gKG5ld1ZhbHVlLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDb250cm9sTWlzc2luZyhuYW1lKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5jb250cm9sc1tuYW1lXS5zZXRWYWx1ZShuZXdWYWx1ZSwgeyBvbmx5U2VsZjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogIFBhdGNoZXMgdGhlIHZhbHVlIG9mIHRoZSB7QGxpbmsgRm9ybUdyb3VwfS4gSXQgYWNjZXB0cyBhbiBvYmplY3Qgd2l0aCBjb250cm9sXG4gICAgICAgICAqICBuYW1lcyBhcyBrZXlzLCBhbmQgd2lsbCBkbyBpdHMgYmVzdCB0byBtYXRjaCB0aGUgdmFsdWVzIHRvIHRoZSBjb3JyZWN0IGNvbnRyb2xzXG4gICAgICAgICAqICBpbiB0aGUgZ3JvdXAuXG4gICAgICAgICAqXG4gICAgICAgICAqICBJdCBhY2NlcHRzIGJvdGggc3VwZXItc2V0cyBhbmQgc3ViLXNldHMgb2YgdGhlIGdyb3VwIHdpdGhvdXQgdGhyb3dpbmcgYW4gZXJyb3IuXG4gICAgICAgICAqXG4gICAgICAgICAqICAjIyMgRXhhbXBsZVxuICAgICAgICAgKlxuICAgICAgICAgKiAgYGBgXG4gICAgICAgICAqICBjb25zdCBmb3JtID0gbmV3IEZvcm1Hcm91cCh7XG4gICAgICAgICAqICAgICBmaXJzdDogbmV3IEZvcm1Db250cm9sKCksXG4gICAgICAgICAqICAgICBsYXN0OiBuZXcgRm9ybUNvbnRyb2woKVxuICAgICAgICAgKiAgfSk7XG4gICAgICAgICAqICBjb25zb2xlLmxvZyhmb3JtLnZhbHVlKTsgICAvLyB7Zmlyc3Q6IG51bGwsIGxhc3Q6IG51bGx9XG4gICAgICAgICAqXG4gICAgICAgICAqICBmb3JtLnBhdGNoVmFsdWUoe2ZpcnN0OiAnTmFuY3knfSk7XG4gICAgICAgICAqICBjb25zb2xlLmxvZyhmb3JtLnZhbHVlKTsgICAvLyB7Zmlyc3Q6ICdOYW5jeScsIGxhc3Q6IG51bGx9XG4gICAgICAgICAqXG4gICAgICAgICAqICBgYGBcbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUucGF0Y2hWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgX2EpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB2YXIgb25seVNlbGYgPSAoX2EgPT09IHZvaWQgMCA/IHt9IDogX2EpLm9ubHlTZWxmO1xuICAgICAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHZhbHVlLCBmdW5jdGlvbiAobmV3VmFsdWUsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuY29udHJvbHNbbmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udHJvbHNbbmFtZV0ucGF0Y2hWYWx1ZShuZXdWYWx1ZSwgeyBvbmx5U2VsZjogdHJ1ZSB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlc2V0cyB0aGUge0BsaW5rIEZvcm1Hcm91cH0uIFRoaXMgbWVhbnMgYnkgZGVmYXVsdDpcbiAgICAgICAgICpcbiAgICAgICAgICogKiBUaGUgZ3JvdXAgYW5kIGFsbCBkZXNjZW5kYW50cyBhcmUgbWFya2VkIGBwcmlzdGluZWBcbiAgICAgICAgICogKiBUaGUgZ3JvdXAgYW5kIGFsbCBkZXNjZW5kYW50cyBhcmUgbWFya2VkIGB1bnRvdWNoZWRgXG4gICAgICAgICAqICogVGhlIHZhbHVlIG9mIGFsbCBkZXNjZW5kYW50cyB3aWxsIGJlIG51bGwgb3IgbnVsbCBtYXBzXG4gICAgICAgICAqXG4gICAgICAgICAqIFlvdSBjYW4gYWxzbyByZXNldCB0byBhIHNwZWNpZmljIGZvcm0gc3RhdGUgYnkgcGFzc2luZyBpbiBhIG1hcCBvZiBzdGF0ZXNcbiAgICAgICAgICogdGhhdCBtYXRjaGVzIHRoZSBzdHJ1Y3R1cmUgb2YgeW91ciBmb3JtLCB3aXRoIGNvbnRyb2wgbmFtZXMgYXMga2V5cy4gVGhlIHN0YXRlXG4gICAgICAgICAqIGNhbiBiZSBhIHN0YW5kYWxvbmUgdmFsdWUgb3IgYSBmb3JtIHN0YXRlIG9iamVjdCB3aXRoIGJvdGggYSB2YWx1ZSBhbmQgYSBkaXNhYmxlZFxuICAgICAgICAgKiBzdGF0dXMuXG4gICAgICAgICAqXG4gICAgICAgICAqICMjIyBFeGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYHRzXG4gICAgICAgICAqIHRoaXMuZm9ybS5yZXNldCh7Zmlyc3Q6ICduYW1lJywgbGFzdDsgJ2xhc3QgbmFtZSd9KTtcbiAgICAgICAgICpcbiAgICAgICAgICogY29uc29sZS5sb2codGhpcy5mb3JtLnZhbHVlKTsgIC8vIHtmaXJzdDogJ25hbWUnLCBsYXN0OiAnbGFzdCBuYW1lJ31cbiAgICAgICAgICogYGBgXG4gICAgICAgICAqXG4gICAgICAgICAqIC0gT1IgLVxuICAgICAgICAgKlxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICogdGhpcy5mb3JtLnJlc2V0KHtcbiAgICAgICAgICogICBmaXJzdDoge3ZhbHVlOiAnbmFtZScsIGRpc2FibGVkOiB0cnVlfSxcbiAgICAgICAgICogICBsYXN0OiAnbGFzdCdcbiAgICAgICAgICogfSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnNvbGUubG9nKHRoaXMuZm9ybS52YWx1ZSk7ICAvLyB7Zmlyc3Q6ICduYW1lJywgbGFzdDogJ2xhc3QgbmFtZSd9XG4gICAgICAgICAqIGNvbnNvbGUubG9nKHRoaXMuZm9ybS5nZXQoJ2ZpcnN0Jykuc3RhdHVzKTsgIC8vICdESVNBQkxFRCdcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtR3JvdXAucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSB7fTsgfVxuICAgICAgICAgICAgdmFyIG9ubHlTZWxmID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5vbmx5U2VsZjtcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY29udHJvbCwgbmFtZSkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wucmVzZXQodmFsdWVbbmFtZV0sIHsgb25seVNlbGY6IHRydWUgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcbiAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVByaXN0aW5lKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlVG91Y2hlZCh7IG9ubHlTZWxmOiBvbmx5U2VsZiB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSBhZ2dyZWdhdGUgdmFsdWUgb2YgdGhlIHtAbGluayBGb3JtR3JvdXB9LCBpbmNsdWRpbmcgYW55IGRpc2FibGVkIGNvbnRyb2xzLlxuICAgICAgICAgKlxuICAgICAgICAgKiBJZiB5b3UnZCBsaWtlIHRvIGluY2x1ZGUgYWxsIHZhbHVlcyByZWdhcmRsZXNzIG9mIGRpc2FibGVkIHN0YXR1cywgdXNlIHRoaXMgbWV0aG9kLlxuICAgICAgICAgKiBPdGhlcndpc2UsIHRoZSBgdmFsdWVgIHByb3BlcnR5IGlzIHRoZSBiZXN0IHdheSB0byBnZXQgdGhlIHZhbHVlIG9mIHRoZSBncm91cC5cbiAgICAgICAgICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuZ2V0UmF3VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVkdWNlQ2hpbGRyZW4oe30sIGZ1bmN0aW9uIChhY2MsIGNvbnRyb2wsIG5hbWUpIHtcbiAgICAgICAgICAgICAgICBhY2NbbmFtZV0gPSBjb250cm9sLnZhbHVlO1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2M7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtR3JvdXAucHJvdG90eXBlLl90aHJvd0lmQ29udHJvbE1pc3NpbmcgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgICAgICAgICAgaWYgKCFPYmplY3Qua2V5cyh0aGlzLmNvbnRyb2xzKS5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXG4gICAgICAgIFRoZXJlIGFyZSBubyBmb3JtIGNvbnRyb2xzIHJlZ2lzdGVyZWQgd2l0aCB0aGlzIGdyb3VwIHlldC4gIElmIHlvdSdyZSB1c2luZyBuZ01vZGVsLFxcbiAgICAgICAgeW91IG1heSB3YW50IHRvIGNoZWNrIG5leHQgdGljayAoZS5nLiB1c2Ugc2V0VGltZW91dCkuXFxuICAgICAgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnRyb2xzW25hbWVdKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgZm9ybSBjb250cm9sIHdpdGggbmFtZTogXCIgKyBuYW1lICsgXCIuXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX2ZvckVhY2hDaGlsZCA9IGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKHRoaXMuY29udHJvbHMsIGNiKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtR3JvdXAucHJvdG90eXBlLl9zZXRVcENvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgICAgIGNvbnRyb2wuc2V0UGFyZW50KF90aGlzKTtcbiAgICAgICAgICAgICAgICBjb250cm9sLl9yZWdpc3Rlck9uQ29sbGVjdGlvbkNoYW5nZShfdGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX3VwZGF0ZVZhbHVlID0gZnVuY3Rpb24gKCkgeyB0aGlzLl92YWx1ZSA9IHRoaXMuX3JlZHVjZVZhbHVlKCk7IH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgRm9ybUdyb3VwLnByb3RvdHlwZS5fYW55Q29udHJvbHMgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIHJlcyA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy5fZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjb250cm9sLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgcmVzID0gcmVzIHx8IChfdGhpcy5jb250YWlucyhuYW1lKSAmJiBjb25kaXRpb24oY29udHJvbCkpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX3JlZHVjZVZhbHVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWR1Y2VDaGlsZHJlbih7fSwgZnVuY3Rpb24gKGFjYywgY29udHJvbCwgbmFtZSkge1xuICAgICAgICAgICAgICAgIGlmIChjb250cm9sLmVuYWJsZWQgfHwgX3RoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgYWNjW25hbWVdID0gY29udHJvbC52YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX3JlZHVjZUNoaWxkcmVuID0gZnVuY3Rpb24gKGluaXRWYWx1ZSwgZm4pIHtcbiAgICAgICAgICAgIHZhciByZXMgPSBpbml0VmFsdWU7XG4gICAgICAgICAgICB0aGlzLl9mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNvbnRyb2wsIG5hbWUpIHsgcmVzID0gZm4ocmVzLCBjb250cm9sLCBuYW1lKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX2FsbENvbnRyb2xzRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaSA9IDAsIF9hID0gT2JqZWN0LmtleXModGhpcy5jb250cm9scyk7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xOYW1lID0gX2FbX2ldO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2xzW2NvbnRyb2xOYW1lXS5lbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5jb250cm9scykubGVuZ3RoID4gMCB8fCB0aGlzLmRpc2FibGVkO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cC5wcm90b3R5cGUuX2NoZWNrQWxsVmFsdWVzUHJlc2VudCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5fZm9yRWFjaENoaWxkKGZ1bmN0aW9uIChjb250cm9sLCBuYW1lKSB7XG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlW25hbWVdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTXVzdCBzdXBwbHkgYSB2YWx1ZSBmb3IgZm9ybSBjb250cm9sIHdpdGggbmFtZTogJ1wiICsgbmFtZSArIFwiJy5cIik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBGb3JtR3JvdXA7XG4gICAgfShBYnN0cmFjdENvbnRyb2wpKTtcbiAgICAvKipcbiAgICAgKiBAd2hhdEl0RG9lcyBUcmFja3MgdGhlIHZhbHVlIGFuZCB2YWxpZGl0eSBzdGF0ZSBvZiBhbiBhcnJheSBvZiB7QGxpbmsgRm9ybUNvbnRyb2x9XG4gICAgICogaW5zdGFuY2VzLlxuICAgICAqXG4gICAgICogQSBgRm9ybUFycmF5YCBhZ2dyZWdhdGVzIHRoZSB2YWx1ZXMgb2YgZWFjaCBjaGlsZCB7QGxpbmsgRm9ybUNvbnRyb2x9IGludG8gYW4gYXJyYXkuXG4gICAgICogSXQgY2FsY3VsYXRlcyBpdHMgc3RhdHVzIGJ5IHJlZHVjaW5nIHRoZSBzdGF0dXNlcyBvZiBpdHMgY2hpbGRyZW4uIEZvciBleGFtcGxlLCBpZiBvbmUgb2ZcbiAgICAgKiB0aGUgY29udHJvbHMgaW4gYSBgRm9ybUFycmF5YCBpcyBpbnZhbGlkLCB0aGUgZW50aXJlIGFycmF5IGJlY29tZXMgaW52YWxpZC5cbiAgICAgKlxuICAgICAqIGBGb3JtQXJyYXlgIGlzIG9uZSBvZiB0aGUgdGhyZWUgZnVuZGFtZW50YWwgYnVpbGRpbmcgYmxvY2tzIHVzZWQgdG8gZGVmaW5lIGZvcm1zIGluIEFuZ3VsYXIsXG4gICAgICogYWxvbmcgd2l0aCB7QGxpbmsgRm9ybUNvbnRyb2x9IGFuZCB7QGxpbmsgRm9ybUdyb3VwfS5cbiAgICAgKlxuICAgICAqIEBob3dUb1VzZVxuICAgICAqXG4gICAgICogV2hlbiBpbnN0YW50aWF0aW5nIGEge0BsaW5rIEZvcm1BcnJheX0sIHBhc3MgaW4gYW4gYXJyYXkgb2YgY2hpbGQgY29udHJvbHMgYXMgdGhlIGZpcnN0XG4gICAgICogYXJndW1lbnQuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogY29uc3QgYXJyID0gbmV3IEZvcm1BcnJheShbXG4gICAgICogICBuZXcgRm9ybUNvbnRyb2woJ05hbmN5JywgVmFsaWRhdG9ycy5taW5MZW5ndGgoMikpLFxuICAgICAqICAgbmV3IEZvcm1Db250cm9sKCdEcmV3JyksXG4gICAgICogXSk7XG4gICAgICpcbiAgICAgKiBjb25zb2xlLmxvZyhhcnIudmFsdWUpOyAgIC8vIFsnTmFuY3knLCAnRHJldyddXG4gICAgICogY29uc29sZS5sb2coYXJyLnN0YXR1cyk7ICAvLyAnVkFMSUQnXG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGFsc28gaW5jbHVkZSBhcnJheS1sZXZlbCB2YWxpZGF0b3JzIGFzIHRoZSBzZWNvbmQgYXJnLCBvciBhcnJheS1sZXZlbCBhc3luY1xuICAgICAqIHZhbGlkYXRvcnMgYXMgdGhlIHRoaXJkIGFyZy4gVGhlc2UgY29tZSBpbiBoYW5keSB3aGVuIHlvdSB3YW50IHRvIHBlcmZvcm0gdmFsaWRhdGlvblxuICAgICAqIHRoYXQgY29uc2lkZXJzIHRoZSB2YWx1ZSBvZiBtb3JlIHRoYW4gb25lIGNoaWxkIGNvbnRyb2wuXG4gICAgICpcbiAgICAgKiAjIyMgQWRkaW5nIG9yIHJlbW92aW5nIGNvbnRyb2xzXG4gICAgICpcbiAgICAgKiBUbyBjaGFuZ2UgdGhlIGNvbnRyb2xzIGluIHRoZSBhcnJheSwgdXNlIHRoZSBgcHVzaGAsIGBpbnNlcnRgLCBvciBgcmVtb3ZlQXRgIG1ldGhvZHNcbiAgICAgKiBpbiBgRm9ybUFycmF5YCBpdHNlbGYuIFRoZXNlIG1ldGhvZHMgZW5zdXJlIHRoZSBjb250cm9scyBhcmUgcHJvcGVybHkgdHJhY2tlZCBpbiB0aGVcbiAgICAgKiBmb3JtJ3MgaGllcmFyY2h5LiBEbyBub3QgbW9kaWZ5IHRoZSBhcnJheSBvZiBgQWJzdHJhY3RDb250cm9sYHMgdXNlZCB0byBpbnN0YW50aWF0ZVxuICAgICAqIHRoZSBgRm9ybUFycmF5YCBkaXJlY3RseSwgYXMgdGhhdCB3aWxsIHJlc3VsdCBpbiBzdHJhbmdlIGFuZCB1bmV4cGVjdGVkIGJlaGF2aW9yIHN1Y2hcbiAgICAgKiBhcyBicm9rZW4gY2hhbmdlIGRldGVjdGlvbi5cbiAgICAgKlxuICAgICAqICogKipucG0gcGFja2FnZSoqOiBgQGFuZ3VsYXIvZm9ybXNgXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEZvcm1BcnJheSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyQ2KEZvcm1BcnJheSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUFycmF5KGNvbnRyb2xzLCB2YWxpZGF0b3IsIGFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yID09PSB2b2lkIDApIHsgdmFsaWRhdG9yID0gbnVsbDsgfVxuICAgICAgICAgICAgaWYgKGFzeW5jVmFsaWRhdG9yID09PSB2b2lkIDApIHsgYXN5bmNWYWxpZGF0b3IgPSBudWxsOyB9XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzLCB2YWxpZGF0b3IsIGFzeW5jVmFsaWRhdG9yKTtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMgPSBjb250cm9scztcbiAgICAgICAgICAgIHRoaXMuX2luaXRPYnNlcnZhYmxlcygpO1xuICAgICAgICAgICAgdGhpcy5fc2V0VXBDb250cm9scygpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IHRydWUsIGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEdldCB0aGUge0BsaW5rIEFic3RyYWN0Q29udHJvbH0gYXQgdGhlIGdpdmVuIGBpbmRleGAgaW4gdGhlIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5hdCA9IGZ1bmN0aW9uIChpbmRleCkgeyByZXR1cm4gdGhpcy5jb250cm9sc1tpbmRleF07IH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbnNlcnQgYSBuZXcge0BsaW5rIEFic3RyYWN0Q29udHJvbH0gYXQgdGhlIGVuZCBvZiB0aGUgYXJyYXkuXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgdGhpcy5jb250cm9scy5wdXNoKGNvbnRyb2wpO1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJDb250cm9sKGNvbnRyb2wpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICAgICAgICB0aGlzLl9vbkNvbGxlY3Rpb25DaGFuZ2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEluc2VydCBhIG5ldyB7QGxpbmsgQWJzdHJhY3RDb250cm9sfSBhdCB0aGUgZ2l2ZW4gYGluZGV4YCBpbiB0aGUgYXJyYXkuXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLmluc2VydCA9IGZ1bmN0aW9uIChpbmRleCwgY29udHJvbCkge1xuICAgICAgICAgICAgTGlzdFdyYXBwZXIuaW5zZXJ0KHRoaXMuY29udHJvbHMsIGluZGV4LCBjb250cm9sKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgdGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlKCk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZW1vdmUgdGhlIGNvbnRyb2wgYXQgdGhlIGdpdmVuIGBpbmRleGAgaW4gdGhlIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5yZW1vdmVBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbHNbaW5kZXhdKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNbaW5kZXhdLl9yZWdpc3Rlck9uQ29sbGVjdGlvbkNoYW5nZShmdW5jdGlvbiAoKSB7IH0pO1xuICAgICAgICAgICAgTGlzdFdyYXBwZXIucmVtb3ZlQXQodGhpcy5jb250cm9scywgaW5kZXgpO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICAgICAgICB0aGlzLl9vbkNvbGxlY3Rpb25DaGFuZ2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJlcGxhY2UgYW4gZXhpc3RpbmcgY29udHJvbC5cbiAgICAgICAgICovXG4gICAgICAgIEZvcm1BcnJheS5wcm90b3R5cGUuc2V0Q29udHJvbCA9IGZ1bmN0aW9uIChpbmRleCwgY29udHJvbCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29udHJvbHNbaW5kZXhdKVxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbHNbaW5kZXhdLl9yZWdpc3Rlck9uQ29sbGVjdGlvbkNoYW5nZShmdW5jdGlvbiAoKSB7IH0pO1xuICAgICAgICAgICAgTGlzdFdyYXBwZXIucmVtb3ZlQXQodGhpcy5jb250cm9scywgaW5kZXgpO1xuICAgICAgICAgICAgaWYgKGNvbnRyb2wpIHtcbiAgICAgICAgICAgICAgICBMaXN0V3JhcHBlci5pbnNlcnQodGhpcy5jb250cm9scywgaW5kZXgsIGNvbnRyb2wpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyQ29udHJvbChjb250cm9sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSgpO1xuICAgICAgICAgICAgdGhpcy5fb25Db2xsZWN0aW9uQ2hhbmdlKCk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQXJyYXkucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIExlbmd0aCBvZiB0aGUgY29udHJvbCBhcnJheS5cbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmNvbnRyb2xzLmxlbmd0aDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgU2V0cyB0aGUgdmFsdWUgb2YgdGhlIHtAbGluayBGb3JtQXJyYXl9LiBJdCBhY2NlcHRzIGFuIGFycmF5IHRoYXQgbWF0Y2hlc1xuICAgICAgICAgKiAgdGhlIHN0cnVjdHVyZSBvZiB0aGUgY29udHJvbC5cbiAgICAgICAgICpcbiAgICAgICAgICogVGhpcyBtZXRob2QgcGVyZm9ybXMgc3RyaWN0IGNoZWNrcywgc28gaXQgd2lsbCB0aHJvdyBhbiBlcnJvciBpZiB5b3UgdHJ5XG4gICAgICAgICAqIHRvIHNldCB0aGUgdmFsdWUgb2YgYSBjb250cm9sIHRoYXQgZG9lc24ndCBleGlzdCBvciBpZiB5b3UgZXhjbHVkZSB0aGVcbiAgICAgICAgICogdmFsdWUgb2YgYSBjb250cm9sLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIyMjIEV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogIGBgYFxuICAgICAgICAgKiAgY29uc3QgYXJyID0gbmV3IEZvcm1BcnJheShbXG4gICAgICAgICAqICAgICBuZXcgRm9ybUNvbnRyb2woKSxcbiAgICAgICAgICogICAgIG5ldyBGb3JtQ29udHJvbCgpXG4gICAgICAgICAqICBdKTtcbiAgICAgICAgICogIGNvbnNvbGUubG9nKGFyci52YWx1ZSk7ICAgLy8gW251bGwsIG51bGxdXG4gICAgICAgICAqXG4gICAgICAgICAqICBhcnIuc2V0VmFsdWUoWydOYW5jeScsICdEcmV3J10pO1xuICAgICAgICAgKiAgY29uc29sZS5sb2coYXJyLnZhbHVlKTsgICAvLyBbJ05hbmN5JywgJ0RyZXcnXVxuICAgICAgICAgKiAgYGBgXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0FsbFZhbHVlc1ByZXNlbnQodmFsdWUpO1xuICAgICAgICAgICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbiAobmV3VmFsdWUsIGluZGV4KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuX3Rocm93SWZDb250cm9sTWlzc2luZyhpbmRleCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuYXQoaW5kZXgpLnNldFZhbHVlKG5ld1ZhbHVlLCB7IG9ubHlTZWxmOiB0cnVlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiAgUGF0Y2hlcyB0aGUgdmFsdWUgb2YgdGhlIHtAbGluayBGb3JtQXJyYXl9LiBJdCBhY2NlcHRzIGFuIGFycmF5IHRoYXQgbWF0Y2hlcyB0aGVcbiAgICAgICAgICogIHN0cnVjdHVyZSBvZiB0aGUgY29udHJvbCwgYW5kIHdpbGwgZG8gaXRzIGJlc3QgdG8gbWF0Y2ggdGhlIHZhbHVlcyB0byB0aGUgY29ycmVjdFxuICAgICAgICAgKiAgY29udHJvbHMgaW4gdGhlIGdyb3VwLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgSXQgYWNjZXB0cyBib3RoIHN1cGVyLXNldHMgYW5kIHN1Yi1zZXRzIG9mIHRoZSBhcnJheSB3aXRob3V0IHRocm93aW5nIGFuIGVycm9yLlxuICAgICAgICAgKlxuICAgICAgICAgKiAgIyMjIEV4YW1wbGVcbiAgICAgICAgICpcbiAgICAgICAgICogIGBgYFxuICAgICAgICAgKiAgY29uc3QgYXJyID0gbmV3IEZvcm1BcnJheShbXG4gICAgICAgICAqICAgICBuZXcgRm9ybUNvbnRyb2woKSxcbiAgICAgICAgICogICAgIG5ldyBGb3JtQ29udHJvbCgpXG4gICAgICAgICAqICBdKTtcbiAgICAgICAgICogIGNvbnNvbGUubG9nKGFyci52YWx1ZSk7ICAgLy8gW251bGwsIG51bGxdXG4gICAgICAgICAqXG4gICAgICAgICAqICBhcnIucGF0Y2hWYWx1ZShbJ05hbmN5J10pO1xuICAgICAgICAgKiAgY29uc29sZS5sb2coYXJyLnZhbHVlKTsgICAvLyBbJ05hbmN5JywgbnVsbF1cbiAgICAgICAgICogIGBgYFxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5wYXRjaFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBvbmx5U2VsZiA9IChfYSA9PT0gdm9pZCAwID8ge30gOiBfYSkub25seVNlbGY7XG4gICAgICAgICAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uIChuZXdWYWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMuYXQoaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmF0KGluZGV4KS5wYXRjaFZhbHVlKG5ld1ZhbHVlLCB7IG9ubHlTZWxmOiB0cnVlIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogUmVzZXRzIHRoZSB7QGxpbmsgRm9ybUFycmF5fS4gVGhpcyBtZWFucyBieSBkZWZhdWx0OlxuICAgICAgICAgKlxuICAgICAgICAgKiAqIFRoZSBhcnJheSBhbmQgYWxsIGRlc2NlbmRhbnRzIGFyZSBtYXJrZWQgYHByaXN0aW5lYFxuICAgICAgICAgKiAqIFRoZSBhcnJheSBhbmQgYWxsIGRlc2NlbmRhbnRzIGFyZSBtYXJrZWQgYHVudG91Y2hlZGBcbiAgICAgICAgICogKiBUaGUgdmFsdWUgb2YgYWxsIGRlc2NlbmRhbnRzIHdpbGwgYmUgbnVsbCBvciBudWxsIG1hcHNcbiAgICAgICAgICpcbiAgICAgICAgICogWW91IGNhbiBhbHNvIHJlc2V0IHRvIGEgc3BlY2lmaWMgZm9ybSBzdGF0ZSBieSBwYXNzaW5nIGluIGFuIGFycmF5IG9mIHN0YXRlc1xuICAgICAgICAgKiB0aGF0IG1hdGNoZXMgdGhlIHN0cnVjdHVyZSBvZiB0aGUgY29udHJvbC4gVGhlIHN0YXRlIGNhbiBiZSBhIHN0YW5kYWxvbmUgdmFsdWVcbiAgICAgICAgICogb3IgYSBmb3JtIHN0YXRlIG9iamVjdCB3aXRoIGJvdGggYSB2YWx1ZSBhbmQgYSBkaXNhYmxlZCBzdGF0dXMuXG4gICAgICAgICAqXG4gICAgICAgICAqICMjIyBFeGFtcGxlXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYHRzXG4gICAgICAgICAqIHRoaXMuYXJyLnJlc2V0KFsnbmFtZScsICdsYXN0IG5hbWUnXSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnNvbGUubG9nKHRoaXMuYXJyLnZhbHVlKTsgIC8vIFsnbmFtZScsICdsYXN0IG5hbWUnXVxuICAgICAgICAgKiBgYGBcbiAgICAgICAgICpcbiAgICAgICAgICogLSBPUiAtXG4gICAgICAgICAqXG4gICAgICAgICAqIGBgYFxuICAgICAgICAgKiB0aGlzLmFyci5yZXNldChbXG4gICAgICAgICAqICAge3ZhbHVlOiAnbmFtZScsIGRpc2FibGVkOiB0cnVlfSxcbiAgICAgICAgICogICAnbGFzdCdcbiAgICAgICAgICogXSk7XG4gICAgICAgICAqXG4gICAgICAgICAqIGNvbnNvbGUubG9nKHRoaXMuYXJyLnZhbHVlKTsgIC8vIFsnbmFtZScsICdsYXN0IG5hbWUnXVxuICAgICAgICAgKiBjb25zb2xlLmxvZyh0aGlzLmFyci5nZXQoMCkuc3RhdHVzKTsgIC8vICdESVNBQkxFRCdcbiAgICAgICAgICogYGBgXG4gICAgICAgICAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLnJlc2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBfYSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSBbXTsgfVxuICAgICAgICAgICAgdmFyIG9ubHlTZWxmID0gKF9hID09PSB2b2lkIDAgPyB7fSA6IF9hKS5vbmx5U2VsZjtcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY29udHJvbCwgaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sLnJlc2V0KHZhbHVlW2luZGV4XSwgeyBvbmx5U2VsZjogdHJ1ZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICAgICAgdGhpcy5fdXBkYXRlUHJpc3RpbmUoeyBvbmx5U2VsZjogb25seVNlbGYgfSk7XG4gICAgICAgICAgICB0aGlzLl91cGRhdGVUb3VjaGVkKHsgb25seVNlbGY6IG9ubHlTZWxmIH0pO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGFnZ3JlZ2F0ZSB2YWx1ZSBvZiB0aGUgYXJyYXksIGluY2x1ZGluZyBhbnkgZGlzYWJsZWQgY29udHJvbHMuXG4gICAgICAgICAqXG4gICAgICAgICAqIElmIHlvdSdkIGxpa2UgdG8gaW5jbHVkZSBhbGwgdmFsdWVzIHJlZ2FyZGxlc3Mgb2YgZGlzYWJsZWQgc3RhdHVzLCB1c2UgdGhpcyBtZXRob2QuXG4gICAgICAgICAqIE90aGVyd2lzZSwgdGhlIGB2YWx1ZWAgcHJvcGVydHkgaXMgdGhlIGJlc3Qgd2F5IHRvIGdldCB0aGUgdmFsdWUgb2YgdGhlIGFycmF5LlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5nZXRSYXdWYWx1ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuY29udHJvbHMubWFwKGZ1bmN0aW9uIChjb250cm9sKSB7IHJldHVybiBjb250cm9sLnZhbHVlOyB9KTsgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl90aHJvd0lmQ29udHJvbE1pc3NpbmcgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghdGhpcy5jb250cm9scy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXG4gICAgICAgIFRoZXJlIGFyZSBubyBmb3JtIGNvbnRyb2xzIHJlZ2lzdGVyZWQgd2l0aCB0aGlzIGFycmF5IHlldC4gIElmIHlvdSdyZSB1c2luZyBuZ01vZGVsLFxcbiAgICAgICAgeW91IG1heSB3YW50IHRvIGNoZWNrIG5leHQgdGljayAoZS5nLiB1c2Ugc2V0VGltZW91dCkuXFxuICAgICAgXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLmF0KGluZGV4KSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkNhbm5vdCBmaW5kIGZvcm0gY29udHJvbCBhdCBpbmRleCBcIiArIGluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl9mb3JFYWNoQ2hpbGQgPSBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIHRoaXMuY29udHJvbHMuZm9yRWFjaChmdW5jdGlvbiAoY29udHJvbCwgaW5kZXgpIHsgY2IoY29udHJvbCwgaW5kZXgpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl91cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICB0aGlzLl92YWx1ZSA9IHRoaXMuY29udHJvbHMuZmlsdGVyKGZ1bmN0aW9uIChjb250cm9sKSB7IHJldHVybiBjb250cm9sLmVuYWJsZWQgfHwgX3RoaXMuZGlzYWJsZWQ7IH0pXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAoY29udHJvbCkgeyByZXR1cm4gY29udHJvbC52YWx1ZTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5fYW55Q29udHJvbHMgPSBmdW5jdGlvbiAoY29uZGl0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9scy5zb21lKGZ1bmN0aW9uIChjb250cm9sKSB7IHJldHVybiBjb250cm9sLmVuYWJsZWQgJiYgY29uZGl0aW9uKGNvbnRyb2wpOyB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl9zZXRVcENvbnRyb2xzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuX2ZvckVhY2hDaGlsZChmdW5jdGlvbiAoY29udHJvbCkgeyByZXR1cm4gX3RoaXMuX3JlZ2lzdGVyQ29udHJvbChjb250cm9sKTsgfSk7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgRm9ybUFycmF5LnByb3RvdHlwZS5fY2hlY2tBbGxWYWx1ZXNQcmVzZW50ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9mb3JFYWNoQ2hpbGQoZnVuY3Rpb24gKGNvbnRyb2wsIGkpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsdWVbaV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNdXN0IHN1cHBseSBhIHZhbHVlIGZvciBmb3JtIGNvbnRyb2wgYXQgaW5kZXg6IFwiICsgaSArIFwiLlwiKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl9hbGxDb250cm9sc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfYSA9IHRoaXMuY29udHJvbHM7IF9pIDwgX2EubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2wgPSBfYVtfaV07XG4gICAgICAgICAgICAgICAgaWYgKGNvbnRyb2wuZW5hYmxlZClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbHMubGVuZ3RoID4gMCB8fCB0aGlzLmRpc2FibGVkO1xuICAgICAgICB9O1xuICAgICAgICBGb3JtQXJyYXkucHJvdG90eXBlLl9yZWdpc3RlckNvbnRyb2wgPSBmdW5jdGlvbiAoY29udHJvbCkge1xuICAgICAgICAgICAgY29udHJvbC5zZXRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICBjb250cm9sLl9yZWdpc3Rlck9uQ29sbGVjdGlvbkNoYW5nZSh0aGlzLl9vbkNvbGxlY3Rpb25DaGFuZ2UpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRm9ybUFycmF5O1xuICAgIH0oQWJzdHJhY3RDb250cm9sKSk7XG5cbiAgICAvKipcbiAgICAgKiBAbGljZW5zZVxuICAgICAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgICAqXG4gICAgICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gICAgICovXG4gICAgdmFyIF9fZXh0ZW5kcyQ0ID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG4gICAgdmFyIGZvcm1EaXJlY3RpdmVQcm92aWRlciA9IHtcbiAgICAgICAgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lcixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBOZ0Zvcm07IH0pXG4gICAgfTtcbiAgICB2YXIgcmVzb2x2ZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIC8qKlxuICAgICAqIEB3aGF0SXREb2VzIENyZWF0ZXMgYSB0b3AtbGV2ZWwge0BsaW5rIEZvcm1Hcm91cH0gaW5zdGFuY2UgYW5kIGJpbmRzIGl0IHRvIGEgZm9ybVxuICAgICAqIHRvIHRyYWNrIGFnZ3JlZ2F0ZSBmb3JtIHZhbHVlIGFuZCB2YWxpZGF0aW9uIHN0YXR1cy5cbiAgICAgKlxuICAgICAqIEBob3dUb1VzZVxuICAgICAqXG4gICAgICogQXMgc29vbiBhcyB5b3UgaW1wb3J0IHRoZSBgRm9ybXNNb2R1bGVgLCB0aGlzIGRpcmVjdGl2ZSBiZWNvbWVzIGFjdGl2ZSBieSBkZWZhdWx0IG9uXG4gICAgICogYWxsIGA8Zm9ybT5gIHRhZ3MuICBZb3UgZG9uJ3QgbmVlZCB0byBhZGQgYSBzcGVjaWFsIHNlbGVjdG9yLlxuICAgICAqXG4gICAgICogWW91IGNhbiBleHBvcnQgdGhlIGRpcmVjdGl2ZSBpbnRvIGEgbG9jYWwgdGVtcGxhdGUgdmFyaWFibGUgdXNpbmcgYG5nRm9ybWAgYXMgdGhlIGtleVxuICAgICAqIChleDogYCNteUZvcm09XCJuZ0Zvcm1cImApLiBUaGlzIGlzIG9wdGlvbmFsLCBidXQgdXNlZnVsLiAgTWFueSBwcm9wZXJ0aWVzIGZyb20gdGhlIHVuZGVybHlpbmdcbiAgICAgKiB7QGxpbmsgRm9ybUdyb3VwfSBpbnN0YW5jZSBhcmUgZHVwbGljYXRlZCBvbiB0aGUgZGlyZWN0aXZlIGl0c2VsZiwgc28gYSByZWZlcmVuY2UgdG8gaXRcbiAgICAgKiB3aWxsIGdpdmUgeW91IGFjY2VzcyB0byB0aGUgYWdncmVnYXRlIHZhbHVlIGFuZCB2YWxpZGl0eSBzdGF0dXMgb2YgdGhlIGZvcm0sIGFzIHdlbGwgYXNcbiAgICAgKiB1c2VyIGludGVyYWN0aW9uIHByb3BlcnRpZXMgbGlrZSBgZGlydHlgIGFuZCBgdG91Y2hlZGAuXG4gICAgICpcbiAgICAgKiBUbyByZWdpc3RlciBjaGlsZCBjb250cm9scyB3aXRoIHRoZSBmb3JtLCB5b3UnbGwgd2FudCB0byB1c2Uge0BsaW5rIE5nTW9kZWx9IHdpdGggYVxuICAgICAqIGBuYW1lYCBhdHRyaWJ1dGUuICBZb3UgY2FuIGFsc28gdXNlIHtAbGluayBOZ01vZGVsR3JvdXB9IGlmIHlvdSdkIGxpa2UgdG8gY3JlYXRlXG4gICAgICogc3ViLWdyb3VwcyB3aXRoaW4gdGhlIGZvcm0uXG4gICAgICpcbiAgICAgKiBZb3UgY2FuIGxpc3RlbiB0byB0aGUgZGlyZWN0aXZlJ3MgYG5nU3VibWl0YCBldmVudCB0byBiZSBub3RpZmllZCB3aGVuIHRoZSB1c2VyIGhhc1xuICAgICAqIHRyaWdnZXJlZCBhIGZvcm0gc3VibWlzc2lvbi5cbiAgICAgKlxuICAgICAqIHtAZXhhbXBsZSBmb3Jtcy90cy9zaW1wbGVGb3JtL3NpbXBsZV9mb3JtX2V4YW1wbGUudHMgcmVnaW9uPSdDb21wb25lbnQnfVxuICAgICAqXG4gICAgICogKiAqKm5wbSBwYWNrYWdlKio6IGBAYW5ndWxhci9mb3Jtc2BcbiAgICAgKlxuICAgICAqICogKipOZ01vZHVsZSoqOiBgRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiAgQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBOZ0Zvcm0gPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkNChOZ0Zvcm0sIF9zdXBlcik7XG4gICAgICAgIGZ1bmN0aW9uIE5nRm9ybSh2YWxpZGF0b3JzLCBhc3luY1ZhbGlkYXRvcnMpIHtcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0dGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLm5nU3VibWl0ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAgICAgdGhpcy5mb3JtID1cbiAgICAgICAgICAgICAgICBuZXcgRm9ybUdyb3VwKHt9LCBjb21wb3NlVmFsaWRhdG9ycyh2YWxpZGF0b3JzKSwgY29tcG9zZUFzeW5jVmFsaWRhdG9ycyhhc3luY1ZhbGlkYXRvcnMpKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtLnByb3RvdHlwZSwgXCJzdWJtaXR0ZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdWJtaXR0ZWQ7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtLnByb3RvdHlwZSwgXCJmb3JtRGlyZWN0aXZlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ0Zvcm0ucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm07IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdGb3JtLnByb3RvdHlwZSwgXCJjb250cm9sc1wiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZm9ybS5jb250cm9sczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE5nRm9ybS5wcm90b3R5cGUuYWRkQ29udHJvbCA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXNvbHZlZFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLl9maW5kQ29udGFpbmVyKGRpci5wYXRoKTtcbiAgICAgICAgICAgICAgICBkaXIuX2NvbnRyb2wgPSBjb250YWluZXIucmVnaXN0ZXJDb250cm9sKGRpci5uYW1lLCBkaXIuY29udHJvbCk7XG4gICAgICAgICAgICAgICAgc2V0VXBDb250cm9sKGRpci5jb250cm9sLCBkaXIpO1xuICAgICAgICAgICAgICAgIGRpci5jb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH07XG4gICAgICAgIE5nRm9ybS5wcm90b3R5cGUuZ2V0Q29udHJvbCA9IGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIHRoaXMuZm9ybS5nZXQoZGlyLnBhdGgpOyB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLnJlbW92ZUNvbnRyb2wgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmVzb2x2ZWRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5fZmluZENvbnRhaW5lcihkaXIucGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKGlzUHJlc2VudChjb250YWluZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZW1vdmVDb250cm9sKGRpci5uYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTmdGb3JtLnByb3RvdHlwZS5hZGRGb3JtR3JvdXAgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgcmVzb2x2ZWRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHZhciBjb250YWluZXIgPSBfdGhpcy5fZmluZENvbnRhaW5lcihkaXIucGF0aCk7XG4gICAgICAgICAgICAgICAgdmFyIGdyb3VwID0gbmV3IEZvcm1Hcm91cCh7fSk7XG4gICAgICAgICAgICAgICAgc2V0VXBGb3JtQ29udGFpbmVyKGdyb3VwLCBkaXIpO1xuICAgICAgICAgICAgICAgIGNvbnRhaW5lci5yZWdpc3RlckNvbnRyb2woZGlyLm5hbWUsIGdyb3VwKTtcbiAgICAgICAgICAgICAgICBncm91cC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KHsgZW1pdEV2ZW50OiBmYWxzZSB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLnJlbW92ZUZvcm1Hcm91cCA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXNvbHZlZFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9IF90aGlzLl9maW5kQ29udGFpbmVyKGRpci5wYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoaXNQcmVzZW50KGNvbnRhaW5lcikpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGFpbmVyLnJlbW92ZUNvbnRyb2woZGlyLm5hbWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLmdldEZvcm1Hcm91cCA9IGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIHRoaXMuZm9ybS5nZXQoZGlyLnBhdGgpOyB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24gKGRpciwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgICAgICByZXNvbHZlZFByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdmFyIGN0cmwgPSBfdGhpcy5mb3JtLmdldChkaXIucGF0aCk7XG4gICAgICAgICAgICAgICAgY3RybC5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgTmdGb3JtLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkgeyB0aGlzLmNvbnRyb2wuc2V0VmFsdWUodmFsdWUpOyB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLm9uU3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0dGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMubmdTdWJtaXQuZW1pdChudWxsKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgTmdGb3JtLnByb3RvdHlwZS5vblJlc2V0ID0gZnVuY3Rpb24gKCkgeyB0aGlzLnJlc2V0Rm9ybSgpOyB9O1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLnJlc2V0Rm9ybSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSB2b2lkIDApIHsgdmFsdWUgPSB1bmRlZmluZWQ7IH1cbiAgICAgICAgICAgIHRoaXMuZm9ybS5yZXNldCh2YWx1ZSk7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgfTtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICBOZ0Zvcm0ucHJvdG90eXBlLl9maW5kQ29udGFpbmVyID0gZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgICAgIHBhdGgucG9wKCk7XG4gICAgICAgICAgICByZXR1cm4gTGlzdFdyYXBwZXIuaXNFbXB0eShwYXRoKSA/IHRoaXMuZm9ybSA6IHRoaXMuZm9ybS5nZXQocGF0aCk7XG4gICAgICAgIH07XG4gICAgICAgIE5nRm9ybS5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnZm9ybTpub3QoW25nTm9Gb3JtXSk6bm90KFtmb3JtR3JvdXBdKSxuZ0Zvcm0sW25nRm9ybV0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbZm9ybURpcmVjdGl2ZVByb3ZpZGVyXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJyhzdWJtaXQpJzogJ29uU3VibWl0KCknLCAnKHJlc2V0KSc6ICdvblJlc2V0KCknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBvdXRwdXRzOiBbJ25nU3VibWl0J10sXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRBczogJ25nRm9ybSdcbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOZ0Zvcm0uY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19BU1lOQ19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIHJldHVybiBOZ0Zvcm07XG4gICAgfShDb250cm9sQ29udGFpbmVyKSk7XG5cbiAgICAvKipcbiAgICAgKiBAbGljZW5zZVxuICAgICAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgICAqXG4gICAgICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gICAgICovXG4gICAgdmFyIEV4YW1wbGVzID0ge1xuICAgICAgICBmb3JtQ29udHJvbE5hbWU6IFwiXFxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XFxcIm15R3JvdXBcXFwiPlxcbiAgICAgIDxpbnB1dCBmb3JtQ29udHJvbE5hbWU9XFxcImZpcnN0TmFtZVxcXCI+XFxuICAgIDwvZGl2PlxcblxcbiAgICBJbiB5b3VyIGNsYXNzOlxcblxcbiAgICB0aGlzLm15R3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcXG4gICAgICAgZmlyc3ROYW1lOiBuZXcgRm9ybUNvbnRyb2woKVxcbiAgICB9KTtcIixcbiAgICAgICAgZm9ybUdyb3VwTmFtZTogXCJcXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cXFwibXlHcm91cFxcXCI+XFxuICAgICAgIDxkaXYgZm9ybUdyb3VwTmFtZT1cXFwicGVyc29uXFxcIj5cXG4gICAgICAgICAgPGlucHV0IGZvcm1Db250cm9sTmFtZT1cXFwiZmlyc3ROYW1lXFxcIj5cXG4gICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICBJbiB5b3VyIGNsYXNzOlxcblxcbiAgICB0aGlzLm15R3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcXG4gICAgICAgcGVyc29uOiBuZXcgRm9ybUdyb3VwKHsgZmlyc3ROYW1lOiBuZXcgRm9ybUNvbnRyb2woKSB9KVxcbiAgICB9KTtcIixcbiAgICAgICAgZm9ybUFycmF5TmFtZTogXCJcXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cXFwibXlHcm91cFxcXCI+XFxuICAgICAgPGRpdiBmb3JtQXJyYXlOYW1lPVxcXCJjaXRpZXNcXFwiPlxcbiAgICAgICAgPGRpdiAqbmdGb3I9XFxcImxldCBjaXR5IG9mIGNpdHlBcnJheS5jb250cm9sczsgbGV0IGk9aW5kZXhcXFwiPlxcbiAgICAgICAgICA8aW5wdXQgW2Zvcm1Db250cm9sTmFtZV09XFxcImlcXFwiPlxcbiAgICAgICAgPC9kaXY+XFxuICAgICAgPC9kaXY+XFxuICAgIDwvZGl2PlxcblxcbiAgICBJbiB5b3VyIGNsYXNzOlxcblxcbiAgICB0aGlzLmNpdHlBcnJheSA9IG5ldyBGb3JtQXJyYXkoW25ldyBGb3JtQ29udHJvbCgnU0YnKV0pO1xcbiAgICB0aGlzLm15R3JvdXAgPSBuZXcgRm9ybUdyb3VwKHtcXG4gICAgICBjaXRpZXM6IHRoaXMuY2l0eUFycmF5XFxuICAgIH0pO1wiLFxuICAgICAgICBuZ01vZGVsR3JvdXA6IFwiXFxuICAgIDxmb3JtPlxcbiAgICAgICA8ZGl2IG5nTW9kZWxHcm91cD1cXFwicGVyc29uXFxcIj5cXG4gICAgICAgICAgPGlucHV0IFsobmdNb2RlbCldPVxcXCJwZXJzb24ubmFtZVxcXCIgbmFtZT1cXFwiZmlyc3ROYW1lXFxcIj5cXG4gICAgICAgPC9kaXY+XFxuICAgIDwvZm9ybT5cIixcbiAgICAgICAgbmdNb2RlbFdpdGhGb3JtR3JvdXA6IFwiXFxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XFxcIm15R3JvdXBcXFwiPlxcbiAgICAgICA8aW5wdXQgZm9ybUNvbnRyb2xOYW1lPVxcXCJmaXJzdE5hbWVcXFwiPlxcbiAgICAgICA8aW5wdXQgWyhuZ01vZGVsKV09XFxcInNob3dNb3JlQ29udHJvbHNcXFwiIFtuZ01vZGVsT3B0aW9uc109XFxcIntzdGFuZGFsb25lOiB0cnVlfVxcXCI+XFxuICAgIDwvZGl2PlxcbiAgXCJcbiAgICB9O1xuXG4gICAgdmFyIFRlbXBsYXRlRHJpdmVuRXJyb3JzID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gVGVtcGxhdGVEcml2ZW5FcnJvcnMoKSB7XG4gICAgICAgIH1cbiAgICAgICAgVGVtcGxhdGVEcml2ZW5FcnJvcnMubW9kZWxQYXJlbnRFeGNlcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXG4gICAgICBuZ01vZGVsIGNhbm5vdCBiZSB1c2VkIHRvIHJlZ2lzdGVyIGZvcm0gY29udHJvbHMgd2l0aCBhIHBhcmVudCBmb3JtR3JvdXAgZGlyZWN0aXZlLiAgVHJ5IHVzaW5nXFxuICAgICAgZm9ybUdyb3VwJ3MgcGFydG5lciBkaXJlY3RpdmUgXFxcImZvcm1Db250cm9sTmFtZVxcXCIgaW5zdGVhZC4gIEV4YW1wbGU6XFxuXFxuICAgICAgXCIgKyBFeGFtcGxlcy5mb3JtQ29udHJvbE5hbWUgKyBcIlxcblxcbiAgICAgIE9yLCBpZiB5b3UnZCBsaWtlIHRvIGF2b2lkIHJlZ2lzdGVyaW5nIHRoaXMgZm9ybSBjb250cm9sLCBpbmRpY2F0ZSB0aGF0IGl0J3Mgc3RhbmRhbG9uZSBpbiBuZ01vZGVsT3B0aW9uczpcXG5cXG4gICAgICBFeGFtcGxlOlxcblxcbiAgICAgIFwiICsgRXhhbXBsZXMubmdNb2RlbFdpdGhGb3JtR3JvdXApO1xuICAgICAgICB9O1xuICAgICAgICBUZW1wbGF0ZURyaXZlbkVycm9ycy5mb3JtR3JvdXBOYW1lRXhjZXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiXFxuICAgICAgbmdNb2RlbCBjYW5ub3QgYmUgdXNlZCB0byByZWdpc3RlciBmb3JtIGNvbnRyb2xzIHdpdGggYSBwYXJlbnQgZm9ybUdyb3VwTmFtZSBvciBmb3JtQXJyYXlOYW1lIGRpcmVjdGl2ZS5cXG5cXG4gICAgICBPcHRpb24gMTogVXNlIGZvcm1Db250cm9sTmFtZSBpbnN0ZWFkIG9mIG5nTW9kZWwgKHJlYWN0aXZlIHN0cmF0ZWd5KTpcXG5cXG4gICAgICBcIiArIEV4YW1wbGVzLmZvcm1Hcm91cE5hbWUgKyBcIlxcblxcbiAgICAgIE9wdGlvbiAyOiAgVXBkYXRlIG5nTW9kZWwncyBwYXJlbnQgYmUgbmdNb2RlbEdyb3VwICh0ZW1wbGF0ZS1kcml2ZW4gc3RyYXRlZ3kpOlxcblxcbiAgICAgIFwiICsgRXhhbXBsZXMubmdNb2RlbEdyb3VwKTtcbiAgICAgICAgfTtcbiAgICAgICAgVGVtcGxhdGVEcml2ZW5FcnJvcnMubWlzc2luZ05hbWVFeGNlcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJZiBuZ01vZGVsIGlzIHVzZWQgd2l0aGluIGEgZm9ybSB0YWcsIGVpdGhlciB0aGUgbmFtZSBhdHRyaWJ1dGUgbXVzdCBiZSBzZXQgb3IgdGhlIGZvcm1cXG4gICAgICBjb250cm9sIG11c3QgYmUgZGVmaW5lZCBhcyAnc3RhbmRhbG9uZScgaW4gbmdNb2RlbE9wdGlvbnMuXFxuXFxuICAgICAgRXhhbXBsZSAxOiA8aW5wdXQgWyhuZ01vZGVsKV09XFxcInBlcnNvbi5maXJzdE5hbWVcXFwiIG5hbWU9XFxcImZpcnN0XFxcIj5cXG4gICAgICBFeGFtcGxlIDI6IDxpbnB1dCBbKG5nTW9kZWwpXT1cXFwicGVyc29uLmZpcnN0TmFtZVxcXCIgW25nTW9kZWxPcHRpb25zXT1cXFwie3N0YW5kYWxvbmU6IHRydWV9XFxcIj5cIik7XG4gICAgICAgIH07XG4gICAgICAgIFRlbXBsYXRlRHJpdmVuRXJyb3JzLm1vZGVsR3JvdXBQYXJlbnRFeGNlcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJcXG4gICAgICBuZ01vZGVsR3JvdXAgY2Fubm90IGJlIHVzZWQgd2l0aCBhIHBhcmVudCBmb3JtR3JvdXAgZGlyZWN0aXZlLlxcblxcbiAgICAgIE9wdGlvbiAxOiBVc2UgZm9ybUdyb3VwTmFtZSBpbnN0ZWFkIG9mIG5nTW9kZWxHcm91cCAocmVhY3RpdmUgc3RyYXRlZ3kpOlxcblxcbiAgICAgIFwiICsgRXhhbXBsZXMuZm9ybUdyb3VwTmFtZSArIFwiXFxuXFxuICAgICAgT3B0aW9uIDI6ICBVc2UgYSByZWd1bGFyIGZvcm0gdGFnIGluc3RlYWQgb2YgdGhlIGZvcm1Hcm91cCBkaXJlY3RpdmUgKHRlbXBsYXRlLWRyaXZlbiBzdHJhdGVneSk6XFxuXFxuICAgICAgXCIgKyBFeGFtcGxlcy5uZ01vZGVsR3JvdXApO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gVGVtcGxhdGVEcml2ZW5FcnJvcnM7XG4gICAgfSgpKTtcblxuICAgIC8qKlxuICAgICAqIEBsaWNlbnNlXG4gICAgICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICAgICAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB2YXIgX19leHRlbmRzJDggPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbiAgICB2YXIgbW9kZWxHcm91cFByb3ZpZGVyID0ge1xuICAgICAgICBwcm92aWRlOiBDb250cm9sQ29udGFpbmVyLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE5nTW9kZWxHcm91cDsgfSlcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEB3aGF0SXREb2VzIENyZWF0ZXMgYW5kIGJpbmRzIGEge0BsaW5rIEZvcm1Hcm91cH0gaW5zdGFuY2UgdG8gYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBob3dUb1VzZVxuICAgICAqXG4gICAgICogVGhpcyBkaXJlY3RpdmUgY2FuIG9ubHkgYmUgdXNlZCBhcyBhIGNoaWxkIG9mIHtAbGluayBOZ0Zvcm19IChvciBpbiBvdGhlciB3b3JkcyxcbiAgICAgKiB3aXRoaW4gYDxmb3JtPmAgdGFncykuXG4gICAgICpcbiAgICAgKiBVc2UgdGhpcyBkaXJlY3RpdmUgaWYgeW91J2QgbGlrZSB0byBjcmVhdGUgYSBzdWItZ3JvdXAgd2l0aGluIGEgZm9ybS4gVGhpcyBjYW5cbiAgICAgKiBjb21lIGluIGhhbmR5IGlmIHlvdSB3YW50IHRvIHZhbGlkYXRlIGEgc3ViLWdyb3VwIG9mIHlvdXIgZm9ybSBzZXBhcmF0ZWx5IGZyb21cbiAgICAgKiB0aGUgcmVzdCBvZiB5b3VyIGZvcm0sIG9yIGlmIHNvbWUgdmFsdWVzIGluIHlvdXIgZG9tYWluIG1vZGVsIG1ha2UgbW9yZSBzZW5zZSB0b1xuICAgICAqIGNvbnN1bWUgdG9nZXRoZXIgaW4gYSBuZXN0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogUGFzcyBpbiB0aGUgbmFtZSB5b3UnZCBsaWtlIHRoaXMgc3ViLWdyb3VwIHRvIGhhdmUgYW5kIGl0IHdpbGwgYmVjb21lIHRoZSBrZXlcbiAgICAgKiBmb3IgdGhlIHN1Yi1ncm91cCBpbiB0aGUgZm9ybSdzIGZ1bGwgdmFsdWUuIFlvdSBjYW4gYWxzbyBleHBvcnQgdGhlIGRpcmVjdGl2ZSBpbnRvXG4gICAgICogYSBsb2NhbCB0ZW1wbGF0ZSB2YXJpYWJsZSB1c2luZyBgbmdNb2RlbEdyb3VwYCAoZXg6IGAjbXlHcm91cD1cIm5nTW9kZWxHcm91cFwiYCkuXG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgZm9ybXMvdHMvbmdNb2RlbEdyb3VwL25nX21vZGVsX2dyb3VwX2V4YW1wbGUudHMgcmVnaW9uPSdDb21wb25lbnQnfVxuICAgICAqXG4gICAgICogKiAqKm5wbSBwYWNrYWdlKio6IGBAYW5ndWxhci9mb3Jtc2BcbiAgICAgKlxuICAgICAqICogKipOZ01vZHVsZSoqOiBgRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIE5nTW9kZWxHcm91cCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyQ4KE5nTW9kZWxHcm91cCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTmdNb2RlbEdyb3VwKHBhcmVudCwgdmFsaWRhdG9ycywgYXN5bmNWYWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzO1xuICAgICAgICAgICAgdGhpcy5fYXN5bmNWYWxpZGF0b3JzID0gYXN5bmNWYWxpZGF0b3JzO1xuICAgICAgICB9XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgTmdNb2RlbEdyb3VwLnByb3RvdHlwZS5fY2hlY2tQYXJlbnRUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5fcGFyZW50IGluc3RhbmNlb2YgTmdNb2RlbEdyb3VwKSAmJiAhKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIE5nRm9ybSkpIHtcbiAgICAgICAgICAgICAgICBUZW1wbGF0ZURyaXZlbkVycm9ycy5tb2RlbEdyb3VwUGFyZW50RXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE5nTW9kZWxHcm91cC5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbbmdNb2RlbEdyb3VwXScsIHByb3ZpZGVyczogW21vZGVsR3JvdXBQcm92aWRlcl0sIGV4cG9ydEFzOiAnbmdNb2RlbEdyb3VwJyB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIE5nTW9kZWxHcm91cC5jdG9yUGFyYW1ldGVycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogQ29udHJvbENvbnRhaW5lciwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5Ib3N0IH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5Ta2lwU2VsZiB9LF0gfSxcbiAgICAgICAgICAgIHsgdHlwZTogQXJyYXksIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNlbGYgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdCwgYXJnczogW05HX1ZBTElEQVRPUlMsXSB9LF0gfSxcbiAgICAgICAgICAgIHsgdHlwZTogQXJyYXksIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNlbGYgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdCwgYXJnczogW05HX0FTWU5DX1ZBTElEQVRPUlMsXSB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgTmdNb2RlbEdyb3VwLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAgICAgJ25hbWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ25nTW9kZWxHcm91cCcsXSB9LF0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBOZ01vZGVsR3JvdXA7XG4gICAgfShBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZSkpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMkNyA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuICAgIHZhciBmb3JtQ29udHJvbEJpbmRpbmcgPSB7XG4gICAgICAgIHByb3ZpZGU6IE5nQ29udHJvbCxcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBOZ01vZGVsOyB9KVxuICAgIH07XG4gICAgdmFyIHJlc29sdmVkUHJvbWlzZSQxID0gUHJvbWlzZS5yZXNvbHZlKG51bGwpO1xuICAgIC8qKlxuICAgICAqIEB3aGF0SXREb2VzIENyZWF0ZXMgYSB7QGxpbmsgRm9ybUNvbnRyb2x9IGluc3RhbmNlIGZyb20gYSBkb21haW4gbW9kZWwgYW5kIGJpbmRzIGl0XG4gICAgICogdG8gYSBmb3JtIGNvbnRyb2wgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIFRoZSB7QGxpbmsgRm9ybUNvbnRyb2x9IGluc3RhbmNlIHdpbGwgdHJhY2sgdGhlIHZhbHVlLCB1c2VyIGludGVyYWN0aW9uLCBhbmRcbiAgICAgKiB2YWxpZGF0aW9uIHN0YXR1cyBvZiB0aGUgY29udHJvbCBhbmQga2VlcCB0aGUgdmlldyBzeW5jZWQgd2l0aCB0aGUgbW9kZWwuIElmIHVzZWRcbiAgICAgKiB3aXRoaW4gYSBwYXJlbnQgZm9ybSwgdGhlIGRpcmVjdGl2ZSB3aWxsIGFsc28gcmVnaXN0ZXIgaXRzZWxmIHdpdGggdGhlIGZvcm0gYXMgYSBjaGlsZFxuICAgICAqIGNvbnRyb2wuXG4gICAgICpcbiAgICAgKiBAaG93VG9Vc2VcbiAgICAgKlxuICAgICAqIFRoaXMgZGlyZWN0aXZlIGNhbiBiZSB1c2VkIGJ5IGl0c2VsZiBvciBhcyBwYXJ0IG9mIGEgbGFyZ2VyIGZvcm0uIEFsbCB5b3UgbmVlZCBpcyB0aGVcbiAgICAgKiBgbmdNb2RlbGAgc2VsZWN0b3IgdG8gYWN0aXZhdGUgaXQuXG4gICAgICpcbiAgICAgKiBJdCBhY2NlcHRzIGEgZG9tYWluIG1vZGVsIGFzIGFuIG9wdGlvbmFsIHtAbGluayBASW5wdXR9LiBJZiB5b3UgaGF2ZSBhIG9uZS13YXkgYmluZGluZ1xuICAgICAqIHRvIGBuZ01vZGVsYCB3aXRoIGBbXWAgc3ludGF4LCBjaGFuZ2luZyB0aGUgdmFsdWUgb2YgdGhlIGRvbWFpbiBtb2RlbCBpbiB0aGUgY29tcG9uZW50XG4gICAgICogY2xhc3Mgd2lsbCBzZXQgdGhlIHZhbHVlIGluIHRoZSB2aWV3LiBJZiB5b3UgaGF2ZSBhIHR3by13YXkgYmluZGluZyB3aXRoIGBbKCldYCBzeW50YXhcbiAgICAgKiAoYWxzbyBrbm93biBhcyAnYmFuYW5hLWJveCBzeW50YXgnKSwgdGhlIHZhbHVlIGluIHRoZSBVSSB3aWxsIGFsd2F5cyBiZSBzeW5jZWQgYmFjayB0b1xuICAgICAqIHRoZSBkb21haW4gbW9kZWwgaW4geW91ciBjbGFzcyBhcyB3ZWxsLlxuICAgICAqXG4gICAgICogSWYgeW91IHdpc2ggdG8gaW5zcGVjdCB0aGUgcHJvcGVydGllcyBvZiB0aGUgYXNzb2NpYXRlZCB7QGxpbmsgRm9ybUNvbnRyb2x9IChsaWtlXG4gICAgICogdmFsaWRpdHkgc3RhdGUpLCB5b3UgY2FuIGFsc28gZXhwb3J0IHRoZSBkaXJlY3RpdmUgaW50byBhIGxvY2FsIHRlbXBsYXRlIHZhcmlhYmxlIHVzaW5nXG4gICAgICogYG5nTW9kZWxgIGFzIHRoZSBrZXkgKGV4OiBgI215VmFyPVwibmdNb2RlbFwiYCkuIFlvdSBjYW4gdGhlbiBhY2Nlc3MgdGhlIGNvbnRyb2wgdXNpbmcgdGhlXG4gICAgICogZGlyZWN0aXZlJ3MgYGNvbnRyb2xgIHByb3BlcnR5LCBidXQgbW9zdCBwcm9wZXJ0aWVzIHlvdSdsbCBuZWVkIChsaWtlIGB2YWxpZGAgYW5kIGBkaXJ0eWApXG4gICAgICogd2lsbCBmYWxsIHRocm91Z2ggdG8gdGhlIGNvbnRyb2wgYW55d2F5LCBzbyB5b3UgY2FuIGFjY2VzcyB0aGVtIGRpcmVjdGx5LiBZb3UgY2FuIHNlZSBhXG4gICAgICogZnVsbCBsaXN0IG9mIHByb3BlcnRpZXMgZGlyZWN0bHkgYXZhaWxhYmxlIGluIHtAbGluayBBYnN0cmFjdENvbnRyb2xEaXJlY3RpdmV9LlxuICAgICAqXG4gICAgICogVGhlIGZvbGxvd2luZyBpcyBhbiBleGFtcGxlIG9mIGEgc2ltcGxlIHN0YW5kYWxvbmUgY29udHJvbCB1c2luZyBgbmdNb2RlbGA6XG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgZm9ybXMvdHMvc2ltcGxlTmdNb2RlbC9zaW1wbGVfbmdfbW9kZWxfZXhhbXBsZS50cyByZWdpb249J0NvbXBvbmVudCd9XG4gICAgICpcbiAgICAgKiBXaGVuIHVzaW5nIHRoZSBgbmdNb2RlbGAgd2l0aGluIGA8Zm9ybT5gIHRhZ3MsIHlvdSdsbCBhbHNvIG5lZWQgdG8gc3VwcGx5IGEgYG5hbWVgIGF0dHJpYnV0ZVxuICAgICAqIHNvIHRoYXQgdGhlIGNvbnRyb2wgY2FuIGJlIHJlZ2lzdGVyZWQgd2l0aCB0aGUgcGFyZW50IGZvcm0gdW5kZXIgdGhhdCBuYW1lLlxuICAgICAqXG4gICAgICogSXQncyB3b3J0aCBub3RpbmcgdGhhdCBpbiB0aGUgY29udGV4dCBvZiBhIHBhcmVudCBmb3JtLCB5b3Ugb2Z0ZW4gY2FuIHNraXAgb25lLXdheSBvclxuICAgICAqIHR3by13YXkgYmluZGluZyBiZWNhdXNlIHRoZSBwYXJlbnQgZm9ybSB3aWxsIHN5bmMgdGhlIHZhbHVlIGZvciB5b3UuIFlvdSBjYW4gYWNjZXNzXG4gICAgICogaXRzIHByb3BlcnRpZXMgYnkgZXhwb3J0aW5nIGl0IGludG8gYSBsb2NhbCB0ZW1wbGF0ZSB2YXJpYWJsZSB1c2luZyBgbmdGb3JtYCAoZXg6XG4gICAgICogYCNmPVwibmdGb3JtXCJgKS4gVGhlbiB5b3UgY2FuIHBhc3MgaXQgd2hlcmUgaXQgbmVlZHMgdG8gZ28gb24gc3VibWl0LlxuICAgICAqXG4gICAgICogSWYgeW91IGRvIG5lZWQgdG8gcG9wdWxhdGUgaW5pdGlhbCB2YWx1ZXMgaW50byB5b3VyIGZvcm0sIHVzaW5nIGEgb25lLXdheSBiaW5kaW5nIGZvclxuICAgICAqIGBuZ01vZGVsYCB0ZW5kcyB0byBiZSBzdWZmaWNpZW50IGFzIGxvbmcgYXMgeW91IHVzZSB0aGUgZXhwb3J0ZWQgZm9ybSdzIHZhbHVlIHJhdGhlclxuICAgICAqIHRoYW4gdGhlIGRvbWFpbiBtb2RlbCdzIHZhbHVlIG9uIHN1Ym1pdC5cbiAgICAgKlxuICAgICAqIFRha2UgYSBsb29rIGF0IGFuIGV4YW1wbGUgb2YgdXNpbmcgYG5nTW9kZWxgIHdpdGhpbiBhIGZvcm06XG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgZm9ybXMvdHMvc2ltcGxlRm9ybS9zaW1wbGVfZm9ybV9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAgICAgKlxuICAgICAqICoqbnBtIHBhY2thZ2UqKjogYEBhbmd1bGFyL2Zvcm1zYFxuICAgICAqXG4gICAgICogKipOZ01vZHVsZSoqOiBgRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiAgQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBOZ01vZGVsID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzJDcoTmdNb2RlbCwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gTmdNb2RlbChwYXJlbnQsIHZhbGlkYXRvcnMsIGFzeW5jVmFsaWRhdG9ycywgdmFsdWVBY2Nlc3NvcnMpIHtcbiAgICAgICAgICAgIF9zdXBlci5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICAgICAgdGhpcy5fY29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCgpO1xuICAgICAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLl9yYXdWYWxpZGF0b3JzID0gdmFsaWRhdG9ycyB8fCBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Jhd0FzeW5jVmFsaWRhdG9ycyA9IGFzeW5jVmFsaWRhdG9ycyB8fCBbXTtcbiAgICAgICAgICAgIHRoaXMudmFsdWVBY2Nlc3NvciA9IHNlbGVjdFZhbHVlQWNjZXNzb3IodGhpcywgdmFsdWVBY2Nlc3NvcnMpO1xuICAgICAgICB9XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrRm9yRXJyb3JzKCk7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3JlZ2lzdGVyZWQpXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VXBDb250cm9sKCk7XG4gICAgICAgICAgICBpZiAoJ2lzRGlzYWJsZWQnIGluIGNoYW5nZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVEaXNhYmxlZChjaGFuZ2VzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1Byb3BlcnR5VXBkYXRlZChjaGFuZ2VzLCB0aGlzLnZpZXdNb2RlbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVWYWx1ZSh0aGlzLm1vZGVsKTtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkgeyB0aGlzLmZvcm1EaXJlY3RpdmUgJiYgdGhpcy5mb3JtRGlyZWN0aXZlLnJlbW92ZUNvbnRyb2wodGhpcyk7IH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJjb250cm9sXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fY29udHJvbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wYXJlbnQgPyBjb250cm9sUGF0aCh0aGlzLm5hbWUsIHRoaXMuX3BhcmVudCkgOiBbdGhpcy5uYW1lXTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTmdNb2RlbC5wcm90b3R5cGUsIFwiZm9ybURpcmVjdGl2ZVwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3BhcmVudCA/IHRoaXMuX3BhcmVudC5mb3JtRGlyZWN0aXZlIDogbnVsbDsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJ2YWxpZGF0b3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21wb3NlVmFsaWRhdG9ycyh0aGlzLl9yYXdWYWxpZGF0b3JzKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShOZ01vZGVsLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyh0aGlzLl9yYXdBc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLnZpZXdUb01vZGVsVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUuZW1pdChuZXdWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLl9zZXRVcENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9pc1N0YW5kYWxvbmUoKSA/IHRoaXMuX3NldFVwU3RhbmRhbG9uZSgpIDpcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1EaXJlY3RpdmUuYWRkQ29udHJvbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyZWQgPSB0cnVlO1xuICAgICAgICB9O1xuICAgICAgICBOZ01vZGVsLnByb3RvdHlwZS5faXNTdGFuZGFsb25lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9wYXJlbnQgfHwgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMuc3RhbmRhbG9uZSk7XG4gICAgICAgIH07XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLl9zZXRVcFN0YW5kYWxvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZXRVcENvbnRyb2wodGhpcy5fY29udHJvbCwgdGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9jb250cm9sLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBOZ01vZGVsLnByb3RvdHlwZS5fY2hlY2tGb3JFcnJvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX2lzU3RhbmRhbG9uZSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tQYXJlbnRUeXBlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLl9jaGVja05hbWUoKTtcbiAgICAgICAgfTtcbiAgICAgICAgTmdNb2RlbC5wcm90b3R5cGUuX2NoZWNrUGFyZW50VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIE5nTW9kZWxHcm91cCkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQgaW5zdGFuY2VvZiBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIFRlbXBsYXRlRHJpdmVuRXJyb3JzLmZvcm1Hcm91cE5hbWVFeGNlcHRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKCEodGhpcy5fcGFyZW50IGluc3RhbmNlb2YgTmdNb2RlbEdyb3VwKSAmJiAhKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIE5nRm9ybSkpIHtcbiAgICAgICAgICAgICAgICBUZW1wbGF0ZURyaXZlbkVycm9ycy5tb2RlbFBhcmVudEV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBOZ01vZGVsLnByb3RvdHlwZS5fY2hlY2tOYW1lID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiB0aGlzLm9wdGlvbnMubmFtZSlcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLm9wdGlvbnMubmFtZTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faXNTdGFuZGFsb25lKCkgJiYgIXRoaXMubmFtZSkge1xuICAgICAgICAgICAgICAgIFRlbXBsYXRlRHJpdmVuRXJyb3JzLm1pc3NpbmdOYW1lRXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE5nTW9kZWwucHJvdG90eXBlLl91cGRhdGVWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHJlc29sdmVkUHJvbWlzZSQxLnRoZW4oZnVuY3Rpb24gKCkgeyBfdGhpcy5jb250cm9sLnNldFZhbHVlKHZhbHVlLCB7IGVtaXRWaWV3VG9Nb2RlbENoYW5nZTogZmFsc2UgfSk7IH0pO1xuICAgICAgICB9O1xuICAgICAgICBOZ01vZGVsLnByb3RvdHlwZS5fdXBkYXRlRGlzYWJsZWQgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBkaXNhYmxlZFZhbHVlID0gY2hhbmdlc1snaXNEaXNhYmxlZCddLmN1cnJlbnRWYWx1ZTtcbiAgICAgICAgICAgIHZhciBpc0Rpc2FibGVkID0gZGlzYWJsZWRWYWx1ZSAhPSBudWxsICYmIGRpc2FibGVkVmFsdWUgIT0gZmFsc2U7XG4gICAgICAgICAgICByZXNvbHZlZFByb21pc2UkMS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNEaXNhYmxlZCAmJiAhX3RoaXMuY29udHJvbC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250cm9sLmRpc2FibGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoIWlzRGlzYWJsZWQgJiYgX3RoaXMuY29udHJvbC5kaXNhYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250cm9sLmVuYWJsZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgICAgICBOZ01vZGVsLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdbbmdNb2RlbF06bm90KFtmb3JtQ29udHJvbE5hbWVdKTpub3QoW2Zvcm1Db250cm9sXSknLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbZm9ybUNvbnRyb2xCaW5kaW5nXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9ydEFzOiAnbmdNb2RlbCdcbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBOZ01vZGVsLmN0b3JQYXJhbWV0ZXJzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBDb250cm9sQ29udGFpbmVyLCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5Ib3N0IH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfQVNZTkNfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMVUVfQUNDRVNTT1IsXSB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgTmdNb2RlbC5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgICAgICduYW1lJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCB9LF0sXG4gICAgICAgICAgICAnaXNEaXNhYmxlZCc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQsIGFyZ3M6IFsnZGlzYWJsZWQnLF0gfSxdLFxuICAgICAgICAgICAgJ21vZGVsJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCwgYXJnczogWyduZ01vZGVsJyxdIH0sXSxcbiAgICAgICAgICAgICdvcHRpb25zJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCwgYXJnczogWyduZ01vZGVsT3B0aW9ucycsXSB9LF0sXG4gICAgICAgICAgICAndXBkYXRlJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PdXRwdXQsIGFyZ3M6IFsnbmdNb2RlbENoYW5nZScsXSB9LF0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBOZ01vZGVsO1xuICAgIH0oTmdDb250cm9sKSk7XG5cbiAgICB2YXIgUmVhY3RpdmVFcnJvcnMgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBSZWFjdGl2ZUVycm9ycygpIHtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdGl2ZUVycm9ycy5jb250cm9sUGFyZW50RXhjZXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybUNvbnRyb2xOYW1lIG11c3QgYmUgdXNlZCB3aXRoIGEgcGFyZW50IGZvcm1Hcm91cCBkaXJlY3RpdmUuICBZb3UnbGwgd2FudCB0byBhZGQgYSBmb3JtR3JvdXBcXG4gICAgICAgZGlyZWN0aXZlIGFuZCBwYXNzIGl0IGFuIGV4aXN0aW5nIEZvcm1Hcm91cCBpbnN0YW5jZSAoeW91IGNhbiBjcmVhdGUgb25lIGluIHlvdXIgY2xhc3MpLlxcblxcbiAgICAgIEV4YW1wbGU6XFxuXFxuICAgICAgXCIgKyBFeGFtcGxlcy5mb3JtQ29udHJvbE5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBSZWFjdGl2ZUVycm9ycy5uZ01vZGVsR3JvdXBFeGNlcHRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJmb3JtQ29udHJvbE5hbWUgY2Fubm90IGJlIHVzZWQgd2l0aCBhbiBuZ01vZGVsR3JvdXAgcGFyZW50LiBJdCBpcyBvbmx5IGNvbXBhdGlibGUgd2l0aCBwYXJlbnRzXFxuICAgICAgIHRoYXQgYWxzbyBoYXZlIGEgXFxcImZvcm1cXFwiIHByZWZpeDogZm9ybUdyb3VwTmFtZSwgZm9ybUFycmF5TmFtZSwgb3IgZm9ybUdyb3VwLlxcblxcbiAgICAgICBPcHRpb24gMTogIFVwZGF0ZSB0aGUgcGFyZW50IHRvIGJlIGZvcm1Hcm91cE5hbWUgKHJlYWN0aXZlIGZvcm0gc3RyYXRlZ3kpXFxuXFxuICAgICAgICBcIiArIEV4YW1wbGVzLmZvcm1Hcm91cE5hbWUgKyBcIlxcblxcbiAgICAgICAgT3B0aW9uIDI6IFVzZSBuZ01vZGVsIGluc3RlYWQgb2YgZm9ybUNvbnRyb2xOYW1lICh0ZW1wbGF0ZS1kcml2ZW4gc3RyYXRlZ3kpXFxuXFxuICAgICAgICBcIiArIEV4YW1wbGVzLm5nTW9kZWxHcm91cCk7XG4gICAgICAgIH07XG4gICAgICAgIFJlYWN0aXZlRXJyb3JzLm1pc3NpbmdGb3JtRXhjZXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybUdyb3VwIGV4cGVjdHMgYSBGb3JtR3JvdXAgaW5zdGFuY2UuIFBsZWFzZSBwYXNzIG9uZSBpbi5cXG5cXG4gICAgICAgRXhhbXBsZTpcXG5cXG4gICAgICAgXCIgKyBFeGFtcGxlcy5mb3JtQ29udHJvbE5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBSZWFjdGl2ZUVycm9ycy5ncm91cFBhcmVudEV4Y2VwdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImZvcm1Hcm91cE5hbWUgbXVzdCBiZSB1c2VkIHdpdGggYSBwYXJlbnQgZm9ybUdyb3VwIGRpcmVjdGl2ZS4gIFlvdSdsbCB3YW50IHRvIGFkZCBhIGZvcm1Hcm91cFxcbiAgICAgIGRpcmVjdGl2ZSBhbmQgcGFzcyBpdCBhbiBleGlzdGluZyBGb3JtR3JvdXAgaW5zdGFuY2UgKHlvdSBjYW4gY3JlYXRlIG9uZSBpbiB5b3VyIGNsYXNzKS5cXG5cXG4gICAgICBFeGFtcGxlOlxcblxcbiAgICAgIFwiICsgRXhhbXBsZXMuZm9ybUdyb3VwTmFtZSk7XG4gICAgICAgIH07XG4gICAgICAgIFJlYWN0aXZlRXJyb3JzLmFycmF5UGFyZW50RXhjZXB0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZm9ybUFycmF5TmFtZSBtdXN0IGJlIHVzZWQgd2l0aCBhIHBhcmVudCBmb3JtR3JvdXAgZGlyZWN0aXZlLiAgWW91J2xsIHdhbnQgdG8gYWRkIGEgZm9ybUdyb3VwXFxuICAgICAgIGRpcmVjdGl2ZSBhbmQgcGFzcyBpdCBhbiBleGlzdGluZyBGb3JtR3JvdXAgaW5zdGFuY2UgKHlvdSBjYW4gY3JlYXRlIG9uZSBpbiB5b3VyIGNsYXNzKS5cXG5cXG4gICAgICAgIEV4YW1wbGU6XFxuXFxuICAgICAgICBcIiArIEV4YW1wbGVzLmZvcm1BcnJheU5hbWUpO1xuICAgICAgICB9O1xuICAgICAgICBSZWFjdGl2ZUVycm9ycy5kaXNhYmxlZEF0dHJXYXJuaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiXFxuICAgICAgSXQgbG9va3MgbGlrZSB5b3UncmUgdXNpbmcgdGhlIGRpc2FibGVkIGF0dHJpYnV0ZSB3aXRoIGEgcmVhY3RpdmUgZm9ybSBkaXJlY3RpdmUuIElmIHlvdSBzZXQgZGlzYWJsZWQgdG8gdHJ1ZVxcbiAgICAgIHdoZW4geW91IHNldCB1cCB0aGlzIGNvbnRyb2wgaW4geW91ciBjb21wb25lbnQgY2xhc3MsIHRoZSBkaXNhYmxlZCBhdHRyaWJ1dGUgd2lsbCBhY3R1YWxseSBiZSBzZXQgaW4gdGhlIERPTSBmb3JcXG4gICAgICB5b3UuIFdlIHJlY29tbWVuZCB1c2luZyB0aGlzIGFwcHJvYWNoIHRvIGF2b2lkICdjaGFuZ2VkIGFmdGVyIGNoZWNrZWQnIGVycm9ycy5cXG4gICAgICAgXFxuICAgICAgRXhhbXBsZTogXFxuICAgICAgZm9ybSA9IG5ldyBGb3JtR3JvdXAoe1xcbiAgICAgICAgZmlyc3Q6IG5ldyBGb3JtQ29udHJvbCh7dmFsdWU6ICdOYW5jeScsIGRpc2FibGVkOiB0cnVlfSwgVmFsaWRhdG9ycy5yZXF1aXJlZCksXFxuICAgICAgICBsYXN0OiBuZXcgRm9ybUNvbnRyb2woJ0RyZXcnLCBWYWxpZGF0b3JzLnJlcXVpcmVkKVxcbiAgICAgIH0pO1xcbiAgICBcIik7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBSZWFjdGl2ZUVycm9ycztcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMkOSA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuICAgIHZhciBmb3JtQ29udHJvbEJpbmRpbmckMSA9IHtcbiAgICAgICAgcHJvdmlkZTogTmdDb250cm9sLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEZvcm1Db250cm9sRGlyZWN0aXZlOyB9KVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHdoYXRJdERvZXMgU3luY3MgYSBzdGFuZGFsb25lIHtAbGluayBGb3JtQ29udHJvbH0gaW5zdGFuY2UgdG8gYSBmb3JtIGNvbnRyb2wgZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEluIG90aGVyIHdvcmRzLCB0aGlzIGRpcmVjdGl2ZSBlbnN1cmVzIHRoYXQgYW55IHZhbHVlcyB3cml0dGVuIHRvIHRoZSB7QGxpbmsgRm9ybUNvbnRyb2x9XG4gICAgICogaW5zdGFuY2UgcHJvZ3JhbW1hdGljYWxseSB3aWxsIGJlIHdyaXR0ZW4gdG8gdGhlIERPTSBlbGVtZW50IChtb2RlbCAtPiB2aWV3KS4gQ29udmVyc2VseSxcbiAgICAgKiBhbnkgdmFsdWVzIHdyaXR0ZW4gdG8gdGhlIERPTSBlbGVtZW50IHRocm91Z2ggdXNlciBpbnB1dCB3aWxsIGJlIHJlZmxlY3RlZCBpbiB0aGVcbiAgICAgKiB7QGxpbmsgRm9ybUNvbnRyb2x9IGluc3RhbmNlICh2aWV3IC0+IG1vZGVsKS5cbiAgICAgKlxuICAgICAqIEBob3dUb1VzZVxuICAgICAqXG4gICAgICogVXNlIHRoaXMgZGlyZWN0aXZlIGlmIHlvdSdkIGxpa2UgdG8gY3JlYXRlIGFuZCBtYW5hZ2UgYSB7QGxpbmsgRm9ybUNvbnRyb2x9IGluc3RhbmNlIGRpcmVjdGx5LlxuICAgICAqIFNpbXBseSBjcmVhdGUgYSB7QGxpbmsgRm9ybUNvbnRyb2x9LCBzYXZlIGl0IHRvIHlvdXIgY29tcG9uZW50IGNsYXNzLCBhbmQgcGFzcyBpdCBpbnRvIHRoZVxuICAgICAqIHtAbGluayBGb3JtQ29udHJvbERpcmVjdGl2ZX0uXG4gICAgICpcbiAgICAgKiBUaGlzIGRpcmVjdGl2ZSBpcyBkZXNpZ25lZCB0byBiZSB1c2VkIGFzIGEgc3RhbmRhbG9uZSBjb250cm9sLiAgVW5saWtlIHtAbGluayBGb3JtQ29udHJvbE5hbWV9LFxuICAgICAqIGl0IGRvZXMgbm90IHJlcXVpcmUgdGhhdCB5b3VyIHtAbGluayBGb3JtQ29udHJvbH0gaW5zdGFuY2UgYmUgcGFydCBvZiBhbnkgcGFyZW50XG4gICAgICoge0BsaW5rIEZvcm1Hcm91cH0sIGFuZCBpdCB3b24ndCBiZSByZWdpc3RlcmVkIHRvIGFueSB7QGxpbmsgRm9ybUdyb3VwRGlyZWN0aXZlfSB0aGF0XG4gICAgICogZXhpc3RzIGFib3ZlIGl0LlxuICAgICAqXG4gICAgICogKipHZXQgdGhlIHZhbHVlKio6IHRoZSBgdmFsdWVgIHByb3BlcnR5IGlzIGFsd2F5cyBzeW5jZWQgYW5kIGF2YWlsYWJsZSBvbiB0aGVcbiAgICAgKiB7QGxpbmsgRm9ybUNvbnRyb2x9IGluc3RhbmNlLiBTZWUgYSBmdWxsIGxpc3Qgb2YgYXZhaWxhYmxlIHByb3BlcnRpZXMgaW5cbiAgICAgKiB7QGxpbmsgQWJzdHJhY3RDb250cm9sfS5cbiAgICAgKlxuICAgICAqICoqU2V0IHRoZSB2YWx1ZSoqOiBZb3UgY2FuIHBhc3MgaW4gYW4gaW5pdGlhbCB2YWx1ZSB3aGVuIGluc3RhbnRpYXRpbmcgdGhlIHtAbGluayBGb3JtQ29udHJvbH0sXG4gICAgICogb3IgeW91IGNhbiBzZXQgaXQgcHJvZ3JhbW1hdGljYWxseSBsYXRlciB1c2luZyB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnNldFZhbHVlfSBvclxuICAgICAqIHtAbGluayBBYnN0cmFjdENvbnRyb2wucGF0Y2hWYWx1ZX0uXG4gICAgICpcbiAgICAgKiAqKkxpc3RlbiB0byB2YWx1ZSoqOiBJZiB5b3Ugd2FudCB0byBsaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgdmFsdWUgb2YgdGhlIGNvbnRyb2wsIHlvdSBjYW5cbiAgICAgKiBzdWJzY3JpYmUgdG8gdGhlIHtAbGluayBBYnN0cmFjdENvbnRyb2wudmFsdWVDaGFuZ2VzfSBldmVudC4gIFlvdSBjYW4gYWxzbyBsaXN0ZW4gdG9cbiAgICAgKiB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnN0YXR1c0NoYW5nZXN9IHRvIGJlIG5vdGlmaWVkIHdoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIGlzXG4gICAgICogcmUtY2FsY3VsYXRlZC5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgZm9ybXMvdHMvc2ltcGxlRm9ybUNvbnRyb2wvc2ltcGxlX2Zvcm1fY29udHJvbF9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAgICAgKlxuICAgICAqICogKipucG0gcGFja2FnZSoqOiBgQGFuZ3VsYXIvZm9ybXNgXG4gICAgICpcbiAgICAgKiAqICoqTmdNb2R1bGUqKjogYFJlYWN0aXZlRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiAgQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBGb3JtQ29udHJvbERpcmVjdGl2ZSA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgICAgIF9fZXh0ZW5kcyQ5KEZvcm1Db250cm9sRGlyZWN0aXZlLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBGb3JtQ29udHJvbERpcmVjdGl2ZSh2YWxpZGF0b3JzLCBhc3luY1ZhbGlkYXRvcnMsIHZhbHVlQWNjZXNzb3JzKSB7XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuICAgICAgICAgICAgdGhpcy5fcmF3VmFsaWRhdG9ycyA9IHZhbGlkYXRvcnMgfHwgW107XG4gICAgICAgICAgICB0aGlzLl9yYXdBc3luY1ZhbGlkYXRvcnMgPSBhc3luY1ZhbGlkYXRvcnMgfHwgW107XG4gICAgICAgICAgICB0aGlzLnZhbHVlQWNjZXNzb3IgPSBzZWxlY3RWYWx1ZUFjY2Vzc29yKHRoaXMsIHZhbHVlQWNjZXNzb3JzKTtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUNvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcImlzRGlzYWJsZWRcIiwge1xuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoaXNEaXNhYmxlZCkgeyBSZWFjdGl2ZUVycm9ycy5kaXNhYmxlZEF0dHJXYXJuaW5nKCk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBGb3JtQ29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzQ29udHJvbENoYW5nZWQoY2hhbmdlcykpIHtcbiAgICAgICAgICAgICAgICBzZXRVcENvbnRyb2wodGhpcy5mb3JtLCB0aGlzKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250cm9sLmRpc2FibGVkKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlQWNjZXNzb3Iuc2V0RGlzYWJsZWRTdGF0ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm0udXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNQcm9wZXJ0eVVwZGF0ZWQoY2hhbmdlcywgdGhpcy52aWV3TW9kZWwpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtLnNldFZhbHVlKHRoaXMubW9kZWwpO1xuICAgICAgICAgICAgICAgIHRoaXMudmlld01vZGVsID0gdGhpcy5tb2RlbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1Db250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUNvbnRyb2xEaXJlY3RpdmUucHJvdG90eXBlLCBcInZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBvc2VWYWxpZGF0b3JzKHRoaXMuX3Jhd1ZhbGlkYXRvcnMpOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1Db250cm9sRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyh0aGlzLl9yYXdBc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQ29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUsIFwiY29udHJvbFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuZm9ybTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIEZvcm1Db250cm9sRGlyZWN0aXZlLnByb3RvdHlwZS52aWV3VG9Nb2RlbFVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWwgPSBuZXdWYWx1ZTtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlLmVtaXQobmV3VmFsdWUpO1xuICAgICAgICB9O1xuICAgICAgICBGb3JtQ29udHJvbERpcmVjdGl2ZS5wcm90b3R5cGUuX2lzQ29udHJvbENoYW5nZWQgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICAgICAgcmV0dXJuIFN0cmluZ01hcFdyYXBwZXIuY29udGFpbnMoY2hhbmdlcywgJ2Zvcm0nKTtcbiAgICAgICAgfTtcbiAgICAgICAgRm9ybUNvbnRyb2xEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW2Zvcm1Db250cm9sXScsIHByb3ZpZGVyczogW2Zvcm1Db250cm9sQmluZGluZyQxXSwgZXhwb3J0QXM6ICduZ0Zvcm0nIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICAgICAgRm9ybUNvbnRyb2xEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19BU1lOQ19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19WQUxVRV9BQ0NFU1NPUixdIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICBGb3JtQ29udHJvbERpcmVjdGl2ZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgICAgICdmb3JtJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCwgYXJnczogWydmb3JtQ29udHJvbCcsXSB9LF0sXG4gICAgICAgICAgICAnbW9kZWwnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ25nTW9kZWwnLF0gfSxdLFxuICAgICAgICAgICAgJ3VwZGF0ZSc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3V0cHV0LCBhcmdzOiBbJ25nTW9kZWxDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAgICAgJ2lzRGlzYWJsZWQnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ2Rpc2FibGVkJyxdIH0sXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEZvcm1Db250cm9sRGlyZWN0aXZlO1xuICAgIH0oTmdDb250cm9sKSk7XG5cbiAgICAvKipcbiAgICAgKiBAbGljZW5zZVxuICAgICAqIENvcHlyaWdodCBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICAgICAqXG4gICAgICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vYW5ndWxhci5pby9saWNlbnNlXG4gICAgICovXG4gICAgdmFyIF9fZXh0ZW5kcyQxMSA9ICh0aGlzICYmIHRoaXMuX19leHRlbmRzKSB8fCBmdW5jdGlvbiAoZCwgYikge1xuICAgICAgICBmb3IgKHZhciBwIGluIGIpIGlmIChiLmhhc093blByb3BlcnR5KHApKSBkW3BdID0gYltwXTtcbiAgICAgICAgZnVuY3Rpb24gX18oKSB7IHRoaXMuY29uc3RydWN0b3IgPSBkOyB9XG4gICAgICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcbiAgICB9O1xuICAgIHZhciBmb3JtRGlyZWN0aXZlUHJvdmlkZXIkMSA9IHtcbiAgICAgICAgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lcixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBGb3JtR3JvdXBEaXJlY3RpdmU7IH0pXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAd2hhdEl0RG9lcyBCaW5kcyBhbiBleGlzdGluZyB7QGxpbmsgRm9ybUdyb3VwfSB0byBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGhvd1RvVXNlXG4gICAgICpcbiAgICAgKiBUaGlzIGRpcmVjdGl2ZSBhY2NlcHRzIGFuIGV4aXN0aW5nIHtAbGluayBGb3JtR3JvdXB9IGluc3RhbmNlLiBJdCB3aWxsIHRoZW4gdXNlIHRoaXNcbiAgICAgKiB7QGxpbmsgRm9ybUdyb3VwfSBpbnN0YW5jZSB0byBtYXRjaCBhbnkgY2hpbGQge0BsaW5rIEZvcm1Db250cm9sfSwge0BsaW5rIEZvcm1Hcm91cH0sXG4gICAgICogYW5kIHtAbGluayBGb3JtQXJyYXl9IGluc3RhbmNlcyB0byBjaGlsZCB7QGxpbmsgRm9ybUNvbnRyb2xOYW1lfSwge0BsaW5rIEZvcm1Hcm91cE5hbWV9LFxuICAgICAqIGFuZCB7QGxpbmsgRm9ybUFycmF5TmFtZX0gZGlyZWN0aXZlcy5cbiAgICAgKlxuICAgICAqICoqU2V0IHZhbHVlKio6IFlvdSBjYW4gc2V0IHRoZSBmb3JtJ3MgaW5pdGlhbCB2YWx1ZSB3aGVuIGluc3RhbnRpYXRpbmcgdGhlXG4gICAgICoge0BsaW5rIEZvcm1Hcm91cH0sIG9yIHlvdSBjYW4gc2V0IGl0IHByb2dyYW1tYXRpY2FsbHkgbGF0ZXIgdXNpbmcgdGhlIHtAbGluayBGb3JtR3JvdXB9J3NcbiAgICAgKiB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnNldFZhbHVlfSBvciB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnBhdGNoVmFsdWV9IG1ldGhvZHMuXG4gICAgICpcbiAgICAgKiAqKkxpc3RlbiB0byB2YWx1ZSoqOiBJZiB5b3Ugd2FudCB0byBsaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgdmFsdWUgb2YgdGhlIGZvcm0sIHlvdSBjYW4gc3Vic2NyaWJlXG4gICAgICogdG8gdGhlIHtAbGluayBGb3JtR3JvdXB9J3Mge0BsaW5rIEFic3RyYWN0Q29udHJvbC52YWx1ZUNoYW5nZXN9IGV2ZW50LiAgWW91IGNhbiBhbHNvIGxpc3RlbiB0b1xuICAgICAqIGl0cyB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnN0YXR1c0NoYW5nZXN9IGV2ZW50IHRvIGJlIG5vdGlmaWVkIHdoZW4gdGhlIHZhbGlkYXRpb24gc3RhdHVzIGlzXG4gICAgICogcmUtY2FsY3VsYXRlZC5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBJbiB0aGlzIGV4YW1wbGUsIHdlIGNyZWF0ZSBmb3JtIGNvbnRyb2xzIGZvciBmaXJzdCBuYW1lIGFuZCBsYXN0IG5hbWUuXG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgZm9ybXMvdHMvc2ltcGxlRm9ybUdyb3VwL3NpbXBsZV9mb3JtX2dyb3VwX2V4YW1wbGUudHMgcmVnaW9uPSdDb21wb25lbnQnfVxuICAgICAqXG4gICAgICogKipucG0gcGFja2FnZSoqOiBgQGFuZ3VsYXIvZm9ybXNgXG4gICAgICpcbiAgICAgKiAqKk5nTW9kdWxlKio6IHtAbGluayBSZWFjdGl2ZUZvcm1zTW9kdWxlfVxuICAgICAqXG4gICAgICogIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgRm9ybUdyb3VwRGlyZWN0aXZlID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzJDExKEZvcm1Hcm91cERpcmVjdGl2ZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUdyb3VwRGlyZWN0aXZlKF92YWxpZGF0b3JzLCBfYXN5bmNWYWxpZGF0b3JzKSB7XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX3ZhbGlkYXRvcnMgPSBfdmFsaWRhdG9ycztcbiAgICAgICAgICAgIHRoaXMuX2FzeW5jVmFsaWRhdG9ycyA9IF9hc3luY1ZhbGlkYXRvcnM7XG4gICAgICAgICAgICB0aGlzLl9zdWJtaXR0ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZGlyZWN0aXZlcyA9IFtdO1xuICAgICAgICAgICAgdGhpcy5mb3JtID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMubmdTdWJtaXQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gICAgICAgIH1cbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja0Zvcm1QcmVzZW50KCk7XG4gICAgICAgICAgICBpZiAoU3RyaW5nTWFwV3JhcHBlci5jb250YWlucyhjaGFuZ2VzLCAnZm9ybScpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVmFsaWRhdG9ycygpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZURvbVZhbHVlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmVnaXN0cmF0aW9ucygpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJzdWJtaXR0ZWRcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9zdWJtaXR0ZWQ7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJmb3JtRGlyZWN0aXZlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm07IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZSwgXCJwYXRoXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmFkZENvbnRyb2wgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgICAgICAgICB2YXIgY3RybCA9IHRoaXMuZm9ybS5nZXQoZGlyLnBhdGgpO1xuICAgICAgICAgICAgc2V0VXBDb250cm9sKGN0cmwsIGRpcik7XG4gICAgICAgICAgICBjdHJsLnVwZGF0ZVZhbHVlQW5kVmFsaWRpdHkoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLnB1c2goZGlyKTtcbiAgICAgICAgICAgIHJldHVybiBjdHJsO1xuICAgICAgICB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmdldENvbnRyb2wgPSBmdW5jdGlvbiAoZGlyKSB7IHJldHVybiB0aGlzLmZvcm0uZ2V0KGRpci5wYXRoKTsgfTtcbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5yZW1vdmVDb250cm9sID0gZnVuY3Rpb24gKGRpcikgeyBMaXN0V3JhcHBlci5yZW1vdmUodGhpcy5kaXJlY3RpdmVzLCBkaXIpOyB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmFkZEZvcm1Hcm91cCA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcy5mb3JtLmdldChkaXIucGF0aCk7XG4gICAgICAgICAgICBzZXRVcEZvcm1Db250YWluZXIoY3RybCwgZGlyKTtcbiAgICAgICAgICAgIGN0cmwudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUucmVtb3ZlRm9ybUdyb3VwID0gZnVuY3Rpb24gKGRpcikgeyB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmdldEZvcm1Hcm91cCA9IGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIHRoaXMuZm9ybS5nZXQoZGlyLnBhdGgpOyB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmFkZEZvcm1BcnJheSA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcy5mb3JtLmdldChkaXIucGF0aCk7XG4gICAgICAgICAgICBzZXRVcEZvcm1Db250YWluZXIoY3RybCwgZGlyKTtcbiAgICAgICAgICAgIGN0cmwudXBkYXRlVmFsdWVBbmRWYWxpZGl0eSh7IGVtaXRFdmVudDogZmFsc2UgfSk7XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUucmVtb3ZlRm9ybUFycmF5ID0gZnVuY3Rpb24gKGRpcikgeyB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLmdldEZvcm1BcnJheSA9IGZ1bmN0aW9uIChkaXIpIHsgcmV0dXJuIHRoaXMuZm9ybS5nZXQoZGlyLnBhdGgpOyB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLnVwZGF0ZU1vZGVsID0gZnVuY3Rpb24gKGRpciwgdmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBjdHJsID0gdGhpcy5mb3JtLmdldChkaXIucGF0aCk7XG4gICAgICAgICAgICBjdHJsLnNldFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfTtcbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5vblN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX3N1Ym1pdHRlZCA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLm5nU3VibWl0LmVtaXQobnVsbCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUub25SZXNldCA9IGZ1bmN0aW9uICgpIHsgdGhpcy5yZXNldEZvcm0oKTsgfTtcbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5yZXNldEZvcm0gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7IHZhbHVlID0gdW5kZWZpbmVkOyB9XG4gICAgICAgICAgICB0aGlzLmZvcm0ucmVzZXQodmFsdWUpO1xuICAgICAgICAgICAgdGhpcy5fc3VibWl0dGVkID0gZmFsc2U7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5fdXBkYXRlRG9tVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RpdmVzLmZvckVhY2goZnVuY3Rpb24gKGRpcikge1xuICAgICAgICAgICAgICAgIHZhciBuZXdDdHJsID0gX3RoaXMuZm9ybS5nZXQoZGlyLnBhdGgpO1xuICAgICAgICAgICAgICAgIGlmIChkaXIuX2NvbnRyb2wgIT09IG5ld0N0cmwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5VcENvbnRyb2woZGlyLl9jb250cm9sLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q3RybClcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFVwQ29udHJvbChuZXdDdHJsLCBkaXIpO1xuICAgICAgICAgICAgICAgICAgICBkaXIuX2NvbnRyb2wgPSBuZXdDdHJsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5mb3JtLl91cGRhdGVUcmVlVmFsaWRpdHkoeyBlbWl0RXZlbnQ6IGZhbHNlIH0pO1xuICAgICAgICB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUucHJvdG90eXBlLl91cGRhdGVSZWdpc3RyYXRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHRoaXMuZm9ybS5fcmVnaXN0ZXJPbkNvbGxlY3Rpb25DaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3VwZGF0ZURvbVZhbHVlKCk7IH0pO1xuICAgICAgICAgICAgaWYgKHRoaXMuX29sZEZvcm0pXG4gICAgICAgICAgICAgICAgdGhpcy5fb2xkRm9ybS5fcmVnaXN0ZXJPbkNvbGxlY3Rpb25DaGFuZ2UoZnVuY3Rpb24gKCkgeyB9KTtcbiAgICAgICAgICAgIHRoaXMuX29sZEZvcm0gPSB0aGlzLmZvcm07XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Hcm91cERpcmVjdGl2ZS5wcm90b3R5cGUuX3VwZGF0ZVZhbGlkYXRvcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgc3luYyA9IGNvbXBvc2VWYWxpZGF0b3JzKHRoaXMuX3ZhbGlkYXRvcnMpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLnZhbGlkYXRvciA9IFZhbGlkYXRvcnMuY29tcG9zZShbdGhpcy5mb3JtLnZhbGlkYXRvciwgc3luY10pO1xuICAgICAgICAgICAgdmFyIGFzeW5jID0gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyh0aGlzLl9hc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgICAgICAgdGhpcy5mb3JtLmFzeW5jVmFsaWRhdG9yID0gVmFsaWRhdG9ycy5jb21wb3NlQXN5bmMoW3RoaXMuZm9ybS5hc3luY1ZhbGlkYXRvciwgYXN5bmNdKTtcbiAgICAgICAgfTtcbiAgICAgICAgRm9ybUdyb3VwRGlyZWN0aXZlLnByb3RvdHlwZS5fY2hlY2tGb3JtUHJlc2VudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmIChpc0JsYW5rKHRoaXMuZm9ybSkpIHtcbiAgICAgICAgICAgICAgICBSZWFjdGl2ZUVycm9ycy5taXNzaW5nRm9ybUV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RvcjogJ1tmb3JtR3JvdXBdJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVyczogW2Zvcm1EaXJlY3RpdmVQcm92aWRlciQxXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJyhzdWJtaXQpJzogJ29uU3VibWl0KCknLCAnKHJlc2V0KSc6ICdvblJlc2V0KCknIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRBczogJ25nRm9ybSdcbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBGb3JtR3JvdXBEaXJlY3RpdmUuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgICAgICB7IHR5cGU6IEFycmF5LCBkZWNvcmF0b3JzOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk9wdGlvbmFsIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5TZWxmIH0sIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5JbmplY3QsIGFyZ3M6IFtOR19BU1lOQ19WQUxJREFUT1JTLF0gfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIEZvcm1Hcm91cERpcmVjdGl2ZS5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgICAgICdmb3JtJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCwgYXJnczogWydmb3JtR3JvdXAnLF0gfSxdLFxuICAgICAgICAgICAgJ25nU3VibWl0JzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PdXRwdXQgfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRm9ybUdyb3VwRGlyZWN0aXZlO1xuICAgIH0oQ29udHJvbENvbnRhaW5lcikpO1xuXG4gICAgLyoqXG4gICAgICogQGxpY2Vuc2VcbiAgICAgKiBDb3B5cmlnaHQgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAgICAgKlxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXG4gICAgICogZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBhdCBodHRwczovL2FuZ3VsYXIuaW8vbGljZW5zZVxuICAgICAqL1xuICAgIHZhciBfX2V4dGVuZHMkMTIgPSAodGhpcyAmJiB0aGlzLl9fZXh0ZW5kcykgfHwgZnVuY3Rpb24gKGQsIGIpIHtcbiAgICAgICAgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07XG4gICAgICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxuICAgICAgICBkLnByb3RvdHlwZSA9IGIgPT09IG51bGwgPyBPYmplY3QuY3JlYXRlKGIpIDogKF9fLnByb3RvdHlwZSA9IGIucHJvdG90eXBlLCBuZXcgX18oKSk7XG4gICAgfTtcbiAgICB2YXIgZm9ybUdyb3VwTmFtZVByb3ZpZGVyID0ge1xuICAgICAgICBwcm92aWRlOiBDb250cm9sQ29udGFpbmVyLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEZvcm1Hcm91cE5hbWU7IH0pXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAd2hhdEl0RG9lcyBTeW5jcyBhIG5lc3RlZCB7QGxpbmsgRm9ybUdyb3VwfSB0byBhIERPTSBlbGVtZW50LlxuICAgICAqXG4gICAgICogQGhvd1RvVXNlXG4gICAgICpcbiAgICAgKiBUaGlzIGRpcmVjdGl2ZSBjYW4gb25seSBiZSB1c2VkIHdpdGggYSBwYXJlbnQge0BsaW5rIEZvcm1Hcm91cERpcmVjdGl2ZX0gKHNlbGVjdG9yOlxuICAgICAqIGBbZm9ybUdyb3VwXWApLlxuICAgICAqXG4gICAgICogSXQgYWNjZXB0cyB0aGUgc3RyaW5nIG5hbWUgb2YgdGhlIG5lc3RlZCB7QGxpbmsgRm9ybUdyb3VwfSB5b3Ugd2FudCB0byBsaW5rLCBhbmRcbiAgICAgKiB3aWxsIGxvb2sgZm9yIGEge0BsaW5rIEZvcm1Hcm91cH0gcmVnaXN0ZXJlZCB3aXRoIHRoYXQgbmFtZSBpbiB0aGUgcGFyZW50XG4gICAgICoge0BsaW5rIEZvcm1Hcm91cH0gaW5zdGFuY2UgeW91IHBhc3NlZCBpbnRvIHtAbGluayBGb3JtR3JvdXBEaXJlY3RpdmV9LlxuICAgICAqXG4gICAgICogTmVzdGVkIGZvcm0gZ3JvdXBzIGNhbiBjb21lIGluIGhhbmR5IHdoZW4geW91IHdhbnQgdG8gdmFsaWRhdGUgYSBzdWItZ3JvdXAgb2YgYVxuICAgICAqIGZvcm0gc2VwYXJhdGVseSBmcm9tIHRoZSByZXN0IG9yIHdoZW4geW91J2QgbGlrZSB0byBncm91cCB0aGUgdmFsdWVzIG9mIGNlcnRhaW5cbiAgICAgKiBjb250cm9scyBpbnRvIHRoZWlyIG93biBuZXN0ZWQgb2JqZWN0LlxuICAgICAqXG4gICAgICogKipBY2Nlc3MgdGhlIGdyb3VwKio6IFlvdSBjYW4gYWNjZXNzIHRoZSBhc3NvY2lhdGVkIHtAbGluayBGb3JtR3JvdXB9IHVzaW5nIHRoZVxuICAgICAqIHtAbGluayBBYnN0cmFjdENvbnRyb2wuZ2V0fSBtZXRob2QuIEV4OiBgdGhpcy5mb3JtLmdldCgnbmFtZScpYC5cbiAgICAgKlxuICAgICAqIFlvdSBjYW4gYWxzbyBhY2Nlc3MgaW5kaXZpZHVhbCBjb250cm9scyB3aXRoaW4gdGhlIGdyb3VwIHVzaW5nIGRvdCBzeW50YXguXG4gICAgICogRXg6IGB0aGlzLmZvcm0uZ2V0KCduYW1lLmZpcnN0JylgXG4gICAgICpcbiAgICAgKiAqKkdldCB0aGUgdmFsdWUqKjogdGhlIGB2YWx1ZWAgcHJvcGVydHkgaXMgYWx3YXlzIHN5bmNlZCBhbmQgYXZhaWxhYmxlIG9uIHRoZVxuICAgICAqIHtAbGluayBGb3JtR3JvdXB9LiBTZWUgYSBmdWxsIGxpc3Qgb2YgYXZhaWxhYmxlIHByb3BlcnRpZXMgaW4ge0BsaW5rIEFic3RyYWN0Q29udHJvbH0uXG4gICAgICpcbiAgICAgKiAqKlNldCB0aGUgdmFsdWUqKjogWW91IGNhbiBzZXQgYW4gaW5pdGlhbCB2YWx1ZSBmb3IgZWFjaCBjaGlsZCBjb250cm9sIHdoZW4gaW5zdGFudGlhdGluZ1xuICAgICAqIHRoZSB7QGxpbmsgRm9ybUdyb3VwfSwgb3IgeW91IGNhbiBzZXQgaXQgcHJvZ3JhbW1hdGljYWxseSBsYXRlciB1c2luZ1xuICAgICAqIHtAbGluayBBYnN0cmFjdENvbnRyb2wuc2V0VmFsdWV9IG9yIHtAbGluayBBYnN0cmFjdENvbnRyb2wucGF0Y2hWYWx1ZX0uXG4gICAgICpcbiAgICAgKiAqKkxpc3RlbiB0byB2YWx1ZSoqOiBJZiB5b3Ugd2FudCB0byBsaXN0ZW4gdG8gY2hhbmdlcyBpbiB0aGUgdmFsdWUgb2YgdGhlIGdyb3VwLCB5b3UgY2FuXG4gICAgICogc3Vic2NyaWJlIHRvIHRoZSB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnZhbHVlQ2hhbmdlc30gZXZlbnQuICBZb3UgY2FuIGFsc28gbGlzdGVuIHRvXG4gICAgICoge0BsaW5rIEFic3RyYWN0Q29udHJvbC5zdGF0dXNDaGFuZ2VzfSB0byBiZSBub3RpZmllZCB3aGVuIHRoZSB2YWxpZGF0aW9uIHN0YXR1cyBpc1xuICAgICAqIHJlLWNhbGN1bGF0ZWQuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICoge0BleGFtcGxlIGZvcm1zL3RzL25lc3RlZEZvcm1Hcm91cC9uZXN0ZWRfZm9ybV9ncm91cF9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAgICAgKlxuICAgICAqICogKipucG0gcGFja2FnZSoqOiBgQGFuZ3VsYXIvZm9ybXNgXG4gICAgICpcbiAgICAgKiAqICoqTmdNb2R1bGUqKjogYFJlYWN0aXZlRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEZvcm1Hcm91cE5hbWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkMTIoRm9ybUdyb3VwTmFtZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUdyb3VwTmFtZShwYXJlbnQsIHZhbGlkYXRvcnMsIGFzeW5jVmFsaWRhdG9ycykge1xuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0b3JzID0gdmFsaWRhdG9ycztcbiAgICAgICAgICAgIHRoaXMuX2FzeW5jVmFsaWRhdG9ycyA9IGFzeW5jVmFsaWRhdG9ycztcbiAgICAgICAgfVxuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1Hcm91cE5hbWUucHJvdG90eXBlLl9jaGVja1BhcmVudFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX2hhc0ludmFsaWRQYXJlbnQodGhpcy5fcGFyZW50KSkge1xuICAgICAgICAgICAgICAgIFJlYWN0aXZlRXJyb3JzLmdyb3VwUGFyZW50RXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Hcm91cE5hbWUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW2Zvcm1Hcm91cE5hbWVdJywgcHJvdmlkZXJzOiBbZm9ybUdyb3VwTmFtZVByb3ZpZGVyXSB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIEZvcm1Hcm91cE5hbWUuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IENvbnRyb2xDb250YWluZXIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkhvc3QgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNraXBTZWxmIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfQVNZTkNfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICBGb3JtR3JvdXBOYW1lLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAgICAgJ25hbWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ2Zvcm1Hcm91cE5hbWUnLF0gfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRm9ybUdyb3VwTmFtZTtcbiAgICB9KEFic3RyYWN0Rm9ybUdyb3VwRGlyZWN0aXZlKSk7XG4gICAgdmFyIGZvcm1BcnJheU5hbWVQcm92aWRlciA9IHtcbiAgICAgICAgcHJvdmlkZTogQ29udHJvbENvbnRhaW5lcixcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBGb3JtQXJyYXlOYW1lOyB9KVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHdoYXRJdERvZXMgU3luY3MgYSBuZXN0ZWQge0BsaW5rIEZvcm1BcnJheX0gdG8gYSBET00gZWxlbWVudC5cbiAgICAgKlxuICAgICAqIEBob3dUb1VzZVxuICAgICAqXG4gICAgICogVGhpcyBkaXJlY3RpdmUgaXMgZGVzaWduZWQgdG8gYmUgdXNlZCB3aXRoIGEgcGFyZW50IHtAbGluayBGb3JtR3JvdXBEaXJlY3RpdmV9IChzZWxlY3RvcjpcbiAgICAgKiBgW2Zvcm1Hcm91cF1gKS5cbiAgICAgKlxuICAgICAqIEl0IGFjY2VwdHMgdGhlIHN0cmluZyBuYW1lIG9mIHRoZSBuZXN0ZWQge0BsaW5rIEZvcm1BcnJheX0geW91IHdhbnQgdG8gbGluaywgYW5kXG4gICAgICogd2lsbCBsb29rIGZvciBhIHtAbGluayBGb3JtQXJyYXl9IHJlZ2lzdGVyZWQgd2l0aCB0aGF0IG5hbWUgaW4gdGhlIHBhcmVudFxuICAgICAqIHtAbGluayBGb3JtR3JvdXB9IGluc3RhbmNlIHlvdSBwYXNzZWQgaW50byB7QGxpbmsgRm9ybUdyb3VwRGlyZWN0aXZlfS5cbiAgICAgKlxuICAgICAqIE5lc3RlZCBmb3JtIGFycmF5cyBjYW4gY29tZSBpbiBoYW5keSB3aGVuIHlvdSBoYXZlIGEgZ3JvdXAgb2YgZm9ybSBjb250cm9scyBidXRcbiAgICAgKiB5b3UncmUgbm90IHN1cmUgaG93IG1hbnkgdGhlcmUgd2lsbCBiZS4gRm9ybSBhcnJheXMgYWxsb3cgeW91IHRvIGNyZWF0ZSBuZXdcbiAgICAgKiBmb3JtIGNvbnRyb2xzIGR5bmFtaWNhbGx5LlxuICAgICAqXG4gICAgICogKipBY2Nlc3MgdGhlIGFycmF5Kio6IFlvdSBjYW4gYWNjZXNzIHRoZSBhc3NvY2lhdGVkIHtAbGluayBGb3JtQXJyYXl9IHVzaW5nIHRoZVxuICAgICAqIHtAbGluayBBYnN0cmFjdENvbnRyb2wuZ2V0fSBtZXRob2Qgb24gdGhlIHBhcmVudCB7QGxpbmsgRm9ybUdyb3VwfS5cbiAgICAgKiBFeDogYHRoaXMuZm9ybS5nZXQoJ2NpdGllcycpYC5cbiAgICAgKlxuICAgICAqICoqR2V0IHRoZSB2YWx1ZSoqOiB0aGUgYHZhbHVlYCBwcm9wZXJ0eSBpcyBhbHdheXMgc3luY2VkIGFuZCBhdmFpbGFibGUgb24gdGhlXG4gICAgICoge0BsaW5rIEZvcm1BcnJheX0uIFNlZSBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgcHJvcGVydGllcyBpbiB7QGxpbmsgQWJzdHJhY3RDb250cm9sfS5cbiAgICAgKlxuICAgICAqICoqU2V0IHRoZSB2YWx1ZSoqOiBZb3UgY2FuIHNldCBhbiBpbml0aWFsIHZhbHVlIGZvciBlYWNoIGNoaWxkIGNvbnRyb2wgd2hlbiBpbnN0YW50aWF0aW5nXG4gICAgICogdGhlIHtAbGluayBGb3JtQXJyYXl9LCBvciB5b3UgY2FuIHNldCB0aGUgdmFsdWUgcHJvZ3JhbW1hdGljYWxseSBsYXRlciB1c2luZyB0aGVcbiAgICAgKiB7QGxpbmsgRm9ybUFycmF5fSdzIHtAbGluayBBYnN0cmFjdENvbnRyb2wuc2V0VmFsdWV9IG9yIHtAbGluayBBYnN0cmFjdENvbnRyb2wucGF0Y2hWYWx1ZX1cbiAgICAgKiBtZXRob2RzLlxuICAgICAqXG4gICAgICogKipMaXN0ZW4gdG8gdmFsdWUqKjogSWYgeW91IHdhbnQgdG8gbGlzdGVuIHRvIGNoYW5nZXMgaW4gdGhlIHZhbHVlIG9mIHRoZSBhcnJheSwgeW91IGNhblxuICAgICAqIHN1YnNjcmliZSB0byB0aGUge0BsaW5rIEZvcm1BcnJheX0ncyB7QGxpbmsgQWJzdHJhY3RDb250cm9sLnZhbHVlQ2hhbmdlc30gZXZlbnQuICBZb3UgY2FuIGFsc29cbiAgICAgKiBsaXN0ZW4gdG8gaXRzIHtAbGluayBBYnN0cmFjdENvbnRyb2wuc3RhdHVzQ2hhbmdlc30gZXZlbnQgdG8gYmUgbm90aWZpZWQgd2hlbiB0aGUgdmFsaWRhdGlvblxuICAgICAqIHN0YXR1cyBpcyByZS1jYWxjdWxhdGVkLlxuICAgICAqXG4gICAgICogKipBZGQgbmV3IGNvbnRyb2xzKio6IFlvdSBjYW4gYWRkIG5ldyBjb250cm9scyB0byB0aGUge0BsaW5rIEZvcm1BcnJheX0gZHluYW1pY2FsbHkgYnlcbiAgICAgKiBjYWxsaW5nIGl0cyB7QGxpbmsgRm9ybUFycmF5LnB1c2h9IG1ldGhvZC5cbiAgICAgKiAgRXg6IGB0aGlzLmZvcm0uZ2V0KCdjaXRpZXMnKS5wdXNoKG5ldyBGb3JtQ29udHJvbCgpKTtgXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICoge0BleGFtcGxlIGZvcm1zL3RzL25lc3RlZEZvcm1BcnJheS9uZXN0ZWRfZm9ybV9hcnJheV9leGFtcGxlLnRzIHJlZ2lvbj0nQ29tcG9uZW50J31cbiAgICAgKlxuICAgICAqICogKipucG0gcGFja2FnZSoqOiBgQGFuZ3VsYXIvZm9ybXNgXG4gICAgICpcbiAgICAgKiAqICoqTmdNb2R1bGUqKjogYFJlYWN0aXZlRm9ybXNNb2R1bGVgXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEZvcm1BcnJheU5hbWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkMTIoRm9ybUFycmF5TmFtZSwgX3N1cGVyKTtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUFycmF5TmFtZShwYXJlbnQsIHZhbGlkYXRvcnMsIGFzeW5jVmFsaWRhdG9ycykge1xuICAgICAgICAgICAgX3N1cGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0b3JzID0gdmFsaWRhdG9ycztcbiAgICAgICAgICAgIHRoaXMuX2FzeW5jVmFsaWRhdG9ycyA9IGFzeW5jVmFsaWRhdG9ycztcbiAgICAgICAgfVxuICAgICAgICBGb3JtQXJyYXlOYW1lLnByb3RvdHlwZS5uZ09uSW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrUGFyZW50VHlwZSgpO1xuICAgICAgICAgICAgdGhpcy5mb3JtRGlyZWN0aXZlLmFkZEZvcm1BcnJheSh0aGlzKTtcbiAgICAgICAgfTtcbiAgICAgICAgRm9ybUFycmF5TmFtZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5mb3JtRGlyZWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtRGlyZWN0aXZlLnJlbW92ZUZvcm1BcnJheSh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1BcnJheU5hbWUucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmZvcm1EaXJlY3RpdmUuZ2V0Rm9ybUFycmF5KHRoaXMpOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1BcnJheU5hbWUucHJvdG90eXBlLCBcImZvcm1EaXJlY3RpdmVcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3BhcmVudCA/IHRoaXMuX3BhcmVudC5mb3JtRGlyZWN0aXZlIDogbnVsbDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUFycmF5TmFtZS5wcm90b3R5cGUsIFwicGF0aFwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbnRyb2xQYXRoKHRoaXMubmFtZSwgdGhpcy5fcGFyZW50KTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQXJyYXlOYW1lLnByb3RvdHlwZSwgXCJ2YWxpZGF0b3JcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb21wb3NlVmFsaWRhdG9ycyh0aGlzLl92YWxpZGF0b3JzKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQXJyYXlOYW1lLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNvbXBvc2VBc3luY1ZhbGlkYXRvcnModGhpcy5fYXN5bmNWYWxpZGF0b3JzKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIEZvcm1BcnJheU5hbWUucHJvdG90eXBlLl9jaGVja1BhcmVudFR5cGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoX2hhc0ludmFsaWRQYXJlbnQodGhpcy5fcGFyZW50KSkge1xuICAgICAgICAgICAgICAgIFJlYWN0aXZlRXJyb3JzLmFycmF5UGFyZW50RXhjZXB0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1BcnJheU5hbWUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7IHNlbGVjdG9yOiAnW2Zvcm1BcnJheU5hbWVdJywgcHJvdmlkZXJzOiBbZm9ybUFycmF5TmFtZVByb3ZpZGVyXSB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIEZvcm1BcnJheU5hbWUuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IENvbnRyb2xDb250YWluZXIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkhvc3QgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNraXBTZWxmIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfQVNZTkNfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICBGb3JtQXJyYXlOYW1lLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAgICAgJ25hbWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ2Zvcm1BcnJheU5hbWUnLF0gfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gRm9ybUFycmF5TmFtZTtcbiAgICB9KENvbnRyb2xDb250YWluZXIpKTtcbiAgICBmdW5jdGlvbiBfaGFzSW52YWxpZFBhcmVudChwYXJlbnQpIHtcbiAgICAgICAgcmV0dXJuICEocGFyZW50IGluc3RhbmNlb2YgRm9ybUdyb3VwTmFtZSkgJiYgIShwYXJlbnQgaW5zdGFuY2VvZiBGb3JtR3JvdXBEaXJlY3RpdmUpICYmXG4gICAgICAgICAgICAhKHBhcmVudCBpbnN0YW5jZW9mIEZvcm1BcnJheU5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBsaWNlbnNlXG4gICAgICogQ29weXJpZ2h0IEdvb2dsZSBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gICAgICpcbiAgICAgKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGUgbGljZW5zZSB0aGF0IGNhbiBiZVxuICAgICAqIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgYXQgaHR0cHM6Ly9hbmd1bGFyLmlvL2xpY2Vuc2VcbiAgICAgKi9cbiAgICB2YXIgX19leHRlbmRzJDEwID0gKHRoaXMgJiYgdGhpcy5fX2V4dGVuZHMpIHx8IGZ1bmN0aW9uIChkLCBiKSB7XG4gICAgICAgIGZvciAodmFyIHAgaW4gYikgaWYgKGIuaGFzT3duUHJvcGVydHkocCkpIGRbcF0gPSBiW3BdO1xuICAgICAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cbiAgICAgICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xuICAgIH07XG4gICAgdmFyIGNvbnRyb2xOYW1lQmluZGluZyA9IHtcbiAgICAgICAgcHJvdmlkZTogTmdDb250cm9sLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIEZvcm1Db250cm9sTmFtZTsgfSlcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEB3aGF0SXREb2VzICBTeW5jcyBhIHtAbGluayBGb3JtQ29udHJvbH0gaW4gYW4gZXhpc3Rpbmcge0BsaW5rIEZvcm1Hcm91cH0gdG8gYSBmb3JtIGNvbnRyb2xcbiAgICAgKiBlbGVtZW50IGJ5IG5hbWUuXG4gICAgICpcbiAgICAgKiBJbiBvdGhlciB3b3JkcywgdGhpcyBkaXJlY3RpdmUgZW5zdXJlcyB0aGF0IGFueSB2YWx1ZXMgd3JpdHRlbiB0byB0aGUge0BsaW5rIEZvcm1Db250cm9sfVxuICAgICAqIGluc3RhbmNlIHByb2dyYW1tYXRpY2FsbHkgd2lsbCBiZSB3cml0dGVuIHRvIHRoZSBET00gZWxlbWVudCAobW9kZWwgLT4gdmlldykuIENvbnZlcnNlbHksXG4gICAgICogYW55IHZhbHVlcyB3cml0dGVuIHRvIHRoZSBET00gZWxlbWVudCB0aHJvdWdoIHVzZXIgaW5wdXQgd2lsbCBiZSByZWZsZWN0ZWQgaW4gdGhlXG4gICAgICoge0BsaW5rIEZvcm1Db250cm9sfSBpbnN0YW5jZSAodmlldyAtPiBtb2RlbCkuXG4gICAgICpcbiAgICAgKiBAaG93VG9Vc2VcbiAgICAgKlxuICAgICAqIFRoaXMgZGlyZWN0aXZlIGlzIGRlc2lnbmVkIHRvIGJlIHVzZWQgd2l0aCBhIHBhcmVudCB7QGxpbmsgRm9ybUdyb3VwRGlyZWN0aXZlfSAoc2VsZWN0b3I6XG4gICAgICogYFtmb3JtR3JvdXBdYCkuXG4gICAgICpcbiAgICAgKiBJdCBhY2NlcHRzIHRoZSBzdHJpbmcgbmFtZSBvZiB0aGUge0BsaW5rIEZvcm1Db250cm9sfSBpbnN0YW5jZSB5b3Ugd2FudCB0b1xuICAgICAqIGxpbmssIGFuZCB3aWxsIGxvb2sgZm9yIGEge0BsaW5rIEZvcm1Db250cm9sfSByZWdpc3RlcmVkIHdpdGggdGhhdCBuYW1lIGluIHRoZVxuICAgICAqIGNsb3Nlc3Qge0BsaW5rIEZvcm1Hcm91cH0gb3Ige0BsaW5rIEZvcm1BcnJheX0gYWJvdmUgaXQuXG4gICAgICpcbiAgICAgKiAqKkFjY2VzcyB0aGUgY29udHJvbCoqOiBZb3UgY2FuIGFjY2VzcyB0aGUge0BsaW5rIEZvcm1Db250cm9sfSBhc3NvY2lhdGVkIHdpdGhcbiAgICAgKiB0aGlzIGRpcmVjdGl2ZSBieSB1c2luZyB0aGUge0BsaW5rIEFic3RyYWN0Q29udHJvbC5nZXR9IG1ldGhvZC5cbiAgICAgKiBFeDogYHRoaXMuZm9ybS5nZXQoJ2ZpcnN0Jyk7YFxuICAgICAqXG4gICAgICogKipHZXQgdmFsdWUqKjogdGhlIGB2YWx1ZWAgcHJvcGVydHkgaXMgYWx3YXlzIHN5bmNlZCBhbmQgYXZhaWxhYmxlIG9uIHRoZSB7QGxpbmsgRm9ybUNvbnRyb2x9LlxuICAgICAqIFNlZSBhIGZ1bGwgbGlzdCBvZiBhdmFpbGFibGUgcHJvcGVydGllcyBpbiB7QGxpbmsgQWJzdHJhY3RDb250cm9sfS5cbiAgICAgKlxuICAgICAqICAqKlNldCB2YWx1ZSoqOiBZb3UgY2FuIHNldCBhbiBpbml0aWFsIHZhbHVlIGZvciB0aGUgY29udHJvbCB3aGVuIGluc3RhbnRpYXRpbmcgdGhlXG4gICAgICogIHtAbGluayBGb3JtQ29udHJvbH0sIG9yIHlvdSBjYW4gc2V0IGl0IHByb2dyYW1tYXRpY2FsbHkgbGF0ZXIgdXNpbmdcbiAgICAgKiAge0BsaW5rIEFic3RyYWN0Q29udHJvbC5zZXRWYWx1ZX0gb3Ige0BsaW5rIEFic3RyYWN0Q29udHJvbC5wYXRjaFZhbHVlfS5cbiAgICAgKlxuICAgICAqICoqTGlzdGVuIHRvIHZhbHVlKio6IElmIHlvdSB3YW50IHRvIGxpc3RlbiB0byBjaGFuZ2VzIGluIHRoZSB2YWx1ZSBvZiB0aGUgY29udHJvbCwgeW91IGNhblxuICAgICAqIHN1YnNjcmliZSB0byB0aGUge0BsaW5rIEFic3RyYWN0Q29udHJvbC52YWx1ZUNoYW5nZXN9IGV2ZW50LiAgWW91IGNhbiBhbHNvIGxpc3RlbiB0b1xuICAgICAqIHtAbGluayBBYnN0cmFjdENvbnRyb2wuc3RhdHVzQ2hhbmdlc30gdG8gYmUgbm90aWZpZWQgd2hlbiB0aGUgdmFsaWRhdGlvbiBzdGF0dXMgaXNcbiAgICAgKiByZS1jYWxjdWxhdGVkLlxuICAgICAqXG4gICAgICogIyMjIEV4YW1wbGVcbiAgICAgKlxuICAgICAqIEluIHRoaXMgZXhhbXBsZSwgd2UgY3JlYXRlIGZvcm0gY29udHJvbHMgZm9yIGZpcnN0IG5hbWUgYW5kIGxhc3QgbmFtZS5cbiAgICAgKlxuICAgICAqIHtAZXhhbXBsZSBmb3Jtcy90cy9zaW1wbGVGb3JtR3JvdXAvc2ltcGxlX2Zvcm1fZ3JvdXBfZXhhbXBsZS50cyByZWdpb249J0NvbXBvbmVudCd9XG4gICAgICpcbiAgICAgKiAgKiAqKm5wbSBwYWNrYWdlKio6IGBAYW5ndWxhci9mb3Jtc2BcbiAgICAgKlxuICAgICAqICAqICoqTmdNb2R1bGUqKjoge0BsaW5rIFJlYWN0aXZlRm9ybXNNb2R1bGV9XG4gICAgICpcbiAgICAgKiAgQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBGb3JtQ29udHJvbE5hbWUgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgICAgICBfX2V4dGVuZHMkMTAoRm9ybUNvbnRyb2xOYW1lLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBGb3JtQ29udHJvbE5hbWUocGFyZW50LCB2YWxpZGF0b3JzLCBhc3luY1ZhbGlkYXRvcnMsIHZhbHVlQWNjZXNzb3JzKSB7XG4gICAgICAgICAgICBfc3VwZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIHRoaXMuX2FkZGVkID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgICAgICAgICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcbiAgICAgICAgICAgIHRoaXMuX3Jhd1ZhbGlkYXRvcnMgPSB2YWxpZGF0b3JzIHx8IFtdO1xuICAgICAgICAgICAgdGhpcy5fcmF3QXN5bmNWYWxpZGF0b3JzID0gYXN5bmNWYWxpZGF0b3JzIHx8IFtdO1xuICAgICAgICAgICAgdGhpcy52YWx1ZUFjY2Vzc29yID0gc2VsZWN0VmFsdWVBY2Nlc3Nvcih0aGlzLCB2YWx1ZUFjY2Vzc29ycyk7XG4gICAgICAgIH1cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1Db250cm9sTmFtZS5wcm90b3R5cGUsIFwiaXNEaXNhYmxlZFwiLCB7XG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc0Rpc2FibGVkKSB7IFJlYWN0aXZlRXJyb3JzLmRpc2FibGVkQXR0cldhcm5pbmcoKTsgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIEZvcm1Db250cm9sTmFtZS5wcm90b3R5cGUubmdPbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICAgICAgaWYgKCF0aGlzLl9hZGRlZClcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRVcENvbnRyb2woKTtcbiAgICAgICAgICAgIGlmIChpc1Byb3BlcnR5VXBkYXRlZChjaGFuZ2VzLCB0aGlzLnZpZXdNb2RlbCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IHRoaXMubW9kZWw7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtRGlyZWN0aXZlLnVwZGF0ZU1vZGVsKHRoaXMsIHRoaXMubW9kZWwpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGb3JtQ29udHJvbE5hbWUucHJvdG90eXBlLm5nT25EZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybURpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9ybURpcmVjdGl2ZS5yZW1vdmVDb250cm9sKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGb3JtQ29udHJvbE5hbWUucHJvdG90eXBlLnZpZXdUb01vZGVsVXBkYXRlID0gZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbCA9IG5ld1ZhbHVlO1xuICAgICAgICAgICAgdGhpcy51cGRhdGUuZW1pdChuZXdWYWx1ZSk7XG4gICAgICAgIH07XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQ29udHJvbE5hbWUucHJvdG90eXBlLCBcInBhdGhcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBjb250cm9sUGF0aCh0aGlzLm5hbWUsIHRoaXMuX3BhcmVudCk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUNvbnRyb2xOYW1lLnByb3RvdHlwZSwgXCJmb3JtRGlyZWN0aXZlXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcGFyZW50ID8gdGhpcy5fcGFyZW50LmZvcm1EaXJlY3RpdmUgOiBudWxsOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZvcm1Db250cm9sTmFtZS5wcm90b3R5cGUsIFwidmFsaWRhdG9yXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY29tcG9zZVZhbGlkYXRvcnModGhpcy5fcmF3VmFsaWRhdG9ycyk7IH0sXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgICAgIH0pO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRm9ybUNvbnRyb2xOYW1lLnByb3RvdHlwZSwgXCJhc3luY1ZhbGlkYXRvclwiLCB7XG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29tcG9zZUFzeW5jVmFsaWRhdG9ycyh0aGlzLl9yYXdBc3luY1ZhbGlkYXRvcnMpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGb3JtQ29udHJvbE5hbWUucHJvdG90eXBlLCBcImNvbnRyb2xcIiwge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9jb250cm9sOyB9LFxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgICAgRm9ybUNvbnRyb2xOYW1lLnByb3RvdHlwZS5fY2hlY2tQYXJlbnRUeXBlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKCEodGhpcy5fcGFyZW50IGluc3RhbmNlb2YgRm9ybUdyb3VwTmFtZSkgJiZcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnQgaW5zdGFuY2VvZiBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZSkge1xuICAgICAgICAgICAgICAgIFJlYWN0aXZlRXJyb3JzLm5nTW9kZWxHcm91cEV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoISh0aGlzLl9wYXJlbnQgaW5zdGFuY2VvZiBGb3JtR3JvdXBOYW1lKSAmJiAhKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIEZvcm1Hcm91cERpcmVjdGl2ZSkgJiZcbiAgICAgICAgICAgICAgICAhKHRoaXMuX3BhcmVudCBpbnN0YW5jZW9mIEZvcm1BcnJheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgUmVhY3RpdmVFcnJvcnMuY29udHJvbFBhcmVudEV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGb3JtQ29udHJvbE5hbWUucHJvdG90eXBlLl9zZXRVcENvbnRyb2wgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl9jaGVja1BhcmVudFR5cGUoKTtcbiAgICAgICAgICAgIHRoaXMuX2NvbnRyb2wgPSB0aGlzLmZvcm1EaXJlY3RpdmUuYWRkQ29udHJvbCh0aGlzKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbnRyb2wuZGlzYWJsZWQpXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZUFjY2Vzc29yLnNldERpc2FibGVkU3RhdGUodHJ1ZSk7XG4gICAgICAgICAgICB0aGlzLl9hZGRlZCA9IHRydWU7XG4gICAgICAgIH07XG4gICAgICAgIEZvcm1Db250cm9sTmFtZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3sgc2VsZWN0b3I6ICdbZm9ybUNvbnRyb2xOYW1lXScsIHByb3ZpZGVyczogW2NvbnRyb2xOYW1lQmluZGluZ10gfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBGb3JtQ29udHJvbE5hbWUuY3RvclBhcmFtZXRlcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IENvbnRyb2xDb250YWluZXIsIGRlY29yYXRvcnM6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3B0aW9uYWwgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkhvc3QgfSwgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLlNraXBTZWxmIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfQVNZTkNfVkFMSURBVE9SUyxdIH0sXSB9LFxuICAgICAgICAgICAgeyB0eXBlOiBBcnJheSwgZGVjb3JhdG9yczogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5PcHRpb25hbCB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuU2VsZiB9LCB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5qZWN0LCBhcmdzOiBbTkdfVkFMVUVfQUNDRVNTT1IsXSB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgRm9ybUNvbnRyb2xOYW1lLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAgICAgJ25hbWUnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ2Zvcm1Db250cm9sTmFtZScsXSB9LF0sXG4gICAgICAgICAgICAnbW9kZWwnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ25nTW9kZWwnLF0gfSxdLFxuICAgICAgICAgICAgJ3VwZGF0ZSc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuT3V0cHV0LCBhcmdzOiBbJ25nTW9kZWxDaGFuZ2UnLF0gfSxdLFxuICAgICAgICAgICAgJ2lzRGlzYWJsZWQnOiBbeyB0eXBlOiBfYW5ndWxhcl9jb3JlLklucHV0LCBhcmdzOiBbJ2Rpc2FibGVkJyxdIH0sXSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIEZvcm1Db250cm9sTmFtZTtcbiAgICB9KE5nQ29udHJvbCkpO1xuXG4gICAgdmFyIFJFUVVJUkVEX1ZBTElEQVRPUiA9IHtcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMSURBVE9SUyxcbiAgICAgICAgdXNlRXhpc3Rpbmc6IF9hbmd1bGFyX2NvcmUuZm9yd2FyZFJlZihmdW5jdGlvbiAoKSB7IHJldHVybiBSZXF1aXJlZFZhbGlkYXRvcjsgfSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIERpcmVjdGl2ZSB0aGF0IGFkZHMgdGhlIGByZXF1aXJlZGAgdmFsaWRhdG9yIHRvIGFueSBjb250cm9scyBtYXJrZWQgd2l0aCB0aGVcbiAgICAgKiBgcmVxdWlyZWRgIGF0dHJpYnV0ZSwgdmlhIHRoZSB7QGxpbmsgTkdfVkFMSURBVE9SU30gYmluZGluZy5cbiAgICAgKlxuICAgICAqICMjIyBFeGFtcGxlXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiA8aW5wdXQgbmFtZT1cImZ1bGxOYW1lXCIgbmdNb2RlbCByZXF1aXJlZD5cbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgUmVxdWlyZWRWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBSZXF1aXJlZFZhbGlkYXRvcigpIHtcbiAgICAgICAgfVxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoUmVxdWlyZWRWYWxpZGF0b3IucHJvdG90eXBlLCBcInJlcXVpcmVkXCIsIHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5fcmVxdWlyZWQ7IH0sXG4gICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlcXVpcmVkID0gaXNQcmVzZW50KHZhbHVlKSAmJiBcIlwiICsgdmFsdWUgIT09ICdmYWxzZSc7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uQ2hhbmdlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNoYW5nZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICAgIFJlcXVpcmVkVmFsaWRhdG9yLnByb3RvdHlwZS52YWxpZGF0ZSA9IGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXF1aXJlZCA/IFZhbGlkYXRvcnMucmVxdWlyZWQoYykgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBSZXF1aXJlZFZhbGlkYXRvci5wcm90b3R5cGUucmVnaXN0ZXJPblZhbGlkYXRvckNoYW5nZSA9IGZ1bmN0aW9uIChmbikgeyB0aGlzLl9vbkNoYW5nZSA9IGZuOyB9O1xuICAgICAgICBSZXF1aXJlZFZhbGlkYXRvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW3JlcXVpcmVkXVtmb3JtQ29udHJvbE5hbWVdLFtyZXF1aXJlZF1bZm9ybUNvbnRyb2xdLFtyZXF1aXJlZF1bbmdNb2RlbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbUkVRVUlSRURfVkFMSURBVE9SXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGhvc3Q6IHsgJ1thdHRyLnJlcXVpcmVkXSc6ICdyZXF1aXJlZD8gXCJcIiA6IG51bGwnIH1cbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBSZXF1aXJlZFZhbGlkYXRvci5jdG9yUGFyYW1ldGVycyA9IFtdO1xuICAgICAgICBSZXF1aXJlZFZhbGlkYXRvci5wcm9wRGVjb3JhdG9ycyA9IHtcbiAgICAgICAgICAgICdyZXF1aXJlZCc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQgfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUmVxdWlyZWRWYWxpZGF0b3I7XG4gICAgfSgpKTtcbiAgICAvKipcbiAgICAgKiBQcm92aWRlciB3aGljaCBhZGRzIHtAbGluayBNaW5MZW5ndGhWYWxpZGF0b3J9IHRvIHtAbGluayBOR19WQUxJREFUT1JTfS5cbiAgICAgKlxuICAgICAqICMjIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgY29tbW9uL2Zvcm1zL3RzL3ZhbGlkYXRvcnMvdmFsaWRhdG9ycy50cyByZWdpb249J21pbid9XG4gICAgICovXG4gICAgdmFyIE1JTl9MRU5HVEhfVkFMSURBVE9SID0ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1pbkxlbmd0aFZhbGlkYXRvcjsgfSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIGRpcmVjdGl2ZSB3aGljaCBpbnN0YWxscyB0aGUge0BsaW5rIE1pbkxlbmd0aFZhbGlkYXRvcn0gZm9yIGFueSBgZm9ybUNvbnRyb2xOYW1lYCxcbiAgICAgKiBgZm9ybUNvbnRyb2xgLCBvciBjb250cm9sIHdpdGggYG5nTW9kZWxgIHRoYXQgYWxzbyBoYXMgYSBgbWlubGVuZ3RoYCBhdHRyaWJ1dGUuXG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIE1pbkxlbmd0aFZhbGlkYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIE1pbkxlbmd0aFZhbGlkYXRvcigpIHtcbiAgICAgICAgfVxuICAgICAgICBNaW5MZW5ndGhWYWxpZGF0b3IucHJvdG90eXBlLl9jcmVhdGVWYWxpZGF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aGlzLl92YWxpZGF0b3IgPSBWYWxpZGF0b3JzLm1pbkxlbmd0aChwYXJzZUludCh0aGlzLm1pbmxlbmd0aCwgMTApKTtcbiAgICAgICAgfTtcbiAgICAgICAgTWluTGVuZ3RoVmFsaWRhdG9yLnByb3RvdHlwZS5uZ09uQ2hhbmdlcyA9IGZ1bmN0aW9uIChjaGFuZ2VzKSB7XG4gICAgICAgICAgICBpZiAoY2hhbmdlc1snbWlubGVuZ3RoJ10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVWYWxpZGF0b3IoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25DaGFuZ2UpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIE1pbkxlbmd0aFZhbGlkYXRvci5wcm90b3R5cGUudmFsaWRhdGUgPSBmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgcmV0dXJuIGlzUHJlc2VudCh0aGlzLm1pbmxlbmd0aCkgPyB0aGlzLl92YWxpZGF0b3IoYykgOiBudWxsO1xuICAgICAgICB9O1xuICAgICAgICBNaW5MZW5ndGhWYWxpZGF0b3IucHJvdG90eXBlLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25DaGFuZ2UgPSBmbjsgfTtcbiAgICAgICAgTWluTGVuZ3RoVmFsaWRhdG9yLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuRGlyZWN0aXZlLCBhcmdzOiBbe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0b3I6ICdbbWlubGVuZ3RoXVtmb3JtQ29udHJvbE5hbWVdLFttaW5sZW5ndGhdW2Zvcm1Db250cm9sXSxbbWlubGVuZ3RoXVtuZ01vZGVsXScsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtNSU5fTEVOR1RIX1ZBTElEQVRPUl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBob3N0OiB7ICdbYXR0ci5taW5sZW5ndGhdJzogJ21pbmxlbmd0aD8gbWlubGVuZ3RoIDogbnVsbCcgfVxuICAgICAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIE1pbkxlbmd0aFZhbGlkYXRvci5jdG9yUGFyYW1ldGVycyA9IFtdO1xuICAgICAgICBNaW5MZW5ndGhWYWxpZGF0b3IucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICAgICAnbWlubGVuZ3RoJzogW3sgdHlwZTogX2FuZ3VsYXJfY29yZS5JbnB1dCB9LF0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBNaW5MZW5ndGhWYWxpZGF0b3I7XG4gICAgfSgpKTtcbiAgICAvKipcbiAgICAgKiBQcm92aWRlciB3aGljaCBhZGRzIHtAbGluayBNYXhMZW5ndGhWYWxpZGF0b3J9IHRvIHtAbGluayBOR19WQUxJREFUT1JTfS5cbiAgICAgKlxuICAgICAqICMjIEV4YW1wbGU6XG4gICAgICpcbiAgICAgKiB7QGV4YW1wbGUgY29tbW9uL2Zvcm1zL3RzL3ZhbGlkYXRvcnMvdmFsaWRhdG9ycy50cyByZWdpb249J21heCd9XG4gICAgICovXG4gICAgdmFyIE1BWF9MRU5HVEhfVkFMSURBVE9SID0ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIE1heExlbmd0aFZhbGlkYXRvcjsgfSksXG4gICAgICAgIG11bHRpOiB0cnVlXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBIGRpcmVjdGl2ZSB3aGljaCBpbnN0YWxscyB0aGUge0BsaW5rIE1heExlbmd0aFZhbGlkYXRvcn0gZm9yIGFueSBgZm9ybUNvbnRyb2xOYW1lLFxuICAgICAqIGBmb3JtQ29udHJvbGAsXG4gICAgICogb3IgY29udHJvbCB3aXRoIGBuZ01vZGVsYCB0aGF0IGFsc28gaGFzIGEgYG1heGxlbmd0aGAgYXR0cmlidXRlLlxuICAgICAqXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBNYXhMZW5ndGhWYWxpZGF0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgICAgICBmdW5jdGlvbiBNYXhMZW5ndGhWYWxpZGF0b3IoKSB7XG4gICAgICAgIH1cbiAgICAgICAgTWF4TGVuZ3RoVmFsaWRhdG9yLnByb3RvdHlwZS5fY3JlYXRlVmFsaWRhdG9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5fdmFsaWRhdG9yID0gVmFsaWRhdG9ycy5tYXhMZW5ndGgocGFyc2VJbnQodGhpcy5tYXhsZW5ndGgsIDEwKSk7XG4gICAgICAgIH07XG4gICAgICAgIE1heExlbmd0aFZhbGlkYXRvci5wcm90b3R5cGUubmdPbkNoYW5nZXMgPSBmdW5jdGlvbiAoY2hhbmdlcykge1xuICAgICAgICAgICAgaWYgKGNoYW5nZXNbJ21heGxlbmd0aCddKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlVmFsaWRhdG9yKCk7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uQ2hhbmdlKVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbkNoYW5nZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBNYXhMZW5ndGhWYWxpZGF0b3IucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5tYXhsZW5ndGgpID8gdGhpcy5fdmFsaWRhdG9yKGMpIDogbnVsbDtcbiAgICAgICAgfTtcbiAgICAgICAgTWF4TGVuZ3RoVmFsaWRhdG9yLnByb3RvdHlwZS5yZWdpc3Rlck9uVmFsaWRhdG9yQ2hhbmdlID0gZnVuY3Rpb24gKGZuKSB7IHRoaXMuX29uQ2hhbmdlID0gZm47IH07XG4gICAgICAgIE1heExlbmd0aFZhbGlkYXRvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW21heGxlbmd0aF1bZm9ybUNvbnRyb2xOYW1lXSxbbWF4bGVuZ3RoXVtmb3JtQ29udHJvbF0sW21heGxlbmd0aF1bbmdNb2RlbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbTUFYX0xFTkdUSF9WQUxJREFUT1JdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnW2F0dHIubWF4bGVuZ3RoXSc6ICdtYXhsZW5ndGg/IG1heGxlbmd0aCA6IG51bGwnIH1cbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBNYXhMZW5ndGhWYWxpZGF0b3IuY3RvclBhcmFtZXRlcnMgPSBbXTtcbiAgICAgICAgTWF4TGVuZ3RoVmFsaWRhdG9yLnByb3BEZWNvcmF0b3JzID0ge1xuICAgICAgICAgICAgJ21heGxlbmd0aCc6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQgfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gTWF4TGVuZ3RoVmFsaWRhdG9yO1xuICAgIH0oKSk7XG4gICAgdmFyIFBBVFRFUk5fVkFMSURBVE9SID0ge1xuICAgICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxuICAgICAgICB1c2VFeGlzdGluZzogX2FuZ3VsYXJfY29yZS5mb3J3YXJkUmVmKGZ1bmN0aW9uICgpIHsgcmV0dXJuIFBhdHRlcm5WYWxpZGF0b3I7IH0pLFxuICAgICAgICBtdWx0aTogdHJ1ZVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQSBEaXJlY3RpdmUgdGhhdCBhZGRzIHRoZSBgcGF0dGVybmAgdmFsaWRhdG9yIHRvIGFueSBjb250cm9scyBtYXJrZWQgd2l0aCB0aGVcbiAgICAgKiBgcGF0dGVybmAgYXR0cmlidXRlLCB2aWEgdGhlIHtAbGluayBOR19WQUxJREFUT1JTfSBiaW5kaW5nLiBVc2VzIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqIGFzIHRoZSByZWdleCB0byB2YWxpZGF0ZSBDb250cm9sIHZhbHVlIGFnYWluc3QuICBGb2xsb3dzIHBhdHRlcm4gYXR0cmlidXRlXG4gICAgICogc2VtYW50aWNzOyBpLmUuIHJlZ2V4IG11c3QgbWF0Y2ggZW50aXJlIENvbnRyb2wgdmFsdWUuXG4gICAgICpcbiAgICAgKiAjIyMgRXhhbXBsZVxuICAgICAqXG4gICAgICogYGBgXG4gICAgICogPGlucHV0IFtuYW1lXT1cImZ1bGxOYW1lXCIgcGF0dGVybj1cIlthLXpBLVogXSpcIiBuZ01vZGVsPlxuICAgICAqIGBgYFxuICAgICAqIEBzdGFibGVcbiAgICAgKi9cbiAgICB2YXIgUGF0dGVyblZhbGlkYXRvciA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIFBhdHRlcm5WYWxpZGF0b3IoKSB7XG4gICAgICAgIH1cbiAgICAgICAgUGF0dGVyblZhbGlkYXRvci5wcm90b3R5cGUuX2NyZWF0ZVZhbGlkYXRvciA9IGZ1bmN0aW9uICgpIHsgdGhpcy5fdmFsaWRhdG9yID0gVmFsaWRhdG9ycy5wYXR0ZXJuKHRoaXMucGF0dGVybik7IH07XG4gICAgICAgIFBhdHRlcm5WYWxpZGF0b3IucHJvdG90eXBlLm5nT25DaGFuZ2VzID0gZnVuY3Rpb24gKGNoYW5nZXMpIHtcbiAgICAgICAgICAgIGlmIChjaGFuZ2VzWydwYXR0ZXJuJ10pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVWYWxpZGF0b3IoKTtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fb25DaGFuZ2UpXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uQ2hhbmdlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFBhdHRlcm5WYWxpZGF0b3IucHJvdG90eXBlLnZhbGlkYXRlID0gZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICAgIHJldHVybiBpc1ByZXNlbnQodGhpcy5wYXR0ZXJuKSA/IHRoaXMuX3ZhbGlkYXRvcihjKSA6IG51bGw7XG4gICAgICAgIH07XG4gICAgICAgIFBhdHRlcm5WYWxpZGF0b3IucHJvdG90eXBlLnJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UgPSBmdW5jdGlvbiAoZm4pIHsgdGhpcy5fb25DaGFuZ2UgPSBmbjsgfTtcbiAgICAgICAgUGF0dGVyblZhbGlkYXRvci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkRpcmVjdGl2ZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW3BhdHRlcm5dW2Zvcm1Db250cm9sTmFtZV0sW3BhdHRlcm5dW2Zvcm1Db250cm9sXSxbcGF0dGVybl1bbmdNb2RlbF0nLFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXJzOiBbUEFUVEVSTl9WQUxJREFUT1JdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaG9zdDogeyAnW2F0dHIucGF0dGVybl0nOiAncGF0dGVybj8gcGF0dGVybiA6IG51bGwnIH1cbiAgICAgICAgICAgICAgICAgICAgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBQYXR0ZXJuVmFsaWRhdG9yLmN0b3JQYXJhbWV0ZXJzID0gW107XG4gICAgICAgIFBhdHRlcm5WYWxpZGF0b3IucHJvcERlY29yYXRvcnMgPSB7XG4gICAgICAgICAgICAncGF0dGVybic6IFt7IHR5cGU6IF9hbmd1bGFyX2NvcmUuSW5wdXQgfSxdLFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gUGF0dGVyblZhbGlkYXRvcjtcbiAgICB9KCkpO1xuXG4gICAgLyoqXG4gICAgICogQHdoYXRJdERvZXMgQ3JlYXRlcyBhbiB7QGxpbmsgQWJzdHJhY3RDb250cm9sfSBmcm9tIGEgdXNlci1zcGVjaWZpZWQgY29uZmlndXJhdGlvbi5cbiAgICAgKlxuICAgICAqIEl0IGlzIGVzc2VudGlhbGx5IHN5bnRhY3RpYyBzdWdhciB0aGF0IHNob3J0ZW5zIHRoZSBgbmV3IEZvcm1Hcm91cCgpYCxcbiAgICAgKiBgbmV3IEZvcm1Db250cm9sKClgLCBhbmQgYG5ldyBGb3JtQXJyYXkoKWAgYm9pbGVycGxhdGUgdGhhdCBjYW4gYnVpbGQgdXAgaW4gbGFyZ2VyXG4gICAgICogZm9ybXMuXG4gICAgICpcbiAgICAgKiBAaG93VG9Vc2VcbiAgICAgKlxuICAgICAqIFRvIHVzZSwgaW5qZWN0IGBGb3JtQnVpbGRlcmAgaW50byB5b3VyIGNvbXBvbmVudCBjbGFzcy4gWW91IGNhbiB0aGVuIGNhbGwgaXRzIG1ldGhvZHNcbiAgICAgKiBkaXJlY3RseS5cbiAgICAgKlxuICAgICAqIHtAZXhhbXBsZSBmb3Jtcy90cy9mb3JtQnVpbGRlci9mb3JtX2J1aWxkZXJfZXhhbXBsZS50cyByZWdpb249J0NvbXBvbmVudCd9XG4gICAgICpcbiAgICAgKiAgKiAqKm5wbSBwYWNrYWdlKio6IGBAYW5ndWxhci9mb3Jtc2BcbiAgICAgKlxuICAgICAqICAqICoqTmdNb2R1bGUqKjoge0BsaW5rIFJlYWN0aXZlRm9ybXNNb2R1bGV9XG4gICAgICpcbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEZvcm1CdWlsZGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRm9ybUJ1aWxkZXIoKSB7XG4gICAgICAgIH1cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdCBhIG5ldyB7QGxpbmsgRm9ybUdyb3VwfSB3aXRoIHRoZSBnaXZlbiBtYXAgb2YgY29uZmlndXJhdGlvbi5cbiAgICAgICAgICogVmFsaWQga2V5cyBmb3IgdGhlIGBleHRyYWAgcGFyYW1ldGVyIG1hcCBhcmUgYHZhbGlkYXRvcmAgYW5kIGBhc3luY1ZhbGlkYXRvcmAuXG4gICAgICAgICAqXG4gICAgICAgICAqIFNlZSB0aGUge0BsaW5rIEZvcm1Hcm91cH0gY29uc3RydWN0b3IgZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgICAgICovXG4gICAgICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5ncm91cCA9IGZ1bmN0aW9uIChjb250cm9sc0NvbmZpZywgZXh0cmEpIHtcbiAgICAgICAgICAgIGlmIChleHRyYSA9PT0gdm9pZCAwKSB7IGV4dHJhID0gbnVsbDsgfVxuICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gdGhpcy5fcmVkdWNlQ29udHJvbHMoY29udHJvbHNDb25maWcpO1xuICAgICAgICAgICAgdmFyIHZhbGlkYXRvciA9IGlzUHJlc2VudChleHRyYSkgPyBTdHJpbmdNYXBXcmFwcGVyLmdldChleHRyYSwgJ3ZhbGlkYXRvcicpIDogbnVsbDtcbiAgICAgICAgICAgIHZhciBhc3luY1ZhbGlkYXRvciA9IGlzUHJlc2VudChleHRyYSkgPyBTdHJpbmdNYXBXcmFwcGVyLmdldChleHRyYSwgJ2FzeW5jVmFsaWRhdG9yJykgOiBudWxsO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGb3JtR3JvdXAoY29udHJvbHMsIHZhbGlkYXRvciwgYXN5bmNWYWxpZGF0b3IpO1xuICAgICAgICB9O1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0IGEgbmV3IHtAbGluayBGb3JtQ29udHJvbH0gd2l0aCB0aGUgZ2l2ZW4gYGZvcm1TdGF0ZWAsYHZhbGlkYXRvcmAsIGFuZFxuICAgICAgICAgKiBgYXN5bmNWYWxpZGF0b3JgLlxuICAgICAgICAgKlxuICAgICAgICAgKiBgZm9ybVN0YXRlYCBjYW4gZWl0aGVyIGJlIGEgc3RhbmRhbG9uZSB2YWx1ZSBmb3IgdGhlIGZvcm0gY29udHJvbCBvciBhbiBvYmplY3RcbiAgICAgICAgICogdGhhdCBjb250YWlucyBib3RoIGEgdmFsdWUgYW5kIGEgZGlzYWJsZWQgc3RhdHVzLlxuICAgICAgICAgKlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmNvbnRyb2wgPSBmdW5jdGlvbiAoZm9ybVN0YXRlLCB2YWxpZGF0b3IsIGFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICBpZiAodmFsaWRhdG9yID09PSB2b2lkIDApIHsgdmFsaWRhdG9yID0gbnVsbDsgfVxuICAgICAgICAgICAgaWYgKGFzeW5jVmFsaWRhdG9yID09PSB2b2lkIDApIHsgYXN5bmNWYWxpZGF0b3IgPSBudWxsOyB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZvcm1Db250cm9sKGZvcm1TdGF0ZSwgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3QgYSB7QGxpbmsgRm9ybUFycmF5fSBmcm9tIHRoZSBnaXZlbiBgY29udHJvbHNDb25maWdgIGFycmF5IG9mXG4gICAgICAgICAqIGNvbmZpZ3VyYXRpb24sIHdpdGggdGhlIGdpdmVuIG9wdGlvbmFsIGB2YWxpZGF0b3JgIGFuZCBgYXN5bmNWYWxpZGF0b3JgLlxuICAgICAgICAgKi9cbiAgICAgICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLmFycmF5ID0gZnVuY3Rpb24gKGNvbnRyb2xzQ29uZmlnLCB2YWxpZGF0b3IsIGFzeW5jVmFsaWRhdG9yKSB7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgaWYgKHZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IHZhbGlkYXRvciA9IG51bGw7IH1cbiAgICAgICAgICAgIGlmIChhc3luY1ZhbGlkYXRvciA9PT0gdm9pZCAwKSB7IGFzeW5jVmFsaWRhdG9yID0gbnVsbDsgfVxuICAgICAgICAgICAgdmFyIGNvbnRyb2xzID0gY29udHJvbHNDb25maWcubWFwKGZ1bmN0aW9uIChjKSB7IHJldHVybiBfdGhpcy5fY3JlYXRlQ29udHJvbChjKTsgfSk7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEZvcm1BcnJheShjb250cm9scywgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XG4gICAgICAgIH07XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgRm9ybUJ1aWxkZXIucHJvdG90eXBlLl9yZWR1Y2VDb250cm9scyA9IGZ1bmN0aW9uIChjb250cm9sc0NvbmZpZykge1xuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgICAgIHZhciBjb250cm9scyA9IHt9O1xuICAgICAgICAgICAgU3RyaW5nTWFwV3JhcHBlci5mb3JFYWNoKGNvbnRyb2xzQ29uZmlnLCBmdW5jdGlvbiAoY29udHJvbENvbmZpZywgY29udHJvbE5hbWUpIHtcbiAgICAgICAgICAgICAgICBjb250cm9sc1tjb250cm9sTmFtZV0gPSBfdGhpcy5fY3JlYXRlQ29udHJvbChjb250cm9sQ29uZmlnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xzO1xuICAgICAgICB9O1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIEZvcm1CdWlsZGVyLnByb3RvdHlwZS5fY3JlYXRlQ29udHJvbCA9IGZ1bmN0aW9uIChjb250cm9sQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoY29udHJvbENvbmZpZyBpbnN0YW5jZW9mIEZvcm1Db250cm9sIHx8IGNvbnRyb2xDb25maWcgaW5zdGFuY2VvZiBGb3JtR3JvdXAgfHxcbiAgICAgICAgICAgICAgICBjb250cm9sQ29uZmlnIGluc3RhbmNlb2YgRm9ybUFycmF5KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRyb2xDb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChpc0FycmF5KGNvbnRyb2xDb25maWcpKSB7XG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlID0gY29udHJvbENvbmZpZ1swXTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdG9yID0gY29udHJvbENvbmZpZy5sZW5ndGggPiAxID8gY29udHJvbENvbmZpZ1sxXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgdmFyIGFzeW5jVmFsaWRhdG9yID0gY29udHJvbENvbmZpZy5sZW5ndGggPiAyID8gY29udHJvbENvbmZpZ1syXSA6IG51bGw7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udHJvbCh2YWx1ZSwgdmFsaWRhdG9yLCBhc3luY1ZhbGlkYXRvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250cm9sKGNvbnRyb2xDb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBGb3JtQnVpbGRlci5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLkluamVjdGFibGUgfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIEZvcm1CdWlsZGVyLmN0b3JQYXJhbWV0ZXJzID0gW107XG4gICAgICAgIHJldHVybiBGb3JtQnVpbGRlcjtcbiAgICB9KCkpO1xuXG4gICAgdmFyIFNIQVJFRF9GT1JNX0RJUkVDVElWRVMgPSBbXG4gICAgICAgIE5nU2VsZWN0T3B0aW9uLCBOZ1NlbGVjdE11bHRpcGxlT3B0aW9uLCBEZWZhdWx0VmFsdWVBY2Nlc3NvciwgTnVtYmVyVmFsdWVBY2Nlc3NvcixcbiAgICAgICAgQ2hlY2tib3hDb250cm9sVmFsdWVBY2Nlc3NvciwgU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3IsIFNlbGVjdE11bHRpcGxlQ29udHJvbFZhbHVlQWNjZXNzb3IsXG4gICAgICAgIFJhZGlvQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbFN0YXR1cywgTmdDb250cm9sU3RhdHVzR3JvdXAsIFJlcXVpcmVkVmFsaWRhdG9yLFxuICAgICAgICBNaW5MZW5ndGhWYWxpZGF0b3IsIE1heExlbmd0aFZhbGlkYXRvciwgUGF0dGVyblZhbGlkYXRvclxuICAgIF07XG4gICAgdmFyIFRFTVBMQVRFX0RSSVZFTl9ESVJFQ1RJVkVTID0gW05nTW9kZWwsIE5nTW9kZWxHcm91cCwgTmdGb3JtXTtcbiAgICB2YXIgUkVBQ1RJVkVfRFJJVkVOX0RJUkVDVElWRVMgPSBbRm9ybUNvbnRyb2xEaXJlY3RpdmUsIEZvcm1Hcm91cERpcmVjdGl2ZSwgRm9ybUNvbnRyb2xOYW1lLCBGb3JtR3JvdXBOYW1lLCBGb3JtQXJyYXlOYW1lXTtcbiAgICAvKipcbiAgICAgKiBJbnRlcm5hbCBtb2R1bGUgdXNlZCBmb3Igc2hhcmluZyBkaXJlY3RpdmVzIGJldHdlZW4gRm9ybXNNb2R1bGUgYW5kIFJlYWN0aXZlRm9ybXNNb2R1bGVcbiAgICAgKi9cbiAgICB2YXIgSW50ZXJuYWxGb3Jtc1NoYXJlZE1vZHVsZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIEludGVybmFsRm9ybXNTaGFyZWRNb2R1bGUoKSB7XG4gICAgICAgIH1cbiAgICAgICAgSW50ZXJuYWxGb3Jtc1NoYXJlZE1vZHVsZS5kZWNvcmF0b3JzID0gW1xuICAgICAgICAgICAgeyB0eXBlOiBfYW5ndWxhcl9jb3JlLk5nTW9kdWxlLCBhcmdzOiBbeyBkZWNsYXJhdGlvbnM6IFNIQVJFRF9GT1JNX0RJUkVDVElWRVMsIGV4cG9ydHM6IFNIQVJFRF9GT1JNX0RJUkVDVElWRVMgfSxdIH0sXG4gICAgICAgIF07XG4gICAgICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgICAgICBJbnRlcm5hbEZvcm1zU2hhcmVkTW9kdWxlLmN0b3JQYXJhbWV0ZXJzID0gW107XG4gICAgICAgIHJldHVybiBJbnRlcm5hbEZvcm1zU2hhcmVkTW9kdWxlO1xuICAgIH0oKSk7XG5cbiAgICAvKipcbiAgICAgKiBUaGUgbmcgbW9kdWxlIGZvciBmb3Jtcy5cbiAgICAgKiBAc3RhYmxlXG4gICAgICovXG4gICAgdmFyIEZvcm1zTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gRm9ybXNNb2R1bGUoKSB7XG4gICAgICAgIH1cbiAgICAgICAgRm9ybXNNb2R1bGUuZGVjb3JhdG9ycyA9IFtcbiAgICAgICAgICAgIHsgdHlwZTogX2FuZ3VsYXJfY29yZS5OZ01vZHVsZSwgYXJnczogW3tcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogVEVNUExBVEVfRFJJVkVOX0RJUkVDVElWRVMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtSYWRpb0NvbnRyb2xSZWdpc3RyeV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBleHBvcnRzOiBbSW50ZXJuYWxGb3Jtc1NoYXJlZE1vZHVsZSwgVEVNUExBVEVfRFJJVkVOX0RJUkVDVElWRVNdXG4gICAgICAgICAgICAgICAgICAgIH0sXSB9LFxuICAgICAgICBdO1xuICAgICAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICAgICAgRm9ybXNNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBbXTtcbiAgICAgICAgcmV0dXJuIEZvcm1zTW9kdWxlO1xuICAgIH0oKSk7XG4gICAgLyoqXG4gICAgICogVGhlIG5nIG1vZHVsZSBmb3IgcmVhY3RpdmUgZm9ybXMuXG4gICAgICogQHN0YWJsZVxuICAgICAqL1xuICAgIHZhciBSZWFjdGl2ZUZvcm1zTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgZnVuY3Rpb24gUmVhY3RpdmVGb3Jtc01vZHVsZSgpIHtcbiAgICAgICAgfVxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLmRlY29yYXRvcnMgPSBbXG4gICAgICAgICAgICB7IHR5cGU6IF9hbmd1bGFyX2NvcmUuTmdNb2R1bGUsIGFyZ3M6IFt7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNsYXJhdGlvbnM6IFtSRUFDVElWRV9EUklWRU5fRElSRUNUSVZFU10sXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlcnM6IFtGb3JtQnVpbGRlciwgUmFkaW9Db250cm9sUmVnaXN0cnldLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3J0czogW0ludGVybmFsRm9ybXNTaGFyZWRNb2R1bGUsIFJFQUNUSVZFX0RSSVZFTl9ESVJFQ1RJVkVTXVxuICAgICAgICAgICAgICAgICAgICB9LF0gfSxcbiAgICAgICAgXTtcbiAgICAgICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUuY3RvclBhcmFtZXRlcnMgPSBbXTtcbiAgICAgICAgcmV0dXJuIFJlYWN0aXZlRm9ybXNNb2R1bGU7XG4gICAgfSgpKTtcblxuICAgIGV4cG9ydHMuQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlID0gQWJzdHJhY3RDb250cm9sRGlyZWN0aXZlO1xuICAgIGV4cG9ydHMuQWJzdHJhY3RGb3JtR3JvdXBEaXJlY3RpdmUgPSBBYnN0cmFjdEZvcm1Hcm91cERpcmVjdGl2ZTtcbiAgICBleHBvcnRzLkNoZWNrYm94Q29udHJvbFZhbHVlQWNjZXNzb3IgPSBDaGVja2JveENvbnRyb2xWYWx1ZUFjY2Vzc29yO1xuICAgIGV4cG9ydHMuQ29udHJvbENvbnRhaW5lciA9IENvbnRyb2xDb250YWluZXI7XG4gICAgZXhwb3J0cy5OR19WQUxVRV9BQ0NFU1NPUiA9IE5HX1ZBTFVFX0FDQ0VTU09SO1xuICAgIGV4cG9ydHMuRGVmYXVsdFZhbHVlQWNjZXNzb3IgPSBEZWZhdWx0VmFsdWVBY2Nlc3NvcjtcbiAgICBleHBvcnRzLk5nQ29udHJvbCA9IE5nQ29udHJvbDtcbiAgICBleHBvcnRzLk5nQ29udHJvbFN0YXR1cyA9IE5nQ29udHJvbFN0YXR1cztcbiAgICBleHBvcnRzLk5nQ29udHJvbFN0YXR1c0dyb3VwID0gTmdDb250cm9sU3RhdHVzR3JvdXA7XG4gICAgZXhwb3J0cy5OZ0Zvcm0gPSBOZ0Zvcm07XG4gICAgZXhwb3J0cy5OZ01vZGVsID0gTmdNb2RlbDtcbiAgICBleHBvcnRzLk5nTW9kZWxHcm91cCA9IE5nTW9kZWxHcm91cDtcbiAgICBleHBvcnRzLkZvcm1Db250cm9sRGlyZWN0aXZlID0gRm9ybUNvbnRyb2xEaXJlY3RpdmU7XG4gICAgZXhwb3J0cy5Gb3JtQ29udHJvbE5hbWUgPSBGb3JtQ29udHJvbE5hbWU7XG4gICAgZXhwb3J0cy5Gb3JtR3JvdXBEaXJlY3RpdmUgPSBGb3JtR3JvdXBEaXJlY3RpdmU7XG4gICAgZXhwb3J0cy5Gb3JtQXJyYXlOYW1lID0gRm9ybUFycmF5TmFtZTtcbiAgICBleHBvcnRzLkZvcm1Hcm91cE5hbWUgPSBGb3JtR3JvdXBOYW1lO1xuICAgIGV4cG9ydHMuTmdTZWxlY3RPcHRpb24gPSBOZ1NlbGVjdE9wdGlvbjtcbiAgICBleHBvcnRzLlNlbGVjdENvbnRyb2xWYWx1ZUFjY2Vzc29yID0gU2VsZWN0Q29udHJvbFZhbHVlQWNjZXNzb3I7XG4gICAgZXhwb3J0cy5TZWxlY3RNdWx0aXBsZUNvbnRyb2xWYWx1ZUFjY2Vzc29yID0gU2VsZWN0TXVsdGlwbGVDb250cm9sVmFsdWVBY2Nlc3NvcjtcbiAgICBleHBvcnRzLk1heExlbmd0aFZhbGlkYXRvciA9IE1heExlbmd0aFZhbGlkYXRvcjtcbiAgICBleHBvcnRzLk1pbkxlbmd0aFZhbGlkYXRvciA9IE1pbkxlbmd0aFZhbGlkYXRvcjtcbiAgICBleHBvcnRzLlBhdHRlcm5WYWxpZGF0b3IgPSBQYXR0ZXJuVmFsaWRhdG9yO1xuICAgIGV4cG9ydHMuUmVxdWlyZWRWYWxpZGF0b3IgPSBSZXF1aXJlZFZhbGlkYXRvcjtcbiAgICBleHBvcnRzLkZvcm1CdWlsZGVyID0gRm9ybUJ1aWxkZXI7XG4gICAgZXhwb3J0cy5BYnN0cmFjdENvbnRyb2wgPSBBYnN0cmFjdENvbnRyb2w7XG4gICAgZXhwb3J0cy5Gb3JtQXJyYXkgPSBGb3JtQXJyYXk7XG4gICAgZXhwb3J0cy5Gb3JtQ29udHJvbCA9IEZvcm1Db250cm9sO1xuICAgIGV4cG9ydHMuRm9ybUdyb3VwID0gRm9ybUdyb3VwO1xuICAgIGV4cG9ydHMuTkdfQVNZTkNfVkFMSURBVE9SUyA9IE5HX0FTWU5DX1ZBTElEQVRPUlM7XG4gICAgZXhwb3J0cy5OR19WQUxJREFUT1JTID0gTkdfVkFMSURBVE9SUztcbiAgICBleHBvcnRzLlZhbGlkYXRvcnMgPSBWYWxpZGF0b3JzO1xuICAgIGV4cG9ydHMuRm9ybXNNb2R1bGUgPSBGb3Jtc01vZHVsZTtcbiAgICBleHBvcnRzLlJlYWN0aXZlRm9ybXNNb2R1bGUgPSBSZWFjdGl2ZUZvcm1zTW9kdWxlO1xuXG59KSk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vQGFuZ3VsYXIvZm9ybXMvYnVuZGxlcy9mb3Jtcy51bWQuanNcbi8vIG1vZHVsZSBpZCA9IDM2MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 363 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\n__export(__webpack_require__(364));\n__export(__webpack_require__(365));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9jb3JlL3dyaXRlcnMvaW5kZXgudHM/NDNlZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsNkJBQWMsR0FDZCxDQUFDLEVBRDZCO0FBQzlCLDZCQUFjLEdBQ2QsQ0FBQyxFQUQ2QiIsImZpbGUiOiIzNjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICcuL2dyb3VwLndyaXRlcidcbmV4cG9ydCAqIGZyb20gJy4vbG9naW4ud3JpdGVyJ1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi93ZWIvc3JjL2FwcC9jb3JlL3dyaXRlcnMvaW5kZXgudHMiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 364 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar device_state_service_1 = __webpack_require__(25);\nvar GroupWriter = (function () {\n    function GroupWriter(_dss) {\n        this._dss = _dss;\n        console.log(\"Created Group Writer\");\n    }\n    // Attempt login takes care of trying logging in, and updating the device state\n    GroupWriter.prototype.sendMessage = function (messageText) {\n        // TODO: Send to server with credentials, get feedback from server if changes\n        var currentState = this._dss.getState();\n        var message = {\n            Date: new Date(),\n            Text: messageText,\n            User: currentState.LoggedIn.User\n        };\n        currentState.LoggedIn.Group.Messages.push(message);\n        console.log(\"sending\", messageText);\n        this._dss.updateState(currentState);\n    };\n    /*\n  setVotesOpen(votesOpen: \"spot\" | \"time\" | null) {\n    let currentState = this._dss.getState()\n\n    currentState.LoggedIn.Group.VotesOpen = votesOpen\n\n    this._dss.updateState(currentState)\n  }\n  */\n    GroupWriter.prototype.castSkipVote = function (hasVote) {\n        var currentState = this._dss.getState();\n        var skipVote = currentState.LoggedIn.Group.SkipVote;\n        if (skipVote.HasVote) {\n            skipVote.VoteCount -= 1;\n        }\n        if (hasVote) {\n            skipVote.VoteCount += 1;\n        }\n        skipVote.HasVote = hasVote;\n        currentState.LoggedIn.Group.SkipVote = skipVote;\n        this._dss.updateState(currentState);\n    };\n    GroupWriter = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [(typeof (_a = typeof device_state_service_1.DeviceStateService !== 'undefined' && device_state_service_1.DeviceStateService) === 'function' && _a) || Object])\n    ], GroupWriter);\n    return GroupWriter;\n    var _a;\n}());\nexports.GroupWriter = GroupWriter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9jb3JlL3dyaXRlcnMvZ3JvdXAud3JpdGVyLnRzP2RiM2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLGlDQUEyQixDQUFlLENBQUM7QUFHM0MsaURBQW1DLEVBRW5DLENBQUMsQ0FGMkQ7QUFHNUQ7SUFFRSxxQkFBb0IsSUFBd0I7UUFBeEIsU0FBSSxHQUFKLElBQUksQ0FBb0I7UUFDMUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsQ0FBQztJQUNyQyxDQUFDO0lBRUQsK0VBQStFO0lBQy9FLGlDQUFXLEdBQVgsVUFBWSxXQUFtQjtRQUM3Qiw2RUFBNkU7UUFDN0UsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFFdkMsSUFBTSxPQUFPLEdBQW1CO1lBQzlCLElBQUksRUFBRSxJQUFJLElBQUksRUFBRTtZQUNoQixJQUFJLEVBQUUsV0FBVztZQUNqQixJQUFJLEVBQUUsWUFBWSxDQUFDLFFBQVEsQ0FBQyxJQUFJO1NBQ2pDO1FBRUQsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFFbEQsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsV0FBVyxDQUFDO1FBRW5DLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBQ0Y7Ozs7Ozs7O0lBUUc7SUFDRixrQ0FBWSxHQUFaLFVBQWEsT0FBZ0I7UUFDM0IsSUFBSSxZQUFZLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUU7UUFFdkMsSUFBSSxRQUFRLEdBQUcsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUTtRQUVyRCxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUNuQixRQUFRLENBQUMsU0FBUyxJQUFJLENBQUM7UUFDekIsQ0FBQztRQUNILEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7WUFDVixRQUFRLENBQUMsU0FBUyxJQUFJLENBQUM7UUFDekIsQ0FBQztRQUVELFFBQVEsQ0FBQyxPQUFPLEdBQUcsT0FBTztRQUUxQixZQUFZLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFRLEdBQUcsUUFBUTtRQUMvQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUM7SUFDckMsQ0FBQztJQWpESDtRQUFDLGlCQUFVLEVBQUU7O21CQUFBO0lBa0ZiLGtCQUFDOztBQUFELENBQUM7QUFqRlksbUJBQVcsY0FpRnZCIiwiZmlsZSI6IjM2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0ICogYXMgUiBmcm9tICcuLi8uLi9zaGFyZWQvcmVhZCc7XG5pbXBvcnQgeyBEZXZpY2VTdGF0ZVNlcnZpY2UgfSBmcm9tICcuLi9kZXZpY2Utc3RhdGUuc2VydmljZSdcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEdyb3VwV3JpdGVyIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIF9kc3M6IERldmljZVN0YXRlU2VydmljZSkge1xuICAgIGNvbnNvbGUubG9nKFwiQ3JlYXRlZCBHcm91cCBXcml0ZXJcIilcbiAgfVxuXG4gIC8vIEF0dGVtcHQgbG9naW4gdGFrZXMgY2FyZSBvZiB0cnlpbmcgbG9nZ2luZyBpbiwgYW5kIHVwZGF0aW5nIHRoZSBkZXZpY2Ugc3RhdGVcbiAgc2VuZE1lc3NhZ2UobWVzc2FnZVRleHQ6IHN0cmluZykge1xuICAgIC8vIFRPRE86IFNlbmQgdG8gc2VydmVyIHdpdGggY3JlZGVudGlhbHMsIGdldCBmZWVkYmFjayBmcm9tIHNlcnZlciBpZiBjaGFuZ2VzXG4gICAgbGV0IGN1cnJlbnRTdGF0ZSA9IHRoaXMuX2Rzcy5nZXRTdGF0ZSgpXG5cbiAgICBjb25zdCBtZXNzYWdlOiBSLkdyb3VwTWVzc2FnZSA9IHtcbiAgICAgIERhdGU6IG5ldyBEYXRlKCksXG4gICAgICBUZXh0OiBtZXNzYWdlVGV4dCxcbiAgICAgIFVzZXI6IGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Vc2VyXG4gICAgfVxuXG4gICAgY3VycmVudFN0YXRlLkxvZ2dlZEluLkdyb3VwLk1lc3NhZ2VzLnB1c2gobWVzc2FnZSlcblxuICAgIGNvbnNvbGUubG9nKFwic2VuZGluZ1wiLCBtZXNzYWdlVGV4dClcblxuICAgIHRoaXMuX2Rzcy51cGRhdGVTdGF0ZShjdXJyZW50U3RhdGUpXG4gIH1cblx0LypcbiAgc2V0Vm90ZXNPcGVuKHZvdGVzT3BlbjogXCJzcG90XCIgfCBcInRpbWVcIiB8IG51bGwpIHtcbiAgICBsZXQgY3VycmVudFN0YXRlID0gdGhpcy5fZHNzLmdldFN0YXRlKClcblxuICAgIGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5Wb3Rlc09wZW4gPSB2b3Rlc09wZW5cblxuICAgIHRoaXMuX2Rzcy51cGRhdGVTdGF0ZShjdXJyZW50U3RhdGUpXG4gIH1cbiAgKi9cbiAgY2FzdFNraXBWb3RlKGhhc1ZvdGU6IGJvb2xlYW4pIHtcbiAgICBsZXQgY3VycmVudFN0YXRlID0gdGhpcy5fZHNzLmdldFN0YXRlKClcblxuICAgIGxldCBza2lwVm90ZSA9IGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5Ta2lwVm90ZVxuXG5cdFx0aWYgKHNraXBWb3RlLkhhc1ZvdGUpIHtcbiAgICAgIHNraXBWb3RlLlZvdGVDb3VudCAtPSAxXG4gICAgfVxuXHRcdGlmIChoYXNWb3RlKSB7XG4gICAgICBza2lwVm90ZS5Wb3RlQ291bnQgKz0gMVxuICAgIH1cblxuICAgIHNraXBWb3RlLkhhc1ZvdGUgPSBoYXNWb3RlXG5cbiAgICBjdXJyZW50U3RhdGUuTG9nZ2VkSW4uR3JvdXAuU2tpcFZvdGUgPSBza2lwVm90ZVxuICAgIHRoaXMuX2Rzcy51cGRhdGVTdGF0ZShjdXJyZW50U3RhdGUpXG4gIH1cblx0LypcbiAgY2FzdFNwb3RWb3RlKHNwb3Q6IFIuVm90ZSwgaGFzVm90ZTogYm9vbGVhbikge1xuICAgIGxldCBjdXJyZW50U3RhdGUgPSB0aGlzLl9kc3MuZ2V0U3RhdGUoKVxuXG4gICAgbGV0IHNwb3RWb3RlcyA9IGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5TcG90Vm90ZXNcblxuICAgIGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5TcG90Vm90ZXMgPSB0aGlzLmNhc3RWb3RlKHNwb3RWb3Rlcywgc3BvdCwgaGFzVm90ZSlcbiAgICB0aGlzLl9kc3MudXBkYXRlU3RhdGUoY3VycmVudFN0YXRlKVxuICB9XG5cbiAgY2FzdFRpbWVWb3RlKHRpbWU6IFIuVm90ZSwgaGFzVm90ZTogYm9vbGVhbikge1xuICAgIGxldCBjdXJyZW50U3RhdGUgPSB0aGlzLl9kc3MuZ2V0U3RhdGUoKVxuXG4gICAgbGV0IHRpbWVWb3RlcyA9IGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5UaW1lVm90ZXNcblxuICAgIGN1cnJlbnRTdGF0ZS5Mb2dnZWRJbi5Hcm91cC5UaW1lVm90ZXMgPSB0aGlzLmNhc3RWb3RlKHRpbWVWb3RlcywgdGltZSwgaGFzVm90ZSlcbiAgICB0aGlzLl9kc3MudXBkYXRlU3RhdGUoY3VycmVudFN0YXRlKVxuICB9XG5cbiAgcHJpdmF0ZSBjYXN0Vm90ZSh2b3RlczogUi5Wb3RlW10sIGNhc3Q6IFIuVm90ZSwgaGFzVm90ZTogYm9vbGVhbik6IFIuVm90ZVtdIHtcbiAgICByZXR1cm4gdm90ZXMubWFwKHYgPT4ge1xuICAgICAgY29uc3QgaGFkVm90ZSA9IHYuSGFzVm90ZVxuICAgICAgaWYgKHYuSWQgPT09IGNhc3QuSWQpIHtcbiAgICAgICAgdi5IYXNWb3RlID0gaGFzVm90ZVxuICAgICAgICAvLyBIb3cgdG8gY2hhbmdlIHRoZSBudW1iZXIgb2Ygdm90ZXNcbiAgICAgICAgY29uc3QgY2hhbmdlID0gaGFkVm90ZSA9PT0gaGFzVm90ZSA/IDAgOiBoYXNWb3RlID8gMSA6IC0xO1xuICAgICAgICB2LlZvdGVDb3VudCArPSBjaGFuZ2VcbiAgICAgIH1cbiAgICAgIHJldHVybiB2XG4gICAgfSlcbiAgfVxuICAqL1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9hbmd1bGFyMi10ZW1wbGF0ZS1sb2FkZXIhLi93ZWIvc3JjL2FwcC9jb3JlL3dyaXRlcnMvZ3JvdXAud3JpdGVyLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 365 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar ionic_native_1 = __webpack_require__(366);\nvar device_state_service_1 = __webpack_require__(25);\nvar LoginWriter = (function () {\n    function LoginWriter(_dss) {\n        this._dss = _dss;\n        // We can add more permissions here as necessary later on\n        this._permissions = ['public_profile'];\n    }\n    /**Checks for the current login status on the device.\n     * If the user is already logged in, then it will pass them on to the next screen.\n     * Otherwise, it will perform a login attempt to receive permissions.\n     * Calls <<_login>>.\n     * This will update the state if an error occurs while requesting the login status.\n     */\n    LoginWriter.prototype.attemptLogin = function () {\n        var _this = this;\n        // Check the login status of the user\n        ionic_native_1.Facebook.getLoginStatus()\n            .then(function (responseSuccess) {\n            // console.log('getLoginStatus response:') // DEBUG\n            // console.log(responseSuccess) // DEBUG\n            switch (responseSuccess.status) {\n                case LoginWriter.CONNECTED:\n                    // user is already logged in; update the state to ensure this is registered\n                    _this._dss.updateState({ LoggedIn: true });\n                    break;\n                case LoginWriter.NOT_AUTH:\n                    // user is logged in to Facebook, but hasn't authorized the app\n                    _this._login();\n                    break;\n                default:\n                    // user is either not logged in, or logged out; need to login\n                    _this._login();\n            }\n        })\n            .catch(function (responseFailure) {\n            // console.log('response:') // DEBUG\n            // console.log(responseFailure) // DEBUG\n            // update the state to display the error\n            _this._dss.updateState({\n                NotLoggedIn: {\n                    HasLoggedOutShown: false,\n                    LoginError: responseFailure.toString()\n                }\n            });\n        });\n    };\n    /**Makes the login call to Facebook.\n     * This requests a Facebook dialog to pop up within the app for logging in.\n     * This will update the state if an error occurs while logging in.\n     */\n    LoginWriter.prototype._login = function () {\n        var _this = this;\n        ionic_native_1.Facebook.login(this._permissions)\n            .then(function (responseSuccess) {\n            // console.log('Login response:') // DEBUG\n            // console.log(responseSuccess) // DEBUG\n            // translate the server's response to the internal storage\n            var auth = responseSuccess.authResponse;\n            var credentials = {\n                AccessToken: auth.accessToken,\n                ExpiresIn: auth.expiresIn,\n                Signature: auth.sig,\n                SessionKey: auth.session_key,\n                UserID: auth.userID\n            };\n            // Update the FacebookAuth device state with the returned credentials\n            _this._dss.updateState({ HasLoggedIn: true, LoggedIn: { Credentials: credentials } });\n        })\n            .catch(function (responseFailure) {\n            // console.log('Error:') // DEBUG\n            // console.log(responseFailure) // DEBUG\n            _this._dss.updateState({\n                NotLoggedIn: {\n                    HasLoggedOutShown: false,\n                    LoginError: 'Could not log in to Facebook- please try again.'\n                }\n            });\n        });\n    };\n    /**Logs the user out of the app.\n     * Updates the state on a successful logout.\n     * This will update the state if an error occurs while logging out.\n     */\n    LoginWriter.prototype.logout = function () {\n        var _this = this;\n        ionic_native_1.Facebook.logout()\n            .then(function () {\n            _this._dss.updateState({\n                HasLoggedIn: false,\n                NotLoggedIn: {\n                    HasLoggedOutShown: true\n                }\n            });\n        })\n            .catch(function (responseError) {\n            // Do something to report the failure to the user\n            // For now, report to the console\n            console.error('An error occured while logging out.', responseError);\n        });\n    };\n    LoginWriter.CONNECTED = 'connected';\n    LoginWriter.NOT_AUTH = 'not_authorized';\n    LoginWriter.UNKNOWN = 'unknown'; // currently unused, but keeping here just in case\n    LoginWriter = __decorate([\n        core_1.Injectable(), \n        __metadata('design:paramtypes', [(typeof (_a = typeof device_state_service_1.DeviceStateService !== 'undefined' && device_state_service_1.DeviceStateService) === 'function' && _a) || Object])\n    ], LoginWriter);\n    return LoginWriter;\n    var _a;\n}());\nexports.LoginWriter = LoginWriter;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 366 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nvar ng1_1 = __webpack_require__(367);\nvar DEVICE_READY_TIMEOUT = 2000;\nvar actionsheet_1 = __webpack_require__(368);\nvar admob_1 = __webpack_require__(371);\nvar android_fingerprint_auth_1 = __webpack_require__(372);\nvar appavailability_1 = __webpack_require__(373);\nvar apprate_1 = __webpack_require__(374);\nvar appversion_1 = __webpack_require__(375);\nvar badge_1 = __webpack_require__(376);\nvar background_geolocation_1 = __webpack_require__(377);\nvar backgroundmode_1 = __webpack_require__(378);\nvar barcodescanner_1 = __webpack_require__(379);\nvar base64togallery_1 = __webpack_require__(380);\nvar batterystatus_1 = __webpack_require__(381);\nvar brightness_1 = __webpack_require__(382);\nvar ble_1 = __webpack_require__(383);\nvar bluetoothserial_1 = __webpack_require__(384);\nvar calendar_1 = __webpack_require__(385);\nvar call_number_1 = __webpack_require__(386);\nvar camera_1 = __webpack_require__(387);\nvar camera_preview_1 = __webpack_require__(388);\nvar card_io_1 = __webpack_require__(389);\nvar clipboard_1 = __webpack_require__(390);\nvar code_push_1 = __webpack_require__(391);\nvar contacts_1 = __webpack_require__(392);\nvar crop_1 = __webpack_require__(393);\nvar datepicker_1 = __webpack_require__(394);\nvar dbmeter_1 = __webpack_require__(395);\nvar deeplinks_1 = __webpack_require__(396);\nvar device_1 = __webpack_require__(397);\nvar device_feedback_1 = __webpack_require__(398);\nvar deviceaccounts_1 = __webpack_require__(399);\nvar devicemotion_1 = __webpack_require__(400);\nvar deviceorientation_1 = __webpack_require__(401);\nvar diagnostic_1 = __webpack_require__(402);\nvar dialogs_1 = __webpack_require__(403);\nvar emailcomposer_1 = __webpack_require__(404);\nvar estimote_beacons_1 = __webpack_require__(405);\nvar facebook_1 = __webpack_require__(406);\nvar file_1 = __webpack_require__(407);\nvar file_chooser_1 = __webpack_require__(408);\nvar file_opener_1 = __webpack_require__(409);\nvar filepath_1 = __webpack_require__(410);\nvar filetransfer_1 = __webpack_require__(411);\nvar flashlight_1 = __webpack_require__(412);\nvar geofence_1 = __webpack_require__(413);\nvar geolocation_1 = __webpack_require__(414);\nvar globalization_1 = __webpack_require__(415);\nvar google_plus_1 = __webpack_require__(416);\nvar googlemap_1 = __webpack_require__(417);\nvar googleanalytics_1 = __webpack_require__(418);\nvar hotspot_1 = __webpack_require__(419);\nvar http_1 = __webpack_require__(420);\nvar httpd_1 = __webpack_require__(421);\nvar ibeacon_1 = __webpack_require__(422);\nvar imagepicker_1 = __webpack_require__(423);\nvar imageresizer_1 = __webpack_require__(424);\nvar inappbrowser_1 = __webpack_require__(425);\nvar inapppurchase_1 = __webpack_require__(426);\nvar insomnia_1 = __webpack_require__(427);\nvar instagram_1 = __webpack_require__(428);\nvar is_debug_1 = __webpack_require__(429);\nvar keyboard_1 = __webpack_require__(430);\nvar launchnavigator_1 = __webpack_require__(431);\nvar localnotifications_1 = __webpack_require__(432);\nvar location_accuracy_1 = __webpack_require__(433);\nvar media_capture_1 = __webpack_require__(434);\nvar native_audio_1 = __webpack_require__(435);\nvar native_page_transitions_1 = __webpack_require__(436);\nvar nativestorage_1 = __webpack_require__(437);\nvar market_1 = __webpack_require__(438);\nvar media_1 = __webpack_require__(439);\nvar mixpanel_1 = __webpack_require__(440);\nvar music_controls_1 = __webpack_require__(441);\nvar network_1 = __webpack_require__(442);\nvar nfc_1 = __webpack_require__(443);\nvar onesignal_1 = __webpack_require__(444);\nvar photo_viewer_1 = __webpack_require__(445);\nvar screen_orientation_1 = __webpack_require__(446);\nvar pay_pal_1 = __webpack_require__(447);\nvar pin_dialog_1 = __webpack_require__(448);\nvar power_management_1 = __webpack_require__(449);\nvar printer_1 = __webpack_require__(450);\nvar push_1 = __webpack_require__(451);\nvar safari_view_controller_1 = __webpack_require__(452);\nvar screenshot_1 = __webpack_require__(453);\nvar securestorage_1 = __webpack_require__(454);\nvar shake_1 = __webpack_require__(455);\nvar sim_1 = __webpack_require__(456);\nvar sms_1 = __webpack_require__(457);\nvar socialsharing_1 = __webpack_require__(458);\nvar spinnerdialog_1 = __webpack_require__(459);\nvar splashscreen_1 = __webpack_require__(460);\nvar sqlite_1 = __webpack_require__(461);\nvar statusbar_1 = __webpack_require__(462);\nvar stepcounter_1 = __webpack_require__(463);\nvar streaming_media_1 = __webpack_require__(464);\nvar _3dtouch_1 = __webpack_require__(465);\nvar toast_1 = __webpack_require__(466);\nvar touchid_1 = __webpack_require__(467);\nvar text_to_speech_1 = __webpack_require__(468);\nvar themeable_browser_1 = __webpack_require__(469);\nvar twitter_connect_1 = __webpack_require__(470);\nvar vibration_1 = __webpack_require__(471);\nvar video_editor_1 = __webpack_require__(472);\nvar video_player_1 = __webpack_require__(473);\nvar webintent_1 = __webpack_require__(474);\nvar youtube_video_player_1 = __webpack_require__(475);\nvar z_bar_1 = __webpack_require__(476);\nvar zip_1 = __webpack_require__(477);\n__export(__webpack_require__(465));\n__export(__webpack_require__(368));\n__export(__webpack_require__(371));\n__export(__webpack_require__(372));\n__export(__webpack_require__(373));\n__export(__webpack_require__(374));\n__export(__webpack_require__(375));\n__export(__webpack_require__(377));\n__export(__webpack_require__(378));\n__export(__webpack_require__(376));\n__export(__webpack_require__(379));\n__export(__webpack_require__(380));\n__export(__webpack_require__(381));\n__export(__webpack_require__(383));\n__export(__webpack_require__(384));\n__export(__webpack_require__(382));\n__export(__webpack_require__(385));\n__export(__webpack_require__(386));\n__export(__webpack_require__(387));\n__export(__webpack_require__(388));\n__export(__webpack_require__(389));\n__export(__webpack_require__(390));\n__export(__webpack_require__(391));\n__export(__webpack_require__(392));\n__export(__webpack_require__(393));\n__export(__webpack_require__(394));\n__export(__webpack_require__(395));\n__export(__webpack_require__(396));\n__export(__webpack_require__(397));\n__export(__webpack_require__(398));\n__export(__webpack_require__(399));\n__export(__webpack_require__(400));\n__export(__webpack_require__(401));\n__export(__webpack_require__(402));\n__export(__webpack_require__(403));\n__export(__webpack_require__(404));\n__export(__webpack_require__(405));\n__export(__webpack_require__(406));\n__export(__webpack_require__(407));\n__export(__webpack_require__(408));\n__export(__webpack_require__(409));\n__export(__webpack_require__(411));\n__export(__webpack_require__(410));\n__export(__webpack_require__(412));\n__export(__webpack_require__(413));\n__export(__webpack_require__(414));\n__export(__webpack_require__(415));\n__export(__webpack_require__(416));\n__export(__webpack_require__(418));\n__export(__webpack_require__(417));\n__export(__webpack_require__(419));\n__export(__webpack_require__(420));\n__export(__webpack_require__(421));\n__export(__webpack_require__(422));\n__export(__webpack_require__(423));\n__export(__webpack_require__(424));\n__export(__webpack_require__(425));\n__export(__webpack_require__(426));\n__export(__webpack_require__(427));\n__export(__webpack_require__(428));\n__export(__webpack_require__(429));\n__export(__webpack_require__(430));\n__export(__webpack_require__(431));\n__export(__webpack_require__(432));\n__export(__webpack_require__(433));\n__export(__webpack_require__(438));\n__export(__webpack_require__(439));\n__export(__webpack_require__(434));\n__export(__webpack_require__(440));\n__export(__webpack_require__(441));\n__export(__webpack_require__(435));\n__export(__webpack_require__(436));\n__export(__webpack_require__(437));\n__export(__webpack_require__(442));\n__export(__webpack_require__(443));\n__export(__webpack_require__(444));\n__export(__webpack_require__(447));\n__export(__webpack_require__(445));\n__export(__webpack_require__(448));\n__export(__webpack_require__(369));\n__export(__webpack_require__(449));\n__export(__webpack_require__(450));\n__export(__webpack_require__(451));\n__export(__webpack_require__(452));\n__export(__webpack_require__(446));\n__export(__webpack_require__(453));\n__export(__webpack_require__(454));\n__export(__webpack_require__(455));\n__export(__webpack_require__(456));\n__export(__webpack_require__(457));\n__export(__webpack_require__(458));\n__export(__webpack_require__(459));\n__export(__webpack_require__(460));\n__export(__webpack_require__(461));\n__export(__webpack_require__(462));\n__export(__webpack_require__(463));\n__export(__webpack_require__(464));\n__export(__webpack_require__(468));\n__export(__webpack_require__(469));\n__export(__webpack_require__(466));\n__export(__webpack_require__(467));\n__export(__webpack_require__(470));\n__export(__webpack_require__(471));\n__export(__webpack_require__(472));\n__export(__webpack_require__(473));\n__export(__webpack_require__(474));\n__export(__webpack_require__(475));\n__export(__webpack_require__(476));\n__export(__webpack_require__(477));\n// Window export to use outside of a module loading system\nwindow['IonicNative'] = {\n    ActionSheet: actionsheet_1.ActionSheet,\n    AdMob: admob_1.AdMob,\n    AndroidFingerprintAuth: android_fingerprint_auth_1.AndroidFingerprintAuth,\n    AppAvailability: appavailability_1.AppAvailability,\n    AppRate: apprate_1.AppRate,\n    AppVersion: appversion_1.AppVersion,\n    Badge: badge_1.Badge,\n    BackgroundGeolocation: background_geolocation_1.BackgroundGeolocation,\n    BackgroundMode: backgroundmode_1.BackgroundMode,\n    BarcodeScanner: barcodescanner_1.BarcodeScanner,\n    Base64ToGallery: base64togallery_1.Base64ToGallery,\n    BatteryStatus: batterystatus_1.BatteryStatus,\n    Brightness: brightness_1.Brightness,\n    BLE: ble_1.BLE,\n    BluetoothSerial: bluetoothserial_1.BluetoothSerial,\n    Calendar: calendar_1.Calendar,\n    CallNumber: call_number_1.CallNumber,\n    Camera: camera_1.Camera,\n    CameraPreview: camera_preview_1.CameraPreview,\n    CardIO: card_io_1.CardIO,\n    Clipboard: clipboard_1.Clipboard,\n    CodePush: code_push_1.CodePush,\n    Contacts: contacts_1.Contacts,\n    Crop: crop_1.Crop,\n    DatePicker: datepicker_1.DatePicker,\n    DBMeter: dbmeter_1.DBMeter,\n    Deeplinks: deeplinks_1.Deeplinks,\n    Device: device_1.Device,\n    DeviceFeedback: device_feedback_1.DeviceFeedback,\n    DeviceAccounts: deviceaccounts_1.DeviceAccounts,\n    DeviceMotion: devicemotion_1.DeviceMotion,\n    DeviceOrientation: deviceorientation_1.DeviceOrientation,\n    Dialogs: dialogs_1.Dialogs,\n    Diagnostic: diagnostic_1.Diagnostic,\n    EmailComposer: emailcomposer_1.EmailComposer,\n    EstimoteBeacons: estimote_beacons_1.EstimoteBeacons,\n    Facebook: facebook_1.Facebook,\n    File: file_1.File,\n    FileChooser: file_chooser_1.FileChooser,\n    FileOpener: file_opener_1.FileOpener,\n    FilePath: filepath_1.FilePath,\n    Flashlight: flashlight_1.Flashlight,\n    Geofence: geofence_1.Geofence,\n    Geolocation: geolocation_1.Geolocation,\n    Globalization: globalization_1.Globalization,\n    GooglePlus: google_plus_1.GooglePlus,\n    GoogleMap: googlemap_1.GoogleMap,\n    GoogleAnalytics: googleanalytics_1.GoogleAnalytics,\n    Hotspot: hotspot_1.Hotspot,\n    HTTP: http_1.HTTP,\n    Httpd: httpd_1.Httpd,\n    IBeacon: ibeacon_1.IBeacon,\n    ImagePicker: imagepicker_1.ImagePicker,\n    ImageResizer: imageresizer_1.ImageResizer,\n    InAppBrowser: inappbrowser_1.InAppBrowser,\n    InAppPurchase: inapppurchase_1.InAppPurchase,\n    Insomnia: insomnia_1.Insomnia,\n    Instagram: instagram_1.Instagram,\n    IsDebug: is_debug_1.IsDebug,\n    Keyboard: keyboard_1.Keyboard,\n    LaunchNavigator: launchnavigator_1.LaunchNavigator,\n    LocalNotifications: localnotifications_1.LocalNotifications,\n    LocationAccuracy: location_accuracy_1.LocationAccuracy,\n    Market: market_1.Market,\n    MediaCapture: media_capture_1.MediaCapture,\n    MediaPlugin: media_1.MediaPlugin,\n    Mixpanel: mixpanel_1.Mixpanel,\n    MusicControls: music_controls_1.MusicControls,\n    NativeAudio: native_audio_1.NativeAudio,\n    NativePageTransitions: native_page_transitions_1.NativePageTransitions,\n    NativeStorage: nativestorage_1.NativeStorage,\n    Network: network_1.Network,\n    PayPal: pay_pal_1.PayPal,\n    NFC: nfc_1.NFC,\n    Printer: printer_1.Printer,\n    Push: push_1.Push,\n    OneSignal: onesignal_1.OneSignal,\n    PhotoViewer: photo_viewer_1.PhotoViewer,\n    ScreenOrientation: screen_orientation_1.ScreenOrientation,\n    PinDialog: pin_dialog_1.PinDialog,\n    PowerManagement: power_management_1.PowerManagement,\n    SafariViewController: safari_view_controller_1.SafariViewController,\n    Screenshot: screenshot_1.Screenshot,\n    SecureStorage: securestorage_1.SecureStorage,\n    Shake: shake_1.Shake,\n    Sim: sim_1.Sim,\n    SMS: sms_1.SMS,\n    SocialSharing: socialsharing_1.SocialSharing,\n    SpinnerDialog: spinnerdialog_1.SpinnerDialog,\n    Splashscreen: splashscreen_1.Splashscreen,\n    SQLite: sqlite_1.SQLite,\n    StatusBar: statusbar_1.StatusBar,\n    Stepcounter: stepcounter_1.Stepcounter,\n    StreamingMedia: streaming_media_1.StreamingMedia,\n    ThreeDeeTouch: _3dtouch_1.ThreeDeeTouch,\n    Toast: toast_1.Toast,\n    TouchID: touchid_1.TouchID,\n    Transfer: filetransfer_1.Transfer,\n    TextToSpeech: text_to_speech_1.TextToSpeech,\n    ThemeableBrowser: themeable_browser_1.ThemeableBrowser,\n    TwitterConnect: twitter_connect_1.TwitterConnect,\n    VideoEditor: video_editor_1.VideoEditor,\n    VideoPlayer: video_player_1.VideoPlayer,\n    Vibration: vibration_1.Vibration,\n    WebIntent: webintent_1.WebIntent,\n    YoutubeVideoPlayer: youtube_video_player_1.YoutubeVideoPlayer,\n    ZBar: z_bar_1.ZBar,\n    Zip: zip_1.Zip\n};\nng1_1.initAngular1(window['IonicNative']);\n// To help developers using cordova, we listen for the device ready event and\n// log an error if it didn't fire in a reasonable amount of time. Generally,\n// when this happens, developers should remove and reinstall plugins, since\n// an inconsistent plugin is often the culprit.\nvar before = Date.now();\nvar didFireReady = false;\ndocument.addEventListener('deviceready', function () {\n    console.log('DEVICE READY FIRED AFTER', (Date.now() - before), 'ms');\n    didFireReady = true;\n});\nsetTimeout(function () {\n    if (!didFireReady && window.cordova) {\n        console.warn(\"Native: deviceready did not fire within \" + DEVICE_READY_TIMEOUT + \"ms. This can happen when plugins are in an inconsistent state. Try removing plugins from plugins/ and reinstalling them.\");\n    }\n}, DEVICE_READY_TIMEOUT);\n//# sourceMappingURL=index.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 367 */
/***/ function(module, exports) {

	eval("\"use strict\";\n/**\n * Initialize the ionic.native Angular module if we're running in ng1.\n * This iterates through the list of registered plugins and dynamically\n * creates Angular 1 services of the form $cordovaSERVICE, ex: $cordovaStatusBar.\n */\nfunction initAngular1(plugins) {\n    if (window.angular) {\n        var ngModule_1 = window.angular.module('ionic.native', []);\n        for (var name in plugins) {\n            var serviceName = '$cordova' + name;\n            var cls = plugins[name];\n            (function (serviceName, cls, name) {\n                ngModule_1.service(serviceName, [function () {\n                        var funcs = window.angular.copy(cls);\n                        funcs.prototype['name'] = name;\n                        return funcs;\n                    }]);\n            })(serviceName, cls, name);\n        }\n    }\n}\nexports.initAngular1 = initAngular1;\n//# sourceMappingURL=ng1.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9uZzEuanM/MzI3NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM2Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuLyoqXG4gKiBJbml0aWFsaXplIHRoZSBpb25pYy5uYXRpdmUgQW5ndWxhciBtb2R1bGUgaWYgd2UncmUgcnVubmluZyBpbiBuZzEuXG4gKiBUaGlzIGl0ZXJhdGVzIHRocm91Z2ggdGhlIGxpc3Qgb2YgcmVnaXN0ZXJlZCBwbHVnaW5zIGFuZCBkeW5hbWljYWxseVxuICogY3JlYXRlcyBBbmd1bGFyIDEgc2VydmljZXMgb2YgdGhlIGZvcm0gJGNvcmRvdmFTRVJWSUNFLCBleDogJGNvcmRvdmFTdGF0dXNCYXIuXG4gKi9cbmZ1bmN0aW9uIGluaXRBbmd1bGFyMShwbHVnaW5zKSB7XG4gICAgaWYgKHdpbmRvdy5hbmd1bGFyKSB7XG4gICAgICAgIHZhciBuZ01vZHVsZV8xID0gd2luZG93LmFuZ3VsYXIubW9kdWxlKCdpb25pYy5uYXRpdmUnLCBbXSk7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gcGx1Z2lucykge1xuICAgICAgICAgICAgdmFyIHNlcnZpY2VOYW1lID0gJyRjb3Jkb3ZhJyArIG5hbWU7XG4gICAgICAgICAgICB2YXIgY2xzID0gcGx1Z2luc1tuYW1lXTtcbiAgICAgICAgICAgIChmdW5jdGlvbiAoc2VydmljZU5hbWUsIGNscywgbmFtZSkge1xuICAgICAgICAgICAgICAgIG5nTW9kdWxlXzEuc2VydmljZShzZXJ2aWNlTmFtZSwgW2Z1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmdW5jcyA9IHdpbmRvdy5hbmd1bGFyLmNvcHkoY2xzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmNzLnByb3RvdHlwZVsnbmFtZSddID0gbmFtZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdW5jcztcbiAgICAgICAgICAgICAgICAgICAgfV0pO1xuICAgICAgICAgICAgfSkoc2VydmljZU5hbWUsIGNscywgbmFtZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLmluaXRBbmd1bGFyMSA9IGluaXRBbmd1bGFyMTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5nMS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L25nMS5qc1xuLy8gbW9kdWxlIGlkID0gMzY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 368 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Action Sheet\n * @description\n * The ActionSheet plugin shows a native list of options the user can choose from.\n *\n * Requires Cordova plugin: `cordova-plugin-actionsheet`. For more info, please see the [ActionSheet plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-actionsheet).\n *\n * @usage\n * ```typescript\n * import { ActionSheet } from 'ionic-native';\n *\n *\n * let buttonLabels = ['Share via Facebook', 'Share via Twitter'];\n * ActionSheet.show({\n *   'title': 'What do you want with this image?',\n *   'buttonLabels': buttonLabels,\n *   'addCancelButtonWithLabel': 'Cancel',\n *   'addDestructiveButtonWithLabel' : 'Delete'\n * }).then((buttonIndex: number) => {\n *   console.log('Button pressed: ' + buttonIndex);\n * });\n * ```\n *\n * @advanced\n * ActionSheet options\n *\n * | Option                        | Type      | Description                                  |\n * |-------------------------------|-----------|----------------------------------------------|\n * | title                         |`string`   | The title for the actionsheet                |\n * | buttonLabels                  |`string[]` | the labels for the buttons. Uses the index x |\n * | androidTheme                  |`number`   | Theme to be used on Android                  |\n * | androidEnableCancelButton     |`boolean`  | Enable a cancel on Android                   |\n * | winphoneEnableCancelButton    |`boolean`  | Enable a cancel on Windows Phone             |\n * | addCancelButtonWithLabel      |`string`   | Add a cancel button with text                |\n * | addDestructiveButtonWithLabel |`string`   | Add a destructive button with text           |\n * | position                      |`number[]` | On an iPad, set the X,Y position             |\n *\n *\n */\nvar ActionSheet = (function () {\n    function ActionSheet() {\n    }\n    /**\n     * Show a native ActionSheet component. See below for options.\n     * @param {options} Options See table below\n     * @returns {Promise} Returns a Promise that resolves with the index of the\n     *   button pressed (1 based, so 1, 2, 3, etc.)\n     */\n    ActionSheet.show = function (options) { return; };\n    /**\n     * Progamtically hide the native ActionSheet\n     * @returns {Promise} Returns a Promise that resolves when the actionsheet is closed\n     */\n    ActionSheet.hide = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], ActionSheet, \"show\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], ActionSheet, \"hide\", null);\n    ActionSheet = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ActionSheet',\n            plugin: 'cordova-plugin-actionsheet',\n            pluginRef: 'plugins.actionsheet',\n            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-actionsheet',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], ActionSheet);\n    return ActionSheet;\n}());\nexports.ActionSheet = ActionSheet;\n//# sourceMappingURL=actionsheet.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FjdGlvbnNoZWV0LmpzPzdkZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0EsaUJBQWlCLFFBQVE7QUFDekI7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMzY4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBBY3Rpb24gU2hlZXRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEFjdGlvblNoZWV0IHBsdWdpbiBzaG93cyBhIG5hdGl2ZSBsaXN0IG9mIG9wdGlvbnMgdGhlIHVzZXIgY2FuIGNob29zZSBmcm9tLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tYWN0aW9uc2hlZXRgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbQWN0aW9uU2hlZXQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi1hY3Rpb25zaGVldCkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBY3Rpb25TaGVldCB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIGxldCBidXR0b25MYWJlbHMgPSBbJ1NoYXJlIHZpYSBGYWNlYm9vaycsICdTaGFyZSB2aWEgVHdpdHRlciddO1xuICogQWN0aW9uU2hlZXQuc2hvdyh7XG4gKiAgICd0aXRsZSc6ICdXaGF0IGRvIHlvdSB3YW50IHdpdGggdGhpcyBpbWFnZT8nLFxuICogICAnYnV0dG9uTGFiZWxzJzogYnV0dG9uTGFiZWxzLFxuICogICAnYWRkQ2FuY2VsQnV0dG9uV2l0aExhYmVsJzogJ0NhbmNlbCcsXG4gKiAgICdhZGREZXN0cnVjdGl2ZUJ1dHRvbldpdGhMYWJlbCcgOiAnRGVsZXRlJ1xuICogfSkudGhlbigoYnV0dG9uSW5kZXg6IG51bWJlcikgPT4ge1xuICogICBjb25zb2xlLmxvZygnQnV0dG9uIHByZXNzZWQ6ICcgKyBidXR0b25JbmRleCk7XG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBhZHZhbmNlZFxuICogQWN0aW9uU2hlZXQgb3B0aW9uc1xuICpcbiAqIHwgT3B0aW9uICAgICAgICAgICAgICAgICAgICAgICAgfCBUeXBlICAgICAgfCBEZXNjcmlwdGlvbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB0aXRsZSAgICAgICAgICAgICAgICAgICAgICAgICB8YHN0cmluZ2AgICB8IFRoZSB0aXRsZSBmb3IgdGhlIGFjdGlvbnNoZWV0ICAgICAgICAgICAgICAgIHxcbiAqIHwgYnV0dG9uTGFiZWxzICAgICAgICAgICAgICAgICAgfGBzdHJpbmdbXWAgfCB0aGUgbGFiZWxzIGZvciB0aGUgYnV0dG9ucy4gVXNlcyB0aGUgaW5kZXggeCB8XG4gKiB8IGFuZHJvaWRUaGVtZSAgICAgICAgICAgICAgICAgIHxgbnVtYmVyYCAgIHwgVGhlbWUgdG8gYmUgdXNlZCBvbiBBbmRyb2lkICAgICAgICAgICAgICAgICAgfFxuICogfCBhbmRyb2lkRW5hYmxlQ2FuY2VsQnV0dG9uICAgICB8YGJvb2xlYW5gICB8IEVuYWJsZSBhIGNhbmNlbCBvbiBBbmRyb2lkICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgd2lucGhvbmVFbmFibGVDYW5jZWxCdXR0b24gICAgfGBib29sZWFuYCAgfCBFbmFibGUgYSBjYW5jZWwgb24gV2luZG93cyBQaG9uZSAgICAgICAgICAgICB8XG4gKiB8IGFkZENhbmNlbEJ1dHRvbldpdGhMYWJlbCAgICAgIHxgc3RyaW5nYCAgIHwgQWRkIGEgY2FuY2VsIGJ1dHRvbiB3aXRoIHRleHQgICAgICAgICAgICAgICAgfFxuICogfCBhZGREZXN0cnVjdGl2ZUJ1dHRvbldpdGhMYWJlbCB8YHN0cmluZ2AgICB8IEFkZCBhIGRlc3RydWN0aXZlIGJ1dHRvbiB3aXRoIHRleHQgICAgICAgICAgIHxcbiAqIHwgcG9zaXRpb24gICAgICAgICAgICAgICAgICAgICAgfGBudW1iZXJbXWAgfCBPbiBhbiBpUGFkLCBzZXQgdGhlIFgsWSBwb3NpdGlvbiAgICAgICAgICAgICB8XG4gKlxuICpcbiAqL1xudmFyIEFjdGlvblNoZWV0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBY3Rpb25TaGVldCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvdyBhIG5hdGl2ZSBBY3Rpb25TaGVldCBjb21wb25lbnQuIFNlZSBiZWxvdyBmb3Igb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge29wdGlvbnN9IE9wdGlvbnMgU2VlIHRhYmxlIGJlbG93XG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgaW5kZXggb2YgdGhlXG4gICAgICogICBidXR0b24gcHJlc3NlZCAoMSBiYXNlZCwgc28gMSwgMiwgMywgZXRjLilcbiAgICAgKi9cbiAgICBBY3Rpb25TaGVldC5zaG93ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFByb2dhbXRpY2FsbHkgaGlkZSB0aGUgbmF0aXZlIEFjdGlvblNoZWV0XG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgYWN0aW9uc2hlZXQgaXMgY2xvc2VkXG4gICAgICovXG4gICAgQWN0aW9uU2hlZXQuaGlkZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQWN0aW9uU2hlZXQsIFwic2hvd1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQWN0aW9uU2hlZXQsIFwiaGlkZVwiLCBudWxsKTtcbiAgICBBY3Rpb25TaGVldCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0FjdGlvblNoZWV0JyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFjdGlvbnNoZWV0JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3BsdWdpbnMuYWN0aW9uc2hlZXQnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi1hY3Rpb25zaGVldCcsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyBQaG9uZSA4J11cbiAgICAgICAgfSlcbiAgICBdLCBBY3Rpb25TaGVldCk7XG4gICAgcmV0dXJuIEFjdGlvblNoZWV0O1xufSgpKTtcbmV4cG9ydHMuQWN0aW9uU2hlZXQgPSBBY3Rpb25TaGVldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFjdGlvbnNoZWV0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9hY3Rpb25zaGVldC5qc1xuLy8gbW9kdWxlIGlkID0gMzY4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 369 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar util_1 = __webpack_require__(370);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @private\n * @param pluginRef\n * @returns {null|*}\n */\nexports.getPlugin = function (pluginRef) {\n    return util_1.get(window, pluginRef);\n};\n/**\n * @private\n * @param pluginObj\n * @param method\n */\nexports.pluginWarn = function (pluginObj, method) {\n    var pluginName = pluginObj.pluginName, plugin = pluginObj.plugin;\n    if (method) {\n        console.warn('Native: tried calling ' + pluginName + '.' + method + ', but the ' + pluginName + ' plugin is not installed.');\n    }\n    else {\n        console.warn('Native: tried accessing the ' + pluginName + ' plugin but it\\'s not installed.');\n    }\n    console.warn('Install the ' + pluginName + ' plugin: \\'ionic plugin add ' + plugin + '\\'');\n};\n/**\n * @private\n * @param pluginName\n * @param method\n */\nexports.cordovaWarn = function (pluginName, method) {\n    if (method) {\n        console.warn('Native: tried calling ' + pluginName + '.' + method + ', but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n    }\n    else {\n        console.warn('Native: tried accessing the ' + pluginName + ' plugin but Cordova is not available. Make sure to include cordova.js or run in a device/simulator');\n    }\n};\nfunction setIndex(args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    // ignore resolve and reject in case sync\n    if (opts.sync) {\n        return args;\n    }\n    // If the plugin method expects myMethod(success, err, options)\n    if (opts.callbackOrder === 'reverse') {\n        // Get those arguments in the order [resolve, reject, ...restOfArgs]\n        args.unshift(reject);\n        args.unshift(resolve);\n    }\n    else if (opts.callbackStyle === 'node') {\n        args.push(function (err, result) {\n            if (err) {\n                reject(err);\n            }\n            else {\n                resolve(result);\n            }\n        });\n    }\n    else if (opts.callbackStyle === 'object' && opts.successName && opts.errorName) {\n        var obj = {};\n        obj[opts.successName] = resolve;\n        obj[opts.errorName] = reject;\n        args.push(obj);\n    }\n    else if (typeof opts.successIndex !== 'undefined' || typeof opts.errorIndex !== 'undefined') {\n        var setSuccessIndex = function () {\n            // If we've specified a success/error index\n            if (opts.successIndex > args.length) {\n                args[opts.successIndex] = resolve;\n            }\n            else {\n                args.splice(opts.successIndex, 0, resolve);\n            }\n        };\n        var setErrorIndex = function () {\n            // We don't want that the reject cb gets spliced into the position of an optional argument that has not been defined and thus causing non expected behaviour.\n            if (opts.errorIndex > args.length) {\n                args[opts.errorIndex] = reject; // insert the reject fn at the correct specific index\n            }\n            else {\n                args.splice(opts.errorIndex, 0, reject); // otherwise just splice it into the array\n            }\n        };\n        if (opts.successIndex > opts.errorIndex) {\n            setErrorIndex();\n            setSuccessIndex();\n        }\n        else {\n            setSuccessIndex();\n            setErrorIndex();\n        }\n    }\n    else {\n        // Otherwise, let's tack them on to the end of the argument list\n        // which is 90% of cases\n        args.push(resolve);\n        args.push(reject);\n    }\n    return args;\n}\nfunction callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    // Try to figure out where the success/error callbacks need to be bound\n    // to our promise resolve/reject handlers.\n    args = setIndex(args, opts, resolve, reject);\n    var pluginInstance = exports.getPlugin(pluginObj.pluginRef);\n    if (!pluginInstance) {\n        // Do this check in here in the case that the Web API for this plugin is available (for example, Geolocation).\n        if (!window.cordova) {\n            exports.cordovaWarn(pluginObj.pluginName, methodName);\n            return {\n                error: 'cordova_not_available'\n            };\n        }\n        exports.pluginWarn(pluginObj, methodName);\n        return {\n            error: 'plugin_not_installed'\n        };\n    }\n    // TODO: Illegal invocation needs window context\n    return util_1.get(window, pluginObj.pluginRef)[methodName].apply(pluginInstance, args);\n}\nfunction getPromise(cb) {\n    var tryNativePromise = function () {\n        if (window.Promise) {\n            return new Promise(function (resolve, reject) {\n                cb(resolve, reject);\n            });\n        }\n        else {\n            console.error('No Promise support or polyfill found. To enable Ionic Native support, please add the es6-promise polyfill before this script, or run with a library like Angular 1/2 or on a recent browser.');\n        }\n    };\n    if (window.angular) {\n        var injector = window.angular.element(document.querySelector('[ng-app]') || document.body).injector();\n        if (injector) {\n            var $q = injector.get('$q');\n            return $q(function (resolve, reject) {\n                cb(resolve, reject);\n            });\n        }\n        else {\n            console.warn('Angular 1 was detected but $q couldn\\'t be retrieved. This is usually when the app is not bootstrapped on the html or body tag. Falling back to native promises which won\\'t trigger an automatic digest when promises resolve.');\n            return tryNativePromise();\n        }\n    }\n    else {\n        return tryNativePromise();\n    }\n}\nfunction wrapPromise(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    var pluginResult, rej;\n    var p = getPromise(function (resolve, reject) {\n        pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, resolve, reject);\n        rej = reject;\n    });\n    // Angular throws an error on unhandled rejection, but in this case we have already printed\n    // a warning that Cordova is undefined or the plugin is uninstalled, so there is no reason\n    // to error\n    if (pluginResult && pluginResult.error) {\n        p.catch(function () { });\n        rej(pluginResult.error);\n    }\n    return p;\n}\nfunction wrapOtherPromise(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    return getPromise(function (resolve, reject) {\n        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts);\n        if (pluginResult && pluginResult.error) {\n            reject(pluginResult.error);\n        }\n        pluginResult.then(resolve).catch(reject);\n    });\n}\nfunction wrapObservable(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    return new Observable_1.Observable(function (observer) {\n        var pluginResult = callCordovaPlugin(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n        if (pluginResult && pluginResult.error) {\n            observer.error(pluginResult.error);\n        }\n        return function () {\n            try {\n                if (opts.clearFunction) {\n                    if (opts.clearWithArgs) {\n                        return util_1.get(window, pluginObj.pluginRef)[opts.clearFunction].apply(pluginObj, args);\n                    }\n                    return util_1.get(window, pluginObj.pluginRef)[opts.clearFunction].call(pluginObj, pluginResult);\n                }\n            }\n            catch (e) {\n                console.warn('Unable to clear the previous observable watch for', pluginObj.pluginName, methodName);\n                console.error(e);\n            }\n        };\n    });\n}\nfunction callInstance(pluginObj, methodName, args, opts, resolve, reject) {\n    if (opts === void 0) { opts = {}; }\n    args = setIndex(args, opts, resolve, reject);\n    return pluginObj._objectInstance[methodName].apply(pluginObj._objectInstance, args);\n}\nfunction wrapInstance(pluginObj, methodName, opts) {\n    if (opts === void 0) { opts = {}; }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (opts.sync) {\n            // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is\n            return callInstance(pluginObj, methodName, args, opts);\n        }\n        else if (opts.observable) {\n            return new Observable_1.Observable(function (observer) {\n                var pluginResult = callInstance(pluginObj, methodName, args, opts, observer.next.bind(observer), observer.error.bind(observer));\n                return function () {\n                    try {\n                        if (opts.clearWithArgs) {\n                            return pluginObj._objectInstance[opts.clearFunction].apply(pluginObj._objectInstance, args);\n                        }\n                        return pluginObj._objectInstance[opts.clearFunction].call(pluginObj, pluginResult);\n                    }\n                    catch (e) {\n                        console.warn('Unable to clear the previous observable watch for', pluginObj.pluginName, methodName);\n                        console.error(e);\n                    }\n                };\n            });\n        }\n        else if (opts.otherPromise) {\n            return getPromise(function (resolve, reject) {\n                var result = callInstance(pluginObj, methodName, args, opts, resolve, reject);\n                result.then(resolve, reject);\n            });\n        }\n        else {\n            return getPromise(function (resolve, reject) {\n                callInstance(pluginObj, methodName, args, opts, resolve, reject);\n            });\n        }\n    };\n}\n/**\n * Wrap the event with an observable\n * @param event\n * @returns {Observable}\n */\nfunction wrapEventObservable(event) {\n    return new Observable_1.Observable(function (observer) {\n        window.addEventListener(event, observer.next.bind(observer), false);\n        return function () { return window.removeEventListener(event, observer.next.bind(observer), false); };\n    });\n}\n/**\n * Certain plugins expect the user to override methods in the plugin. For example,\n * window.cordova.plugins.backgroundMode.onactivate = function() { ... }.\n *\n * Unfortunately, this is brittle and would be better wrapped as an Observable. overrideFunction\n * does just this.\n */\nfunction overrideFunction(pluginObj, methodName, args, opts) {\n    if (opts === void 0) { opts = {}; }\n    return new Observable_1.Observable(function (observer) {\n        var pluginInstance = exports.getPlugin(pluginObj.pluginRef);\n        if (!pluginInstance) {\n            // Do this check in here in the case that the Web API for this plugin is available (for example, Geolocation).\n            if (!window.cordova) {\n                exports.cordovaWarn(pluginObj.pluginName, methodName);\n                observer.error({\n                    error: 'cordova_not_available'\n                });\n            }\n            exports.pluginWarn(pluginObj, methodName);\n            observer.error({\n                error: 'plugin_not_installed'\n            });\n            return;\n        }\n        var method = pluginInstance[methodName];\n        if (!method) {\n            observer.error({\n                error: 'no_such_method'\n            });\n            observer.complete();\n            return;\n        }\n        pluginInstance[methodName] = observer.next.bind(observer);\n    });\n}\n/**\n * @private\n * @param pluginObj\n * @param methodName\n * @param opts\n * @returns {function(...[any]): (undefined|*|Observable|*|*)}\n */\nexports.wrap = function (pluginObj, methodName, opts) {\n    if (opts === void 0) { opts = {}; }\n    return function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (opts.sync) {\n            // Sync doesn't wrap the plugin with a promise or observable, it returns the result as-is\n            return callCordovaPlugin(pluginObj, methodName, args, opts);\n        }\n        else if (opts.observable) {\n            return wrapObservable(pluginObj, methodName, args, opts);\n        }\n        else if (opts.eventObservable && opts.event) {\n            return wrapEventObservable(opts.event);\n        }\n        else if (opts.otherPromise) {\n            return wrapOtherPromise(pluginObj, methodName, args, opts);\n        }\n        else {\n            return wrapPromise(pluginObj, methodName, args, opts);\n        }\n    };\n};\n/**\n * @private\n *\n * Class decorator specifying Plugin metadata. Required for all plugins.\n *\n * @usage\n * ```typescript\n * @Plugin({\n *  pluginName: 'MyPlugin',\n *  plugin: 'cordova-plugin-myplugin',\n *  pluginRef: 'window.myplugin'\n *  })\n *  export class MyPlugin {\n *\n *    // Plugin wrappers, properties, and functions go here ...\n *\n *  }\n * ```\n */\nfunction Plugin(config) {\n    return function (cls) {\n        // Add these fields to the class\n        for (var k in config) {\n            cls[k] = config[k];\n        }\n        cls['installed'] = function (printWarning) {\n            return !!exports.getPlugin(config.pluginRef);\n        };\n        cls['getPlugin'] = function () {\n            return exports.getPlugin(config.pluginRef);\n        };\n        cls['checkInstall'] = function () {\n            var pluginInstance = exports.getPlugin(config.pluginRef);\n            if (!pluginInstance) {\n                exports.pluginWarn(cls);\n                return false;\n            }\n            return true;\n        };\n        return cls;\n    };\n}\nexports.Plugin = Plugin;\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nfunction Cordova(opts) {\n    if (opts === void 0) { opts = {}; }\n    return function (target, methodName, descriptor) {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                return exports.wrap(this, methodName, opts).apply(this, args);\n            }\n        };\n    };\n}\nexports.Cordova = Cordova;\n/**\n * @private\n *\n * Wrap an instance method\n */\nfunction CordovaInstance(opts) {\n    if (opts === void 0) { opts = {}; }\n    return function (target, methodName) {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                return wrapInstance(this, methodName, opts).apply(this, args);\n            }\n        };\n    };\n}\nexports.CordovaInstance = CordovaInstance;\n/**\n * @private\n *\n *\n * Before calling the original method, ensure Cordova and the plugin are installed.\n */\nfunction CordovaProperty(target, key, descriptor) {\n    var originalMethod = descriptor.get;\n    descriptor.get = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        if (!window.cordova) {\n            exports.cordovaWarn(this.name, null);\n            return {};\n        }\n        var pluginObj = this;\n        var pluginInstance = exports.getPlugin(pluginObj.pluginRef);\n        if (!pluginInstance) {\n            exports.pluginWarn(this, key);\n            return {};\n        }\n        return originalMethod.apply(this, args);\n    };\n    return descriptor;\n}\nexports.CordovaProperty = CordovaProperty;\n/**\n * @private\n * @param target\n * @param key\n * @param descriptor\n * @constructor\n */\nfunction InstanceProperty(target, key, descriptor) {\n    descriptor.get = function () {\n        return this._objectInstance[key];\n    };\n    descriptor.set = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i - 0] = arguments[_i];\n        }\n        this._objectInstance[key] = args[0];\n    };\n    return descriptor;\n}\nexports.InstanceProperty = InstanceProperty;\n/**\n * @private\n *\n * Wrap a stub function in a call to a Cordova plugin, checking if both Cordova\n * and the required plugin are installed.\n */\nfunction CordovaFunctionOverride(opts) {\n    if (opts === void 0) { opts = {}; }\n    return function (target, methodName, descriptor) {\n        return {\n            value: function () {\n                var args = [];\n                for (var _i = 0; _i < arguments.length; _i++) {\n                    args[_i - 0] = arguments[_i];\n                }\n                return overrideFunction(this, methodName, opts);\n            }\n        };\n    };\n}\nexports.CordovaFunctionOverride = CordovaFunctionOverride;\n//# sourceMappingURL=plugin.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 370 */
/***/ function(module, exports) {

	eval("\"use strict\";\nfunction get(obj, path) {\n    for (var i = 0, path = path.split('.'), len = path.length; i < len; i++) {\n        if (!obj) {\n            return null;\n        }\n        obj = obj[path[i]];\n    }\n    return obj;\n}\nexports.get = get;\n;\n//# sourceMappingURL=util.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS91dGlsLmpzPzA0YTMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBLDhEQUE4RCxTQUFTO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjM3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gZ2V0KG9iaiwgcGF0aCkge1xuICAgIGZvciAodmFyIGkgPSAwLCBwYXRoID0gcGF0aC5zcGxpdCgnLicpLCBsZW4gPSBwYXRoLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGlmICghb2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBvYmogPSBvYmpbcGF0aFtpXV07XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnRzLmdldCA9IGdldDtcbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS91dGlsLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 371 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name AdMob\n * @description Plugin for Google Ads, including AdMob / DFP (doubleclick for publisher) and mediations to other Ad networks.\n * @usage\n * Please refer the the plugin's original repository for detailed usage.\n */\nvar AdMob = (function () {\n    function AdMob() {\n    }\n    // Static Methods\n    /**\n     *\n     * @param adIdOrOptions\n     */\n    AdMob.createBanner = function (adIdOrOptions) { return; };\n    /**\n     *\n     */\n    AdMob.removeBanner = function () { };\n    /**\n     *\n     * @param position\n     */\n    AdMob.showBanner = function (position) { };\n    /**\n     *\n     * @param x\n     * @param y\n     */\n    AdMob.showBannerAtXY = function (x, y) { };\n    /**\n     *\n     */\n    AdMob.hideBanner = function () { };\n    /**\n     *\n     * @param adIdOrOptions\n     */\n    AdMob.prepareInterstitial = function (adIdOrOptions) { return; };\n    /**\n     * Show interstitial\n     */\n    AdMob.showInterstitial = function () { };\n    /**\n     *\n     */\n    AdMob.isInterstitialReady = function () { return; };\n    /**\n     * Prepare a reward video ad\n     * @param adIdOrOptions\n     */\n    AdMob.prepareRewardVideoAd = function (adIdOrOptions) { return; };\n    /**\n     * Show a reward video ad\n     */\n    AdMob.showRewardVideoAd = function () { };\n    /**\n     * Sets the values for configuration and targeting\n     * @param options Returns a promise that resolves if the options are set successfully\n     */\n    AdMob.setOptions = function (options) { return; };\n    /**\n     * Get user ad settings\n     * @returns {Promise<any>} Returns a promise that resolves with the ad settings\n     */\n    AdMob.getAdSettings = function () { return; };\n    // Events\n    AdMob.onBannerFailedToReceive = function () { return; };\n    AdMob.onBannerReceive = function () { return; };\n    AdMob.onBannerPresent = function () { return; };\n    AdMob.onBannerLeaveApp = function () { return; };\n    AdMob.onBannerDismiss = function () { return; };\n    AdMob.onInterstitialFailedToReceive = function () { return; };\n    AdMob.onInterstitialReceive = function () { return; };\n    AdMob.onInterstitialPresent = function () { return; };\n    AdMob.onInterstitialLeaveApp = function () { return; };\n    AdMob.onInterstitialDismiss = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"createBanner\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"removeBanner\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"showBanner\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"showBannerAtXY\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"hideBanner\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"prepareInterstitial\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"showInterstitial\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"isInterstitialReady\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"prepareRewardVideoAd\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], AdMob, \"showRewardVideoAd\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"setOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AdMob, \"getAdSettings\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onBannerFailedToReceive'\n        })\n    ], AdMob, \"onBannerFailedToReceive\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onBannerReceive'\n        })\n    ], AdMob, \"onBannerReceive\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onBannerPresent'\n        })\n    ], AdMob, \"onBannerPresent\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onBannerLeaveApp'\n        })\n    ], AdMob, \"onBannerLeaveApp\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onBannerDismiss'\n        })\n    ], AdMob, \"onBannerDismiss\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onInterstitialFailedToReceive'\n        })\n    ], AdMob, \"onInterstitialFailedToReceive\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onInterstitialReceive'\n        })\n    ], AdMob, \"onInterstitialReceive\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onInterstitialPresent'\n        })\n    ], AdMob, \"onInterstitialPresent\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onInterstitialLeaveApp'\n        })\n    ], AdMob, \"onInterstitialLeaveApp\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'onInterstitialDismiss'\n        })\n    ], AdMob, \"onInterstitialDismiss\", null);\n    AdMob = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'AdMob',\n            plugin: 'cordova-plugin-admobpro',\n            pluginRef: 'AdMob',\n            repo: 'https://github.com/floatinghotpot/cordova-admob-pro',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], AdMob);\n    return AdMob;\n}());\nexports.AdMob = AdMob;\n//# sourceMappingURL=admob.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 372 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Android Fingerprint Auth\n * @description\n * This plugin will open a native dialog fragment prompting the user to authenticate using their fingerprint. If the device has a secure lockscreen (pattern, PIN, or password), the user may opt to authenticate using that method as a backup.\n * @usage\n * ```typescript\n * import { AndroidFingerprintAuth } from 'ionic-native';\n *\n * AndroidFingerprintAuth.isAvailable()\n *   .then((result)=> {\n *     if(result.isAvailable){\n *       // it is available\n *\n *       AndroidFingerprintAuth.show({ clientId: \"myAppName\", clientSecret: \"so_encrypted_much_secure_very_secret\" })\n *         .then(result => {\n *            if(result.withFingerprint) {\n *              console.log('Successfully authenticated with fingerprint!');\n *            } else if(result.withPassword) {\n *              console.log('Successfully authenticated with backup password!');\n *            } else console.log('Didn\\'t authenticate!');\n *         })\n *         .catch(error => console.error(error));\n *\n *     } else {\n *       // fingerprint auth isn't available\n *     }\n *   })\n *   .catch(error => console.error(error));\n * ```\n */\nvar AndroidFingerprintAuth = (function () {\n    function AndroidFingerprintAuth() {\n    }\n    /**\n     * Opens a native dialog fragment to use the device hardware fingerprint scanner to authenticate against fingerprints registered for the device.\n     * @param params {any}\n     */\n    AndroidFingerprintAuth.show = function (params) { return; };\n    /**\n     * Check if service is available\n     */\n    AndroidFingerprintAuth.isAvailable = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], AndroidFingerprintAuth, \"show\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AndroidFingerprintAuth, \"isAvailable\", null);\n    AndroidFingerprintAuth = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'AndroidFingerprintAuth',\n            plugin: 'cordova-plugin-android-fingerprint-auth',\n            pluginRef: 'FingerprintAuth',\n            repo: 'https://github.com/mjwheatley/cordova-plugin-android-fingerprint-auth'\n        })\n    ], AndroidFingerprintAuth);\n    return AndroidFingerprintAuth;\n}());\nexports.AndroidFingerprintAuth = AndroidFingerprintAuth;\n//# sourceMappingURL=android-fingerprint-auth.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FuZHJvaWQtZmluZ2VycHJpbnQtYXV0aC5qcz82ZGYxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyx5QkFBeUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLDhFQUE4RTtBQUNwSDtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7QUFDQSxlQUFlO0FBQ2YsWUFBWTtBQUNaO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0EscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFFBQVE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzNzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEFuZHJvaWQgRmluZ2VycHJpbnQgQXV0aFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiB3aWxsIG9wZW4gYSBuYXRpdmUgZGlhbG9nIGZyYWdtZW50IHByb21wdGluZyB0aGUgdXNlciB0byBhdXRoZW50aWNhdGUgdXNpbmcgdGhlaXIgZmluZ2VycHJpbnQuIElmIHRoZSBkZXZpY2UgaGFzIGEgc2VjdXJlIGxvY2tzY3JlZW4gKHBhdHRlcm4sIFBJTiwgb3IgcGFzc3dvcmQpLCB0aGUgdXNlciBtYXkgb3B0IHRvIGF1dGhlbnRpY2F0ZSB1c2luZyB0aGF0IG1ldGhvZCBhcyBhIGJhY2t1cC5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgQW5kcm9pZEZpbmdlcnByaW50QXV0aCB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogQW5kcm9pZEZpbmdlcnByaW50QXV0aC5pc0F2YWlsYWJsZSgpXG4gKiAgIC50aGVuKChyZXN1bHQpPT4ge1xuICogICAgIGlmKHJlc3VsdC5pc0F2YWlsYWJsZSl7XG4gKiAgICAgICAvLyBpdCBpcyBhdmFpbGFibGVcbiAqXG4gKiAgICAgICBBbmRyb2lkRmluZ2VycHJpbnRBdXRoLnNob3coeyBjbGllbnRJZDogXCJteUFwcE5hbWVcIiwgY2xpZW50U2VjcmV0OiBcInNvX2VuY3J5cHRlZF9tdWNoX3NlY3VyZV92ZXJ5X3NlY3JldFwiIH0pXG4gKiAgICAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gKiAgICAgICAgICAgIGlmKHJlc3VsdC53aXRoRmluZ2VycHJpbnQpIHtcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgd2l0aCBmaW5nZXJwcmludCEnKTtcbiAqICAgICAgICAgICAgfSBlbHNlIGlmKHJlc3VsdC53aXRoUGFzc3dvcmQpIHtcbiAqICAgICAgICAgICAgICBjb25zb2xlLmxvZygnU3VjY2Vzc2Z1bGx5IGF1dGhlbnRpY2F0ZWQgd2l0aCBiYWNrdXAgcGFzc3dvcmQhJyk7XG4gKiAgICAgICAgICAgIH0gZWxzZSBjb25zb2xlLmxvZygnRGlkblxcJ3QgYXV0aGVudGljYXRlIScpO1xuICogICAgICAgICB9KVxuICogICAgICAgICAuY2F0Y2goZXJyb3IgPT4gY29uc29sZS5lcnJvcihlcnJvcikpO1xuICpcbiAqICAgICB9IGVsc2Uge1xuICogICAgICAgLy8gZmluZ2VycHJpbnQgYXV0aCBpc24ndCBhdmFpbGFibGVcbiAqICAgICB9XG4gKiAgIH0pXG4gKiAgIC5jYXRjaChlcnJvciA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKiBgYGBcbiAqL1xudmFyIEFuZHJvaWRGaW5nZXJwcmludEF1dGggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFuZHJvaWRGaW5nZXJwcmludEF1dGgoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgbmF0aXZlIGRpYWxvZyBmcmFnbWVudCB0byB1c2UgdGhlIGRldmljZSBoYXJkd2FyZSBmaW5nZXJwcmludCBzY2FubmVyIHRvIGF1dGhlbnRpY2F0ZSBhZ2FpbnN0IGZpbmdlcnByaW50cyByZWdpc3RlcmVkIGZvciB0aGUgZGV2aWNlLlxuICAgICAqIEBwYXJhbSBwYXJhbXMge2FueX1cbiAgICAgKi9cbiAgICBBbmRyb2lkRmluZ2VycHJpbnRBdXRoLnNob3cgPSBmdW5jdGlvbiAocGFyYW1zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBzZXJ2aWNlIGlzIGF2YWlsYWJsZVxuICAgICAqL1xuICAgIEFuZHJvaWRGaW5nZXJwcmludEF1dGguaXNBdmFpbGFibGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQW5kcm9pZEZpbmdlcnByaW50QXV0aCwgXCJzaG93XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBBbmRyb2lkRmluZ2VycHJpbnRBdXRoLCBcImlzQXZhaWxhYmxlXCIsIG51bGwpO1xuICAgIEFuZHJvaWRGaW5nZXJwcmludEF1dGggPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdBbmRyb2lkRmluZ2VycHJpbnRBdXRoJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWFuZHJvaWQtZmluZ2VycHJpbnQtYXV0aCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdGaW5nZXJwcmludEF1dGgnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tandoZWF0bGV5L2NvcmRvdmEtcGx1Z2luLWFuZHJvaWQtZmluZ2VycHJpbnQtYXV0aCdcbiAgICAgICAgfSlcbiAgICBdLCBBbmRyb2lkRmluZ2VycHJpbnRBdXRoKTtcbiAgICByZXR1cm4gQW5kcm9pZEZpbmdlcnByaW50QXV0aDtcbn0oKSk7XG5leHBvcnRzLkFuZHJvaWRGaW5nZXJwcmludEF1dGggPSBBbmRyb2lkRmluZ2VycHJpbnRBdXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5kcm9pZC1maW5nZXJwcmludC1hdXRoLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9hbmRyb2lkLWZpbmdlcnByaW50LWF1dGguanNcbi8vIG1vZHVsZSBpZCA9IDM3MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 373 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name App Availability\n * @description\n * This plugin allows you to check if an app is installed on the user's device. It requires an URI Scheme (e.g. twitter://) on iOS or a Package Name (e.g com.twitter.android) on Android.\n *\n * Requires Cordova plugin: cordova-plugin-appavailability. For more info, please see the [AppAvailability plugin docs](https://github.com/ohh2ahh/AppAvailability).\n *\n * @usage\n * ```typescript\n * import { AppAvailability } from 'ionic-native';\n *\n *\n * let app;\n *\n * if (device.platform === 'iOS') {\n *   app = 'twitter://';\n * } else if (device.platform === 'Android') {\n *   app = 'com.twitter.android';\n * }\n *\n * AppAvailability.check(app)\n *   .then(\n *     (yes: string) => console.log(app + ' is available'),\n *     (no: string) => console.log(app + ' is NOT available')\n *   );\n * ```\n */\nvar AppAvailability = (function () {\n    function AppAvailability() {\n    }\n    /**\n     * Checks if an app is available on device\n     * @param {string} app Package name on android, or URI scheme on iOS\n     * @returns {Promise<boolean>}\n     */\n    AppAvailability.check = function (app) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], AppAvailability, \"check\", null);\n    AppAvailability = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'AppAvailability',\n            plugin: 'cordova-plugin-appavailability',\n            pluginRef: 'appAvailability',\n            repo: 'https://github.com/ohh2ahh/AppAvailability',\n            platforms: ['Android', 'iOS']\n        })\n    ], AppAvailability);\n    return AppAvailability;\n}());\nexports.AppAvailability = AppAvailability;\n//# sourceMappingURL=appavailability.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FwcGF2YWlsYWJpbGl0eS5qcz9iZDQzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxrQkFBa0I7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixpQkFBaUI7QUFDakI7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMzczLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBBcHAgQXZhaWxhYmlsaXR5XG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGFsbG93cyB5b3UgdG8gY2hlY2sgaWYgYW4gYXBwIGlzIGluc3RhbGxlZCBvbiB0aGUgdXNlcidzIGRldmljZS4gSXQgcmVxdWlyZXMgYW4gVVJJIFNjaGVtZSAoZS5nLiB0d2l0dGVyOi8vKSBvbiBpT1Mgb3IgYSBQYWNrYWdlIE5hbWUgKGUuZyBjb20udHdpdHRlci5hbmRyb2lkKSBvbiBBbmRyb2lkLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1hcHBhdmFpbGFiaWxpdHkuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtBcHBBdmFpbGFiaWxpdHkgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9vaGgyYWhoL0FwcEF2YWlsYWJpbGl0eSkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcHBBdmFpbGFiaWxpdHkgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBsZXQgYXBwO1xuICpcbiAqIGlmIChkZXZpY2UucGxhdGZvcm0gPT09ICdpT1MnKSB7XG4gKiAgIGFwcCA9ICd0d2l0dGVyOi8vJztcbiAqIH0gZWxzZSBpZiAoZGV2aWNlLnBsYXRmb3JtID09PSAnQW5kcm9pZCcpIHtcbiAqICAgYXBwID0gJ2NvbS50d2l0dGVyLmFuZHJvaWQnO1xuICogfVxuICpcbiAqIEFwcEF2YWlsYWJpbGl0eS5jaGVjayhhcHApXG4gKiAgIC50aGVuKFxuICogICAgICh5ZXM6IHN0cmluZykgPT4gY29uc29sZS5sb2coYXBwICsgJyBpcyBhdmFpbGFibGUnKSxcbiAqICAgICAobm86IHN0cmluZykgPT4gY29uc29sZS5sb2coYXBwICsgJyBpcyBOT1QgYXZhaWxhYmxlJylcbiAqICAgKTtcbiAqIGBgYFxuICovXG52YXIgQXBwQXZhaWxhYmlsaXR5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBBcHBBdmFpbGFiaWxpdHkoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBhbiBhcHAgaXMgYXZhaWxhYmxlIG9uIGRldmljZVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBhcHAgUGFja2FnZSBuYW1lIG9uIGFuZHJvaWQsIG9yIFVSSSBzY2hlbWUgb24gaU9TXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICovXG4gICAgQXBwQXZhaWxhYmlsaXR5LmNoZWNrID0gZnVuY3Rpb24gKGFwcCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEFwcEF2YWlsYWJpbGl0eSwgXCJjaGVja1wiLCBudWxsKTtcbiAgICBBcHBBdmFpbGFiaWxpdHkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdBcHBBdmFpbGFiaWxpdHknLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwYXZhaWxhYmlsaXR5JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2FwcEF2YWlsYWJpbGl0eScsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL29oaDJhaGgvQXBwQXZhaWxhYmlsaXR5JyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG4gICAgICAgIH0pXG4gICAgXSwgQXBwQXZhaWxhYmlsaXR5KTtcbiAgICByZXR1cm4gQXBwQXZhaWxhYmlsaXR5O1xufSgpKTtcbmV4cG9ydHMuQXBwQXZhaWxhYmlsaXR5ID0gQXBwQXZhaWxhYmlsaXR5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwYXZhaWxhYmlsaXR5LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9hcHBhdmFpbGFiaWxpdHkuanNcbi8vIG1vZHVsZSBpZCA9IDM3M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 374 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name App Rate\n * @description\n * The AppRate plugin makes it easy to prompt the user to rate your app, either now, later, or never.\n *\n * Requires Cordova plugin: cordova-plugin-apprate. For more info, please see the [AppRate plugin docs](https://github.com/pushandplay/cordova-plugin-apprate).\n *\n * @usage\n * ```typescript\n * import { AppRate } from 'ionic-native';\n *\n *  AppRate.preferences.storeAppURL = {\n *    ios: '<my_app_id>',\n *    android: 'market://details?id=<package_name>',\n *  };\n *\n * AppRate.promptForRating();\n * ```\n *\n * @advanced\n *\n * Rating dialog preferences\n *\n * | Option                       | Type       | Default | Description                                                                            |\n * |------------------------------|------------|---------|----------------------------------------------------------------------------------------|\n * | useLanguage                  | `String`   | null    | custom BCP 47 language tag                                                             |\n * | displayAppName               | `String`   | ''      | custom application title                                                               |\n * | promptAgainForEachNewVersion | `Boolean`  | true    | show dialog again when application version will be updated                             |\n * | usesUntilPrompt              | `Integer`  | 3       | count of runs of application before dialog will be displayed                           |\n * | openStoreInApp               | `Boolean`  | false   | leave app or no when application page opened in app store (now supported only for iOS) |\n * | useCustomRateDialog          | `Boolean`  | false   | use custom view for rate dialog                                                        |\n * | callbacks.onButtonClicked    | `Function` | null    | call back function. called when user clicked on rate-dialog buttons                    |\n * | callbacks.onRateDialogShow   | `Function` | null    | call back function. called when rate-dialog showing                                    |\n * | storeAppURL.ios              | `String`   | null    | application id in AppStore                                                             |\n * | storeAppURL.android          | `String`   | null    | application URL in GooglePlay                                                          |\n * | storeAppURL.blackberry       | `String`   | null    | application URL in AppWorld                                                            |\n * | storeAppURL.windows8         | `String`   | null    | application URL in WindowsStore                                                        |\n * | customLocale                 | `Object`   | null    | custom locale object                                                                   |\n\n */\nvar AppRate = (function () {\n    function AppRate() {\n    }\n    Object.defineProperty(AppRate, \"preferences\", {\n        /**\n         * Configure various settings for the Rating View.\n         * See table below for options\n         */\n        get: function () { return window.AppRate.preferences; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Prompts the user for rating\n     * @param {boolean} immediately  Show the rating prompt immediately.\n     */\n    AppRate.promptForRating = function (immediately) { };\n    ;\n    __decorate([\n        plugin_1.CordovaProperty\n    ], AppRate, \"preferences\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AppRate, \"promptForRating\", null);\n    AppRate = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'AppRate',\n            plugin: 'cordova-plugin-apprate',\n            pluginRef: 'AppRate',\n            repo: 'https://github.com/pushandplay/cordova-plugin-apprate',\n            platforms: ['Android', 'iOS']\n        })\n    ], AppRate);\n    return AppRate;\n}());\nexports.AppRate = AppRate;\n//# sourceMappingURL=apprate.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FwcHJhdGUuanM/ZjYwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsbUNBQW1DLEVBQUU7QUFDL0Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM3NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgQXBwIFJhdGVcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIEFwcFJhdGUgcGx1Z2luIG1ha2VzIGl0IGVhc3kgdG8gcHJvbXB0IHRoZSB1c2VyIHRvIHJhdGUgeW91ciBhcHAsIGVpdGhlciBub3csIGxhdGVyLCBvciBuZXZlci5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tYXBwcmF0ZS4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0FwcFJhdGUgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9wdXNoYW5kcGxheS9jb3Jkb3ZhLXBsdWdpbi1hcHByYXRlKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEFwcFJhdGUgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqICBBcHBSYXRlLnByZWZlcmVuY2VzLnN0b3JlQXBwVVJMID0ge1xuICogICAgaW9zOiAnPG15X2FwcF9pZD4nLFxuICogICAgYW5kcm9pZDogJ21hcmtldDovL2RldGFpbHM/aWQ9PHBhY2thZ2VfbmFtZT4nLFxuICogIH07XG4gKlxuICogQXBwUmF0ZS5wcm9tcHRGb3JSYXRpbmcoKTtcbiAqIGBgYFxuICpcbiAqIEBhZHZhbmNlZFxuICpcbiAqIFJhdGluZyBkaWFsb2cgcHJlZmVyZW5jZXNcbiAqXG4gKiB8IE9wdGlvbiAgICAgICAgICAgICAgICAgICAgICAgfCBUeXBlICAgICAgIHwgRGVmYXVsdCB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tfC0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCB1c2VMYW5ndWFnZSAgICAgICAgICAgICAgICAgIHwgYFN0cmluZ2AgICB8IG51bGwgICAgfCBjdXN0b20gQkNQIDQ3IGxhbmd1YWdlIHRhZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGRpc3BsYXlBcHBOYW1lICAgICAgICAgICAgICAgfCBgU3RyaW5nYCAgIHwgJycgICAgICB8IGN1c3RvbSBhcHBsaWNhdGlvbiB0aXRsZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgcHJvbXB0QWdhaW5Gb3JFYWNoTmV3VmVyc2lvbiB8IGBCb29sZWFuYCAgfCB0cnVlICAgIHwgc2hvdyBkaWFsb2cgYWdhaW4gd2hlbiBhcHBsaWNhdGlvbiB2ZXJzaW9uIHdpbGwgYmUgdXBkYXRlZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB1c2VzVW50aWxQcm9tcHQgICAgICAgICAgICAgIHwgYEludGVnZXJgICB8IDMgICAgICAgfCBjb3VudCBvZiBydW5zIG9mIGFwcGxpY2F0aW9uIGJlZm9yZSBkaWFsb2cgd2lsbCBiZSBkaXNwbGF5ZWQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IG9wZW5TdG9yZUluQXBwICAgICAgICAgICAgICAgfCBgQm9vbGVhbmAgIHwgZmFsc2UgICB8IGxlYXZlIGFwcCBvciBubyB3aGVuIGFwcGxpY2F0aW9uIHBhZ2Ugb3BlbmVkIGluIGFwcCBzdG9yZSAobm93IHN1cHBvcnRlZCBvbmx5IGZvciBpT1MpIHxcbiAqIHwgdXNlQ3VzdG9tUmF0ZURpYWxvZyAgICAgICAgICB8IGBCb29sZWFuYCAgfCBmYWxzZSAgIHwgdXNlIGN1c3RvbSB2aWV3IGZvciByYXRlIGRpYWxvZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBjYWxsYmFja3Mub25CdXR0b25DbGlja2VkICAgIHwgYEZ1bmN0aW9uYCB8IG51bGwgICAgfCBjYWxsIGJhY2sgZnVuY3Rpb24uIGNhbGxlZCB3aGVuIHVzZXIgY2xpY2tlZCBvbiByYXRlLWRpYWxvZyBidXR0b25zICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGNhbGxiYWNrcy5vblJhdGVEaWFsb2dTaG93ICAgfCBgRnVuY3Rpb25gIHwgbnVsbCAgICB8IGNhbGwgYmFjayBmdW5jdGlvbi4gY2FsbGVkIHdoZW4gcmF0ZS1kaWFsb2cgc2hvd2luZyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgc3RvcmVBcHBVUkwuaW9zICAgICAgICAgICAgICB8IGBTdHJpbmdgICAgfCBudWxsICAgIHwgYXBwbGljYXRpb24gaWQgaW4gQXBwU3RvcmUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBzdG9yZUFwcFVSTC5hbmRyb2lkICAgICAgICAgIHwgYFN0cmluZ2AgICB8IG51bGwgICAgfCBhcHBsaWNhdGlvbiBVUkwgaW4gR29vZ2xlUGxheSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IHN0b3JlQXBwVVJMLmJsYWNrYmVycnkgICAgICAgfCBgU3RyaW5nYCAgIHwgbnVsbCAgICB8IGFwcGxpY2F0aW9uIFVSTCBpbiBBcHBXb3JsZCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgc3RvcmVBcHBVUkwud2luZG93czggICAgICAgICB8IGBTdHJpbmdgICAgfCBudWxsICAgIHwgYXBwbGljYXRpb24gVVJMIGluIFdpbmRvd3NTdG9yZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBjdXN0b21Mb2NhbGUgICAgICAgICAgICAgICAgIHwgYE9iamVjdGAgICB8IG51bGwgICAgfCBjdXN0b20gbG9jYWxlIG9iamVjdCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG5cbiAqL1xudmFyIEFwcFJhdGUgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcFJhdGUoKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShBcHBSYXRlLCBcInByZWZlcmVuY2VzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbmZpZ3VyZSB2YXJpb3VzIHNldHRpbmdzIGZvciB0aGUgUmF0aW5nIFZpZXcuXG4gICAgICAgICAqIFNlZSB0YWJsZSBiZWxvdyBmb3Igb3B0aW9uc1xuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuQXBwUmF0ZS5wcmVmZXJlbmNlczsgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogUHJvbXB0cyB0aGUgdXNlciBmb3IgcmF0aW5nXG4gICAgICogQHBhcmFtIHtib29sZWFufSBpbW1lZGlhdGVseSAgU2hvdyB0aGUgcmF0aW5nIHByb21wdCBpbW1lZGlhdGVseS5cbiAgICAgKi9cbiAgICBBcHBSYXRlLnByb21wdEZvclJhdGluZyA9IGZ1bmN0aW9uIChpbW1lZGlhdGVseSkgeyB9O1xuICAgIDtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YVByb3BlcnR5XG4gICAgXSwgQXBwUmF0ZSwgXCJwcmVmZXJlbmNlc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQXBwUmF0ZSwgXCJwcm9tcHRGb3JSYXRpbmdcIiwgbnVsbCk7XG4gICAgQXBwUmF0ZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0FwcFJhdGUnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdBcHBSYXRlJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcHVzaGFuZHBsYXkvY29yZG92YS1wbHVnaW4tYXBwcmF0ZScsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxuICAgICAgICB9KVxuICAgIF0sIEFwcFJhdGUpO1xuICAgIHJldHVybiBBcHBSYXRlO1xufSgpKTtcbmV4cG9ydHMuQXBwUmF0ZSA9IEFwcFJhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1hcHByYXRlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9hcHByYXRlLmpzXG4vLyBtb2R1bGUgaWQgPSAzNzRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 375 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name App Version\n * @description\n * Reads the version of your app from the target build settings.\n *\n * Requires Cordova plugin: `cordova-plugin-app-version`. For more info, please see the [Cordova App Version docs](https://github.com/whiteoctober/cordova-plugin-app-version).\n *\n * @usage\n * ```typescript\n * import { AppVersion } from 'ionic-native';\n *\n *\n *  AppVersion.getAppName();\n *  AppVersion.getPackageName();\n *  AppVersion.getVersionCode();\n *  AppVersion.getVersionNumber();\n * ```\n */\nvar AppVersion = (function () {\n    function AppVersion() {\n    }\n    /**\n     * Returns the name of the app\n     * @returns {Promise}\n     */\n    AppVersion.getAppName = function () { return; };\n    /**\n     * Returns the package name of the app\n     * @returns {Promise}\n     */\n    AppVersion.getPackageName = function () { return; };\n    /**\n     * Returns the build identifier of the app\n     * @returns {Promise}\n     */\n    AppVersion.getVersionCode = function () { return; };\n    /**\n     * Returns the version of the app\n     * @returns {Promise}\n     */\n    AppVersion.getVersionNumber = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], AppVersion, \"getAppName\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AppVersion, \"getPackageName\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AppVersion, \"getVersionCode\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], AppVersion, \"getVersionNumber\", null);\n    AppVersion = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'AppVersion',\n            plugin: 'cordova-plugin-app-version',\n            pluginRef: 'cordova.getAppVersion',\n            repo: 'https://github.com/whiteoctober/cordova-plugin-app-version',\n            platforms: ['Android', 'iOS']\n        })\n    ], AppVersion);\n    return AppVersion;\n}());\nexports.AppVersion = AppVersion;\n//# sourceMappingURL=appversion.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FwcHZlcnNpb24uanM/MWNmOCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw2Q0FBNkMsUUFBUTtBQUNyRDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsNkNBQTZDLFFBQVE7QUFDckQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzNzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEFwcCBWZXJzaW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlYWRzIHRoZSB2ZXJzaW9uIG9mIHlvdXIgYXBwIGZyb20gdGhlIHRhcmdldCBidWlsZCBzZXR0aW5ncy5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWFwcC12ZXJzaW9uYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NvcmRvdmEgQXBwIFZlcnNpb24gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3doaXRlb2N0b2Jlci9jb3Jkb3ZhLXBsdWdpbi1hcHAtdmVyc2lvbikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBBcHBWZXJzaW9uIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogIEFwcFZlcnNpb24uZ2V0QXBwTmFtZSgpO1xuICogIEFwcFZlcnNpb24uZ2V0UGFja2FnZU5hbWUoKTtcbiAqICBBcHBWZXJzaW9uLmdldFZlcnNpb25Db2RlKCk7XG4gKiAgQXBwVmVyc2lvbi5nZXRWZXJzaW9uTnVtYmVyKCk7XG4gKiBgYGBcbiAqL1xudmFyIEFwcFZlcnNpb24gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEFwcFZlcnNpb24oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5hbWUgb2YgdGhlIGFwcFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIEFwcFZlcnNpb24uZ2V0QXBwTmFtZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHBhY2thZ2UgbmFtZSBvZiB0aGUgYXBwXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgQXBwVmVyc2lvbi5nZXRQYWNrYWdlTmFtZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGJ1aWxkIGlkZW50aWZpZXIgb2YgdGhlIGFwcFxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIEFwcFZlcnNpb24uZ2V0VmVyc2lvbkNvZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSB2ZXJzaW9uIG9mIHRoZSBhcHBcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBBcHBWZXJzaW9uLmdldFZlcnNpb25OdW1iZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQXBwVmVyc2lvbiwgXCJnZXRBcHBOYW1lXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBBcHBWZXJzaW9uLCBcImdldFBhY2thZ2VOYW1lXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBBcHBWZXJzaW9uLCBcImdldFZlcnNpb25Db2RlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBBcHBWZXJzaW9uLCBcImdldFZlcnNpb25OdW1iZXJcIiwgbnVsbCk7XG4gICAgQXBwVmVyc2lvbiA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0FwcFZlcnNpb24nLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYXBwLXZlcnNpb24nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnY29yZG92YS5nZXRBcHBWZXJzaW9uJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vd2hpdGVvY3RvYmVyL2NvcmRvdmEtcGx1Z2luLWFwcC12ZXJzaW9uJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG4gICAgICAgIH0pXG4gICAgXSwgQXBwVmVyc2lvbik7XG4gICAgcmV0dXJuIEFwcFZlcnNpb247XG59KCkpO1xuZXhwb3J0cy5BcHBWZXJzaW9uID0gQXBwVmVyc2lvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFwcHZlcnNpb24uanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2FwcHZlcnNpb24uanNcbi8vIG1vZHVsZSBpZCA9IDM3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 376 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Badge\n * @description\n * The essential purpose of badge numbers is to enable an application to inform its users that it has something for them — for example, unread messages — when the application isn’t running in the foreground.\n *\n * Requires Cordova plugin: cordova-plugin-badge. For more info, please see the [Badge plugin docs](https://github.com/katzer/cordova-plugin-badge).\n *\n * @usage\n * ```typescript\n * import { Badge } from 'ionic-native';\n *\n *\n * Badge.set(10);\n * Badge.increase();\n * Badge.clear();\n * ```\n */\nvar Badge = (function () {\n    function Badge() {\n    }\n    /**\n     * Clear the badge of the app icon.\n     */\n    Badge.clear = function () { return; };\n    /**\n     * Set the badge of the app icon.\n     * @param {number} badgeNumber  The new badge number.\n     * @returns {Promise}\n     */\n    Badge.set = function (badgeNumber) { return; };\n    /**\n     * Get the badge of the app icon.\n     * @returns {Promise}\n     */\n    Badge.get = function () { return; };\n    /**\n     * Increase the badge number.\n     * @param {number} increaseBy  Count to add to the current badge number\n     * @returns {Promise}\n     */\n    Badge.increase = function (increaseBy) { return; };\n    /**\n     * Decrease the badge number.\n     * @param {number} decreaseBy  Count to subtract from the current badge number\n     * @returns {Promise}\n     */\n    Badge.decrease = function (decreaseBy) { return; };\n    /**\n     * Determine if the app has permission to show badges.\n     */\n    Badge.hasPermission = function () { return; };\n    /**\n     * Register permission to set badge notifications\n     * @returns {Promise}\n     */\n    Badge.registerPermission = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"clear\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"set\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"get\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"increase\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"decrease\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"hasPermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Badge, \"registerPermission\", null);\n    Badge = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Badge',\n            plugin: 'cordova-plugin-badge',\n            pluginRef: 'cordova.plugins.notification.badge',\n            repo: 'https://github.com/katzer/cordova-plugin-badge',\n            platforms: ['Android', 'iOS', 'Browser', 'Windows', 'Amazon FireOS', 'Windows Phone 8']\n        })\n    ], Badge);\n    return Badge;\n}());\nexports.Badge = Badge;\n//# sourceMappingURL=badge.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2JhZGdlLmpzP2Y0MWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsUUFBUTtBQUN2QztBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQjtBQUNqQjtBQUNBLHdDQUF3QyxRQUFRO0FBQ2hEO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSw2QkFBNkIsUUFBUTtBQUNyQztBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQjtBQUNqQjtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsaUJBQWlCO0FBQ2pCO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFFBQVE7QUFDL0M7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzNzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEJhZGdlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBlc3NlbnRpYWwgcHVycG9zZSBvZiBiYWRnZSBudW1iZXJzIGlzIHRvIGVuYWJsZSBhbiBhcHBsaWNhdGlvbiB0byBpbmZvcm0gaXRzIHVzZXJzIHRoYXQgaXQgaGFzIHNvbWV0aGluZyBmb3IgdGhlbSDigJQgZm9yIGV4YW1wbGUsIHVucmVhZCBtZXNzYWdlcyDigJQgd2hlbiB0aGUgYXBwbGljYXRpb24gaXNu4oCZdCBydW5uaW5nIGluIHRoZSBmb3JlZ3JvdW5kLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBjb3Jkb3ZhLXBsdWdpbi1iYWRnZS4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0JhZGdlIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20va2F0emVyL2NvcmRvdmEtcGx1Z2luLWJhZGdlKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhZGdlIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogQmFkZ2Uuc2V0KDEwKTtcbiAqIEJhZGdlLmluY3JlYXNlKCk7XG4gKiBCYWRnZS5jbGVhcigpO1xuICogYGBgXG4gKi9cbnZhciBCYWRnZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFkZ2UoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFyIHRoZSBiYWRnZSBvZiB0aGUgYXBwIGljb24uXG4gICAgICovXG4gICAgQmFkZ2UuY2xlYXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTZXQgdGhlIGJhZGdlIG9mIHRoZSBhcHAgaWNvbi5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gYmFkZ2VOdW1iZXIgIFRoZSBuZXcgYmFkZ2UgbnVtYmVyLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIEJhZGdlLnNldCA9IGZ1bmN0aW9uIChiYWRnZU51bWJlcikgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBiYWRnZSBvZiB0aGUgYXBwIGljb24uXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgQmFkZ2UuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogSW5jcmVhc2UgdGhlIGJhZGdlIG51bWJlci5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gaW5jcmVhc2VCeSAgQ291bnQgdG8gYWRkIHRvIHRoZSBjdXJyZW50IGJhZGdlIG51bWJlclxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIEJhZGdlLmluY3JlYXNlID0gZnVuY3Rpb24gKGluY3JlYXNlQnkpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIERlY3JlYXNlIHRoZSBiYWRnZSBudW1iZXIuXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IGRlY3JlYXNlQnkgIENvdW50IHRvIHN1YnRyYWN0IGZyb20gdGhlIGN1cnJlbnQgYmFkZ2UgbnVtYmVyXG4gICAgICogQHJldHVybnMge1Byb21pc2V9XG4gICAgICovXG4gICAgQmFkZ2UuZGVjcmVhc2UgPSBmdW5jdGlvbiAoZGVjcmVhc2VCeSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogRGV0ZXJtaW5lIGlmIHRoZSBhcHAgaGFzIHBlcm1pc3Npb24gdG8gc2hvdyBiYWRnZXMuXG4gICAgICovXG4gICAgQmFkZ2UuaGFzUGVybWlzc2lvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJlZ2lzdGVyIHBlcm1pc3Npb24gdG8gc2V0IGJhZGdlIG5vdGlmaWNhdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBCYWRnZS5yZWdpc3RlclBlcm1pc3Npb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQmFkZ2UsIFwiY2xlYXJcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEJhZGdlLCBcInNldFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQmFkZ2UsIFwiZ2V0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBCYWRnZSwgXCJpbmNyZWFzZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQmFkZ2UsIFwiZGVjcmVhc2VcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEJhZGdlLCBcImhhc1Blcm1pc3Npb25cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEJhZGdlLCBcInJlZ2lzdGVyUGVybWlzc2lvblwiLCBudWxsKTtcbiAgICBCYWRnZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0JhZGdlJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJhZGdlJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5ub3RpZmljYXRpb24uYmFkZ2UnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rYXR6ZXIvY29yZG92YS1wbHVnaW4tYmFkZ2UnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ0Jyb3dzZXInLCAnV2luZG93cycsICdBbWF6b24gRmlyZU9TJywgJ1dpbmRvd3MgUGhvbmUgOCddXG4gICAgICAgIH0pXG4gICAgXSwgQmFkZ2UpO1xuICAgIHJldHVybiBCYWRnZTtcbn0oKSk7XG5leHBvcnRzLkJhZGdlID0gQmFkZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYWRnZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvYmFkZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDM3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 377 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name BackgroundGeolocation\n * @description\n * This plugin provides foreground and background geolocation with battery-saving \"circular region monitoring\" and \"stop detection\". For\n * more detail, please see https://github.com/mauron85/cordova-plugin-background-geolocation\n *\n * @usage\n *\n * ```typescript\n * import { BackgroundGeolocation } from 'ionic-native';\n *\n *\n * // When device is ready :\n * platform.ready().then(() => {\n *     // IMPORTANT: BackgroundGeolocation must be called within app.ts and or before Geolocation. Otherwise the platform will not ask you for background tracking permission.\n *\n *     // BackgroundGeolocation is highly configurable. See platform specific configuration options\n *     let config = {\n *             desiredAccuracy: 10,\n *             stationaryRadius: 20,\n *             distanceFilter: 30,\n *             debug: true, //  enable this hear sounds for background-geolocation life-cycle.\n *             stopOnTerminate: false, // enable this to clear background location settings when the app terminates\n *     };\n *\n *     BackgroundGeolocation.configure((location) => {\n         console.log('[js] BackgroundGeolocation callback:  ' + location.latitude + ',' + location.longitude);\n\n          // IMPORTANT:  You must execute the finish method here to inform the native plugin that you're finished,\n          // and the background-task may be completed.  You must do this regardless if your HTTP request is successful or not.\n          // IF YOU DON'T, ios will CRASH YOUR APP for spending too much time in the background.\n          BackgroundGeolocation.finish(); // FOR IOS ONLY\n\n *      }, (error) => {\n *        console.log('BackgroundGeolocation error');\n *      }, config);\n *\n *     // Turn ON the background-geolocation system.  The user will be tracked whenever they suspend the app.\n *     BackgroundGeolocation.start();\n * })\n *\n * // If you wish to turn OFF background-tracking, call the #stop method.\n * BackgroundGeolocation.stop();\n *\n * ```\n * @interfaces\n * Location\n * Config\n */\nvar BackgroundGeolocation = (function () {\n    function BackgroundGeolocation() {\n    }\n    /**\n     * Configure the plugin.\n     *\n     * @param {Function} callback callback will be called when background location is determined.\n     * @param {Function} errorCallback callback to be executed every time a geolocation error occurs.\n     * @param {Config} options An object of type Config\n     * @return Location object, which tries to mimic w3c Coordinates interface.\n     * See http://dev.w3.org/geo/api/spec-source.html#coordinates_interface\n     * Callback to be executed every time a geolocation is recorded in the background.\n     */\n    BackgroundGeolocation.configure = function (callback, errorCallback, options) { return; };\n    /**\n     * Turn ON the background-geolocation system.\n     * The user will be tracked whenever they suspend the app.\n     */\n    BackgroundGeolocation.start = function () { return; };\n    /**\n     * Turn OFF background-tracking\n     */\n    BackgroundGeolocation.stop = function () { return; };\n    /**\n     * Inform the native plugin that you're finished, the background-task may be completed\n     * NOTE: IOS, WP only\n     */\n    BackgroundGeolocation.finish = function () { };\n    /**\n     * Force the plugin to enter \"moving\" or \"stationary\" state\n     * NOTE: IOS, WP only\n     */\n    BackgroundGeolocation.changePace = function (isMoving) { };\n    /**\n     * Setup configuration\n     */\n    BackgroundGeolocation.setConfig = function (options) { return; };\n    /**\n     * Returns current stationaryLocation if available. null if not\n     * NOTE: IOS, WP only\n     */\n    BackgroundGeolocation.getStationaryLocation = function () { return; };\n    /**\n     * Add a stationary-region listener. Whenever the devices enters \"stationary-mode\",\n     * your #success callback will be executed with #location param containing #radius of region\n     * NOTE: IOS, WP only\n     */\n    BackgroundGeolocation.onStationary = function () { return; };\n    /**\n     * Check if location is enabled on the device\n     * @returns {Promise<number>} Returns a promise with int argument that takes values 0, 1 (true).\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.isLocationEnabled = function () { return; };\n    /**\n     * Display app settings to change permissions\n     */\n    BackgroundGeolocation.showAppSettings = function () { };\n    /**\n     * Display device location settings\n     */\n    BackgroundGeolocation.showLocationSettings = function () { };\n    /**\n     * Method can be used to detect user changes in location services settings.\n     * If user enable or disable location services then success callback will be executed.\n     * In case or error (SettingNotFoundException) fail callback will be executed.\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.watchLocationMode = function () { return; };\n    /**\n     * Stop watching for location mode changes.\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.stopWatchingLocationMode = function () { };\n    /**\n     * Method will return all stored locations.\n     * Locations are stored when:\n     *  - config.stopOnTerminate is false and main activity was killed\n     *    by the system\n     *  or\n     *  - option.debug is true\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.getLocations = function () { return; };\n    /**\n  \n     * Method will return locations, which has not been yet posted to server. NOTE: Locations does contain locationId.\n  \n     */\n    BackgroundGeolocation.getValidLocations = function () { return; };\n    /**\n     * Delete stored location by given locationId.\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.deleteLocation = function (locationId) { return; };\n    /**\n     * Delete all stored locations.\n     * NOTE: ANDROID only\n     */\n    BackgroundGeolocation.deleteAllLocations = function () { return; };\n    /**\n     * Normally plugin will handle switching between BACKGROUND and FOREGROUND mode itself.\n     * Calling switchMode you can override plugin behavior and force plugin to switch into other mode.\n     *\n     * In FOREGROUND mode plugin uses iOS local manager to receive locations and behavior is affected by option.desiredAccuracy and option.distanceFilter.\n     * In BACKGROUND mode plugin uses significant changes and region monitoring to receive locations and uses option.stationaryRadius only.\n  \n     *\n     * BackgroundGeolocation.Mode.FOREGROUND\n     * BackgroundGeolocation.Mode.BACKGROUND\n  \n     *\n     * NOTE: iOS only\n     *\n     * @param {number} See above.\n  \n     */\n    BackgroundGeolocation.switchMode = function (modeId) { return; };\n    /**\n  \n     * Return all logged events. Useful for plugin debugging. Parameter limit limits number of returned entries.\n  \n     * @see https://github.com/mauron85/cordova-plugin-background-geolocation/tree/v2.2.1#debugging for more information.\n  \n     *\n     * @param {number} Limits the number of entries\n  \n     */\n    BackgroundGeolocation.getLogEntries = function (limit) { return; };\n    /**\n  \n     * Set location service provider @see https://github.com/mauron85/cordova-plugin-background-geolocation/wiki/Android-providers\n  \n     *\n     * Possible values:\n     *  ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n  \n     *  ANDROID_ACTIVITY_PROVIDER: 1\n  \n     *\n     * @enum {number}\n  \n     */\n    BackgroundGeolocation.LocationProvider = {\n        ANDROID_DISTANCE_FILTER_PROVIDER: 0,\n        ANDROID_ACTIVITY_PROVIDER: 1\n    };\n    /**\n     * Desired accuracy in meters. Possible values [0, 10, 100, 1000].\n  \n     * The lower the number, the more power devoted to GeoLocation resulting in higher accuracy readings.\n  \n     * 1000 results in lowest power drain and least accurate readings.\n  \n     *\n     * Possible values:\n     *  HIGH: 0\n  \n     *  MEDIUM: 10\n  \n     *  LOW: 100\n  \n     *  PASSIVE: 1000\n     *\n     * enum {number}\n  \n     */\n    BackgroundGeolocation.Accuracy = {\n        HIGH: 0,\n        MEDIUM: 10,\n        LOW: 100,\n        PASSIVE: 1000\n    };\n    /**\n  \n     * Used in the switchMode function\n  \n     *\n     * Possible values:\n     *  BACKGROUND: 0\n     *  FOREGROUND: 1\n  \n     *\n     * @enum {number}\n  \n     */\n    BackgroundGeolocation.Mode = {\n        BACKGROUND: 0,\n        FOREGROUND: 1\n    };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], BackgroundGeolocation, \"configure\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"start\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"stop\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"finish\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"changePace\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], BackgroundGeolocation, \"setConfig\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"getStationaryLocation\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"onStationary\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"isLocationEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], BackgroundGeolocation, \"showAppSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], BackgroundGeolocation, \"showLocationSettings\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"watchLocationMode\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"stopWatchingLocationMode\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"getLocations\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"getValidLocations\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"deleteLocation\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"deleteAllLocations\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"switchMode\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundGeolocation, \"getLogEntries\", null);\n    BackgroundGeolocation = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BackgroundGeolocation',\n            plugin: 'cordova-plugin-mauron85-background-geolocation',\n            pluginRef: 'backgroundGeolocation',\n            repo: 'https://github.com/mauron85/cordova-plugin-background-geolocation',\n            platforms: ['iOS', 'Android', 'Windows Phone 8']\n        })\n    ], BackgroundGeolocation);\n    return BackgroundGeolocation;\n}());\nexports.BackgroundGeolocation = BackgroundGeolocation;\n//# sourceMappingURL=background-geolocation.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 378 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n* @name Background Mode\n* @description\n* Cordova plugin to prevent the app from going to sleep while in background.\n*  Requires Cordova plugin: cordova-plugin-background-mode. For more info about plugin, vist: https://github.com/katzer/cordova-plugin-background-mode#android-customization\n*@usage\n* ```typescript\n* import { BackgroundMode } from 'ionic-native';\n*\n* BackgroundMode.enable();\n* ```\n*\n* @advanced\n*\n* Configuration options\n*\n* | Property | Type      | Description                                                                  |\n* |----------|-----------|------------------------------------------------------------------------------|\n* | title    | `string`  | Title of the background task. Optional                                       |\n* | ticker   | `string`  | The text that scrolls itself on the statusbar. Optional                      |\n* | text     | `string`  | Description of the background task. Optional                                 |\n* | silent   | `boolean` | If the plugin will display a notification or not. Default is false. Optional |\n* | resume   | `boolean` | Bring the app into the foreground if the notification is tapped. Optional    |\n*\n*/\nvar BackgroundMode = (function () {\n    function BackgroundMode() {\n    }\n    /**\n    * Enable the background mode.\n    * Once called, prevents the app from being paused while in background.\n    */\n    BackgroundMode.enable = function () { };\n    /**\n    * Disable the background mode.\n    * Once the background mode has been disabled, the app will be paused when in background.\n    */\n    BackgroundMode.disable = function () { };\n    /**\n    * Checks if background mode is enabled or not.\n    * @returns {boolean} returns a true of false if the background mode is enabled.\n    */\n    BackgroundMode.isEnabled = function () { return; };\n    /**\n    * Can be used to get the information if the background mode is active.\n    * @returns {boolean} returns tru or flase if the background mode is active.\n    */\n    BackgroundMode.isActive = function () { return; };\n    /**\n    * Override the default title, ticker and text.\n    * Available only for Android platform.\n    * @param {Configure} options List of option to configure. See table below\n    */\n    BackgroundMode.setDefaults = function (options) { };\n    /**\n    * Modify the displayed information.\n    * Available only for Android platform.\n    * @param {Configure} options Any options you want to update. See table below.\n    */\n    BackgroundMode.configure = function (options) { };\n    /**\n    * Called when background mode is activated.\n    */\n    BackgroundMode.onactivate = function () { return; };\n    ;\n    /**\n    * Called when background mode is deactivated.\n    */\n    BackgroundMode.ondeactivate = function () { return; };\n    ;\n    /**\n    * Called when background mode fails\n    */\n    BackgroundMode.onfailure = function () { return; };\n    ;\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], BackgroundMode, \"enable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundMode, \"disable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundMode, \"isEnabled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BackgroundMode, \"isActive\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android']\n        })\n    ], BackgroundMode, \"setDefaults\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android']\n        })\n    ], BackgroundMode, \"configure\", null);\n    __decorate([\n        plugin_1.CordovaFunctionOverride()\n    ], BackgroundMode, \"onactivate\", null);\n    __decorate([\n        plugin_1.CordovaFunctionOverride()\n    ], BackgroundMode, \"ondeactivate\", null);\n    __decorate([\n        plugin_1.CordovaFunctionOverride()\n    ], BackgroundMode, \"onfailure\", null);\n    BackgroundMode = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BackgroundMode',\n            plugin: 'cordova-plugin-background-mode',\n            pluginRef: 'cordova.plugins.backgroundMode',\n            repo: 'https://github.com/katzer/cordova-plugin-background-mode',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], BackgroundMode);\n    return BackgroundMode;\n}());\nexports.BackgroundMode = BackgroundMode;\n//# sourceMappingURL=backgroundmode.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 379 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Barcode Scanner\n * @description\n * The Barcode Scanner Plugin opens a camera view and automatically scans a barcode, returning the data back to you.\n *\n * Requires Cordova plugin: `phonegap-plugin-barcodescanner`. For more info, please see the [BarcodeScanner plugin docs](https://github.com/phonegap/phonegap-plugin-barcodescanner).\n *\n * @usage\n * ```typescript\n * import { BarcodeScanner } from 'ionic-native';\n *\n *\n * BarcodeScanner.scan().then((barcodeData) => {\n *  // Success! Barcode data is here\n * }, (err) => {\n * \t// An error occurred\n * });\n * ```\n */\nvar BarcodeScanner = (function () {\n    function BarcodeScanner() {\n    }\n    /**\n     * Open the barcode scanner.\n     * @param options {Object} Optional options to pass to the scanner\n     * @return Returns a Promise that resolves with scanner data, or rejects with an error.\n     */\n    BarcodeScanner.scan = function (options) { return; };\n    /**\n     * Encodes data into a barcode.\n     * NOTE: not well supported on Android\n     * @param type {string} Type of encoding\n     * @param data {any} Data to encode\n     */\n    BarcodeScanner.encode = function (type, data) { return; };\n    /**\n     * @private\n     */\n    BarcodeScanner.Encode = {\n        TEXT_TYPE: 'TEXT_TYPE',\n        EMAIL_TYPE: 'EMAIL_TYPE',\n        PHONE_TYPE: 'PHONE_TYPE',\n        SMS_TYPE: 'SMS_TYPE'\n    };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], BarcodeScanner, \"scan\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BarcodeScanner, \"encode\", null);\n    BarcodeScanner = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BarcodeScanner',\n            plugin: 'phonegap-plugin-barcodescanner',\n            pluginRef: 'cordova.plugins.barcodeScanner',\n            repo: 'https://github.com/phonegap/phonegap-plugin-barcodescanner',\n            platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows 10', 'Windows 8', 'BlackBerry 10', 'Browser']\n        })\n    ], BarcodeScanner);\n    return BarcodeScanner;\n}());\nexports.BarcodeScanner = BarcodeScanner;\n//# sourceMappingURL=barcodescanner.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2JhcmNvZGVzY2FubmVyLmpzP2FlYTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCO0FBQ0E7QUFDQSw4Q0FBOEMsUUFBUTtBQUN0RDtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsT0FBTztBQUMzQixvQkFBb0IsSUFBSTtBQUN4QjtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzNzkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEJhcmNvZGUgU2Nhbm5lclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQmFyY29kZSBTY2FubmVyIFBsdWdpbiBvcGVucyBhIGNhbWVyYSB2aWV3IGFuZCBhdXRvbWF0aWNhbGx5IHNjYW5zIGEgYmFyY29kZSwgcmV0dXJuaW5nIHRoZSBkYXRhIGJhY2sgdG8geW91LlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgcGhvbmVnYXAtcGx1Z2luLWJhcmNvZGVzY2FubmVyYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0JhcmNvZGVTY2FubmVyIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vcGhvbmVnYXAvcGhvbmVnYXAtcGx1Z2luLWJhcmNvZGVzY2FubmVyKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhcmNvZGVTY2FubmVyIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogQmFyY29kZVNjYW5uZXIuc2NhbigpLnRoZW4oKGJhcmNvZGVEYXRhKSA9PiB7XG4gKiAgLy8gU3VjY2VzcyEgQmFyY29kZSBkYXRhIGlzIGhlcmVcbiAqIH0sIChlcnIpID0+IHtcbiAqIFx0Ly8gQW4gZXJyb3Igb2NjdXJyZWRcbiAqIH0pO1xuICogYGBgXG4gKi9cbnZhciBCYXJjb2RlU2Nhbm5lciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmFyY29kZVNjYW5uZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIGJhcmNvZGUgc2Nhbm5lci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7T2JqZWN0fSBPcHRpb25hbCBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHNjYW5uZXJcbiAgICAgKiBAcmV0dXJuIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBzY2FubmVyIGRhdGEsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBCYXJjb2RlU2Nhbm5lci5zY2FuID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEVuY29kZXMgZGF0YSBpbnRvIGEgYmFyY29kZS5cbiAgICAgKiBOT1RFOiBub3Qgd2VsbCBzdXBwb3J0ZWQgb24gQW5kcm9pZFxuICAgICAqIEBwYXJhbSB0eXBlIHtzdHJpbmd9IFR5cGUgb2YgZW5jb2RpbmdcbiAgICAgKiBAcGFyYW0gZGF0YSB7YW55fSBEYXRhIHRvIGVuY29kZVxuICAgICAqL1xuICAgIEJhcmNvZGVTY2FubmVyLmVuY29kZSA9IGZ1bmN0aW9uICh0eXBlLCBkYXRhKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIEJhcmNvZGVTY2FubmVyLkVuY29kZSA9IHtcbiAgICAgICAgVEVYVF9UWVBFOiAnVEVYVF9UWVBFJyxcbiAgICAgICAgRU1BSUxfVFlQRTogJ0VNQUlMX1RZUEUnLFxuICAgICAgICBQSE9ORV9UWVBFOiAnUEhPTkVfVFlQRScsXG4gICAgICAgIFNNU19UWVBFOiAnU01TX1RZUEUnXG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBCYXJjb2RlU2Nhbm5lciwgXCJzY2FuXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBCYXJjb2RlU2Nhbm5lciwgXCJlbmNvZGVcIiwgbnVsbCk7XG4gICAgQmFyY29kZVNjYW5uZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdCYXJjb2RlU2Nhbm5lcicsXG4gICAgICAgICAgICBwbHVnaW46ICdwaG9uZWdhcC1wbHVnaW4tYmFyY29kZXNjYW5uZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmJhcmNvZGVTY2FubmVyJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGhvbmVnYXAvcGhvbmVnYXAtcGx1Z2luLWJhcmNvZGVzY2FubmVyJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnLCAnV2luZG93cyAxMCcsICdXaW5kb3dzIDgnLCAnQmxhY2tCZXJyeSAxMCcsICdCcm93c2VyJ11cbiAgICAgICAgfSlcbiAgICBdLCBCYXJjb2RlU2Nhbm5lcik7XG4gICAgcmV0dXJuIEJhcmNvZGVTY2FubmVyO1xufSgpKTtcbmV4cG9ydHMuQmFyY29kZVNjYW5uZXIgPSBCYXJjb2RlU2Nhbm5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJhcmNvZGVzY2FubmVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9iYXJjb2Rlc2Nhbm5lci5qc1xuLy8gbW9kdWxlIGlkID0gMzc5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 380 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Base64 To Gallery\n * @description This plugin allows you to save base64 data as a png image into the device\n * @usage\n * ```typescript\n * import { Base64ToGallery } from 'ionic-native';\n *\n *\n * Base64ToGallery.base64ToGallery(base64Data, 'img_').then(\n *   res => console.log('Saved image to gallery ', res),\n *   err => console.log('Error saving image to gallery ', err)\n * );\n * ```\n */\nvar Base64ToGallery = (function () {\n    function Base64ToGallery() {\n    }\n    /**\n     * Converts a base64 string to an image file in the device gallery\n     * @param {string} data The actual base64 string that you want to save\n     * @param {any} options (optional) An object with properties: prefix: string, mediaScanner: boolean. Prefix will be prepended to the filename. If true, mediaScanner runs Media Scanner on Android and saves to Camera Roll on iOS; if false, saves to Library folder on iOS.\n     * @returns {Promise} returns a promise that resolves when the image is saved.\n     */\n    Base64ToGallery.base64ToGallery = function (data, options) {\n        return;\n    };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 2,\n            errorIndex: 3\n        })\n    ], Base64ToGallery, \"base64ToGallery\", null);\n    Base64ToGallery = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Base64ToGallery',\n            plugin: 'cordova-base64-to-gallery',\n            pluginRef: 'cordova',\n            repo: 'https://github.com/Nexxa/cordova-base64-to-gallery',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], Base64ToGallery);\n    return Base64ToGallery;\n}());\nexports.Base64ToGallery = Base64ToGallery;\n//# sourceMappingURL=base64togallery.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2Jhc2U2NHRvZ2FsbGVyeS5qcz9jMWZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsa0JBQWtCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsSUFBSSxvTkFBb047QUFDdk8saUJBQWlCLFFBQVE7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzODAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEJhc2U2NCBUbyBHYWxsZXJ5XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzYXZlIGJhc2U2NCBkYXRhIGFzIGEgcG5nIGltYWdlIGludG8gdGhlIGRldmljZVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCYXNlNjRUb0dhbGxlcnkgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBCYXNlNjRUb0dhbGxlcnkuYmFzZTY0VG9HYWxsZXJ5KGJhc2U2NERhdGEsICdpbWdfJykudGhlbihcbiAqICAgcmVzID0+IGNvbnNvbGUubG9nKCdTYXZlZCBpbWFnZSB0byBnYWxsZXJ5ICcsIHJlcyksXG4gKiAgIGVyciA9PiBjb25zb2xlLmxvZygnRXJyb3Igc2F2aW5nIGltYWdlIHRvIGdhbGxlcnkgJywgZXJyKVxuICogKTtcbiAqIGBgYFxuICovXG52YXIgQmFzZTY0VG9HYWxsZXJ5ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCYXNlNjRUb0dhbGxlcnkoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGEgYmFzZTY0IHN0cmluZyB0byBhbiBpbWFnZSBmaWxlIGluIHRoZSBkZXZpY2UgZ2FsbGVyeVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBkYXRhIFRoZSBhY3R1YWwgYmFzZTY0IHN0cmluZyB0aGF0IHlvdSB3YW50IHRvIHNhdmVcbiAgICAgKiBAcGFyYW0ge2FueX0gb3B0aW9ucyAob3B0aW9uYWwpIEFuIG9iamVjdCB3aXRoIHByb3BlcnRpZXM6IHByZWZpeDogc3RyaW5nLCBtZWRpYVNjYW5uZXI6IGJvb2xlYW4uIFByZWZpeCB3aWxsIGJlIHByZXBlbmRlZCB0byB0aGUgZmlsZW5hbWUuIElmIHRydWUsIG1lZGlhU2Nhbm5lciBydW5zIE1lZGlhIFNjYW5uZXIgb24gQW5kcm9pZCBhbmQgc2F2ZXMgdG8gQ2FtZXJhIFJvbGwgb24gaU9TOyBpZiBmYWxzZSwgc2F2ZXMgdG8gTGlicmFyeSBmb2xkZXIgb24gaU9TLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGltYWdlIGlzIHNhdmVkLlxuICAgICAqL1xuICAgIEJhc2U2NFRvR2FsbGVyeS5iYXNlNjRUb0dhbGxlcnkgPSBmdW5jdGlvbiAoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzdWNjZXNzSW5kZXg6IDIsXG4gICAgICAgICAgICBlcnJvckluZGV4OiAzXG4gICAgICAgIH0pXG4gICAgXSwgQmFzZTY0VG9HYWxsZXJ5LCBcImJhc2U2NFRvR2FsbGVyeVwiLCBudWxsKTtcbiAgICBCYXNlNjRUb0dhbGxlcnkgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdCYXNlNjRUb0dhbGxlcnknLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1iYXNlNjQtdG8tZ2FsbGVyeScsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjb3Jkb3ZhJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTmV4eGEvY29yZG92YS1iYXNlNjQtdG8tZ2FsbGVyeScsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyBQaG9uZSA4J11cbiAgICAgICAgfSlcbiAgICBdLCBCYXNlNjRUb0dhbGxlcnkpO1xuICAgIHJldHVybiBCYXNlNjRUb0dhbGxlcnk7XG59KCkpO1xuZXhwb3J0cy5CYXNlNjRUb0dhbGxlcnkgPSBCYXNlNjRUb0dhbGxlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXNlNjR0b2dhbGxlcnkuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2Jhc2U2NHRvZ2FsbGVyeS5qc1xuLy8gbW9kdWxlIGlkID0gMzgwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 381 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Battery Status\n * @description\n * Requires Cordova plugin: cordova-plugin-batterystatus. For more info, please see the [BatteryStatus plugin docs](https://github.com/apache/cordova-plugin-battery-status).\n *\n * @usage\n * ```typescript\n * import { BatteryStatus } from 'ionic-native';\n *\n *\n * // watch change in battery status\n * let subscription = BatteryStatus.onChange().subscribe(\n *  (status: StatusObject) => {\n *    console.log(status.level, status.isPlugged);\n *  }\n * );\n *\n * // stop watch\n * subscription.unsubscribe();\n *\n * ```\n */\nvar BatteryStatus = (function () {\n    function BatteryStatus() {\n    }\n    /**\n     * Watch the change in battery level\n     * @returns {Observable} Returns an observable that pushes a status object\n     */\n    BatteryStatus.onChange = function () { return; };\n    /**\n     * Watch when the battery level goes low\n     * @returns {Observable<StatusObject>} Returns an observable that pushes a status object\n     */\n    BatteryStatus.onLow = function () { return; };\n    /**\n     * Watch when the battery level goes to critial\n     * @returns {Observable<StatusObject>} Returns an observable that pushes a status object\n     */\n    BatteryStatus.onCritical = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'batterystatus'\n        })\n    ], BatteryStatus, \"onChange\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'batterylow'\n        })\n    ], BatteryStatus, \"onLow\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'batterycritical'\n        })\n    ], BatteryStatus, \"onCritical\", null);\n    BatteryStatus = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BatteryStatus',\n            plugin: 'cordova-plugin-battery-status',\n            repo: 'https://github.com/apache/cordova-plugin-battery-status',\n            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']\n        })\n    ], BatteryStatus);\n    return BatteryStatus;\n}());\nexports.BatteryStatus = BatteryStatus;\n//# sourceMappingURL=batterystatus.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2JhdHRlcnlzdGF0dXMuanM/YzRlZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQSxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0EsdUNBQXVDLFFBQVE7QUFDL0M7QUFDQTtBQUNBLGlCQUFpQix5QkFBeUI7QUFDMUM7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM4MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgQmF0dGVyeSBTdGF0dXNcbiAqIEBkZXNjcmlwdGlvblxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLWJhdHRlcnlzdGF0dXMuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtCYXR0ZXJ5U3RhdHVzIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWJhdHRlcnktc3RhdHVzKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEJhdHRlcnlTdGF0dXMgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiAvLyB3YXRjaCBjaGFuZ2UgaW4gYmF0dGVyeSBzdGF0dXNcbiAqIGxldCBzdWJzY3JpcHRpb24gPSBCYXR0ZXJ5U3RhdHVzLm9uQ2hhbmdlKCkuc3Vic2NyaWJlKFxuICogIChzdGF0dXM6IFN0YXR1c09iamVjdCkgPT4ge1xuICogICAgY29uc29sZS5sb2coc3RhdHVzLmxldmVsLCBzdGF0dXMuaXNQbHVnZ2VkKTtcbiAqICB9XG4gKiApO1xuICpcbiAqIC8vIHN0b3Agd2F0Y2hcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICpcbiAqIGBgYFxuICovXG52YXIgQmF0dGVyeVN0YXR1cyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQmF0dGVyeVN0YXR1cygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2F0Y2ggdGhlIGNoYW5nZSBpbiBiYXR0ZXJ5IGxldmVsXG4gICAgICogQHJldHVybnMge09ic2VydmFibGV9IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHB1c2hlcyBhIHN0YXR1cyBvYmplY3RcbiAgICAgKi9cbiAgICBCYXR0ZXJ5U3RhdHVzLm9uQ2hhbmdlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogV2F0Y2ggd2hlbiB0aGUgYmF0dGVyeSBsZXZlbCBnb2VzIGxvd1xuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPFN0YXR1c09iamVjdD59IFJldHVybnMgYW4gb2JzZXJ2YWJsZSB0aGF0IHB1c2hlcyBhIHN0YXR1cyBvYmplY3RcbiAgICAgKi9cbiAgICBCYXR0ZXJ5U3RhdHVzLm9uTG93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogV2F0Y2ggd2hlbiB0aGUgYmF0dGVyeSBsZXZlbCBnb2VzIHRvIGNyaXRpYWxcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxTdGF0dXNPYmplY3Q+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCBwdXNoZXMgYSBzdGF0dXMgb2JqZWN0XG4gICAgICovXG4gICAgQmF0dGVyeVN0YXR1cy5vbkNyaXRpY2FsID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6ICdiYXR0ZXJ5c3RhdHVzJ1xuICAgICAgICB9KVxuICAgIF0sIEJhdHRlcnlTdGF0dXMsIFwib25DaGFuZ2VcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6ICdiYXR0ZXJ5bG93J1xuICAgICAgICB9KVxuICAgIF0sIEJhdHRlcnlTdGF0dXMsIFwib25Mb3dcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6ICdiYXR0ZXJ5Y3JpdGljYWwnXG4gICAgICAgIH0pXG4gICAgXSwgQmF0dGVyeVN0YXR1cywgXCJvbkNyaXRpY2FsXCIsIG51bGwpO1xuICAgIEJhdHRlcnlTdGF0dXMgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdCYXR0ZXJ5U3RhdHVzJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWJhdHRlcnktc3RhdHVzJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWJhdHRlcnktc3RhdHVzJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbWF6b24gRmlyZSBPUycsICdpT1MnLCAnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ1dpbmRvd3MgUGhvbmUgNycsICdXaW5kb3dzIFBob25lIDgnLCAnV2luZG93cycsICdGaXJlZm94IE9TJywgJ0Jyb3dzZXInXVxuICAgICAgICB9KVxuICAgIF0sIEJhdHRlcnlTdGF0dXMpO1xuICAgIHJldHVybiBCYXR0ZXJ5U3RhdHVzO1xufSgpKTtcbmV4cG9ydHMuQmF0dGVyeVN0YXR1cyA9IEJhdHRlcnlTdGF0dXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iYXR0ZXJ5c3RhdHVzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9iYXR0ZXJ5c3RhdHVzLmpzXG4vLyBtb2R1bGUgaWQgPSAzODFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 382 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Brightness\n * @description\n * The Brightness plugin let you control the display brightness of your device.\n *\n * Requires Cordova plugin: `cordova-plugin-brightness`. For more info, please see the [Brightness plugin docs](https://github.com/mgcrea/cordova-plugin-brightness).\n *\n * @usage\n * ```typescript\n * import { Brightness } from 'ionic-native';\n *\n *\n * let brightnessValue: number = 0.8;\n * Brightness.setBrightness(brightnessValue);\n * ```\n *\n */\nvar Brightness = (function () {\n    function Brightness() {\n    }\n    /**\n     * Sets the brightness of the display.\n     *\n     * @param {value} Floating number between 0 and 1 in which case 1 means 100% brightness and 0 means 0% brightness.\n     * @returns {Promise} Returns a Promise that resolves if setting brightness was successful.\n     */\n    Brightness.setBrightness = function (value) { return; };\n    /**\n     * Reads the current brightness of the device display.\n     *\n     * @returns {Promise} Returns a Promise that resolves with the\n     * brightness value of the device display (floating number between 0 and 1).\n     */\n    Brightness.getBrightness = function () { return; };\n    /**\n    * Keeps the screen on. Prevents the device from setting the screen to sleep.\n    */\n    Brightness.setKeepScreenOn = function (value) { };\n    __decorate([\n        plugin_1.Cordova()\n    ], Brightness, \"setBrightness\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Brightness, \"getBrightness\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Brightness, \"setKeepScreenOn\", null);\n    Brightness = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Brightness',\n            plugin: 'cordova-plugin-brightness',\n            pluginRef: 'cordova.plugins.brightness',\n            repo: 'https://github.com/mgcrea/cordova-plugin-brightness',\n            platforms: ['Android', 'iOS']\n        })\n    ], Brightness);\n    return Brightness;\n}());\nexports.Brightness = Brightness;\n//# sourceMappingURL=brightness.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2JyaWdodG5lc3MuanM/NTQ5YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsTUFBTTtBQUNyQixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixRQUFRO0FBQ3pCO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM4Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgQnJpZ2h0bmVzc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgQnJpZ2h0bmVzcyBwbHVnaW4gbGV0IHlvdSBjb250cm9sIHRoZSBkaXNwbGF5IGJyaWdodG5lc3Mgb2YgeW91ciBkZXZpY2UuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1icmlnaHRuZXNzYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0JyaWdodG5lc3MgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9tZ2NyZWEvY29yZG92YS1wbHVnaW4tYnJpZ2h0bmVzcykuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBCcmlnaHRuZXNzIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogbGV0IGJyaWdodG5lc3NWYWx1ZTogbnVtYmVyID0gMC44O1xuICogQnJpZ2h0bmVzcy5zZXRCcmlnaHRuZXNzKGJyaWdodG5lc3NWYWx1ZSk7XG4gKiBgYGBcbiAqXG4gKi9cbnZhciBCcmlnaHRuZXNzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBCcmlnaHRuZXNzKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBicmlnaHRuZXNzIG9mIHRoZSBkaXNwbGF5LlxuICAgICAqXG4gICAgICogQHBhcmFtIHt2YWx1ZX0gRmxvYXRpbmcgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbiB3aGljaCBjYXNlIDEgbWVhbnMgMTAwJSBicmlnaHRuZXNzIGFuZCAwIG1lYW5zIDAlIGJyaWdodG5lc3MuXG4gICAgICogQHJldHVybnMge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgc2V0dGluZyBicmlnaHRuZXNzIHdhcyBzdWNjZXNzZnVsLlxuICAgICAqL1xuICAgIEJyaWdodG5lc3Muc2V0QnJpZ2h0bmVzcyA9IGZ1bmN0aW9uICh2YWx1ZSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmVhZHMgdGhlIGN1cnJlbnQgYnJpZ2h0bmVzcyBvZiB0aGUgZGV2aWNlIGRpc3BsYXkuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZVxuICAgICAqIGJyaWdodG5lc3MgdmFsdWUgb2YgdGhlIGRldmljZSBkaXNwbGF5IChmbG9hdGluZyBudW1iZXIgYmV0d2VlbiAwIGFuZCAxKS5cbiAgICAgKi9cbiAgICBCcmlnaHRuZXNzLmdldEJyaWdodG5lc3MgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAqIEtlZXBzIHRoZSBzY3JlZW4gb24uIFByZXZlbnRzIHRoZSBkZXZpY2UgZnJvbSBzZXR0aW5nIHRoZSBzY3JlZW4gdG8gc2xlZXAuXG4gICAgKi9cbiAgICBCcmlnaHRuZXNzLnNldEtlZXBTY3JlZW5PbiA9IGZ1bmN0aW9uICh2YWx1ZSkgeyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBCcmlnaHRuZXNzLCBcInNldEJyaWdodG5lc3NcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEJyaWdodG5lc3MsIFwiZ2V0QnJpZ2h0bmVzc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQnJpZ2h0bmVzcywgXCJzZXRLZWVwU2NyZWVuT25cIiwgbnVsbCk7XG4gICAgQnJpZ2h0bmVzcyA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0JyaWdodG5lc3MnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tYnJpZ2h0bmVzcycsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuYnJpZ2h0bmVzcycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL21nY3JlYS9jb3Jkb3ZhLXBsdWdpbi1icmlnaHRuZXNzJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUyddXG4gICAgICAgIH0pXG4gICAgXSwgQnJpZ2h0bmVzcyk7XG4gICAgcmV0dXJuIEJyaWdodG5lc3M7XG59KCkpO1xuZXhwb3J0cy5CcmlnaHRuZXNzID0gQnJpZ2h0bmVzcztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWJyaWdodG5lc3MuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2JyaWdodG5lc3MuanNcbi8vIG1vZHVsZSBpZCA9IDM4MlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 383 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name BLE\n * @description\n * This plugin enables communication between a phone and Bluetooth Low Energy (BLE) peripherals.\n *\n * The plugin provides a simple JavaScript API for iOS and Android.\n *\n * - Scan for peripherals\n * - Connect to a peripheral\n * - Read the value of a characteristic\n * - Write new value to a characteristic\n * - Get notified when characteristic's value changes\n *\n * Advertising information is returned when scanning for peripherals. Service, characteristic, and property info is returned when connecting to a peripheral. All access is via service and characteristic UUIDs. The plugin manages handles internally.\n *\n * Simultaneous connections to multiple peripherals are supported.\n *\n * @usage\n *\n * ## Peripheral Data\n *\n * Peripheral Data is passed to the success callback when scanning and connecting. Limited data is passed when scanning.\n *\n * ```typescript\n *   {\n *       \"name\": \"Battery Demo\",\n *       \"id\": \"20:FF:D0:FF:D1:C0\",\n *       \"advertising\": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n *       \"rssi\": -55\n *   }\n * ```\n * After connecting, the peripheral object also includes service, characteristic and descriptor information.\n *\n * ```typescript\n *   {\n *       \"name\": \"Battery Demo\",\n *       \"id\": \"20:FF:D0:FF:D1:C0\",\n *       \"advertising\": [2,1,6,3,3,15,24,8,9,66,97,116,116,101,114,121],\n *       \"rssi\": -55,\n *       \"services\": [\n *           \"1800\",\n *           \"1801\",\n *           \"180f\"\n *       ],\n *       \"characteristics\": [\n *           {\n *               \"service\": \"1800\",\n *               \"characteristic\": \"2a00\",\n *               \"properties\": [\n *                   \"Read\"\n *               ]\n *           },\n *           {\n *               \"service\": \"1800\",\n *               \"characteristic\": \"2a01\",\n *               \"properties\": [\n *                   \"Read\"\n *               ]\n *           },\n *           {\n *               \"service\": \"1801\",\n *               \"characteristic\": \"2a05\",\n *               \"properties\": [\n *                   \"Read\"\n *               ]\n *           },\n *           {\n *               \"service\": \"180f\",\n *               \"characteristic\": \"2a19\",\n *               \"properties\": [\n *                   \"Read\"\n *               ],\n *               \"descriptors\": [\n *                   {\n *                       \"uuid\": \"2901\"\n *                   },\n *                   {\n *                       \"uuid\": \"2904\"\n *                   }\n *               ]\n *           }\n *       ]\n *   }\n * ```\n *\n * ## Advertising Data\n * Bluetooth advertising data is returned in when scanning for devices. The format format varies depending on your platform. On Android advertising data will be the raw advertising bytes. iOS does not allow access to raw advertising data, so a dictionary of data is returned.\n *\n * The advertising information for both Android and iOS appears to be a combination of advertising data and scan response data.\n *\n * ### Android\n *\n * ```typescript\n *   {\n *       \"name\": \"demo\",\n *       \"id\": \"00:1A:7D:DA:71:13\",\n *       \"advertising\": ArrayBuffer,\n *      \"rssi\": -37\n *  }\n * ```\n *\n * Convert the advertising info to a Uint8Array for processing. `var adData = new Uint8Array(peripheral.advertising)`\n *\n * ### iOS\n *\n * Note that iOS uses the string value of the constants for the [Advertisement Data Retrieval Keys](https://developer.apple.com/library/ios/documentation/CoreBluetooth/Reference/CBCentralManagerDelegate_Protocol/index.html#//apple_ref/doc/constant_group/Advertisement_Data_Retrieval_Keys). This will likely change in the future.\n *\n * ```typescript\n *   {\n *       \"name\": \"demo\",\n *       \"id\": \"D8479A4F-7517-BCD3-91B5-3302B2F81802\",\n *       \"advertising\": {\n *           \"kCBAdvDataChannel\": 37,\n *           \"kCBAdvDataServiceData\": {\n *               \"FED8\": {\n *                   \"byteLength\": 7 // data not shown\n *               }\n *           },\n *           \"kCBAdvDataLocalName\": \"demo\",\n *           \"kCBAdvDataServiceUUIDs\": [\"FED8\"],\n *           \"kCBAdvDataManufacturerData\": {\n *               \"byteLength\": 7  // data not shown\n *           },\n *           \"kCBAdvDataTxPowerLevel\": 32,\n *           \"kCBAdvDataIsConnectable\": true\n *       },\n *       \"rssi\": -53\n *   }\n * ```\n *\n * ## Typed Arrays\n *\n * This plugin uses typed Arrays or ArrayBuffers for sending and receiving data.\n *\n * This means that you need convert your data to ArrayBuffers before sending and from ArrayBuffers when receiving.\n *\n * ```typescript\n *   // ASCII only\n *   function stringToBytes(string) {\n *      var array = new Uint8Array(string.length);\n *      for (var i = 0, l = string.length; i < l; i++) {\n *          array[i] = string.charCodeAt(i);\n *       }\n *       return array.buffer;\n *   }\n *\n *   // ASCII only\n *   function bytesToString(buffer) {\n *       return String.fromCharCode.apply(null, new Uint8Array(buffer));\n *   }\n * ```\n * You can read more about typed arrays in these articles on [MDN](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Typed_arrays) and [HTML5 Rocks](http://www.html5rocks.com/en/tutorials/webgl/typed_arrays/).\n *\n * ## UUIDs\n *\n * UUIDs are always strings and not numbers. Some 16-bit UUIDs, such as '2220' look like integers, but they're not. (The integer 2220 is 0x8AC in hex.) This isn't a problem with 128 bit UUIDs since they look like strings 82b9e6e1-593a-456f-be9b-9215160ebcac. All 16-bit UUIDs should also be passed to methods as strings.\n *\n */\nvar BLE = (function () {\n    function BLE() {\n    }\n    /**\n     * Scan and discover BLE peripherals for the specified amount of time.\n     *\n     * @usage\n     * ```\n     * BLE.scan([], 5).subscribe(device => {\n     *   console.log(JSON.stringify(device));\n     * });\n     * ```\n     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\n     * @param {number} seconds  Number of seconds to run discovery\n     * @return Returns an Observable that notifies of each peripheral that is discovered during the specified time.\n     */\n    BLE.scan = function (services, seconds) { return; };\n    /**\n     * Scan and discover BLE peripherals until `stopScan` is called.\n     *\n     * @usage\n     * ```\n     * BLE.startScan([]).subscribe(device => {\n     *   console.log(JSON.stringify(device));\n     * });\n     *\n     * setTimeout(() => {\n     *   BLE.stopScan();\n     * }, 5000);\n     * ```\n     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\n     * @return Returns an Observable that notifies of each peripheral discovered.\n     */\n    BLE.startScan = function (services) { return; };\n    /**\n     * Scans for BLE devices. This function operates similarly to the `startScan` function, but allows you to specify extra options (like allowing duplicate device reports).\n     * @param {string[]} services  List of service UUIDs to discover, or `[]` to find all devices\n     * @param options {any}\n     * @return Returns an Observable that notifies of each peripheral discovered.\n     */\n    BLE.startScanWithOptions = function (services, options) { return; };\n    /**\n     * Stop a scan started by `startScan`.\n     *\n     * @usage\n     * ```\n     * BLE.startScan([]).subscribe(device => {\n     *   console.log(JSON.stringify(device));\n     * });\n     * setTimeout(() => {\n     *   BLE.stopScan().then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @return returns a Promise.\n     */\n    BLE.stopScan = function () { return; };\n    /**\n     * Connect to a peripheral.\n     * @usage\n     * ```\n     *   BLE.connect('12:34:56:78:9A:BC').subscribe(peripheralData => {\n     *     console.log(peripheralData);\n     *   },\n     *   peripheralData => {\n     *     console.log('disconnected');\n     *   });\n     * ```\n     * @param deviceId {string}  UUID or MAC address of the peripheral\n     * @return Returns an Observable that notifies of connect/disconnect.\n     */\n    BLE.connect = function (deviceId) { return; };\n    /**\n     * Disconnect from a peripheral.\n     * @usage\n     * ```\n     *   BLE.disconnect('12:34:56:78:9A:BC').then(() => {\n     *     console.log('Disconnected');\n     *   });\n     * ```\n     * @param deviceId {string}  UUID or MAC address of the peripheral\n     * @return Returns a Promise\n     */\n    BLE.disconnect = function (deviceId) { return; };\n    /**\n     * Read the value of a characteristic.\n     *\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @param {string} serviceUUID  UUID of the BLE service\n     * @param {string} characteristicUUID  UUID of the BLE characteristic\n     * @return Returns a Promise\n     */\n    BLE.read = function (deviceId, serviceUUID, characteristicUUID) { return; };\n    ;\n    /**\n     * Write the value of a characteristic.\n     * @usage\n     * ```\n     * // send 1 byte to switch a light on\n     * var data = new Uint8Array(1);\n     * data[0] = 1;\n     * BLE.write(device_id, \"FF10\", \"FF11\", data.buffer);\n     *\n     * // send a 3 byte value with RGB color\n     * var data = new Uint8Array(3);\n     * data[0] = 0xFF;  // red\n     * data[0] = 0x00; // green\n     * data[0] = 0xFF; // blue\n     * BLE.write(device_id, \"ccc0\", \"ccc1\", data.buffer);\n     *\n     * // send a 32 bit integer\n     * var data = new Uint32Array(1);\n     * data[0] = counterInput.value;\n     * BLE.write(device_id, SERVICE, CHARACTERISTIC, data.buffer);\n     *\n     * ```\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @param {string} serviceUUID  UUID of the BLE service\n     * @param {string} characteristicUUID  UUID of the BLE characteristic\n     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.\n     * @return Returns a Promise\n     */\n    BLE.write = function (deviceId, serviceUUID, characteristicUUID, value) { return; };\n    /**\n     * Write the value of a characteristic without waiting for confirmation from the peripheral.\n     *\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @param {string} serviceUUID  UUID of the BLE service\n     * @param {string} characteristicUUID  UUID of the BLE characteristic\n     * @param {ArrayBuffer} value  Data to write to the characteristic, as an ArrayBuffer.\n     * @return Returns a Promise\n     */\n    BLE.writeWithoutResponse = function (deviceId, serviceUUID, characteristicUUID, value) { return; };\n    /**\n     * Register to be notified when the value of a characteristic changes.\n     *\n     * @usage\n     * ```\n     * BLE.startNotification(device_id, \"FF10\", \"FF11\").subscribe(buffer => {\n     *   console.log(String.fromCharCode.apply(null, new Uint8Array(buffer));\n     * });\n     * ```\n     *\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @param {string} serviceUUID  UUID of the BLE service\n     * @param {string} characteristicUUID  UUID of the BLE characteristic\n     * @return Returns an Observable that notifies of characteristic changes.\n     */\n    BLE.startNotification = function (deviceId, serviceUUID, characteristicUUID) { return; };\n    /**\n     * Stop being notified when the value of a characteristic changes.\n     *\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @param {string} serviceUUID  UUID of the BLE service\n     * @param {string} characteristicUUID  UUID of the BLE characteristic\n     * @return Returns a Promise.\n     */\n    BLE.stopNotification = function (deviceId, serviceUUID, characteristicUUID) { return; };\n    /**\n     * Report the connection status.\n     *\n     * @usage\n     * ```\n     * BLE.isConnected('FFCA0B09-CB1D-4DC0-A1EF-31AFD3EDFB53').then(\n     *   () => { console.log('connected'); },\n     *   () => { console.log('not connected'); }\n     * );\n     * ```\n     * @param {string} deviceId  UUID or MAC address of the peripheral\n     * @return Returns a Promise.\n     */\n    BLE.isConnected = function (deviceId) { return; };\n    /**\n     * Report if bluetooth is enabled.\n     *\n     * @return {Promise<void>} Returns a Promise that resolves if Bluetooth is enabled, and rejects if disabled.\n     */\n    BLE.isEnabled = function () { return; };\n    /**\n     * Open System Bluetooth settings (Android only).\n     *\n     * @return Returns a Promise.\n     */\n    BLE.showBluetoothSettings = function () { return; };\n    /**\n     * Enable Bluetooth on the device (Android only).\n     *\n     * @return Returns a Promise.\n     */\n    BLE.enable = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], BLE, \"scan\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopScan',\n            clearWithArgs: true\n        })\n    ], BLE, \"startScan\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopScan',\n            clearWithArgs: true\n        })\n    ], BLE, \"startScanWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"stopScan\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'disconnect',\n            clearWithArgs: true\n        })\n    ], BLE, \"connect\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"disconnect\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"read\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"write\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"writeWithoutResponse\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopNotification',\n            clearWithArgs: true\n        })\n    ], BLE, \"startNotification\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"stopNotification\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"isConnected\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"isEnabled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"showBluetoothSettings\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], BLE, \"enable\", null);\n    BLE = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BLE',\n            plugin: 'cordova-plugin-ble-central',\n            pluginRef: 'ble',\n            repo: 'https://github.com/don/cordova-plugin-ble-central',\n            platforms: ['iOS', 'Android']\n        })\n    ], BLE);\n    return BLE;\n}());\nexports.BLE = BLE;\n//# sourceMappingURL=ble.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 384 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Bluetooth Serial\n * @description This plugin enables serial communication over Bluetooth. It was written for communicating between Android or iOS and an Arduino.\n * @usage\n * ```typescript\n * import { BluetoothSerial } from 'ionic-native';\n *\n *\n * // Write a string\n * BluetoothSerial.write(\"hello world\").then(success, failure);\n *\n * // Array of int or bytes\n * BluetoothSerial.write([186, 220, 222]).then(success, failure);\n *\n * // Typed Array\n * var data = new Uint8Array(4);\n * data[0] = 0x41;\n * data[1] = 0x42;\n * data[2] = 0x43;\n * data[3] = 0x44;\n * BluetoothSerial.write(data).then(success, failure);\n *\n * // Array Buffer\n * BluetoothSerial.write(data.buffer).then(success, failure);\n * ```\n */\nvar BluetoothSerial = (function () {\n    function BluetoothSerial() {\n    }\n    /**\n     * Connect to a Bluetooth device\n     * @param {string} macAddress_or_uuid Identifier of the remote device\n     * @returns {Observable} Subscribe to connect, unsubscribe to disconnect.\n     */\n    BluetoothSerial.connect = function (macAddress_or_uuid) { return; };\n    /**\n     * Connect insecurely to a Bluetooth device\n     * @param {string} macAddress Identifier of the remote device\n     * @returns {Observable} Subscribe to connect, unsubscribe to disconnect.\n     */\n    BluetoothSerial.connectInsecure = function (macAddress) { return; };\n    /**\n     * Writes data to the serial port\n     * @param {any} data ArrayBuffer of data\n     * @returns {Promise} returns a promise when data has been written\n     */\n    BluetoothSerial.write = function (data) { return; };\n    /**\n     * Gets the number of bytes of data available\n     * @returns {Promise} returns a promise that contains the available bytes\n     */\n    BluetoothSerial.available = function () { return; };\n    /**\n     * Reads data from the buffer\n     * @returns {Promise} returns a promise with data from the buffer\n     */\n    BluetoothSerial.read = function () { return; };\n    /**\n     * Reads data from the buffer until it reaches a delimiter\n     * @param {string} delimiter string that you want to search until\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.readUntil = function (delimiter) { return; };\n    /**\n     * Subscribe to be notified when data is received\n     * @param {string} delimiter the string you want to watch for\n     * @returns {Observable} returns an observable.\n     */\n    BluetoothSerial.subscribe = function (delimiter) { return; };\n    /**\n     * Subscribe to be notified when data is received\n     * @returns {Observable} returns an observable\n     */\n    BluetoothSerial.subscribeRawData = function () { return; };\n    /**\n     * Clears data in buffer\n     * @returns {Promise} returns a promise when completed\n     */\n    BluetoothSerial.clear = function () { return; };\n    /**\n     * Lists bonded devices\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.list = function () { return; };\n    /**\n     * Reports if bluetooth is enabled\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.isEnabled = function () { return; };\n    /**\n     * Reports the connection status\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.isConnected = function () { return; };\n    /**\n     * Reads the RSSI from the connected peripheral\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.readRSSI = function () { return; };\n    /**\n     * Show the Bluetooth settings on the device\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.showBluetoothSettings = function () { return; };\n    /**\n     * Enable Bluetooth on the device\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.enable = function () { return; };\n    /**\n     * Discover unpaired devices\n     * @returns {Promise} returns a promise\n     */\n    BluetoothSerial.discoverUnpaired = function () { return; };\n    /**\n     * Subscribe to be notified on Bluetooth device discovery. Discovery process must be initiated with the `discoverUnpaired` function.\n     * @returns {Observable} Returns an observable\n     */\n    BluetoothSerial.setDeviceDiscoveredListener = function () { return; };\n    /**\n     * Sets the human readable device name that is broadcasted to other devices\n     * @param {string} newName Desired name of device\n     */\n    BluetoothSerial.setName = function (newName) { };\n    /**\n     * Makes the device discoverable by other devices\n     * @param {number} discoverableDuration Desired number of seconds device should be discoverable for\n     */\n    BluetoothSerial.setDiscoverable = function (discoverableDuration) { };\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone'],\n            observable: true,\n            clearFunction: 'disconnect'\n        })\n    ], BluetoothSerial, \"connect\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android'],\n            observable: true,\n            clearFunction: 'disconnect'\n        })\n    ], BluetoothSerial, \"connectInsecure\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"write\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"available\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"read\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"readUntil\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone'],\n            observable: true,\n            clearFunction: 'unsubscribe'\n        })\n    ], BluetoothSerial, \"subscribe\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone'],\n            observable: true,\n            clearFunction: 'unsubscribeRawData'\n        })\n    ], BluetoothSerial, \"subscribeRawData\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"clear\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"list\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"isEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"isConnected\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"readRSSI\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"showBluetoothSettings\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"enable\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], BluetoothSerial, \"discoverUnpaired\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android', 'iOS', 'Windows Phone'],\n            observable: true,\n            clearFunction: 'clearDeviceDiscoveredListener'\n        })\n    ], BluetoothSerial, \"setDeviceDiscoveredListener\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android'],\n            sync: true\n        })\n    ], BluetoothSerial, \"setName\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android'],\n            sync: true\n        })\n    ], BluetoothSerial, \"setDiscoverable\", null);\n    BluetoothSerial = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'BluetoothSerial',\n            repo: 'https://github.com/don/BluetoothSerial',\n            plugin: 'cordova-plugin-bluetooth-serial',\n            pluginRef: 'bluetoothSerial',\n            platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']\n        })\n    ], BluetoothSerial);\n    return BluetoothSerial;\n}());\nexports.BluetoothSerial = BluetoothSerial;\n//# sourceMappingURL=bluetoothserial.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 385 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Calendar\n * @description\n * This plugin allows you to add events to the Calendar of the mobile device.\n *\n * Requires Cordova plugin: `cordova-plugin-calendar`. For more info, please see the [Calendar plugin docs](https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin).\n *\n *\n * @usage\n * ```\n * import {Calendar} from 'ionic-native';\n *\n *\n *\n * Calendar.createCalendar('MyCalendar').then(\n *   (msg) => { console.log(msg); },\n *   (err) => { console.log(err); }\n * );\n * ```\n *\n */\nvar Calendar = (function () {\n    function Calendar() {\n    }\n    /**\n     * This function checks if we have permission to read/write from/to the calendar.\n     * The promise will resolve with `true` when:\n     * - You're running on iOS, or\n     * - You're targetting API level lower than 23, or\n     * - You're using Android < 6, or\n     * - You've already granted permission\n     *\n     * If this returns false, you should call the `requestReadWritePermission` function\n     * @returns {Promise<boolean>}\n     */\n    Calendar.hasReadWritePermission = function () { return; };\n    /**\n     * Check if we have read permission\n     * @returns {Promise<boolean>}\n     */\n    Calendar.hasReadPermission = function () { return; };\n    /**\n     * Check if we have write permission\n     * @returns {Promise<boolean>}\n     */\n    Calendar.hasWritePermission = function () { return; };\n    /**\n     * Request write permission\n     * @returns {Promise<any>}\n     */\n    Calendar.requestWritePermission = function () { return; };\n    /**\n     * Request read permission\n     * @returns {Promise<any>}\n     */\n    Calendar.requestReadPermission = function () { return; };\n    /**\n     * Requests read/write permissions\n     * @returns {Promise<any>}\n     */\n    Calendar.requestReadWritePermission = function () { return; };\n    /**\n     * Create a calendar. (iOS only)\n     *\n     * @param {string | Object} nameOrOptions  either a string name or a options object. If string, provide the calendar name. IF an object, provide a calendar name as a string and a calendar color in hex format as a string\n     * @return {Promise} Returns a Promise\n     */\n    Calendar.createCalendar = function (nameOrOptions) { return; };\n    /**\n     * Delete a calendar. (iOS only)\n     * @param {string} name  Name of the calendar to delete.\n     * @return Returns a Promise\n     */\n    Calendar.deleteCalendar = function (name) { return; };\n    /**\n     * Returns the default calendar options.\n     *\n     * @return Returns an object with the default calendar options:\n     *   firstReminderMinutes: 60,\n     *   secondReminderMinutes: null,\n     *   recurrence: null, // options are: 'daily', 'weekly', 'monthly', 'yearly'\n     *   recurrenceInterval: 1, // only used when recurrence is set\n     *   recurrenceEndDate: null,\n     *   calendarName: null,\n     *   calendarId: null,\n     *   url: null\n     */\n    Calendar.getCalendarOptions = function () {\n        return {\n            firstReminderMinutes: 60,\n            secondReminderMinutes: null,\n            recurrence: null,\n            recurrenceInterval: 1,\n            recurrenceEndDate: null,\n            calendarName: null,\n            calendarId: null,\n            url: null\n        };\n    };\n    /**\n     * Silently create an event.\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @return Returns a Promise\n     */\n    Calendar.createEvent = function (title, location, notes, startDate, endDate) { return; };\n    /**\n     * Silently create an event with additional options.\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n     * @return Returns a Promise\n     */\n    Calendar.createEventWithOptions = function (title, location, notes, startDate, endDate, options) { return; };\n    /**\n     * Interactively create an event.\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @return Returns a Promise\n     */\n    Calendar.createEventInteractively = function (title, location, notes, startDate, endDate) { return; };\n    /**\n     * Interactively create an event with additional options.\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n     * @return Returns a Promise\n     */\n    Calendar.createEventInteractivelyWithOptions = function (title, location, notes, startDate, endDate, options) { return; };\n    // deprecated\n    // @Cordova()\n    // static createEventInNamedCalendar(\n    //   title?: string,\n    //   location?: string,\n    //   notes?: string,\n    //   startDate?: Date,\n    //   endDate?: Date,\n    //   calendarName?: string\n    // ) {}\n    /**\n     * Find an event.\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @return Returns a Promise\n     */\n    Calendar.findEvent = function (title, location, notes, startDate, endDate) { return; };\n    /**\n     * Find an event with additional options.\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {CalendarOptions} [options]  Additional options, see `getCalendarOptions`\n     * @return Returns a Promise that resolves with the event, or rejects with an error.\n     */\n    Calendar.findEventWithOptions = function (title, location, notes, startDate, endDate, options) { return; };\n    /**\n     * Find a list of events within the specified date range. (Android only)\n     *\n     * @param {Date} [startDate]  The start date\n     * @param {Date} [endDate]  The end date\n     * @return Returns a Promise that resolves with the list of events, or rejects with an error.\n     */\n    Calendar.listEventsInRange = function (startDate, endDate) { return; };\n    /**\n     * Get a list of all calendars.\n     * @return A Promise that resolves with the list of calendars, or rejects with an error.\n     */\n    Calendar.listCalendars = function () { return; };\n    /**\n     * Get a list of all future events in the specified calendar. (iOS only)\n     * @return Returns a Promise that resolves with the list of events, or rejects with an error.\n     */\n    Calendar.findAllEventsInNamedCalendar = function (calendarName) { return; };\n    /**\n     * Modify an event. (iOS only)\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {string} [newTitle]  The new event title\n     * @param {string} [newLocation]  The new event location\n     * @param {string} [newNotes]  The new event notes\n     * @param {Date} [newStartDate]  The new event start date\n     * @param {Date} [newEndDate]  The new event end date\n     * @return Returns a Promise\n     */\n    Calendar.modifyEvent = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate) { return; };\n    /**\n     * Modify an event with additional options. (iOS only)\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {string} [newTitle]  The new event title\n     * @param {string} [newLocation]  The new event location\n     * @param {string} [newNotes]  The new event notes\n     * @param {Date} [newStartDate]  The new event start date\n     * @param {Date} [newEndDate]  The new event end date\n     * @param {CalendarOptions} [filterOptions] Event Options, see `getCalendarOptions`\n     * @param {CalendarOptions} [newOptions]  New event options, see `getCalendarOptions`\n     * @return Returns a Promise\n     */\n    Calendar.modifyEventWithOptions = function (title, location, notes, startDate, endDate, newTitle, newLocation, newNotes, newStartDate, newEndDate, filterOptions, newOptions) { return; };\n    /**\n     * Delete an event.\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @return Returns a Promise\n     */\n    Calendar.deleteEvent = function (title, location, notes, startDate, endDate) { return; };\n    /**\n     * Delete an event from the specified Calendar. (iOS only)\n     *\n     * @param {string} [title]  The event title\n     * @param {string} [location]  The event location\n     * @param {string} [notes]  The event notes\n     * @param {Date} [startDate]  The event start date\n     * @param {Date} [endDate]  The event end date\n     * @param {string} calendarName\n     * @return Returns a Promise\n     */\n    Calendar.deleteEventFromNamedCalendar = function (title, location, notes, startDate, endDate, calendarName) { return; };\n    /**\n     * Open the calendar at the specified date.\n     * @param {Date} date The date you want to open the calendar on\n     * @return {Promise<any>} Promise returns a promise\n     */\n    Calendar.openCalendar = function (date) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"hasReadWritePermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"hasReadPermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"hasWritePermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"requestWritePermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"requestReadPermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"requestReadWritePermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"createCalendar\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"deleteCalendar\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Calendar, \"getCalendarOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"createEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"createEventWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"createEventInteractively\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"createEventInteractivelyWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"findEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"findEventWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"listEventsInRange\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"listCalendars\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"findAllEventsInNamedCalendar\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"modifyEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"modifyEventWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"deleteEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"deleteEventFromNamedCalendar\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Calendar, \"openCalendar\", null);\n    Calendar = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Calendar',\n            plugin: 'cordova-plugin-calendar',\n            pluginRef: 'plugins.calendar',\n            repo: 'https://github.com/EddyVerbruggen/Calendar-PhoneGap-Plugin',\n            platforms: ['Android', 'iOS']\n        })\n    ], Calendar);\n    return Calendar;\n}());\nexports.Calendar = Calendar;\n//# sourceMappingURL=calendar.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 386 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name CallNumber\n * @description\n * Call a number directly from your Cordova/Ionic application.\n *\n * @usage\n * ```\n * import {CallNumber} from 'ionic-native';\n *\n * CallNumber.callNumber(18001010101, true)\n *   .then(() => console.log('Launched dialer!'))\n *   .catch(() => console.log('Error launching dialer'));\n *\n * ```\n */\nvar CallNumber = (function () {\n    function CallNumber() {\n    }\n    /**\n     * Calls a phone number\n     * @param numberToCall {string} The phone number to call as a string\n     * @param bypassAppChooser {boolean} Set to true to bypass the app chooser and go directly to dialer\n     */\n    CallNumber.callNumber = function (numberToCall, bypassAppChooser) {\n        return;\n    };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], CallNumber, \"callNumber\", null);\n    CallNumber = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'CallNumber',\n            plugin: 'call-number',\n            pluginRef: 'plugins.CallNumber',\n            repo: 'https://github.com/Rohfosho/CordovaCallNumberPlugin',\n            platforms: ['iOS', 'Android']\n        })\n    ], CallNumber);\n    return CallNumber;\n}());\nexports.CallNumber = CallNumber;\n//# sourceMappingURL=call-number.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2NhbGwtbnVtYmVyLmpzP2VmZGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQyxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzODYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIENhbGxOdW1iZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ2FsbCBhIG51bWJlciBkaXJlY3RseSBmcm9tIHlvdXIgQ29yZG92YS9Jb25pYyBhcHBsaWNhdGlvbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtDYWxsTnVtYmVyfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIENhbGxOdW1iZXIuY2FsbE51bWJlcigxODAwMTAxMDEwMSwgdHJ1ZSlcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ0xhdW5jaGVkIGRpYWxlciEnKSlcbiAqICAgLmNhdGNoKCgpID0+IGNvbnNvbGUubG9nKCdFcnJvciBsYXVuY2hpbmcgZGlhbGVyJykpO1xuICpcbiAqIGBgYFxuICovXG52YXIgQ2FsbE51bWJlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2FsbE51bWJlcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbHMgYSBwaG9uZSBudW1iZXJcbiAgICAgKiBAcGFyYW0gbnVtYmVyVG9DYWxsIHtzdHJpbmd9IFRoZSBwaG9uZSBudW1iZXIgdG8gY2FsbCBhcyBhIHN0cmluZ1xuICAgICAqIEBwYXJhbSBieXBhc3NBcHBDaG9vc2VyIHtib29sZWFufSBTZXQgdG8gdHJ1ZSB0byBieXBhc3MgdGhlIGFwcCBjaG9vc2VyIGFuZCBnbyBkaXJlY3RseSB0byBkaWFsZXJcbiAgICAgKi9cbiAgICBDYWxsTnVtYmVyLmNhbGxOdW1iZXIgPSBmdW5jdGlvbiAobnVtYmVyVG9DYWxsLCBieXBhc3NBcHBDaG9vc2VyKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJ1xuICAgICAgICB9KVxuICAgIF0sIENhbGxOdW1iZXIsIFwiY2FsbE51bWJlclwiLCBudWxsKTtcbiAgICBDYWxsTnVtYmVyID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnQ2FsbE51bWJlcicsXG4gICAgICAgICAgICBwbHVnaW46ICdjYWxsLW51bWJlcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLkNhbGxOdW1iZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Sb2hmb3Noby9Db3Jkb3ZhQ2FsbE51bWJlclBsdWdpbicsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIENhbGxOdW1iZXIpO1xuICAgIHJldHVybiBDYWxsTnVtYmVyO1xufSgpKTtcbmV4cG9ydHMuQ2FsbE51bWJlciA9IENhbGxOdW1iZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWxsLW51bWJlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvY2FsbC1udW1iZXIuanNcbi8vIG1vZHVsZSBpZCA9IDM4NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 387 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Camera\n * @description\n * Take a photo or capture video.\n *\n * Requires {@link module:driftyco/ionic-native} and the Cordova plugin: `cordova-plugin-camera`. For more info, please see the [Cordova Camera Plugin Docs](https://github.com/apache/cordova-plugin-camera).\n *\n * @usage\n * ```typescript\n * import { Camera } from 'ionic-native';\n *\n *\n * Camera.getPicture(options).then((imageData) => {\n *  // imageData is either a base64 encoded string or a file URI\n *  // If it's base64:\n *  let base64Image = 'data:image/jpeg;base64,' + imageData;\n * }, (err) => {\n *  // Handle error\n * });\n * ```\n * @interfaces\n * CameraOptions\n * CameraPopoverOptions\n */\nvar Camera = (function () {\n    function Camera() {\n    }\n    /**\n     * Take a picture or video, or load one from the library.\n     * @param {CameraOptions?} options Options that you want to pass to the camera. Encoding type, quality, etc. Optional\n     * @return {Promise} Returns a Promise that resolves with Base64 encoding of the image data, or the image file URI, depending on cameraOptions, otherwise rejects with an error.\n     */\n    Camera.getPicture = function (options) { return; };\n    /**\n     * Remove intermediate image files that are kept in temporary storage after calling camera.getPicture.\n     * Applies only when the value of Camera.sourceType equals Camera.PictureSourceType.CAMERA and the Camera.destinationType equals Camera.DestinationType.FILE_URI.\n     * @return Returns a Promise\n     */\n    Camera.cleanup = function () { return; };\n    ;\n    /**\n     * @private\n     * @enum {number}\n     */\n    Camera.DestinationType = {\n        /** Return base64 encoded string. DATA_URL can be very memory intensive and cause app crashes or out of memory errors. Use FILE_URI or NATIVE_URI if possible */\n        DATA_URL: 0,\n        /** Return file uri (content://media/external/images/media/2 for Android) */\n        FILE_URI: 1,\n        /** Return native uri (eg. asset-library://... for iOS) */\n        NATIVE_URI: 2\n    };\n    /**\n     * @private\n     * @enum {number}\n     */\n    Camera.EncodingType = {\n        /** Return JPEG encoded image */\n        JPEG: 0,\n        /** Return PNG encoded image */\n        PNG: 1\n    };\n    /**\n     * @private\n     * @enum {number}\n     */\n    Camera.MediaType = {\n        /** Allow selection of still pictures only. DEFAULT. Will return format specified via DestinationType */\n        PICTURE: 0,\n        /** Allow selection of video only, ONLY RETURNS URL */\n        VIDEO: 1,\n        /** Allow selection from all media types */\n        ALLMEDIA: 2\n    };\n    /**\n     * @private\n     * @enum {number}\n     */\n    Camera.PictureSourceType = {\n        /** Choose image from picture library (same as SAVEDPHOTOALBUM for Android) */\n        PHOTOLIBRARY: 0,\n        /** Take picture from camera */\n        CAMERA: 1,\n        /** Choose image from picture library (same as PHOTOLIBRARY for Android) */\n        SAVEDPHOTOALBUM: 2\n    };\n    /**\n     * @private\n     * Matches iOS UIPopoverArrowDirection constants to specify arrow location on popover.\n     * @enum {number}\n     */\n    Camera.PopoverArrowDirection = {\n        ARROW_UP: 1,\n        ARROW_DOWN: 2,\n        ARROW_LEFT: 4,\n        ARROW_RIGHT: 8,\n        ARROW_ANY: 15\n    };\n    /**\n     * @private\n     * @enum {number}\n     */\n    Camera.Direction = {\n        /** Use the back-facing camera */\n        BACK: 0,\n        /** Use the front-facing camera */\n        FRONT: 1\n    };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Camera, \"getPicture\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS']\n        })\n    ], Camera, \"cleanup\", null);\n    Camera = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Camera',\n            plugin: 'cordova-plugin-camera',\n            pluginRef: 'navigator.camera',\n            repo: 'https://github.com/apache/cordova-plugin-camera',\n            platforms: ['Android', 'BlackBerry', 'Browser', 'Firefox', 'FireOS', 'iOS', 'Windows', 'Windows Phone 8', 'Ubuntu']\n        })\n    ], Camera);\n    return Camera;\n}());\nexports.Camera = Camera;\n//# sourceMappingURL=camera.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 388 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name CameraPreview\n * @description\n * Showing camera preview in HTML\n *\n * For more info, please see the [Cordova Camera Preview Plugin Docs](https://github.com/westonganger/cordova-plugin-camera-preview).\n *\n * @usage\n * ```\n * import { CameraPreview } from 'ionic-native';\n *\n * // camera options (Size and location)\n * let cameraRect: CameraPreviewRect = {\n *   x: 100,\n *   y: 100,\n *   width: 200,\n *   height: 200\n * };\n *\n *\n * // start camera\n * CameraPreview.startCamera(\n *   cameraRect, // position and size of preview\n *   'front', // default camera\n *   true, // tape to take picture\n *   false, // disable drag\n *   true // send the preview to the back of the screen so we can add overlaying elements\n * );\n *\n * // Set the handler to run every time we take a picture\n * CameraPreview.setOnPictureTakenHandler().subscribe((result) => {\n *   console.log(result);\n *   // do something with the result\n * });\n *\n *\n * // take a picture\n * CameraPreview.takePicture({\n *   maxWidth: 640,\n *   maxHeight: 640\n * });\n *\n * // Switch camera\n * CameraPreview.switchCamera();\n *\n * // set color effect to negative\n * CameraPreview.setColorEffect('negative');\n *\n * // Stop the camera preview\n * CameraPreview.stopCamera();\n *\n * ```\n *\n */\nvar CameraPreview = (function () {\n    function CameraPreview() {\n    }\n    /**\n     * Starts the camera preview instance.\n     * @param {CameraPreviewRect} position and size of the preview window - {x: number, y: number, width: number, height: number}\n     * @param {string} which camera to use - 'front' | 'back'\n     * @param {boolean} enable tap to take picture\n     * @param {boolean} enable preview box drag across the screen\n     * @param {boolean} send preview box to the back of the webview\n     * @param {number} alpha of the preview box\n     */\n    CameraPreview.startCamera = function (rect, defaultCamera, tapEnabled, dragEnabled, toBack, alpha) { };\n    ;\n    /**\n     * Stops the camera preview instance.\n     */\n    CameraPreview.stopCamera = function () { };\n    ;\n    /**\n     * Take the picture, the parameter size is optional\n     * @param {CameraPreviewSize} optional - size of the picture to take\n     */\n    CameraPreview.takePicture = function (size) { };\n    ;\n    /**\n     * Register a callback function that receives the original picture and the image captured from the preview box.\n     */\n    CameraPreview.setOnPictureTakenHandler = function () { return; };\n    ;\n    /**\n     * Switch from the rear camera and front camera, if available.\n     */\n    CameraPreview.switchCamera = function () { };\n    ;\n    /**\n     * Show the camera preview box.\n     */\n    CameraPreview.show = function () { };\n    ;\n    /**\n     * Hide the camera preview box.\n     */\n    CameraPreview.hide = function () { };\n    ;\n    /**\n     * Set camera color effect.\n     */\n    CameraPreview.setColorEffect = function (effect) { };\n    ;\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"startCamera\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"stopCamera\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"takePicture\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], CameraPreview, \"setOnPictureTakenHandler\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"switchCamera\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"show\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"hide\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], CameraPreview, \"setColorEffect\", null);\n    CameraPreview = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'CameraPreview',\n            plugin: 'cordova-plugin-camera-preview',\n            pluginRef: 'cordova.plugins.camerapreview',\n            repo: 'https://github.com/westonganger/cordova-plugin-camera-preview',\n            platforms: ['Android', 'iOS']\n        })\n    ], CameraPreview);\n    return CameraPreview;\n}());\nexports.CameraPreview = CameraPreview;\n//# sourceMappingURL=camera-preview.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 389 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name CardIO\n * @description\n * @usage\n * ```\n * import { CardIO } from 'ionic-native';\n *\n *\n * CardIO.canScan()\n *   .then(\n *     (res: boolean) => {\n *       if(res){\n *         let options = {\n *           requireExpiry: true,\n *           requireCCV: false,\n *           requirePostalCode: false\n *         };\n *         CardIO.scan(options);\n *       }\n *     }\n *   );\n * ```\n */\nvar CardIO = (function () {\n    function CardIO() {\n    }\n    /**\n     * Check whether card scanning is currently available. (May vary by\n     * device, OS version, network connectivity, etc.)\n     *\n     */\n    CardIO.canScan = function () { return; };\n    /**\n     * Scan a credit card with card.io.\n     * @param {CardIOOptions} options Options for configuring the plugin\n     */\n    CardIO.scan = function (options) { return; };\n    /**\n     * Retrieve the version of the card.io library. Useful when contacting support.\n     */\n    CardIO.version = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], CardIO, \"canScan\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], CardIO, \"scan\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], CardIO, \"version\", null);\n    CardIO = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'CardIO',\n            plugin: 'https://github.com/card-io/card.io-Cordova-Plugin',\n            pluginRef: 'CardIO',\n            repo: 'https://github.com/card-io/card.io-Cordova-Plugin',\n            platforms: ['iOS', 'Android']\n        })\n    ], CardIO);\n    return CardIO;\n}());\nexports.CardIO = CardIO;\n//# sourceMappingURL=card-io.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2NhcmQtaW8uanM/ODU1NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0EsZUFBZSxjQUFjO0FBQzdCO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM4OS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgQ2FyZElPXG4gKiBAZGVzY3JpcHRpb25cbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQgeyBDYXJkSU8gfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBDYXJkSU8uY2FuU2NhbigpXG4gKiAgIC50aGVuKFxuICogICAgIChyZXM6IGJvb2xlYW4pID0+IHtcbiAqICAgICAgIGlmKHJlcyl7XG4gKiAgICAgICAgIGxldCBvcHRpb25zID0ge1xuICogICAgICAgICAgIHJlcXVpcmVFeHBpcnk6IHRydWUsXG4gKiAgICAgICAgICAgcmVxdWlyZUNDVjogZmFsc2UsXG4gKiAgICAgICAgICAgcmVxdWlyZVBvc3RhbENvZGU6IGZhbHNlXG4gKiAgICAgICAgIH07XG4gKiAgICAgICAgIENhcmRJTy5zY2FuKG9wdGlvbnMpO1xuICogICAgICAgfVxuICogICAgIH1cbiAqICAgKTtcbiAqIGBgYFxuICovXG52YXIgQ2FyZElPID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBDYXJkSU8oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrIHdoZXRoZXIgY2FyZCBzY2FubmluZyBpcyBjdXJyZW50bHkgYXZhaWxhYmxlLiAoTWF5IHZhcnkgYnlcbiAgICAgKiBkZXZpY2UsIE9TIHZlcnNpb24sIG5ldHdvcmsgY29ubmVjdGl2aXR5LCBldGMuKVxuICAgICAqXG4gICAgICovXG4gICAgQ2FyZElPLmNhblNjYW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTY2FuIGEgY3JlZGl0IGNhcmQgd2l0aCBjYXJkLmlvLlxuICAgICAqIEBwYXJhbSB7Q2FyZElPT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgcGx1Z2luXG4gICAgICovXG4gICAgQ2FyZElPLnNjYW4gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmV0cmlldmUgdGhlIHZlcnNpb24gb2YgdGhlIGNhcmQuaW8gbGlicmFyeS4gVXNlZnVsIHdoZW4gY29udGFjdGluZyBzdXBwb3J0LlxuICAgICAqL1xuICAgIENhcmRJTy52ZXJzaW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIENhcmRJTywgXCJjYW5TY2FuXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBDYXJkSU8sIFwic2NhblwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgQ2FyZElPLCBcInZlcnNpb25cIiwgbnVsbCk7XG4gICAgQ2FyZElPID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnQ2FyZElPJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9jYXJkLWlvL2NhcmQuaW8tQ29yZG92YS1QbHVnaW4nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnQ2FyZElPJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY2FyZC1pby9jYXJkLmlvLUNvcmRvdmEtUGx1Z2luJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddXG4gICAgICAgIH0pXG4gICAgXSwgQ2FyZElPKTtcbiAgICByZXR1cm4gQ2FyZElPO1xufSgpKTtcbmV4cG9ydHMuQ2FyZElPID0gQ2FyZElPO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FyZC1pby5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvY2FyZC1pby5qc1xuLy8gbW9kdWxlIGlkID0gMzg5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 390 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Clipboard\n * @description\n * Clipboard management plugin for Cordova that supports iOS, Android, and Windows Phone 8.\n *\n * Requires Cordova plugin: https://github.com/VersoSolutions/CordovaClipboard\n * For more info, please see the [Clipboard plugin docs](https://github.com/VersoSolutions/CordovaClipboard.git).\n *\n * @usage\n * ```typescript\n * import { Clipboard } from 'ionic-native';\n *\n *\n * Clipboard.copy('Hello world');\n *\n * Clipboard.paste().then(\n *    (resolve: string) => {\n *     alert(resolve);\n *     },\n *     (reject: string) => {\n *     alert('Error: ' + reject);\n *     }\n *     );\n * );\n * ```\n */\nvar Clipboard = (function () {\n    function Clipboard() {\n    }\n    /**\n     * Copies the given text\n     * @param {string} text Text that gets copied on the system clipboard\n     * @returns {Promise<T>} Returns a promise after the text has been copied\n     */\n    Clipboard.copy = function (text) { return; };\n    /**\n     * Pastes the text stored in clipboard\n     * @returns {Promise<T>} Returns a promise after the text has been pasted\n     */\n    Clipboard.paste = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Clipboard, \"copy\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Clipboard, \"paste\", null);\n    Clipboard = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Clipboard',\n            plugin: 'https://github.com/VersoSolutions/CordovaClipboard.git',\n            pluginRef: 'cordova.plugins.clipboard',\n            repo: 'https://github.com/VersoSolutions/CordovaClipboard',\n            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser']\n        })\n    ], Clipboard);\n    return Clipboard;\n}());\nexports.Clipboard = Clipboard;\n//# sourceMappingURL=clipboard.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2NsaXBib2FyZC5qcz9lZGFiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0EsbUNBQW1DLFFBQVE7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM5MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgQ2xpcGJvYXJkXG4gKiBAZGVzY3JpcHRpb25cbiAqIENsaXBib2FyZCBtYW5hZ2VtZW50IHBsdWdpbiBmb3IgQ29yZG92YSB0aGF0IHN1cHBvcnRzIGlPUywgQW5kcm9pZCwgYW5kIFdpbmRvd3MgUGhvbmUgOC5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogaHR0cHM6Ly9naXRodWIuY29tL1ZlcnNvU29sdXRpb25zL0NvcmRvdmFDbGlwYm9hcmRcbiAqIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtDbGlwYm9hcmQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9WZXJzb1NvbHV0aW9ucy9Db3Jkb3ZhQ2xpcGJvYXJkLmdpdCkuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBDbGlwYm9hcmQgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBDbGlwYm9hcmQuY29weSgnSGVsbG8gd29ybGQnKTtcbiAqXG4gKiBDbGlwYm9hcmQucGFzdGUoKS50aGVuKFxuICogICAgKHJlc29sdmU6IHN0cmluZykgPT4ge1xuICogICAgIGFsZXJ0KHJlc29sdmUpO1xuICogICAgIH0sXG4gKiAgICAgKHJlamVjdDogc3RyaW5nKSA9PiB7XG4gKiAgICAgYWxlcnQoJ0Vycm9yOiAnICsgcmVqZWN0KTtcbiAqICAgICB9XG4gKiAgICAgKTtcbiAqICk7XG4gKiBgYGBcbiAqL1xudmFyIENsaXBib2FyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ2xpcGJvYXJkKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb3BpZXMgdGhlIGdpdmVuIHRleHRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCBUZXh0IHRoYXQgZ2V0cyBjb3BpZWQgb24gdGhlIHN5c3RlbSBjbGlwYm9hcmRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gUmV0dXJucyBhIHByb21pc2UgYWZ0ZXIgdGhlIHRleHQgaGFzIGJlZW4gY29waWVkXG4gICAgICovXG4gICAgQ2xpcGJvYXJkLmNvcHkgPSBmdW5jdGlvbiAodGV4dCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUGFzdGVzIHRoZSB0ZXh0IHN0b3JlZCBpbiBjbGlwYm9hcmRcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxUPn0gUmV0dXJucyBhIHByb21pc2UgYWZ0ZXIgdGhlIHRleHQgaGFzIGJlZW4gcGFzdGVkXG4gICAgICovXG4gICAgQ2xpcGJvYXJkLnBhc3RlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIENsaXBib2FyZCwgXCJjb3B5XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBDbGlwYm9hcmQsIFwicGFzdGVcIiwgbnVsbCk7XG4gICAgQ2xpcGJvYXJkID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnQ2xpcGJvYXJkJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9WZXJzb1NvbHV0aW9ucy9Db3Jkb3ZhQ2xpcGJvYXJkLmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuY2xpcGJvYXJkJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVmVyc29Tb2x1dGlvbnMvQ29yZG92YUNsaXBib2FyZCcsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnaU9TJywgJ0FuZHJvaWQnLCAnQmxhY2tCZXJyeSAxMCcsICdXaW5kb3dzIFBob25lIDcnLCAnV2luZG93cyBQaG9uZSA4JywgJ1dpbmRvd3MnLCAnRmlyZWZveCBPUycsICdCcm93c2VyJ11cbiAgICAgICAgfSlcbiAgICBdLCBDbGlwYm9hcmQpO1xuICAgIHJldHVybiBDbGlwYm9hcmQ7XG59KCkpO1xuZXhwb3J0cy5DbGlwYm9hcmQgPSBDbGlwYm9hcmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGlwYm9hcmQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2NsaXBib2FyZC5qc1xuLy8gbW9kdWxlIGlkID0gMzkwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 391 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * Defines the possible result statuses of the window.codePush.sync operation.\n */\n(function (SyncStatus) {\n    /**\n     * The application is up to date.\n     */\n    SyncStatus[SyncStatus[\"UP_TO_DATE\"] = 0] = \"UP_TO_DATE\";\n    /**\n     * An update is available, it has been downloaded, unzipped and copied to the deployment folder.\n     * After the completion of the callback invoked with SyncStatus.UPDATE_INSTALLED, the application will be reloaded with the updated code and resources.\n     */\n    SyncStatus[SyncStatus[\"UPDATE_INSTALLED\"] = 1] = \"UPDATE_INSTALLED\";\n    /**\n     * An optional update is available, but the user declined to install it. The update was not downloaded.\n     */\n    SyncStatus[SyncStatus[\"UPDATE_IGNORED\"] = 2] = \"UPDATE_IGNORED\";\n    /**\n     * An error happened during the sync operation. This might be an error while communicating with the server, downloading or unziping the update.\n     * The console logs should contain more information about what happened. No update has been applied in this case.\n     */\n    SyncStatus[SyncStatus[\"ERROR\"] = 3] = \"ERROR\";\n    /**\n     * There is an ongoing sync in progress, so this attempt to sync has been aborted.\n     */\n    SyncStatus[SyncStatus[\"IN_PROGRESS\"] = 4] = \"IN_PROGRESS\";\n    /**\n     * Intermediate status - the plugin is about to check for updates.\n     */\n    SyncStatus[SyncStatus[\"CHECKING_FOR_UPDATE\"] = 5] = \"CHECKING_FOR_UPDATE\";\n    /**\n     * Intermediate status - a user dialog is about to be displayed. This status will be reported only if user interaction is enabled.\n     */\n    SyncStatus[SyncStatus[\"AWAITING_USER_ACTION\"] = 6] = \"AWAITING_USER_ACTION\";\n    /**\n     * Intermediate status - the update package is about to be downloaded.\n     */\n    SyncStatus[SyncStatus[\"DOWNLOADING_PACKAGE\"] = 7] = \"DOWNLOADING_PACKAGE\";\n    /**\n     * Intermediate status - the update package is about to be installed.\n     */\n    SyncStatus[SyncStatus[\"INSTALLING_UPDATE\"] = 8] = \"INSTALLING_UPDATE\";\n})(exports.SyncStatus || (exports.SyncStatus = {}));\nvar SyncStatus = exports.SyncStatus;\n/**\n * Defines the available install modes for updates.\n */\n(function (InstallMode) {\n    /**\n     * The update will be applied to the running application immediately. The application will be reloaded with the new content immediately.\n     */\n    InstallMode[InstallMode[\"IMMEDIATE\"] = 0] = \"IMMEDIATE\";\n    /**\n     * The update is downloaded but not installed immediately. The new content will be available the next time the application is started.\n     */\n    InstallMode[InstallMode[\"ON_NEXT_RESTART\"] = 1] = \"ON_NEXT_RESTART\";\n    /**\n     * The udpate is downloaded but not installed immediately. The new content will be available the next time the application is resumed or restarted, whichever event happends first.\n     */\n    InstallMode[InstallMode[\"ON_NEXT_RESUME\"] = 2] = \"ON_NEXT_RESUME\";\n})(exports.InstallMode || (exports.InstallMode = {}));\nvar InstallMode = exports.InstallMode;\n/**\n * @name CodePush\n * @description\n * CodePush plugin for Cordova by Microsoft that supports iOS and Android.\n *\n * For more info, please see https://github.com/ksachdeva/ionic2-code-push-example\n *\n * @usage\n * ```typescript\n * import { CodePush } from 'ionic-native';\n *\n * // note - mostly error & completed methods of observable will not fire\n * // as syncStatus will contain the current state of the update\n * CodePush.sync().subscribe((syncStatus) => console.log(syncStatus));\n *\n * const downloadProgress = (progress) => { console.log(`Downloaded ${progress.receivedBytes} of ${progress.totalBytes}`); }\n * CodePush.sync({}, downloadProgress).subscribe((syncStatus) => console.log(syncStatus));\n *\n * ```\n */\nvar CodePush = (function () {\n    function CodePush() {\n    }\n    /**\n     * Get the current package information.\n     *\n     * @param packageSuccess Callback invoked with the currently deployed package information.\n     * @param packageError Optional callback invoked in case of an error.\n     */\n    CodePush.getCurrentPackage = function () {\n        return;\n    };\n    /**\n     * Gets the pending package information, if any. A pending package is one that has been installed but the application still runs the old code.\n     * This happends only after a package has been installed using ON_NEXT_RESTART or ON_NEXT_RESUME mode, but the application was not restarted/resumed yet.\n     */\n    CodePush.getPendingPackage = function () {\n        return;\n    };\n    /**\n     * Checks with the CodePush server if an update package is available for download.\n     *\n     * @param querySuccess Callback invoked in case of a successful response from the server.\n     *                     The callback takes one RemotePackage parameter. A non-null package is a valid update.\n     *                     A null package means the application is up to date for the current native application version.\n     * @param queryError Optional callback invoked in case of an error.\n     * @param deploymentKey Optional deployment key that overrides the config.xml setting.\n     */\n    CodePush.checkForUpdate = function (deploymentKey) {\n        return;\n    };\n    /**\n     * Notifies the plugin that the update operation succeeded and that the application is ready.\n     * Calling this function is required on the first run after an update. On every subsequent application run, calling this function is a noop.\n     * If using sync API, calling this function is not required since sync calls it internally.\n     *\n     * @param notifySucceeded Optional callback invoked if the plugin was successfully notified.\n     * @param notifyFailed Optional callback invoked in case of an error during notifying the plugin.\n     */\n    CodePush.notifyApplicationReady = function () {\n        return;\n    };\n    /**\n     * Reloads the application. If there is a pending update package installed using ON_NEXT_RESTART or ON_NEXT_RESUME modes, the update\n     * will be immediately visible to the user. Otherwise, calling this function will simply reload the current version of the application.\n     */\n    CodePush.restartApplication = function () {\n        return;\n    };\n    /**\n     * Convenience method for installing updates in one method call.\n     * This method is provided for simplicity, and its behavior can be replicated by using window.codePush.checkForUpdate(), RemotePackage's download() and LocalPackage's install() methods.\n     *\n     * The algorithm of this method is the following:\n     * - Checks for an update on the CodePush server.\n     * - If an update is available\n     *         - If the update is mandatory and the alertMessage is set in options, the user will be informed that the application will be updated to the latest version.\n     *           The update package will then be downloaded and applied.\n     *         - If the update is not mandatory and the confirmMessage is set in options, the user will be asked if they want to update to the latest version.\n     *           If they decline, the syncCallback will be invoked with SyncStatus.UPDATE_IGNORED.\n     *         - Otherwise, the update package will be downloaded and applied with no user interaction.\n     * - If no update is available on the server, or if a previously rolled back update is available and the ignoreFailedUpdates is set to true, the syncCallback will be invoked with the SyncStatus.UP_TO_DATE.\n     * - If an error occurs during checking for update, downloading or installing it, the syncCallback will be invoked with the SyncStatus.ERROR.\n     *\n     * @param syncCallback Optional callback to be called with the status of the sync operation.\n     * @param syncOptions Optional SyncOptions parameter configuring the behavior of the sync operation.\n     * @param downloadProgress Optional callback invoked during the download process. It is called several times with one DownloadProgress parameter.\n     *\n     */\n    CodePush.sync = function (syncOptions, downloadProgress) {\n        return;\n    };\n    __decorate([\n        plugin_1.Cordova()\n    ], CodePush, \"getCurrentPackage\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], CodePush, \"getPendingPackage\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], CodePush, \"checkForUpdate\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], CodePush, \"notifyApplicationReady\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], CodePush, \"restartApplication\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            successIndex: 0,\n            errorIndex: 3 // we don't need this, so we set it to a value higher than # of args\n        })\n    ], CodePush, \"sync\", null);\n    CodePush = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'CodePush',\n            plugin: 'cordova-plugin-code-push',\n            pluginRef: 'codePush',\n            repo: 'https://github.com/Microsoft/cordova-plugin-code-push',\n            platforms: ['Android', 'iOS']\n        })\n    ], CodePush);\n    return CodePush;\n}());\nexports.CodePush = CodePush;\n//# sourceMappingURL=code-push.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 392 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @private\n */\nvar Contact = (function () {\n    function Contact() {\n        this._objectInstance = navigator.contacts.create();\n    }\n    Object.defineProperty(Contact.prototype, \"id\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"displayName\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"name\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"nickname\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"phoneNumbers\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"emails\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"addresses\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"ims\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"organizations\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"birthday\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"note\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"photos\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"categories\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Contact.prototype, \"urls\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Contact.prototype.clone = function () {\n        var newContact = new Contact();\n        for (var prop in this) {\n            if (prop === 'id')\n                return;\n            newContact[prop] = this[prop];\n        }\n        return newContact;\n    };\n    Contact.prototype.remove = function () { return; };\n    Contact.prototype.save = function () { return; };\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"id\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"displayName\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"name\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"nickname\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"phoneNumbers\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"emails\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"addresses\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"ims\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"organizations\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"birthday\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"note\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"photos\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"categories\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], Contact.prototype, \"urls\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], Contact.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], Contact.prototype, \"save\", null);\n    return Contact;\n}());\nexports.Contact = Contact;\n/**\n * @private\n */\nvar ContactName = (function () {\n    function ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix) {\n        this._objectInstance = new window.ContactName(formatted, familyName, givenName, middleName, honorificPrefix, honorificSuffix);\n    }\n    Object.defineProperty(ContactName.prototype, \"formatted\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactName.prototype, \"familyName\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactName.prototype, \"givenName\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactName.prototype, \"middleName\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactName.prototype, \"honorificPrefix\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactName.prototype, \"honorificSuffix\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"formatted\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"familyName\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"givenName\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"middleName\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"honorificPrefix\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactName.prototype, \"honorificSuffix\", null);\n    return ContactName;\n}());\nexports.ContactName = ContactName;\n/**\n * @private\n */\nvar ContactField = (function () {\n    function ContactField(type, value, pref) {\n        this._objectInstance = new window.ContactField(type, value, pref);\n    }\n    Object.defineProperty(ContactField.prototype, \"type\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactField.prototype, \"value\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactField.prototype, \"pref\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactField.prototype, \"type\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactField.prototype, \"value\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactField.prototype, \"pref\", null);\n    return ContactField;\n}());\nexports.ContactField = ContactField;\n/**\n * @private\n */\nvar ContactAddress = (function () {\n    function ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country) {\n        this._objectInstance = new window.ContactAddress(pref, type, formatted, streetAddress, locality, region, postalCode, country);\n    }\n    Object.defineProperty(ContactAddress.prototype, \"pref\", {\n        /** Set to true if this ContactAddress contains the user's preferred value. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"type\", {\n        /** A string indicating what type of field this is, home for example. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"formatted\", {\n        /** The full address formatted for display. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"streetAddress\", {\n        /** The full street address. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"locality\", {\n        /** The city or locality. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"region\", {\n        /** The state or region. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"postalCode\", {\n        /** The zip code or postal code. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactAddress.prototype, \"country\", {\n        /** The country name. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"pref\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"type\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"formatted\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"streetAddress\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"locality\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"region\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"postalCode\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactAddress.prototype, \"country\", null);\n    return ContactAddress;\n}());\nexports.ContactAddress = ContactAddress;\n/**\n * @private\n */\nvar ContactOrganization = (function () {\n    function ContactOrganization() {\n        this._objectInstance = new window.ContactOrganization();\n    }\n    Object.defineProperty(ContactOrganization.prototype, \"pref\", {\n        /** Set to true if this ContactOrganization contains the user's preferred value. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactOrganization.prototype, \"type\", {\n        /** A string that indicates what type of field this is, home for example. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactOrganization.prototype, \"name\", {\n        /** The name of the organization. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactOrganization.prototype, \"department\", {\n        /** The department the contract works for. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactOrganization.prototype, \"title\", {\n        /** The contact's title at the organization. */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactOrganization.prototype, \"pref\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactOrganization.prototype, \"type\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactOrganization.prototype, \"name\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactOrganization.prototype, \"department\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactOrganization.prototype, \"title\", null);\n    return ContactOrganization;\n}());\nexports.ContactOrganization = ContactOrganization;\n/**\n * @private\n */\nvar ContactFindOptions = (function () {\n    function ContactFindOptions() {\n        this._objectInstance = new window.ContactFindOptions();\n    }\n    Object.defineProperty(ContactFindOptions.prototype, \"filter\", {\n        /**\n         * The search string used to find navigator.contacts. (Default: \"\")\n         */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactFindOptions.prototype, \"multiple\", {\n        /**\n         * Determines if the find operation returns multiple navigator.contacts. (Default: false)\n         */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactFindOptions.prototype, \"desiredFields\", {\n        /**\n         * Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields.\n         */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(ContactFindOptions.prototype, \"hasPhoneNumber\", {\n        /**\n         * (Android only): Filters the search to only return contacts with a phone number informed.\n         */\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactFindOptions.prototype, \"filter\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactFindOptions.prototype, \"multiple\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactFindOptions.prototype, \"desiredFields\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], ContactFindOptions.prototype, \"hasPhoneNumber\", null);\n    return ContactFindOptions;\n}());\nexports.ContactFindOptions = ContactFindOptions;\n/**\n * @name Contacts\n * @description\n * Access and manage Contacts on the device.\n *\n * @usage\n *\n * ```typescript\n * import { Contact } from 'ionic-native';\n *\n *\n * let contact = new Contact();\n * contact.displayName = 'Mr. Ionitron';\n * contact.save().then(\n *   () => console.log('Contact saved!', contact),\n *   (error: any) => console.error('Error saving contact.', error)\n * );\n * ```\n * @interfaces\n * IContactProperties\n * @classes\n * ContactFindOptions\n * ContactOrganization\n * ContactAddress\n */\nvar Contacts = (function () {\n    function Contacts() {\n    }\n    /**\n     * Create a single contact.\n     * @return Returns a object Contact\n     */\n    Contacts.create = function () {\n        return new Contact();\n    };\n    /**\n     * Search for contacts in the Contacts list.\n     * @param fields {string[]}  Contact fields to be used as a search qualifier.\n     *  A zero-length contactFields parameter is invalid and results in ContactError.INVALID_ARGUMENT_ERROR.\n     *  A contactFields value of \"*\" searches all contact fields.\n     *\n     * @param options {Object} the options to query with:\n     *   filter: The search string used to find navigator.contacts. (string) (Default: \"\")\n     *   multiple: Determines if the find operation returns multiple navigator.contacts. (Boolean) (Default: false)\n     *   desiredFields: Contact fields to be returned back. If specified, the resulting Contact object only features values for these fields. (DOMString[]) [Optional]\n     *   hasPhoneNumber(Android only): Filters the search to only return contacts with a phone number informed. (Boolean) (Default: false)\n     *\n     * @return Returns a Promise that resolves with the search results (an array of Contact objects)\n     */\n    Contacts.find = function (fields, options) { return; };\n    /**\n     * Select a single Contact.\n     * @return Returns a Promise that resolves with the selected Contact\n     */\n    Contacts.pickContact = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], Contacts, \"find\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Contacts, \"pickContact\", null);\n    Contacts = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Contacts',\n            plugin: 'cordova-plugin-contacts',\n            pluginRef: 'navigator.contacts',\n            repo: 'https://github.com/apache/cordova-plugin-contacts'\n        })\n    ], Contacts);\n    return Contacts;\n}());\nexports.Contacts = Contacts;\n//# sourceMappingURL=contacts.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 393 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Crop\n * @description Crops images\n * @usage\n * ```\n * import {Crop} from 'ionic-native';\n *\n * ...\n *\n * Crop.crop('path/to/image.jpg', {quality: 75})\n *   .then(\n *     newImage => console.log(\"new image path is: \" + newImage),\n *     error => console.error(\"Error cropping image\", error)\n *   );\n * ```\n */\nvar Crop = (function () {\n    function Crop() {\n    }\n    /**\n     * Crops an image\n     * @param pathToImage\n     * @param options\n     * @return {Promise<string>} Returns a promise that resolves with the new image path, or rejects if failed to crop.\n     */\n    Crop.crop = function (pathToImage, options) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Crop, \"crop\", null);\n    Crop = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Crop',\n            plugin: 'cordova-plugin-crop',\n            pluginRef: 'plugins',\n            repo: 'https://github.com/jeduan/cordova-plugin-crop'\n        })\n    ], Crop);\n    return Crop;\n}());\nexports.Crop = Crop;\n//# sourceMappingURL=crop.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2Nyb3AuanM/OGY2ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLEtBQUs7QUFDaEI7QUFDQTtBQUNBO0FBQ0EsbUNBQW1DLFlBQVk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzOTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIENyb3BcbiAqIEBkZXNjcmlwdGlvbiBDcm9wcyBpbWFnZXNcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge0Nyb3B9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogLi4uXG4gKlxuICogQ3JvcC5jcm9wKCdwYXRoL3RvL2ltYWdlLmpwZycsIHtxdWFsaXR5OiA3NX0pXG4gKiAgIC50aGVuKFxuICogICAgIG5ld0ltYWdlID0+IGNvbnNvbGUubG9nKFwibmV3IGltYWdlIHBhdGggaXM6IFwiICsgbmV3SW1hZ2UpLFxuICogICAgIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoXCJFcnJvciBjcm9wcGluZyBpbWFnZVwiLCBlcnJvcilcbiAqICAgKTtcbiAqIGBgYFxuICovXG52YXIgQ3JvcCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ3JvcCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JvcHMgYW4gaW1hZ2VcbiAgICAgKiBAcGFyYW0gcGF0aFRvSW1hZ2VcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBuZXcgaW1hZ2UgcGF0aCwgb3IgcmVqZWN0cyBpZiBmYWlsZWQgdG8gY3JvcC5cbiAgICAgKi9cbiAgICBDcm9wLmNyb3AgPSBmdW5jdGlvbiAocGF0aFRvSW1hZ2UsIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJ1xuICAgICAgICB9KVxuICAgIF0sIENyb3AsIFwiY3JvcFwiLCBudWxsKTtcbiAgICBDcm9wID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnQ3JvcCcsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1jcm9wJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3BsdWdpbnMnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9qZWR1YW4vY29yZG92YS1wbHVnaW4tY3JvcCdcbiAgICAgICAgfSlcbiAgICBdLCBDcm9wKTtcbiAgICByZXR1cm4gQ3JvcDtcbn0oKSk7XG5leHBvcnRzLkNyb3AgPSBDcm9wO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3JvcC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvY3JvcC5qc1xuLy8gbW9kdWxlIGlkID0gMzkzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 394 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Date Picker\n * @description\n * The DatePicker plugin allows the user to fetch date or time using native dialogs.\n *\n * Platforms supported: iOS, Android, Windows\n *\n * Requires Cordova plugin: `cordova-plugin-datepicker`. For more info, please see the [DatePicker plugin docs](https://github.com/VitaliiBlagodir/cordova-plugin-datepicker).\n *\n * @usage\n * ```typescript\n * import { DatePicker } from 'ionic-native';\n *\n *\n * DatePicker.show({\n *   date: new Date(),\n *   mode: 'date'\n * }).then(\n *   date => console.log('Got date: ', date),\n *   err => console.log('Error occurred while getting date: ', err)\n * );\n * ```\n * @interfaces\n * DatePickerOptions\n */\nvar DatePicker = (function () {\n    function DatePicker() {\n    }\n    /**\n     * Shows the date and/or time picker dialog(s)\n     * @param {DatePickerOptions} options Options for the date picker.\n     * @returns {Promise<Date>} Returns a promise that resolves with the picked date and/or time, or rejects with an error.\n     */\n    DatePicker.show = function (options) {\n        return;\n    };\n    /**\n     * @private\n     */\n    DatePicker.ANDROID_THEMES = {\n        THEME_TRADITIONAL: 1,\n        THEME_HOLO_DARK: 2,\n        THEME_HOLO_LIGHT: 3,\n        THEME_DEVICE_DEFAULT_DARK: 4,\n        THEME_DEVICE_DEFAULT_LIGHT: 5\n    };\n    __decorate([\n        plugin_1.Cordova()\n    ], DatePicker, \"show\", null);\n    DatePicker = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DatePicker',\n            plugin: 'cordova-plugin-datepicker',\n            pluginRef: 'datePicker',\n            repo: 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'\n        })\n    ], DatePicker);\n    return DatePicker;\n}());\nexports.DatePicker = DatePicker;\n//# sourceMappingURL=datepicker.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RhdGVwaWNrZXIuanM/NDg4MiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzOTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIERhdGUgUGlja2VyXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoZSBEYXRlUGlja2VyIHBsdWdpbiBhbGxvd3MgdGhlIHVzZXIgdG8gZmV0Y2ggZGF0ZSBvciB0aW1lIHVzaW5nIG5hdGl2ZSBkaWFsb2dzLlxuICpcbiAqIFBsYXRmb3JtcyBzdXBwb3J0ZWQ6IGlPUywgQW5kcm9pZCwgV2luZG93c1xuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4tZGF0ZXBpY2tlcmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtEYXRlUGlja2VyIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vVml0YWxpaUJsYWdvZGlyL2NvcmRvdmEtcGx1Z2luLWRhdGVwaWNrZXIpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIERhdGVQaWNrZXIuc2hvdyh7XG4gKiAgIGRhdGU6IG5ldyBEYXRlKCksXG4gKiAgIG1vZGU6ICdkYXRlJ1xuICogfSkudGhlbihcbiAqICAgZGF0ZSA9PiBjb25zb2xlLmxvZygnR290IGRhdGU6ICcsIGRhdGUpLFxuICogICBlcnIgPT4gY29uc29sZS5sb2coJ0Vycm9yIG9jY3VycmVkIHdoaWxlIGdldHRpbmcgZGF0ZTogJywgZXJyKVxuICogKTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIERhdGVQaWNrZXJPcHRpb25zXG4gKi9cbnZhciBEYXRlUGlja2VyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEYXRlUGlja2VyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG93cyB0aGUgZGF0ZSBhbmQvb3IgdGltZSBwaWNrZXIgZGlhbG9nKHMpXG4gICAgICogQHBhcmFtIHtEYXRlUGlja2VyT3B0aW9uc30gb3B0aW9ucyBPcHRpb25zIGZvciB0aGUgZGF0ZSBwaWNrZXIuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8RGF0ZT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgcGlja2VkIGRhdGUgYW5kL29yIHRpbWUsIG9yIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBEYXRlUGlja2VyLnNob3cgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIERhdGVQaWNrZXIuQU5EUk9JRF9USEVNRVMgPSB7XG4gICAgICAgIFRIRU1FX1RSQURJVElPTkFMOiAxLFxuICAgICAgICBUSEVNRV9IT0xPX0RBUks6IDIsXG4gICAgICAgIFRIRU1FX0hPTE9fTElHSFQ6IDMsXG4gICAgICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0RBUks6IDQsXG4gICAgICAgIFRIRU1FX0RFVklDRV9ERUZBVUxUX0xJR0hUOiA1XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRGF0ZVBpY2tlciwgXCJzaG93XCIsIG51bGwpO1xuICAgIERhdGVQaWNrZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdEYXRlUGlja2VyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRhdGVwaWNrZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnZGF0ZVBpY2tlcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1ZpdGFsaWlCbGFnb2Rpci9jb3Jkb3ZhLXBsdWdpbi1kYXRlcGlja2VyJ1xuICAgICAgICB9KVxuICAgIF0sIERhdGVQaWNrZXIpO1xuICAgIHJldHVybiBEYXRlUGlja2VyO1xufSgpKTtcbmV4cG9ydHMuRGF0ZVBpY2tlciA9IERhdGVQaWNrZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlcGlja2VyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9kYXRlcGlja2VyLmpzXG4vLyBtb2R1bGUgaWQgPSAzOTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 395 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name DB Meter\n * @description This plugin defines a global DBMeter object, which permits to get the decibel values from the microphone.\n * @usage\n * ```typescript\n * import { DBMeter } from 'ionic-native';\n *\n *\n * // Start listening\n * let subscription = DBMeter.start().subscribe(\n *   data => console.log(data)\n * );\n *\n * // Check if we are listening\n * DBMeter.isListening().then(\n *   (isListening: boolean) => console.log(isListening)\n * );\n *\n * // Stop listening\n * subscription.unsubscribe();\n *\n * // Delete DBMeter instance from memory\n * DBMeter.delete().then(\n *   () => console.log('Deleted DB Meter instance'),\n *   error => console.log('Error occurred while deleting DB Meter instance')\n * );\n * ```\n */\nvar DBMeter = (function () {\n    function DBMeter() {\n    }\n    /**\n     * Starts listening\n     * @return {Observable<string>} Returns an observable. Subscribe to start listening. Unsubscribe to stop listening.\n     */\n    DBMeter.start = function () { return; };\n    /**\n     * Stops listening\n     * @private\n     */\n    DBMeter.stop = function () { return; };\n    /**\n     * Check if the DB Meter is listening\n     * @return {Promise<boolean>} Returns a promise that resolves with a boolean that tells us whether the DB meter is listening\n     */\n    DBMeter.isListening = function () { return; };\n    /**\n     * Delete the DB Meter instance\n     * @return {Promise<any>} Returns a promise that will resolve if the instance has been deleted, and rejects if errors occur.\n     */\n    DBMeter.delete = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stop'\n        })\n    ], DBMeter, \"start\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DBMeter, \"stop\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DBMeter, \"isListening\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DBMeter, \"delete\", null);\n    DBMeter = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DBMeter',\n            plugin: 'cordova-plugin-dbmeter',\n            pluginRef: 'DBMeter',\n            repo: 'https://github.com/akofman/cordova-plugin-dbmeter',\n            platforms: ['iOS', 'Android']\n        })\n    ], DBMeter);\n    return DBMeter;\n}());\nexports.DBMeter = DBMeter;\n//# sourceMappingURL=dbmeter.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RibWV0ZXIuanM/ZDQ0YiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1CQUFtQjtBQUNuQztBQUNBLGlDQUFpQyxRQUFRO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLFFBQVE7QUFDeEM7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQSxrQ0FBa0MsUUFBUTtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiIzOTUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIERCIE1ldGVyXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gZGVmaW5lcyBhIGdsb2JhbCBEQk1ldGVyIG9iamVjdCwgd2hpY2ggcGVybWl0cyB0byBnZXQgdGhlIGRlY2liZWwgdmFsdWVzIGZyb20gdGhlIG1pY3JvcGhvbmUuXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERCTWV0ZXIgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiAvLyBTdGFydCBsaXN0ZW5pbmdcbiAqIGxldCBzdWJzY3JpcHRpb24gPSBEQk1ldGVyLnN0YXJ0KCkuc3Vic2NyaWJlKFxuICogICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpXG4gKiApO1xuICpcbiAqIC8vIENoZWNrIGlmIHdlIGFyZSBsaXN0ZW5pbmdcbiAqIERCTWV0ZXIuaXNMaXN0ZW5pbmcoKS50aGVuKFxuICogICAoaXNMaXN0ZW5pbmc6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKGlzTGlzdGVuaW5nKVxuICogKTtcbiAqXG4gKiAvLyBTdG9wIGxpc3RlbmluZ1xuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICogLy8gRGVsZXRlIERCTWV0ZXIgaW5zdGFuY2UgZnJvbSBtZW1vcnlcbiAqIERCTWV0ZXIuZGVsZXRlKCkudGhlbihcbiAqICAgKCkgPT4gY29uc29sZS5sb2coJ0RlbGV0ZWQgREIgTWV0ZXIgaW5zdGFuY2UnKSxcbiAqICAgZXJyb3IgPT4gY29uc29sZS5sb2coJ0Vycm9yIG9jY3VycmVkIHdoaWxlIGRlbGV0aW5nIERCIE1ldGVyIGluc3RhbmNlJylcbiAqICk7XG4gKiBgYGBcbiAqL1xudmFyIERCTWV0ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERCTWV0ZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBsaXN0ZW5pbmdcbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPHN0cmluZz59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS4gU3Vic2NyaWJlIHRvIHN0YXJ0IGxpc3RlbmluZy4gVW5zdWJzY3JpYmUgdG8gc3RvcCBsaXN0ZW5pbmcuXG4gICAgICovXG4gICAgREJNZXRlci5zdGFydCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFN0b3BzIGxpc3RlbmluZ1xuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgREJNZXRlci5zdG9wID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgdGhlIERCIE1ldGVyIGlzIGxpc3RlbmluZ1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCB0ZWxscyB1cyB3aGV0aGVyIHRoZSBEQiBtZXRlciBpcyBsaXN0ZW5pbmdcbiAgICAgKi9cbiAgICBEQk1ldGVyLmlzTGlzdGVuaW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogRGVsZXRlIHRoZSBEQiBNZXRlciBpbnN0YW5jZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCB3aWxsIHJlc29sdmUgaWYgdGhlIGluc3RhbmNlIGhhcyBiZWVuIGRlbGV0ZWQsIGFuZCByZWplY3RzIGlmIGVycm9ycyBvY2N1ci5cbiAgICAgKi9cbiAgICBEQk1ldGVyLmRlbGV0ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgICAgICAgICBjbGVhckZ1bmN0aW9uOiAnc3RvcCdcbiAgICAgICAgfSlcbiAgICBdLCBEQk1ldGVyLCBcInN0YXJ0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBEQk1ldGVyLCBcInN0b3BcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIERCTWV0ZXIsIFwiaXNMaXN0ZW5pbmdcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIERCTWV0ZXIsIFwiZGVsZXRlXCIsIG51bGwpO1xuICAgIERCTWV0ZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdEQk1ldGVyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRibWV0ZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnREJNZXRlcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Frb2ZtYW4vY29yZG92YS1wbHVnaW4tZGJtZXRlcicsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIERCTWV0ZXIpO1xuICAgIHJldHVybiBEQk1ldGVyO1xufSgpKTtcbmV4cG9ydHMuREJNZXRlciA9IERCTWV0ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYm1ldGVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9kYm1ldGVyLmpzXG4vLyBtb2R1bGUgaWQgPSAzOTVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 396 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Ionic Deeplinks\n * @description This plugin handles deeplinks on iOS and Android for both custom URL scheme links\n * and Universal App Links.\n *\n * @usage\n * ```typescript\n * import { Deeplinks } from 'ionic-native';\n *\n * Deeplinks.route({\n      '/about-us': AboutPage,\n      '/universal-links-test': AboutPage,\n      '/products/:productId': ProductPage\n    }).subscribe((match) => {\n      // match.$route - the route we matched, which is the matched entry from the arguments to route()\n      // match.$args - the args passed in the link\n      // match.$link - the full link data\n      console.log('Successfully matched route', match);\n    }, (nomatch) => {\n      // nomatch.$link - the full link data\n      console.error('Got a deeplink that didn\\'t match', nomatch);\n    });\n * ```\n *\n * Alternatively, if you're using Ionic 2, there's a convenience method that takes a reference to a `NavController` and handles\n * the actual navigation for you:\n *\n * ```typescript\n * Deeplinks.routeWithNavController(this.navController, {\n    '/about-us': AboutPage,\n    '/products/:productId': ProductPage\n  });\n * ```\n *\n * See the [Ionic 2 Deeplinks Demo](https://github.com/driftyco/ionic2-deeplinks-demo/blob/master/app/app.ts) for an example of how to\n * retrieve the `NavController` reference at runtime.\n */\nvar Deeplinks = (function () {\n    function Deeplinks() {\n    }\n    /**\n     * Define a set of paths to match against incoming deeplinks.\n     *\n     * @param {paths} Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     * @returns {Observable} Returns an Observable that is called each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    Deeplinks.route = function (paths) { return; };\n    /**\n     *\n     * This is a convenience version of `route` that takes a reference to a NavController\n     * from Ionic 2, or a custom class that conforms to this protocol:\n     *\n     * NavController.push = function(View, Params){}\n     *\n     * This handler will automatically navigate when a route matches. If you need finer-grained\n     * control over the behavior of a matching deeplink, use the plain `route` method.\n     *\n     * @param {paths} Define a set of paths to match against incoming deeplinks.\n     * paths takes an object of the form { 'path': data }. If a deeplink\n     * matches the path, the resulting path-data pair will be returned in the\n     * promise result which you can then use to navigate in the app as you see fit.\n     *\n     * @returns {Observable} Returns an Observable that resolves each time a deeplink comes through, and\n     * errors if a deeplink comes through that does not match a given path.\n     */\n    Deeplinks.routeWithNavController = function (navController, paths) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], Deeplinks, \"route\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], Deeplinks, \"routeWithNavController\", null);\n    Deeplinks = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Deeplinks',\n            plugin: 'ionic-plugin-deeplinks',\n            pluginRef: 'IonicDeeplink',\n            repo: 'https://github.com/driftyco/ionic-plugin-deeplinks',\n            platforms: ['iOS', 'Android'],\n            install: 'ionic plugin add ionic-plugin-deeplinks --variable URL_SCHEME=myapp --variable DEEPLINK_SCHEME=https --variable DEEPLINK_HOST=example.com --variable ANDROID_PATH_PREFIX=/'\n        })\n    ], Deeplinks);\n    return Deeplinks;\n}());\nexports.Deeplinks = Deeplinks;\n//# sourceMappingURL=deeplinks.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RlZXBsaW5rcy5qcz9hYWZjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFlBQVk7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxNQUFNO0FBQ3JCLDBDQUEwQyxlQUFlO0FBQ3pEO0FBQ0E7QUFDQSxpQkFBaUIsV0FBVztBQUM1QjtBQUNBO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE1BQU07QUFDckIsMENBQTBDLGVBQWU7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLFdBQVc7QUFDNUI7QUFDQTtBQUNBLHdFQUF3RSxRQUFRO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM5Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgSW9uaWMgRGVlcGxpbmtzXG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gaGFuZGxlcyBkZWVwbGlua3Mgb24gaU9TIGFuZCBBbmRyb2lkIGZvciBib3RoIGN1c3RvbSBVUkwgc2NoZW1lIGxpbmtzXG4gKiBhbmQgVW5pdmVyc2FsIEFwcCBMaW5rcy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERlZXBsaW5rcyB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogRGVlcGxpbmtzLnJvdXRlKHtcbiAgICAgICcvYWJvdXQtdXMnOiBBYm91dFBhZ2UsXG4gICAgICAnL3VuaXZlcnNhbC1saW5rcy10ZXN0JzogQWJvdXRQYWdlLFxuICAgICAgJy9wcm9kdWN0cy86cHJvZHVjdElkJzogUHJvZHVjdFBhZ2VcbiAgICB9KS5zdWJzY3JpYmUoKG1hdGNoKSA9PiB7XG4gICAgICAvLyBtYXRjaC4kcm91dGUgLSB0aGUgcm91dGUgd2UgbWF0Y2hlZCwgd2hpY2ggaXMgdGhlIG1hdGNoZWQgZW50cnkgZnJvbSB0aGUgYXJndW1lbnRzIHRvIHJvdXRlKClcbiAgICAgIC8vIG1hdGNoLiRhcmdzIC0gdGhlIGFyZ3MgcGFzc2VkIGluIHRoZSBsaW5rXG4gICAgICAvLyBtYXRjaC4kbGluayAtIHRoZSBmdWxsIGxpbmsgZGF0YVxuICAgICAgY29uc29sZS5sb2coJ1N1Y2Nlc3NmdWxseSBtYXRjaGVkIHJvdXRlJywgbWF0Y2gpO1xuICAgIH0sIChub21hdGNoKSA9PiB7XG4gICAgICAvLyBub21hdGNoLiRsaW5rIC0gdGhlIGZ1bGwgbGluayBkYXRhXG4gICAgICBjb25zb2xlLmVycm9yKCdHb3QgYSBkZWVwbGluayB0aGF0IGRpZG5cXCd0IG1hdGNoJywgbm9tYXRjaCk7XG4gICAgfSk7XG4gKiBgYGBcbiAqXG4gKiBBbHRlcm5hdGl2ZWx5LCBpZiB5b3UncmUgdXNpbmcgSW9uaWMgMiwgdGhlcmUncyBhIGNvbnZlbmllbmNlIG1ldGhvZCB0aGF0IHRha2VzIGEgcmVmZXJlbmNlIHRvIGEgYE5hdkNvbnRyb2xsZXJgIGFuZCBoYW5kbGVzXG4gKiB0aGUgYWN0dWFsIG5hdmlnYXRpb24gZm9yIHlvdTpcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBEZWVwbGlua3Mucm91dGVXaXRoTmF2Q29udHJvbGxlcih0aGlzLm5hdkNvbnRyb2xsZXIsIHtcbiAgICAnL2Fib3V0LXVzJzogQWJvdXRQYWdlLFxuICAgICcvcHJvZHVjdHMvOnByb2R1Y3RJZCc6IFByb2R1Y3RQYWdlXG4gIH0pO1xuICogYGBgXG4gKlxuICogU2VlIHRoZSBbSW9uaWMgMiBEZWVwbGlua3MgRGVtb10oaHR0cHM6Ly9naXRodWIuY29tL2RyaWZ0eWNvL2lvbmljMi1kZWVwbGlua3MtZGVtby9ibG9iL21hc3Rlci9hcHAvYXBwLnRzKSBmb3IgYW4gZXhhbXBsZSBvZiBob3cgdG9cbiAqIHJldHJpZXZlIHRoZSBgTmF2Q29udHJvbGxlcmAgcmVmZXJlbmNlIGF0IHJ1bnRpbWUuXG4gKi9cbnZhciBEZWVwbGlua3MgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIERlZXBsaW5rcygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtwYXRoc30gRGVmaW5lIGEgc2V0IG9mIHBhdGhzIHRvIG1hdGNoIGFnYWluc3QgaW5jb21pbmcgZGVlcGxpbmtzLlxuICAgICAqIHBhdGhzIHRha2VzIGFuIG9iamVjdCBvZiB0aGUgZm9ybSB7ICdwYXRoJzogZGF0YSB9LiBJZiBhIGRlZXBsaW5rXG4gICAgICogbWF0Y2hlcyB0aGUgcGF0aCwgdGhlIHJlc3VsdGluZyBwYXRoLWRhdGEgcGFpciB3aWxsIGJlIHJldHVybmVkIGluIHRoZVxuICAgICAqIHByb21pc2UgcmVzdWx0IHdoaWNoIHlvdSBjYW4gdGhlbiB1c2UgdG8gbmF2aWdhdGUgaW4gdGhlIGFwcCBhcyB5b3Ugc2VlIGZpdC5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgaXMgY2FsbGVkIGVhY2ggdGltZSBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2gsIGFuZFxuICAgICAqIGVycm9ycyBpZiBhIGRlZXBsaW5rIGNvbWVzIHRocm91Z2ggdGhhdCBkb2VzIG5vdCBtYXRjaCBhIGdpdmVuIHBhdGguXG4gICAgICovXG4gICAgRGVlcGxpbmtzLnJvdXRlID0gZnVuY3Rpb24gKHBhdGhzKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKlxuICAgICAqIFRoaXMgaXMgYSBjb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGByb3V0ZWAgdGhhdCB0YWtlcyBhIHJlZmVyZW5jZSB0byBhIE5hdkNvbnRyb2xsZXJcbiAgICAgKiBmcm9tIElvbmljIDIsIG9yIGEgY3VzdG9tIGNsYXNzIHRoYXQgY29uZm9ybXMgdG8gdGhpcyBwcm90b2NvbDpcbiAgICAgKlxuICAgICAqIE5hdkNvbnRyb2xsZXIucHVzaCA9IGZ1bmN0aW9uKFZpZXcsIFBhcmFtcyl7fVxuICAgICAqXG4gICAgICogVGhpcyBoYW5kbGVyIHdpbGwgYXV0b21hdGljYWxseSBuYXZpZ2F0ZSB3aGVuIGEgcm91dGUgbWF0Y2hlcy4gSWYgeW91IG5lZWQgZmluZXItZ3JhaW5lZFxuICAgICAqIGNvbnRyb2wgb3ZlciB0aGUgYmVoYXZpb3Igb2YgYSBtYXRjaGluZyBkZWVwbGluaywgdXNlIHRoZSBwbGFpbiBgcm91dGVgIG1ldGhvZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7cGF0aHN9IERlZmluZSBhIHNldCBvZiBwYXRocyB0byBtYXRjaCBhZ2FpbnN0IGluY29taW5nIGRlZXBsaW5rcy5cbiAgICAgKiBwYXRocyB0YWtlcyBhbiBvYmplY3Qgb2YgdGhlIGZvcm0geyAncGF0aCc6IGRhdGEgfS4gSWYgYSBkZWVwbGlua1xuICAgICAqIG1hdGNoZXMgdGhlIHBhdGgsIHRoZSByZXN1bHRpbmcgcGF0aC1kYXRhIHBhaXIgd2lsbCBiZSByZXR1cm5lZCBpbiB0aGVcbiAgICAgKiBwcm9taXNlIHJlc3VsdCB3aGljaCB5b3UgY2FuIHRoZW4gdXNlIHRvIG5hdmlnYXRlIGluIHRoZSBhcHAgYXMgeW91IHNlZSBmaXQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZX0gUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgcmVzb2x2ZXMgZWFjaCB0aW1lIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCwgYW5kXG4gICAgICogZXJyb3JzIGlmIGEgZGVlcGxpbmsgY29tZXMgdGhyb3VnaCB0aGF0IGRvZXMgbm90IG1hdGNoIGEgZ2l2ZW4gcGF0aC5cbiAgICAgKi9cbiAgICBEZWVwbGlua3Mucm91dGVXaXRoTmF2Q29udHJvbGxlciA9IGZ1bmN0aW9uIChuYXZDb250cm9sbGVyLCBwYXRocykgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgb2JzZXJ2YWJsZTogdHJ1ZVxuICAgICAgICB9KVxuICAgIF0sIERlZXBsaW5rcywgXCJyb3V0ZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlXG4gICAgICAgIH0pXG4gICAgXSwgRGVlcGxpbmtzLCBcInJvdXRlV2l0aE5hdkNvbnRyb2xsZXJcIiwgbnVsbCk7XG4gICAgRGVlcGxpbmtzID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnRGVlcGxpbmtzJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2lvbmljLXBsdWdpbi1kZWVwbGlua3MnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnSW9uaWNEZWVwbGluaycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2RyaWZ0eWNvL2lvbmljLXBsdWdpbi1kZWVwbGlua3MnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10sXG4gICAgICAgICAgICBpbnN0YWxsOiAnaW9uaWMgcGx1Z2luIGFkZCBpb25pYy1wbHVnaW4tZGVlcGxpbmtzIC0tdmFyaWFibGUgVVJMX1NDSEVNRT1teWFwcCAtLXZhcmlhYmxlIERFRVBMSU5LX1NDSEVNRT1odHRwcyAtLXZhcmlhYmxlIERFRVBMSU5LX0hPU1Q9ZXhhbXBsZS5jb20gLS12YXJpYWJsZSBBTkRST0lEX1BBVEhfUFJFRklYPS8nXG4gICAgICAgIH0pXG4gICAgXSwgRGVlcGxpbmtzKTtcbiAgICByZXR1cm4gRGVlcGxpbmtzO1xufSgpKTtcbmV4cG9ydHMuRGVlcGxpbmtzID0gRGVlcGxpbmtzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGVlcGxpbmtzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9kZWVwbGlua3MuanNcbi8vIG1vZHVsZSBpZCA9IDM5NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 397 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Device\n * @description\n * Access information about the underlying device and platform.\n *\n * @usage\n * ```typescript\n * import { Device } from 'ionic-native';\n *\n *\n * console.log('Device UUID is: ' + Device.device.uuid);\n * ```\n */\nvar Device = (function () {\n    function Device() {\n    }\n    Object.defineProperty(Device, \"device\", {\n        /**\n         * Returns the whole device object.\n         *\n         * @returns {Object} The device object.\n         */\n        get: function () { return window.device; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.CordovaProperty\n    ], Device, \"device\", null);\n    Device = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Device',\n            plugin: 'cordova-plugin-device',\n            pluginRef: 'device',\n            repo: 'https://github.com/apache/cordova-plugin-device'\n        })\n    ], Device);\n    return Device;\n}());\nexports.Device = Device;\n//# sourceMappingURL=device.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZS5qcz9hYjhhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLE9BQU87QUFDNUI7QUFDQSwwQkFBMEIsc0JBQXNCLEVBQUU7QUFDbEQ7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM5Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgRGV2aWNlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFjY2VzcyBpbmZvcm1hdGlvbiBhYm91dCB0aGUgdW5kZXJseWluZyBkZXZpY2UgYW5kIHBsYXRmb3JtLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGV2aWNlIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogY29uc29sZS5sb2coJ0RldmljZSBVVUlEIGlzOiAnICsgRGV2aWNlLmRldmljZS51dWlkKTtcbiAqIGBgYFxuICovXG52YXIgRGV2aWNlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2UoKSB7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShEZXZpY2UsIFwiZGV2aWNlXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFJldHVybnMgdGhlIHdob2xlIGRldmljZSBvYmplY3QuXG4gICAgICAgICAqXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBkZXZpY2Ugb2JqZWN0LlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuZGV2aWNlOyB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YVByb3BlcnR5XG4gICAgXSwgRGV2aWNlLCBcImRldmljZVwiLCBudWxsKTtcbiAgICBEZXZpY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdEZXZpY2UnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGV2aWNlJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2RldmljZScsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2UnXG4gICAgICAgIH0pXG4gICAgXSwgRGV2aWNlKTtcbiAgICByZXR1cm4gRGV2aWNlO1xufSgpKTtcbmV4cG9ydHMuRGV2aWNlID0gRGV2aWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV2aWNlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9kZXZpY2UuanNcbi8vIG1vZHVsZSBpZCA9IDM5N1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 398 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name DeviceFeedback\n * @description\n *\n * Plugin that lets you provide haptic or acoustic feedback on Android devices.\n *\n * @usage\n * ```\n * import { DeviceFeedback } from 'ionic-native';\n *\n * DeviceFeedback.acoustic();\n *\n * DeviceFeedback.haptic(0);\n *\n * DeviceFeedback.isFeedbackEnabled()\n *   .then((feedback) => {\n *     console.log(feedback);\n *     // {\n *     //   acoustic: true,\n *     //   haptic: true\n *     // }\n *   });\n *\n * ```\n */\nvar DeviceFeedback = (function () {\n    function DeviceFeedback() {\n    }\n    /**\n     * Provide sound feedback to user, nevertheless respect user's settings and current active device profile as native feedback do.\n     */\n    DeviceFeedback.acoustic = function () { };\n    /**\n     * Provide vibrate feedback to user, nevertheless respect user's tactile feedback setting as native feedback do.\n     * @param type {Number} Specify type of vibration feedback. 0 for long press, 1 for virtual key, or 3 for keyboard tap.\n     */\n    DeviceFeedback.haptic = function (type) { };\n    /**\n     * Check if haptic and acoustic feedback is enabled by user settings.\n     */\n    DeviceFeedback.isFeedbackEnabled = function () { return; };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], DeviceFeedback, \"acoustic\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], DeviceFeedback, \"haptic\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceFeedback, \"isFeedbackEnabled\", null);\n    DeviceFeedback = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DeviceFeedback',\n            plugin: 'cordova-plugin-velda-devicefeedback',\n            pluginRef: 'plugins.deviceFeedback',\n            repo: 'https://github.com/VVelda/device-feedback',\n            platforms: ['Android']\n        })\n    ], DeviceFeedback);\n    return DeviceFeedback;\n}());\nexports.DeviceFeedback = DeviceFeedback;\n//# sourceMappingURL=device-feedback.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZS1mZWVkYmFjay5qcz9kODg1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTtBQUNBLG9CQUFvQixPQUFPO0FBQzNCO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjM5OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgRGV2aWNlRmVlZGJhY2tcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFBsdWdpbiB0aGF0IGxldHMgeW91IHByb3ZpZGUgaGFwdGljIG9yIGFjb3VzdGljIGZlZWRiYWNrIG9uIEFuZHJvaWQgZGV2aWNlcy5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHsgRGV2aWNlRmVlZGJhY2sgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIERldmljZUZlZWRiYWNrLmFjb3VzdGljKCk7XG4gKlxuICogRGV2aWNlRmVlZGJhY2suaGFwdGljKDApO1xuICpcbiAqIERldmljZUZlZWRiYWNrLmlzRmVlZGJhY2tFbmFibGVkKClcbiAqICAgLnRoZW4oKGZlZWRiYWNrKSA9PiB7XG4gKiAgICAgY29uc29sZS5sb2coZmVlZGJhY2spO1xuICogICAgIC8vIHtcbiAqICAgICAvLyAgIGFjb3VzdGljOiB0cnVlLFxuICogICAgIC8vICAgaGFwdGljOiB0cnVlXG4gKiAgICAgLy8gfVxuICogICB9KTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIERldmljZUZlZWRiYWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2VGZWVkYmFjaygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvdmlkZSBzb3VuZCBmZWVkYmFjayB0byB1c2VyLCBuZXZlcnRoZWxlc3MgcmVzcGVjdCB1c2VyJ3Mgc2V0dGluZ3MgYW5kIGN1cnJlbnQgYWN0aXZlIGRldmljZSBwcm9maWxlIGFzIG5hdGl2ZSBmZWVkYmFjayBkby5cbiAgICAgKi9cbiAgICBEZXZpY2VGZWVkYmFjay5hY291c3RpYyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAvKipcbiAgICAgKiBQcm92aWRlIHZpYnJhdGUgZmVlZGJhY2sgdG8gdXNlciwgbmV2ZXJ0aGVsZXNzIHJlc3BlY3QgdXNlcidzIHRhY3RpbGUgZmVlZGJhY2sgc2V0dGluZyBhcyBuYXRpdmUgZmVlZGJhY2sgZG8uXG4gICAgICogQHBhcmFtIHR5cGUge051bWJlcn0gU3BlY2lmeSB0eXBlIG9mIHZpYnJhdGlvbiBmZWVkYmFjay4gMCBmb3IgbG9uZyBwcmVzcywgMSBmb3IgdmlydHVhbCBrZXksIG9yIDMgZm9yIGtleWJvYXJkIHRhcC5cbiAgICAgKi9cbiAgICBEZXZpY2VGZWVkYmFjay5oYXB0aWMgPSBmdW5jdGlvbiAodHlwZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGhhcHRpYyBhbmQgYWNvdXN0aWMgZmVlZGJhY2sgaXMgZW5hYmxlZCBieSB1c2VyIHNldHRpbmdzLlxuICAgICAqL1xuICAgIERldmljZUZlZWRiYWNrLmlzRmVlZGJhY2tFbmFibGVkID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgRGV2aWNlRmVlZGJhY2ssIFwiYWNvdXN0aWNcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgRGV2aWNlRmVlZGJhY2ssIFwiaGFwdGljXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBEZXZpY2VGZWVkYmFjaywgXCJpc0ZlZWRiYWNrRW5hYmxlZFwiLCBudWxsKTtcbiAgICBEZXZpY2VGZWVkYmFjayA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0RldmljZUZlZWRiYWNrJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXZlbGRhLWRldmljZWZlZWRiYWNrJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3BsdWdpbnMuZGV2aWNlRmVlZGJhY2snLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9WVmVsZGEvZGV2aWNlLWZlZWRiYWNrJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ11cbiAgICAgICAgfSlcbiAgICBdLCBEZXZpY2VGZWVkYmFjayk7XG4gICAgcmV0dXJuIERldmljZUZlZWRiYWNrO1xufSgpKTtcbmV4cG9ydHMuRGV2aWNlRmVlZGJhY2sgPSBEZXZpY2VGZWVkYmFjaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldmljZS1mZWVkYmFjay5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZGV2aWNlLWZlZWRiYWNrLmpzXG4vLyBtb2R1bGUgaWQgPSAzOThcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 399 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar DeviceAccounts = (function () {\n    function DeviceAccounts() {\n    }\n    /**\n     *  Gets all accounts registered on the Android Device\n     */\n    DeviceAccounts.get = function () { return; };\n    /**\n     *  Get all accounts registered on Android device for requested type\n     */\n    DeviceAccounts.getByType = function (type) { return; };\n    /**\n     *  Get all emails registered on Android device (accounts with 'com.google' type)\n     */\n    DeviceAccounts.getEmails = function () { return; };\n    /**\n     *  Get the first email registered on Android device\n     */\n    DeviceAccounts.getEmail = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceAccounts, \"get\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceAccounts, \"getByType\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceAccounts, \"getEmails\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceAccounts, \"getEmail\", null);\n    DeviceAccounts = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DeviceAccounts',\n            plugin: 'https://github.com/loicknuchel/cordova-device-accounts.git',\n            pluginRef: 'plugins.DeviceAccounts',\n            repo: 'https://github.com/loicknuchel/cordova-device-accounts',\n            platforms: ['Android']\n        })\n    ], DeviceAccounts);\n    return DeviceAccounts;\n}());\nexports.DeviceAccounts = DeviceAccounts;\n//# sourceMappingURL=deviceaccounts.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZWFjY291bnRzLmpzPzA1Y2IiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsUUFBUTtBQUN4RDtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiMzk5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xudmFyIERldmljZUFjY291bnRzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2VBY2NvdW50cygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEdldHMgYWxsIGFjY291bnRzIHJlZ2lzdGVyZWQgb24gdGhlIEFuZHJvaWQgRGV2aWNlXG4gICAgICovXG4gICAgRGV2aWNlQWNjb3VudHMuZ2V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogIEdldCBhbGwgYWNjb3VudHMgcmVnaXN0ZXJlZCBvbiBBbmRyb2lkIGRldmljZSBmb3IgcmVxdWVzdGVkIHR5cGVcbiAgICAgKi9cbiAgICBEZXZpY2VBY2NvdW50cy5nZXRCeVR5cGUgPSBmdW5jdGlvbiAodHlwZSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogIEdldCBhbGwgZW1haWxzIHJlZ2lzdGVyZWQgb24gQW5kcm9pZCBkZXZpY2UgKGFjY291bnRzIHdpdGggJ2NvbS5nb29nbGUnIHR5cGUpXG4gICAgICovXG4gICAgRGV2aWNlQWNjb3VudHMuZ2V0RW1haWxzID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogIEdldCB0aGUgZmlyc3QgZW1haWwgcmVnaXN0ZXJlZCBvbiBBbmRyb2lkIGRldmljZVxuICAgICAqL1xuICAgIERldmljZUFjY291bnRzLmdldEVtYWlsID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIERldmljZUFjY291bnRzLCBcImdldFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRGV2aWNlQWNjb3VudHMsIFwiZ2V0QnlUeXBlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBEZXZpY2VBY2NvdW50cywgXCJnZXRFbWFpbHNcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIERldmljZUFjY291bnRzLCBcImdldEVtYWlsXCIsIG51bGwpO1xuICAgIERldmljZUFjY291bnRzID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnRGV2aWNlQWNjb3VudHMnLFxuICAgICAgICAgICAgcGx1Z2luOiAnaHR0cHM6Ly9naXRodWIuY29tL2xvaWNrbnVjaGVsL2NvcmRvdmEtZGV2aWNlLWFjY291bnRzLmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLkRldmljZUFjY291bnRzJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbG9pY2tudWNoZWwvY29yZG92YS1kZXZpY2UtYWNjb3VudHMnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIERldmljZUFjY291bnRzKTtcbiAgICByZXR1cm4gRGV2aWNlQWNjb3VudHM7XG59KCkpO1xuZXhwb3J0cy5EZXZpY2VBY2NvdW50cyA9IERldmljZUFjY291bnRzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGV2aWNlYWNjb3VudHMuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZWFjY291bnRzLmpzXG4vLyBtb2R1bGUgaWQgPSAzOTlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 400 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Device Motion\n * @description\n * Requires Cordova plugin: `cordova-plugin-device-motion`. For more info, please see the [Device Motion docs](https://github.com/apache/cordova-plugin-device-motion).\n *\n * @usage\n * ```typescript\n * import { DeviceMotion } from 'ionic-native';\n *\n *\n * // Get the device current acceleration\n * DeviceMotion.getCurrentAcceleration().then(\n *   (acceleration: AccelerationData) => console.log(acceleration),\n *   (error: any) => console.log(error)\n * );\n *\n * // Watch device acceleration\n * var subscription = DeviceMotion.watchAcceleration().subscribe((acceleration: AccelerationData) => {\n *   console.log(acceleration);\n * });\n *\n * // Stop watch\n * subscription.unsubscribe();\n *\n * ```\n */\nvar DeviceMotion = (function () {\n    function DeviceMotion() {\n    }\n    /**\n     * Get the current acceleration along the x, y, and z axes.\n     * @returns {Promise<any>} Returns object with x, y, z, and timestamp properties\n     */\n    DeviceMotion.getCurrentAcceleration = function () { return; };\n    /**\n     * Watch the device acceleration. Clear the watch by unsubscribing from the observable.\n     * @param {AccelerometerOptions} options list of options for the accelerometer.\n     * @returns {Observable<AccelerationData>} Observable returns an observable that you can subscribe to\n     */\n    DeviceMotion.watchAcceleration = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceMotion, \"getCurrentAcceleration\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse',\n            observable: true,\n            clearFunction: 'clearWatch'\n        })\n    ], DeviceMotion, \"watchAcceleration\", null);\n    DeviceMotion = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DeviceMotion',\n            plugin: 'cordova-plugin-device-motion',\n            pluginRef: 'navigator.accelerometer',\n            repo: 'https://github.com/apache/cordova-plugin-device-motion'\n        })\n    ], DeviceMotion);\n    return DeviceMotion;\n}());\nexports.DeviceMotion = DeviceMotion;\n//# sourceMappingURL=devicemotion.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZW1vdGlvbi5qcz9lMjUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0EsZUFBZSxxQkFBcUI7QUFDcEMsaUJBQWlCLDZCQUE2QjtBQUM5QztBQUNBLHlEQUF5RCxRQUFRO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQwMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgRGV2aWNlIE1vdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRldmljZS1tb3Rpb25gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGV2aWNlIE1vdGlvbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWRldmljZS1tb3Rpb24pLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgRGV2aWNlTW90aW9uIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogLy8gR2V0IHRoZSBkZXZpY2UgY3VycmVudCBhY2NlbGVyYXRpb25cbiAqIERldmljZU1vdGlvbi5nZXRDdXJyZW50QWNjZWxlcmF0aW9uKCkudGhlbihcbiAqICAgKGFjY2VsZXJhdGlvbjogQWNjZWxlcmF0aW9uRGF0YSkgPT4gY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKSxcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogKTtcbiAqXG4gKiAvLyBXYXRjaCBkZXZpY2UgYWNjZWxlcmF0aW9uXG4gKiB2YXIgc3Vic2NyaXB0aW9uID0gRGV2aWNlTW90aW9uLndhdGNoQWNjZWxlcmF0aW9uKCkuc3Vic2NyaWJlKChhY2NlbGVyYXRpb246IEFjY2VsZXJhdGlvbkRhdGEpID0+IHtcbiAqICAgY29uc29sZS5sb2coYWNjZWxlcmF0aW9uKTtcbiAqIH0pO1xuICpcbiAqIC8vIFN0b3Agd2F0Y2hcbiAqIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICpcbiAqIGBgYFxuICovXG52YXIgRGV2aWNlTW90aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2VNb3Rpb24oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBhY2NlbGVyYXRpb24gYWxvbmcgdGhlIHgsIHksIGFuZCB6IGF4ZXMuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBvYmplY3Qgd2l0aCB4LCB5LCB6LCBhbmQgdGltZXN0YW1wIHByb3BlcnRpZXNcbiAgICAgKi9cbiAgICBEZXZpY2VNb3Rpb24uZ2V0Q3VycmVudEFjY2VsZXJhdGlvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFdhdGNoIHRoZSBkZXZpY2UgYWNjZWxlcmF0aW9uLiBDbGVhciB0aGUgd2F0Y2ggYnkgdW5zdWJzY3JpYmluZyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAqIEBwYXJhbSB7QWNjZWxlcm9tZXRlck9wdGlvbnN9IG9wdGlvbnMgbGlzdCBvZiBvcHRpb25zIGZvciB0aGUgYWNjZWxlcm9tZXRlci5cbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxBY2NlbGVyYXRpb25EYXRhPn0gT2JzZXJ2YWJsZSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB5b3UgY2FuIHN1YnNjcmliZSB0b1xuICAgICAqL1xuICAgIERldmljZU1vdGlvbi53YXRjaEFjY2VsZXJhdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRGV2aWNlTW90aW9uLCBcImdldEN1cnJlbnRBY2NlbGVyYXRpb25cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICAgICAgICAgICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFyRnVuY3Rpb246ICdjbGVhcldhdGNoJ1xuICAgICAgICB9KVxuICAgIF0sIERldmljZU1vdGlvbiwgXCJ3YXRjaEFjY2VsZXJhdGlvblwiLCBudWxsKTtcbiAgICBEZXZpY2VNb3Rpb24gPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdEZXZpY2VNb3Rpb24nLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZGV2aWNlLW1vdGlvbicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuYWNjZWxlcm9tZXRlcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2UtbW90aW9uJ1xuICAgICAgICB9KVxuICAgIF0sIERldmljZU1vdGlvbik7XG4gICAgcmV0dXJuIERldmljZU1vdGlvbjtcbn0oKSk7XG5leHBvcnRzLkRldmljZU1vdGlvbiA9IERldmljZU1vdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldmljZW1vdGlvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZGV2aWNlbW90aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0MDBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 401 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Device Orientation\n * @description\n * Requires Cordova plugin: `cordova-plugin-device-orientation`. For more info, please see the [Device Orientation docs](https://github.com/apache/cordova-plugin-device-orientation).\n *\n * @usage\n * ```typescript\n * // CompassHeading is an interface for compass\n * import { DeviceOrientation, CompassHeading } from 'ionic-native';\n *\n *\n * // Get the device current compass heading\n * DeviceOrientation.getCurrentHeading().then(\n *   (data: CompassHeading) => console.log(data),\n *   (error: any) => console.log(error)\n * );\n *\n * // Watch the device compass heading change\n * var subscription = DeviceOrientation.watchHeading().subscribe(\n *   (data: CompassHeading) => console.log(data)\n * );\n *\n * // Stop watching heading change\n * subscription.unsubscribe();\n * ```\n */\nvar DeviceOrientation = (function () {\n    function DeviceOrientation() {\n    }\n    /**\n     * Get the current compass heading.\n     * @returns {Promise<CompassHeading>}\n     */\n    DeviceOrientation.getCurrentHeading = function () { return; };\n    /**\n     * Get the device current heading at a regular interval\n     *\n     * Stop the watch by unsubscribing from the observable\n     * @param {CompassOptions} options Options for compass. Frequency and Filter. Optional\n     * @returns {Observable<CompassHeading>} Returns an observable that contains the compass heading\n     */\n    DeviceOrientation.watchHeading = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], DeviceOrientation, \"getCurrentHeading\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse',\n            observable: true,\n            clearFunction: 'clearWatch'\n        })\n    ], DeviceOrientation, \"watchHeading\", null);\n    DeviceOrientation = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'DeviceOrientation',\n            plugin: 'cordova-plugin-device-orientation',\n            pluginRef: 'navigator.compass',\n            repo: 'https://github.com/apache/cordova-plugin-device-orientation'\n        })\n    ], DeviceOrientation);\n    return DeviceOrientation;\n}());\nexports.DeviceOrientation = DeviceOrientation;\n//# sourceMappingURL=deviceorientation.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RldmljZW9yaWVudGF0aW9uLmpzPzk1N2QiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQ0FBb0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QixpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0EseURBQXlELFFBQVE7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDAxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBEZXZpY2UgT3JpZW50YXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb25gLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGV2aWNlIE9yaWVudGF0aW9uIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tZGV2aWNlLW9yaWVudGF0aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIC8vIENvbXBhc3NIZWFkaW5nIGlzIGFuIGludGVyZmFjZSBmb3IgY29tcGFzc1xuICogaW1wb3J0IHsgRGV2aWNlT3JpZW50YXRpb24sIENvbXBhc3NIZWFkaW5nIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogLy8gR2V0IHRoZSBkZXZpY2UgY3VycmVudCBjb21wYXNzIGhlYWRpbmdcbiAqIERldmljZU9yaWVudGF0aW9uLmdldEN1cnJlbnRIZWFkaW5nKCkudGhlbihcbiAqICAgKGRhdGE6IENvbXBhc3NIZWFkaW5nKSA9PiBjb25zb2xlLmxvZyhkYXRhKSxcbiAqICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKGVycm9yKVxuICogKTtcbiAqXG4gKiAvLyBXYXRjaCB0aGUgZGV2aWNlIGNvbXBhc3MgaGVhZGluZyBjaGFuZ2VcbiAqIHZhciBzdWJzY3JpcHRpb24gPSBEZXZpY2VPcmllbnRhdGlvbi53YXRjaEhlYWRpbmcoKS5zdWJzY3JpYmUoXG4gKiAgIChkYXRhOiBDb21wYXNzSGVhZGluZykgPT4gY29uc29sZS5sb2coZGF0YSlcbiAqICk7XG4gKlxuICogLy8gU3RvcCB3YXRjaGluZyBoZWFkaW5nIGNoYW5nZVxuICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKiBgYGBcbiAqL1xudmFyIERldmljZU9yaWVudGF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEZXZpY2VPcmllbnRhdGlvbigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBjdXJyZW50IGNvbXBhc3MgaGVhZGluZy5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxDb21wYXNzSGVhZGluZz59XG4gICAgICovXG4gICAgRGV2aWNlT3JpZW50YXRpb24uZ2V0Q3VycmVudEhlYWRpbmcgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGRldmljZSBjdXJyZW50IGhlYWRpbmcgYXQgYSByZWd1bGFyIGludGVydmFsXG4gICAgICpcbiAgICAgKiBTdG9wIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGVcbiAgICAgKiBAcGFyYW0ge0NvbXBhc3NPcHRpb25zfSBvcHRpb25zIE9wdGlvbnMgZm9yIGNvbXBhc3MuIEZyZXF1ZW5jeSBhbmQgRmlsdGVyLiBPcHRpb25hbFxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPENvbXBhc3NIZWFkaW5nPn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRoYXQgY29udGFpbnMgdGhlIGNvbXBhc3MgaGVhZGluZ1xuICAgICAqL1xuICAgIERldmljZU9yaWVudGF0aW9uLndhdGNoSGVhZGluZyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRGV2aWNlT3JpZW50YXRpb24sIFwiZ2V0Q3VycmVudEhlYWRpbmdcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICAgICAgICAgICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFyRnVuY3Rpb246ICdjbGVhcldhdGNoJ1xuICAgICAgICB9KVxuICAgIF0sIERldmljZU9yaWVudGF0aW9uLCBcIndhdGNoSGVhZGluZ1wiLCBudWxsKTtcbiAgICBEZXZpY2VPcmllbnRhdGlvbiA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0RldmljZU9yaWVudGF0aW9uJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRldmljZS1vcmllbnRhdGlvbicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuY29tcGFzcycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kZXZpY2Utb3JpZW50YXRpb24nXG4gICAgICAgIH0pXG4gICAgXSwgRGV2aWNlT3JpZW50YXRpb24pO1xuICAgIHJldHVybiBEZXZpY2VPcmllbnRhdGlvbjtcbn0oKSk7XG5leHBvcnRzLkRldmljZU9yaWVudGF0aW9uID0gRGV2aWNlT3JpZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXZpY2VvcmllbnRhdGlvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZGV2aWNlb3JpZW50YXRpb24uanNcbi8vIG1vZHVsZSBpZCA9IDQwMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 402 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Diagnostic\n * @description\n * Checks whether device hardware features are enabled or available to the app, e.g. camera, GPS, wifi\n *\n * @usage\n * ```typescript\n * import { Diagnostic } from 'ionic-native';\n *\n * let successCallback = (isAvailable) => { console.log('Is available? ' + isAvailable); };\n * let errorCallback = (e) => console.error(e);\n *\n * Diagnostic.isCameraAvailable().then(successCallback).catch(errorCallback);\n *\n * Diagnostic.isBluetoothAvailable().then(successCallback, errorCallback);\n *\n *\n * Diagnostic.getBluetoothState()\n *   .then((state) => {\n *     if (state == Diagnostic.bluetoothStates.POWERED_ON){\n *       // do something\n *     } else {\n *       // do something else\n *     }\n *   }).catch(e => console.error(e));\n *\n * ```\n */\nvar Diagnostic = (function () {\n    function Diagnostic() {\n    }\n    /**\n     * Checks if app is able to access device location.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isLocationAvailable = function () { return; };\n    /**\n     * Checks if Wifi is connected/enabled. On iOS this returns true if the device is connected to a network by WiFi. On Android and Windows 10 Mobile this returns true if the WiFi setting is set to enabled.\n     * On Android this requires permission. `<uses-permission android:name=\"android.permission.ACCESS_WIFI_STATE\" />`\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isWifiAvailable = function () { return; };\n    /**\n     * Checks if the device has a camera. On Android this returns true if the device has a camera. On iOS this returns true if both the device has a camera AND the application is authorized to use it. On Windows 10 Mobile this returns true if both the device has a rear-facing camera AND the\n     * application is authorized to use it.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isCameraAvailable = function () { return; };\n    /**\n     * Checks if the device has Bluetooth capabilities and if so that Bluetooth is switched on (same on Android, iOS and Windows 10 Mobile)\n     * On Android this requires permission <uses-permission android:name=\"android.permission.BLUETOOTH\" />\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isBluetoothAvailable = function () { return; };\n    /**\n     * Displays the device location settings to allow user to enable location services/change location mode.\n     */\n    Diagnostic.switchToLocationSettings = function () { };\n    /**\n     * Displays mobile settings to allow user to enable mobile data.\n     */\n    Diagnostic.switchToMobileDataSettings = function () { };\n    /**\n     * Displays Bluetooth settings to allow user to enable Bluetooth.\n     */\n    Diagnostic.switchToBluetoothSettings = function () { };\n    /**\n     * Displays WiFi settings to allow user to enable WiFi.\n     */\n    Diagnostic.switchToWifiSettings = function () { };\n    /**\n     * Returns true if the WiFi setting is set to enabled, and is the same as `isWifiAvailable()`\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isWifiEnabled = function () { return; };\n    /**\n     * Enables/disables WiFi on the device.\n     * Requires `ACCESS_WIFI_STATE` and `CHANGE_WIFI_STATE` permissions on Android\n     * @param state {boolean}\n     */\n    Diagnostic.setWifiState = function (state) { return; };\n    /**\n     * Enables/disables Bluetooth on the device.\n     * Requires `BLUETOOTH` and `BLUETOOTH_ADMIN` permissions on Android\n     * @param state {boolean}\n     */\n    Diagnostic.setBluetoothState = function (state) { return; };\n    /**\n     * Returns true if the device setting for location is on. On Android this returns true if Location Mode is switched on. On iOS this returns true if Location Services is switched on.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isLocationEnabled = function () { return; };\n    /**\n     * Checks if the application is authorized to use location.\n     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isLocationAuthorized = function () { return; };\n    /**\n     * Returns the location authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getLocationAuthorizationStatus = function () { return; };\n    /**\n     * Returns the location authorization status for the application.\n     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\n     *\n     * mode - (iOS-only / optional) location authorization mode: \"always\" or \"when_in_use\". If not specified, defaults to \"when_in_use\".\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestLocationAuthorization = function (mode) { return; };\n    /**\n     * Checks if camera hardware is present on device.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isCameraPresent = function () { return; };\n    /**\n     * Checks if the application is authorized to use the camera.\n     * Note for Android: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isCameraAuthorized = function () { return; };\n    /**\n     * Returns the camera authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getCameraAuthorizationStatus = function () { return; };\n    /**\n     * Requests camera authorization for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestCameraAuthorization = function () { return; };\n    /**\n     * Checks if the application is authorized to use the microphone.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isMicrophoneAuthorized = function () { return; };\n    /**\n     * Returns the microphone authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getMicrophoneAuthorizationStatus = function () { return; };\n    /**\n     * Requests microphone authorization for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestMicrophoneAuthorization = function () { return; };\n    /**\n     * Checks if the application is authorized to use contacts (address book).\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isContactsAuthorized = function () { return; };\n    /**\n     * Returns the contacts authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getContactsAuthorizationStatus = function () { return; };\n    /**\n     * Requests contacts authorization for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestContactsAuthorization = function () { return; };\n    /**\n     * Checks if the application is authorized to use the calendar.\n     *\n     * Notes for Android:\n     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return TRUE as permissions are already granted at installation time.\n     *\n     * Notes for iOS:\n     *   - This relates to Calendar Events (not Calendar Reminders)\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isCalendarAuthorized = function () { return; };\n    /**\n     * Returns the calendar authorization status for the application.\n     *\n     * Notes for Android:\n     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return `GRANTED` status as permissions are already granted at installation time.\n     *\n     * Notes for iOS:\n     *   - This relates to Calendar Events (not Calendar Reminders)\n     *\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getCalendarAuthorizationStatus = function () { return; };\n    /**\n     * Requests calendar authorization for the application.\n     *\n     * Notes for iOS:\n     *   - Should only be called if authorization status is NOT_DETERMINED. Calling it when in any other state will have no effect and just return the current authorization status.\n     *   - This relates to Calendar Events (not Calendar Reminders)\n     *\n     * Notes for Android:\n     *   - This is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\n     *   - This requests permission for `READ_CALENDAR` run-time permission\n     *   - Required permissions must be added to `AndroidManifest.xml` as appropriate - see Android permissions: `READ_CALENDAR`, `WRITE_CALENDAR`\n     *\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestCalendarAuthorization = function () { return; };\n    /**\n     * Opens settings page for this app.\n     * On Android, this opens the \"App Info\" page in the Settings app.\n     * On iOS, this opens the app settings page in the Settings app. This works only on iOS 8+ - iOS 7 and below will invoke the errorCallback.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.switchToSettings = function () { return; };\n    /**\n     * Returns the state of Bluetooth on the device.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getBluetoothState = function () { return; };\n    /**\n     * Registers a function to be called when a change in Bluetooth state occurs.\n     * @param handler\n     */\n    Diagnostic.registerBluetoothStateChangeHandler = function (handler) { };\n    /**\n     * Registers a function to be called when a change in Location state occurs.\n     * @param handler\n     */\n    Diagnostic.registerLocationStateChangeHandler = function (handler) { };\n    /**\n     * Checks if high-accuracy locations are available to the app from GPS hardware.\n     * Returns true if Location mode is enabled and is set to \"Device only\" or \"High accuracy\" AND if the app is authorised to use location.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isGpsLocationAvailable = function () { return; };\n    /**\n     * Checks if location mode is set to return high-accuracy locations from GPS hardware.\n     *   Returns true if Location mode is enabled and is set to either:\n     *   - Device only = GPS hardware only (high accuracy)\n     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\n     */\n    Diagnostic.isGpsLocationEnabled = function () { return; };\n    /**\n     * Checks if low-accuracy locations are available to the app from network triangulation/WiFi access points.\n     * Returns true if Location mode is enabled and is set to \"Battery saving\" or \"High accuracy\" AND if the app is authorised to use location.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isNetworkLocationAvailable = function () { return; };\n    /**\n     * Checks if location mode is set to return low-accuracy locations from network triangulation/WiFi access points.\n     * Returns true if Location mode is enabled and is set to either:\n     *   - Battery saving = network triangulation and Wifi network IDs (low accuracy)\n     *   - High accuracy = GPS hardware, network triangulation and Wifi network IDs (high and low accuracy)\n     * @returns {Promise<any>}\n     */\n    Diagnostic.isNetworkLocationEnabled = function () { return; };\n    /**\n     * Returns the current location mode setting for the device.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getLocationMode = function () { return; };\n    /**\n     * Returns the current authorisation status for a given permission.\n     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\n     * @param permission\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getPermissionAuthorizationStatus = function (permission) { return; };\n    /**\n     * Returns the current authorisation status for multiple permissions.\n     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\n     * @param permissions\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getPermissionsAuthorizationStatus = function (permissions) { return; };\n    /**\n     * Requests app to be granted authorisation for a runtime permission.\n     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will have no effect as the permissions are already granted at installation time.\n     * @param permission\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestRuntimePermission = function (permission) { return; };\n    /**\n     * Requests app to be granted authorisation for multiple runtime permissions.\n     * Note: this is intended for Android 6 / API 23 and above. Calling on Android 5 / API 22 and below will always return GRANTED status as permissions are already granted at installation time.\n     * @param permissions\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestRuntimePermissions = function (permissions) { return; };\n    /**\n     * Indicates if the plugin is currently requesting a runtime permission via the native API.\n     * Note that only one request can be made concurrently because the native API cannot handle concurrent requests,\n     * so the plugin will invoke the error callback if attempting to make more than one simultaneous request.\n     * Multiple permission requests should be grouped into a single call since the native API is setup to handle batch requests of multiple permission groups.\n     * @return {boolean}\n     */\n    Diagnostic.isRequestingPermission = function () { return; };\n    /**\n     * Registers a function to be called when a runtime permission request has completed.\n     * Pass in a falsey value to de-register the currently registered function.\n     * @param handler {Function}\n     */\n    Diagnostic.registerPermissionRequestCompleteHandler = function (handler) { return; };\n    /**\n     * Checks if the device setting for Bluetooth is switched on.\n     * This requires `BLUETOOTH` permission on Android\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isBluetoothEnabled = function () { return; };\n    /**\n     * Checks if the device has Bluetooth capabilities.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.hasBluetoothSupport = function () { return; };\n    /**\n     * Checks if the device has Bluetooth Low Energy (LE) capabilities.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.hasBluetoothLESupport = function () { return; };\n    /**\n     * Checks if the device supports Bluetooth Low Energy (LE) Peripheral mode.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.hasBluetoothLEPeripheralSupport = function () { return; };\n    /**\n     * Checks if the application is authorized to use the Camera Roll in Photos app.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isCameraRollAuthorized = function () { return; };\n    /**\n     * Returns the authorization status for the application to use the Camera Roll in Photos app.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.getCameraRollAuthorizationStatus = function () { return; };\n    /**\n     * Requests camera roll authorization for the application.\n     * Should only be called if authorization status is NOT_REQUESTED.\n     * Calling it when in any other state will have no effect.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestCameraRollAuthorization = function () { return; };\n    /**\n     * Checks if remote (push) notifications are enabled.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isRemoteNotificationsEnabled = function () { return; };\n    /**\n     * Indicates if the app is registered for remote (push) notifications on the device.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isRegisteredForRemoteNotifications = function () { return; };\n    /**\n     * Indicates the current setting of notification types for the app in the Settings app.\n     * Note: on iOS 8+, if \"Allow Notifications\" switch is OFF, all types will be returned as disabled.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getRemoteNotificationTypes = function () { return; };\n    /**\n     * Checks if the application is authorized to use reminders.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isRemindersAuthorized = function () { return; };\n    /**\n     * Returns the reminders authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getRemindersAuthorizationStatus = function () { return; };\n    /**\n     * Requests reminders authorization for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.requestRemindersAuthorization = function () { return; };\n    /**\n     * Checks if the application is authorized for background refresh.\n     * @returns {Promise<boolean>}\n     */\n    Diagnostic.isBackgroundRefreshAuthorized = function () { return; };\n    /**\n     * Returns the background refresh authorization status for the application.\n     * @returns {Promise<any>}\n     */\n    Diagnostic.getBackgroundRefreshStatus = function () { return; };\n    Diagnostic.permission = {\n        READ_CALENDAR: 'READ_CALENDAR',\n        WRITE_CALENDAR: 'WRITE_CALENDAR',\n        CAMERA: 'CAMERA',\n        READ_CONTACTS: 'READ_CONTACTS',\n        WRITE_CONTACTS: 'WRITE_CONTACTS',\n        GET_ACCOUNTS: 'GET_ACCOUNTS',\n        ACCESS_FINE_LOCATION: 'ACCESS_FINE_LOCATION',\n        ACCESS_COARSE_LOCATION: 'ACCESS_COARSE_LOCATION',\n        RECORD_AUDIO: 'RECORD_AUDIO',\n        READ_PHONE_STATE: 'READ_PHONE_STATE',\n        CALL_PHONE: 'CALL_PHONE',\n        ADD_VOICEMAIL: 'ADD_VOICEMAIL',\n        USE_SIP: 'USE_SIP',\n        PROCESS_OUTGOING_CALLS: 'PROCESS_OUTGOING_CALLS',\n        READ_CALL_LOG: 'READ_CALL_LOG',\n        WRITE_CALL_LOG: 'WRITE_CALL_LOG',\n        SEND_SMS: 'SEND_SMS',\n        RECEIVE_SMS: 'RECEIVE_SMS',\n        READ_SMS: 'READ_SMS',\n        RECEIVE_WAP_PUSH: 'RECEIVE_WAP_PUSH',\n        RECEIVE_MMS: 'RECEIVE_MMS',\n        WRITE_EXTERNAL_STORAGE: 'WRITE_EXTERNAL_STORAGE',\n        READ_EXTERNAL_STORAGE: 'READ_EXTERNAL_STORAGE',\n        BODY_SENSORS: 'BODY_SENSORS'\n    };\n    Diagnostic.permissionStatus = {\n        GRANTED: 'GRANTED',\n        GRANTED_WHEN_IN_USE: 'GRANTED_WHEN_IN_USE',\n        RESTRICTED: 'RESTRICTED',\n        DENIED: 'DENIED',\n        DENIED_ALWAYS: 'DENIED_ALWAYS',\n        NOT_REQUESTED: 'NOT_REQUESTED'\n    };\n    Diagnostic.locationAuthorizationMode = {\n        ALWAYS: 'ALWAYS',\n        WHEN_IN_USE: 'WHEN_IN_USE'\n    };\n    Diagnostic.permissionGroups = {\n        CALENDAR: ['READ_CALENDAR', 'WRITE_CALENDAR'],\n        CAMERA: ['CAMERA'],\n        CONTACTS: ['READ_CONTACTS', 'WRITE_CONTACTS', 'GET_ACCOUNTS'],\n        LOCATION: ['ACCESS_FINE_LOCATION', 'ACCESS_COARSE_LOCATION'],\n        MICROPHONE: ['RECORD_AUDIO'],\n        PHONE: ['READ_PHONE_STATE', 'CALL_PHONE', 'ADD_VOICEMAIL', 'USE_SIP', 'PROCESS_OUTGOING_CALLS', 'READ_CALL_LOG', 'WRITE_CALL_LOG'],\n        SENSORS: ['BODY_SENSORS'],\n        SMS: ['SEND_SMS', 'RECEIVE_SMS', 'READ_SMS', 'RECEIVE_WAP_PUSH', 'RECEIVE_MMS'],\n        STORAGE: ['READ_EXTERNAL_STORAGE', 'WRITE_EXTERNAL_STORAGE']\n    };\n    Diagnostic.locationMode = {\n        HIGH_ACCURACY: 'high_accuracy',\n        DEVICE_ONLY: 'device_only',\n        BATTERY_SAVING: 'battery_saving',\n        LOCATION_OFF: 'location_off'\n    };\n    Diagnostic.bluetoothState = {\n        UNKNOWN: 'unknown',\n        RESETTING: 'resetting',\n        UNSUPPORTED: 'unsupported',\n        UNAUTHORIZED: 'unauthorized',\n        POWERED_OFF: 'powered_off',\n        POWERED_ON: 'powered_on',\n        POWERING_OFF: 'powering_off',\n        POWERING_ON: 'powering_on'\n    };\n    __decorate([\n        plugin_1.Cordova()\n    ], Diagnostic, \"isLocationAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Diagnostic, \"isWifiAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Diagnostic, \"isCameraAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Diagnostic, \"isBluetoothAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"switchToLocationSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"switchToMobileDataSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"switchToBluetoothSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"switchToWifiSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"isWifiEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ callbackOrder: 'reverse', platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"setWifiState\", null);\n    __decorate([\n        plugin_1.Cordova({ callbackOrder: 'reverse', platforms: ['Android', 'Windows 10'] })\n    ], Diagnostic, \"setBluetoothState\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isLocationEnabled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Diagnostic, \"isLocationAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getLocationAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"requestLocationAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isCameraPresent\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isCameraAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getCameraAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"requestCameraAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isMicrophoneAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getMicrophoneAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"requestMicrophoneAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isContactsAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getContactsAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"requestContactsAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"isCalendarAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getCalendarAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"requestCalendarAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"switchToSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'] })\n    ], Diagnostic, \"getBluetoothState\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'], sync: true })\n    ], Diagnostic, \"registerBluetoothStateChangeHandler\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android', 'iOS'], sync: true })\n    ], Diagnostic, \"registerLocationStateChangeHandler\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"isGpsLocationAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"isGpsLocationEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"isNetworkLocationAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"isNetworkLocationEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"getLocationMode\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })\n    ], Diagnostic, \"getPermissionAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })\n    ], Diagnostic, \"getPermissionsAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })\n    ], Diagnostic, \"requestRuntimePermission\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'], callbackOrder: 'reverse' })\n    ], Diagnostic, \"requestRuntimePermissions\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Diagnostic, \"isRequestingPermission\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Diagnostic, \"registerPermissionRequestCompleteHandler\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"isBluetoothEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"hasBluetoothSupport\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"hasBluetoothLESupport\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['Android'] })\n    ], Diagnostic, \"hasBluetoothLEPeripheralSupport\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"isCameraRollAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"getCameraRollAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"requestCameraRollAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"isRemoteNotificationsEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"isRegisteredForRemoteNotifications\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"getRemoteNotificationTypes\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"isRemindersAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"getRemindersAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"requestRemindersAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"isBackgroundRefreshAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], Diagnostic, \"getBackgroundRefreshStatus\", null);\n    Diagnostic = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Diagnostic',\n            plugin: 'cordova.plugins.diagnostic',\n            pluginRef: 'cordova.plugins.diagnostic',\n            repo: 'https://github.com/dpa99c/cordova-diagnostic-plugin'\n        })\n    ], Diagnostic);\n    return Diagnostic;\n}());\nexports.Diagnostic = Diagnostic;\n//# sourceMappingURL=diagnostic.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 403 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Dialogs\n * @description\n * This plugin gives you ability to access and customize the device native dialogs.\n *\n * Requires Cordova plugin: `cordova-plugin-dialogs`. For more info, please see the [Dialogs plugin docs](https://github.com/apache/cordova-plugin-dialogs).\n *\n * @usage\n * ```typescript\n * import { Dialogs } from 'ionic-native';\n *\n *\n *\n *\n * ```\n */\nvar Dialogs = (function () {\n    function Dialogs() {\n    }\n    /**\n     * Shows a custom alert or dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Alert)\n     * @param {string} buttonName Button name. (Optional, defaults to OK)\n     * @returns {Promise<any>} Returns a blank promise once the user has dismissed the alert.\n     */\n    Dialogs.alert = function (message, title, buttonName) {\n        if (title === void 0) { title = 'Alert'; }\n        if (buttonName === void 0) { buttonName = 'OK'; }\n        return;\n    };\n    /**\n     * Displays a customizable confirmation dialog box.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Confirm)\n     * @param {Array<string>} buttonLabels Array of strings specifying button labels. (Optional, defaults to [OK,Cancel])\n     * @returns {Promise<number>} Returns a promise that resolves the button index that was clicked. Note that the index use one-based indexing.\n     */\n    Dialogs.confirm = function (message, title, buttonLabels) {\n        if (title === void 0) { title = 'Confirm'; }\n        if (buttonLabels === void 0) { buttonLabels = ['OK', 'Cancel']; }\n        return;\n    };\n    /**\n     * Displays a native dialog box that is more customizable than the browser's prompt function.\n     * @param {string} message Dialog message.\n     * @param {string} title Dialog title. (Optional, defaults to Prompt)\n     * @param {Array<string>} buttonLabels  Array of strings specifying button labels. (Optional, defaults to [\"OK\",\"Cancel\"])\n     * @param {string} defaultText Default textbox input value.  (Optional, Default: empty string)\n     * @returns {Promise<any>} Returns a promise that resolves an object with the button index clicked and the text entered\n     */\n    Dialogs.prompt = function (message, title, buttonLabels, defaultText) {\n        if (title === void 0) { title = 'Prompt'; }\n        if (buttonLabels === void 0) { buttonLabels = ['OK', 'Cancel']; }\n        if (defaultText === void 0) { defaultText = ''; }\n        return;\n    };\n    /**\n     * The device plays a beep sound.\n     * @param {numbers} times The number of times to repeat the beep.\n     */\n    Dialogs.beep = function (times) { };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 4\n        })\n    ], Dialogs, \"alert\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 4\n        })\n    ], Dialogs, \"confirm\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 5\n        })\n    ], Dialogs, \"prompt\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Dialogs, \"beep\", null);\n    Dialogs = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Dialogs',\n            plugin: 'cordova-plugin-dialogs',\n            pluginRef: 'navigator.notification',\n            repo: 'https://github.com/apache/cordova-plugin-dialogs.git'\n        })\n    ], Dialogs);\n    return Dialogs;\n}());\nexports.Dialogs = Dialogs;\n//# sourceMappingURL=dialogs.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2RpYWxvZ3MuanM/YjQ4MCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsVUFBVTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBLCtCQUErQixpQkFBaUI7QUFDaEQsb0NBQW9DLG1CQUFtQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxjQUFjO0FBQzdCLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBLCtCQUErQixtQkFBbUI7QUFDbEQsc0NBQXNDLGlDQUFpQztBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxjQUFjO0FBQzdCLGVBQWUsT0FBTztBQUN0QixpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0EsK0JBQStCLGtCQUFrQjtBQUNqRCxzQ0FBc0MsaUNBQWlDO0FBQ3ZFLHFDQUFxQyxrQkFBa0I7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFFBQVE7QUFDdkI7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MDMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIERpYWxvZ3NcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gZ2l2ZXMgeW91IGFiaWxpdHkgdG8gYWNjZXNzIGFuZCBjdXN0b21pemUgdGhlIGRldmljZSBuYXRpdmUgZGlhbG9ncy5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLWRpYWxvZ3NgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRGlhbG9ncyBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IERpYWxvZ3MgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKlxuICpcbiAqIGBgYFxuICovXG52YXIgRGlhbG9ncyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlhbG9ncygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvd3MgYSBjdXN0b20gYWxlcnQgb3IgZGlhbG9nIGJveC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIEFsZXJ0KVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBidXR0b25OYW1lIEJ1dHRvbiBuYW1lLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIE9LKVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBibGFuayBwcm9taXNlIG9uY2UgdGhlIHVzZXIgaGFzIGRpc21pc3NlZCB0aGUgYWxlcnQuXG4gICAgICovXG4gICAgRGlhbG9ncy5hbGVydCA9IGZ1bmN0aW9uIChtZXNzYWdlLCB0aXRsZSwgYnV0dG9uTmFtZSkge1xuICAgICAgICBpZiAodGl0bGUgPT09IHZvaWQgMCkgeyB0aXRsZSA9ICdBbGVydCc7IH1cbiAgICAgICAgaWYgKGJ1dHRvbk5hbWUgPT09IHZvaWQgMCkgeyBidXR0b25OYW1lID0gJ09LJzsgfVxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5cyBhIGN1c3RvbWl6YWJsZSBjb25maXJtYXRpb24gZGlhbG9nIGJveC5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIENvbmZpcm0pXG4gICAgICogQHBhcmFtIHtBcnJheTxzdHJpbmc+fSBidXR0b25MYWJlbHMgQXJyYXkgb2Ygc3RyaW5ncyBzcGVjaWZ5aW5nIGJ1dHRvbiBsYWJlbHMuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gW09LLENhbmNlbF0pXG4gICAgICogQHJldHVybnMge1Byb21pc2U8bnVtYmVyPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0aGUgYnV0dG9uIGluZGV4IHRoYXQgd2FzIGNsaWNrZWQuIE5vdGUgdGhhdCB0aGUgaW5kZXggdXNlIG9uZS1iYXNlZCBpbmRleGluZy5cbiAgICAgKi9cbiAgICBEaWFsb2dzLmNvbmZpcm0gPSBmdW5jdGlvbiAobWVzc2FnZSwgdGl0bGUsIGJ1dHRvbkxhYmVscykge1xuICAgICAgICBpZiAodGl0bGUgPT09IHZvaWQgMCkgeyB0aXRsZSA9ICdDb25maXJtJzsgfVxuICAgICAgICBpZiAoYnV0dG9uTGFiZWxzID09PSB2b2lkIDApIHsgYnV0dG9uTGFiZWxzID0gWydPSycsICdDYW5jZWwnXTsgfVxuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5cyBhIG5hdGl2ZSBkaWFsb2cgYm94IHRoYXQgaXMgbW9yZSBjdXN0b21pemFibGUgdGhhbiB0aGUgYnJvd3NlcidzIHByb21wdCBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBEaWFsb2cgbWVzc2FnZS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgRGlhbG9nIHRpdGxlLiAoT3B0aW9uYWwsIGRlZmF1bHRzIHRvIFByb21wdClcbiAgICAgKiBAcGFyYW0ge0FycmF5PHN0cmluZz59IGJ1dHRvbkxhYmVscyAgQXJyYXkgb2Ygc3RyaW5ncyBzcGVjaWZ5aW5nIGJ1dHRvbiBsYWJlbHMuIChPcHRpb25hbCwgZGVmYXVsdHMgdG8gW1wiT0tcIixcIkNhbmNlbFwiXSlcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZGVmYXVsdFRleHQgRGVmYXVsdCB0ZXh0Ym94IGlucHV0IHZhbHVlLiAgKE9wdGlvbmFsLCBEZWZhdWx0OiBlbXB0eSBzdHJpbmcpXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBhbiBvYmplY3Qgd2l0aCB0aGUgYnV0dG9uIGluZGV4IGNsaWNrZWQgYW5kIHRoZSB0ZXh0IGVudGVyZWRcbiAgICAgKi9cbiAgICBEaWFsb2dzLnByb21wdCA9IGZ1bmN0aW9uIChtZXNzYWdlLCB0aXRsZSwgYnV0dG9uTGFiZWxzLCBkZWZhdWx0VGV4dCkge1xuICAgICAgICBpZiAodGl0bGUgPT09IHZvaWQgMCkgeyB0aXRsZSA9ICdQcm9tcHQnOyB9XG4gICAgICAgIGlmIChidXR0b25MYWJlbHMgPT09IHZvaWQgMCkgeyBidXR0b25MYWJlbHMgPSBbJ09LJywgJ0NhbmNlbCddOyB9XG4gICAgICAgIGlmIChkZWZhdWx0VGV4dCA9PT0gdm9pZCAwKSB7IGRlZmF1bHRUZXh0ID0gJyc7IH1cbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIGRldmljZSBwbGF5cyBhIGJlZXAgc291bmQuXG4gICAgICogQHBhcmFtIHtudW1iZXJzfSB0aW1lcyBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIHJlcGVhdCB0aGUgYmVlcC5cbiAgICAgKi9cbiAgICBEaWFsb2dzLmJlZXAgPSBmdW5jdGlvbiAodGltZXMpIHsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgICAgICAgICBlcnJvckluZGV4OiA0XG4gICAgICAgIH0pXG4gICAgXSwgRGlhbG9ncywgXCJhbGVydFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzdWNjZXNzSW5kZXg6IDEsXG4gICAgICAgICAgICBlcnJvckluZGV4OiA0XG4gICAgICAgIH0pXG4gICAgXSwgRGlhbG9ncywgXCJjb25maXJtXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICAgICAgICAgIGVycm9ySW5kZXg6IDVcbiAgICAgICAgfSlcbiAgICBdLCBEaWFsb2dzLCBcInByb21wdFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzeW5jOiB0cnVlXG4gICAgICAgIH0pXG4gICAgXSwgRGlhbG9ncywgXCJiZWVwXCIsIG51bGwpO1xuICAgIERpYWxvZ3MgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdEaWFsb2dzJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWRpYWxvZ3MnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLm5vdGlmaWNhdGlvbicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1kaWFsb2dzLmdpdCdcbiAgICAgICAgfSlcbiAgICBdLCBEaWFsb2dzKTtcbiAgICByZXR1cm4gRGlhbG9ncztcbn0oKSk7XG5leHBvcnRzLkRpYWxvZ3MgPSBEaWFsb2dzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlhbG9ncy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZGlhbG9ncy5qc1xuLy8gbW9kdWxlIGlkID0gNDAzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 404 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Email Composer\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-email-composer. For more info, please see the [Email Composer plugin docs](https://github.com/hypery2k/cordova-email-plugin).\n *\n * DISCLAIMER: This plugin is experiencing issues with the latest versions of Cordova. Use at your own risk. Functionality is not guaranteed. Please stay tuned for a more stable version.\n * A good alternative to this plugin is the social sharing plugin.\n *\n * @usage\n * ```typescript\n * import { EmailComposer } from 'ionic-native';\n *\n *\n * EmailComposer.isAvailable().then((available: boolean) =>{\n *  if(available) {\n *    //Now we know we can send\n *  }\n * });\n *\n * let email = {\n *   to: 'max@mustermann.de',\n *   cc: 'erika@mustermann.de',\n *   bcc: ['john@doe.com', 'jane@doe.com'],\n *   attachments: [\n *     'file://img/logo.png',\n *     'res://icon.png',\n *     'base64:icon.png//iVBORw0KGgoAAAANSUhEUg...',\n *     'file://README.pdf'\n *   ],\n *   subject: 'Cordova Icons',\n *   body: 'How are you? Nice greetings from Leipzig',\n *   isHtml: true\n * };\n *\n * // Send a text message using default options\n * EmailComposer.open(email);\n *\n * ```\n */\nvar EmailComposer = (function () {\n    function EmailComposer() {\n    }\n    /**\n     * Verifies if sending emails is supported on the device.\n     *\n     * @param app {string?} An optional app id or uri scheme.\n     * @returns {Promise<boolean>} Resolves if available, rejects if not available\n     */\n    EmailComposer.isAvailable = function (app) {\n        return new Promise(function (resolve, reject) {\n            if (app) {\n                cordova.plugins.email.isAvailable(app, function (isAvailable) {\n                    if (isAvailable) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            }\n            else {\n                cordova.plugins.email.isAvailable(function (isAvailable) {\n                    if (isAvailable) {\n                        resolve();\n                    }\n                    else {\n                        reject();\n                    }\n                });\n            }\n        });\n    };\n    /**\n     * Adds a new mail app alias.\n     *\n     * @param alias {string} The alias name\n     * @param packageName {string} The package name\n     */\n    EmailComposer.addAlias = function (alias, packageName) { };\n    /**\n     * Displays the email composer pre-filled with data.\n     *\n     * @param email {Email} Email\n     * @param scope {any?} An optional scope for the promise\n     * @returns {Promise<any>} Resolves promise when the EmailComposer has been opened\n     */\n    EmailComposer.open = function (email, scope) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], EmailComposer, \"addAlias\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 3\n        })\n    ], EmailComposer, \"open\", null);\n    EmailComposer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'EmailComposer',\n            plugin: 'cordova-plugin-email',\n            pluginRef: 'cordova.plugins.email',\n            repo: 'https://github.com/hypery2k/cordova-email-plugin',\n            platforms: ['Android', 'iOS']\n        })\n    ], EmailComposer);\n    return EmailComposer;\n}());\nexports.EmailComposer = EmailComposer;\n//# sourceMappingURL=emailcomposer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2VtYWlsY29tcG9zZXIuanM/Y2ExNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFFBQVE7QUFDM0IsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixPQUFPO0FBQzVCLDJCQUEyQixPQUFPO0FBQ2xDO0FBQ0EsNERBQTREO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixNQUFNO0FBQzNCLHFCQUFxQixLQUFLO0FBQzFCLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0Esa0RBQWtELFFBQVE7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDA0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBFbWFpbCBDb21wb3NlclxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLWVtYWlsLWNvbXBvc2VyLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbRW1haWwgQ29tcG9zZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9oeXBlcnkyay9jb3Jkb3ZhLWVtYWlsLXBsdWdpbikuXG4gKlxuICogRElTQ0xBSU1FUjogVGhpcyBwbHVnaW4gaXMgZXhwZXJpZW5jaW5nIGlzc3VlcyB3aXRoIHRoZSBsYXRlc3QgdmVyc2lvbnMgb2YgQ29yZG92YS4gVXNlIGF0IHlvdXIgb3duIHJpc2suIEZ1bmN0aW9uYWxpdHkgaXMgbm90IGd1YXJhbnRlZWQuIFBsZWFzZSBzdGF5IHR1bmVkIGZvciBhIG1vcmUgc3RhYmxlIHZlcnNpb24uXG4gKiBBIGdvb2QgYWx0ZXJuYXRpdmUgdG8gdGhpcyBwbHVnaW4gaXMgdGhlIHNvY2lhbCBzaGFyaW5nIHBsdWdpbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEVtYWlsQ29tcG9zZXIgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBFbWFpbENvbXBvc2VyLmlzQXZhaWxhYmxlKCkudGhlbigoYXZhaWxhYmxlOiBib29sZWFuKSA9PntcbiAqICBpZihhdmFpbGFibGUpIHtcbiAqICAgIC8vTm93IHdlIGtub3cgd2UgY2FuIHNlbmRcbiAqICB9XG4gKiB9KTtcbiAqXG4gKiBsZXQgZW1haWwgPSB7XG4gKiAgIHRvOiAnbWF4QG11c3Rlcm1hbm4uZGUnLFxuICogICBjYzogJ2VyaWthQG11c3Rlcm1hbm4uZGUnLFxuICogICBiY2M6IFsnam9obkBkb2UuY29tJywgJ2phbmVAZG9lLmNvbSddLFxuICogICBhdHRhY2htZW50czogW1xuICogICAgICdmaWxlOi8vaW1nL2xvZ28ucG5nJyxcbiAqICAgICAncmVzOi8vaWNvbi5wbmcnLFxuICogICAgICdiYXNlNjQ6aWNvbi5wbmcvL2lWQk9SdzBLR2dvQUFBQU5TVWhFVWcuLi4nLFxuICogICAgICdmaWxlOi8vUkVBRE1FLnBkZidcbiAqICAgXSxcbiAqICAgc3ViamVjdDogJ0NvcmRvdmEgSWNvbnMnLFxuICogICBib2R5OiAnSG93IGFyZSB5b3U/IE5pY2UgZ3JlZXRpbmdzIGZyb20gTGVpcHppZycsXG4gKiAgIGlzSHRtbDogdHJ1ZVxuICogfTtcbiAqXG4gKiAvLyBTZW5kIGEgdGV4dCBtZXNzYWdlIHVzaW5nIGRlZmF1bHQgb3B0aW9uc1xuICogRW1haWxDb21wb3Nlci5vcGVuKGVtYWlsKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIEVtYWlsQ29tcG9zZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEVtYWlsQ29tcG9zZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIGlmIHNlbmRpbmcgZW1haWxzIGlzIHN1cHBvcnRlZCBvbiB0aGUgZGV2aWNlLlxuICAgICAqXG4gICAgICogQHBhcmFtIGFwcCB7c3RyaW5nP30gQW4gb3B0aW9uYWwgYXBwIGlkIG9yIHVyaSBzY2hlbWUuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJlc29sdmVzIGlmIGF2YWlsYWJsZSwgcmVqZWN0cyBpZiBub3QgYXZhaWxhYmxlXG4gICAgICovXG4gICAgRW1haWxDb21wb3Nlci5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uIChhcHApIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIGlmIChhcHApIHtcbiAgICAgICAgICAgICAgICBjb3Jkb3ZhLnBsdWdpbnMuZW1haWwuaXNBdmFpbGFibGUoYXBwLCBmdW5jdGlvbiAoaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzQXZhaWxhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgY29yZG92YS5wbHVnaW5zLmVtYWlsLmlzQXZhaWxhYmxlKGZ1bmN0aW9uIChpc0F2YWlsYWJsZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBdmFpbGFibGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWRkcyBhIG5ldyBtYWlsIGFwcCBhbGlhcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhbGlhcyB7c3RyaW5nfSBUaGUgYWxpYXMgbmFtZVxuICAgICAqIEBwYXJhbSBwYWNrYWdlTmFtZSB7c3RyaW5nfSBUaGUgcGFja2FnZSBuYW1lXG4gICAgICovXG4gICAgRW1haWxDb21wb3Nlci5hZGRBbGlhcyA9IGZ1bmN0aW9uIChhbGlhcywgcGFja2FnZU5hbWUpIHsgfTtcbiAgICAvKipcbiAgICAgKiBEaXNwbGF5cyB0aGUgZW1haWwgY29tcG9zZXIgcHJlLWZpbGxlZCB3aXRoIGRhdGEuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZW1haWwge0VtYWlsfSBFbWFpbFxuICAgICAqIEBwYXJhbSBzY29wZSB7YW55P30gQW4gb3B0aW9uYWwgc2NvcGUgZm9yIHRoZSBwcm9taXNlXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmVzb2x2ZXMgcHJvbWlzZSB3aGVuIHRoZSBFbWFpbENvbXBvc2VyIGhhcyBiZWVuIG9wZW5lZFxuICAgICAqL1xuICAgIEVtYWlsQ29tcG9zZXIub3BlbiA9IGZ1bmN0aW9uIChlbWFpbCwgc2NvcGUpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBFbWFpbENvbXBvc2VyLCBcImFkZEFsaWFzXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICAgICAgICAgIGVycm9ySW5kZXg6IDNcbiAgICAgICAgfSlcbiAgICBdLCBFbWFpbENvbXBvc2VyLCBcIm9wZW5cIiwgbnVsbCk7XG4gICAgRW1haWxDb21wb3NlciA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0VtYWlsQ29tcG9zZXInLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZW1haWwnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLmVtYWlsJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vaHlwZXJ5MmsvY29yZG92YS1lbWFpbC1wbHVnaW4nLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgICAgICAgfSlcbiAgICBdLCBFbWFpbENvbXBvc2VyKTtcbiAgICByZXR1cm4gRW1haWxDb21wb3Nlcjtcbn0oKSk7XG5leHBvcnRzLkVtYWlsQ29tcG9zZXIgPSBFbWFpbENvbXBvc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZW1haWxjb21wb3Nlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZW1haWxjb21wb3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNDA0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 405 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name EstimoteBeacons\n *\n * @description\n * This plugin enables communication between a phone and Estimote Beacons peripherals.\n *\n */\nvar EstimoteBeacons = (function () {\n    function EstimoteBeacons() {\n    }\n    /**\n     * Ask the user for permission to use location services\n     * while the app is in the foreground.\n     * You need to call this function or requestAlwaysAuthorization\n     * on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.requestWhenInUseAuthorization().then(\n     *   () => { console.log('on success'); },\n     *   () => { console.log('on error'); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.requestWhenInUseAuthorization = function () { return; };\n    /**\n     * Ask the user for permission to use location services\n     * whenever the app is running.\n     * You need to call this function or requestWhenInUseAuthorization\n     * on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.requestAlwaysAuthorization().then(\n     *   () => { console.log('on success'); },\n     *   () => { console.log('on error'); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.requestAlwaysAuthorization = function () { return; };\n    /**\n     * Get the current location authorization status.\n     * Implemented on iOS 8+.\n     * Does nothing on other platforms.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.authorizationStatus().then(\n     *   (result) => { console.log('Location authorization status: ' + result); },\n     *   (errorMessage) => { console.log('Error: ' + errorMessage); }\n     * );\n     * ```\n     *\n     * @see {@link https://community.estimote.com/hc/en-us/articles/203393036-Estimote-SDK-and-iOS-8-Location-Services|Estimote SDK and iOS 8 Location Services}\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.authorizationStatus = function () { return; };\n    /**\n     * Start advertising as a beacon.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n     *    .then(() => { console.log('Beacon started'); });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n     * }, 5000);\n     * ```\n     * @param uuid {string} UUID string the beacon should advertise (mandatory).\n     * @param major {number} Major value to advertise (mandatory).\n     * @param minor {number} Minor value to advertise (mandatory).\n     * @param regionId {string} Identifier of the region used to advertise (mandatory).\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.startAdvertisingAsBeacon = function (uuid, major, minor, regionId) { return; };\n    /**\n     * Stop advertising as a beacon.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startAdvertisingAsBeacon('B9407F30-F5F8-466E-AFF9-25556B57FE6D', 1, 1, 'MyRegion')\n     *    .then(() => { console.log('Beacon started'); });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopAdvertisingAsBeacon().then((result) => { console.log('Beacon stopped'); });\n     * }, 5000);\n     * ```\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.stopAdvertisingAsBeacon = function () { return; };\n    /**\n     * Enable analytics.\n     *\n     * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.enableAnalytics(true).then(() => { console.log('Analytics enabled'); });\n     * ```\n     * @param enable {number} Boolean value to turn analytics on or off (mandatory).\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.enableAnalytics = function (enable) { return; };\n    /**\n    * Test if analytics is enabled.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.isAnalyticsEnabled().then((enabled) => { console.log('Analytics enabled: ' + enabled); });\n     * ```\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.isAnalyticsEnabled = function () { return; };\n    /**\n    * Test if App ID and App Token is set.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.isAuthorized().then((isAuthorized) => { console.log('App ID and App Token is set: ' + isAuthorized); });\n     * ```\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.isAuthorized = function () { return; };\n    /**\n    * Set App ID and App Token.\n    *\n    * @see {@link http://estimote.github.io/iOS-SDK/Classes/ESTConfig.html|Further details}\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.setupAppIDAndAppToken('MyAppID', 'MyAppToken').then(() => { console.log('AppID and AppToken configured!'); });\n     * ```\n     * @param appID {string} The App ID (mandatory).\n     * @param appToken {string} The App Token (mandatory).\n     * @return Returns a Promise.\n     */\n    EstimoteBeacons.setupAppIDAndAppToken = function (appID, appToken) { return; };\n    /**\n     * Start scanning for all nearby beacons using CoreBluetooth (no region object is used).\n     * Available on iOS.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n     *   console.log(JSON.stringify(beacons));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @return Returns an Observable that notifies of each beacon discovered.\n     */\n    EstimoteBeacons.startEstimoteBeaconDiscovery = function () { return; };\n    /**\n     * Stop CoreBluetooth scan. Available on iOS.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.startEstimoteBeaconDiscovery().subscribe(beacons => {\n     *   console.log(JSON.stringify(beacons));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopEstimoteBeaconDiscovery().then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.stopEstimoteBeaconDiscovery = function () { return; };\n    /**\n     * Start ranging beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n     *   console.log(JSON.stringify(info));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @return Returns an Observable that notifies of each beacon discovered.\n     */\n    EstimoteBeacons.startRangingBeaconsInRegion = function (region) { return; };\n    /**\n     * Stop ranging beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startRangingBeaconsInRegion(region).subscribe(info => {\n     *   console.log(JSON.stringify(info));\n     * });\n     * setTimeout(() => {\n     *   EstimoteBeacons.stopRangingBeaconsInRegion(region).then(() => { console.log('scan stopped'); });\n     * }, 5000);\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.stopRangingBeaconsInRegion = function (region) { return; };\n    /**\n     * Start ranging secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * {@link EstimoteBeacons.startRangingBeaconsInRegion}.\n     * To use secure beacons set the App ID and App Token using\n     * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n     */\n    EstimoteBeacons.startRangingSecureBeaconsInRegion = function (region) { return; };\n    /**\n     * Stop ranging secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * {@link EstimoteBeacons.stopRangingBeaconsInRegion}.\n     */\n    EstimoteBeacons.stopRangingSecureBeaconsInRegion = function (region) { return; };\n    /**\n     * Start monitoring beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.startMonitoringForRegion(region).subscribe(state => {\n     *   console.log('Region state: ' + JSON.stringify(state));\n     * });\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @param [notifyEntryStateOnDisplay=false] {boolean} Set to true to detect if you\n     * are inside a region when the user turns display on, see\n     * {@link https://developer.apple.com/library/prerelease/ios/documentation/CoreLocation/Reference/CLBeaconRegion_class/index.html#//apple_ref/occ/instp/CLBeaconRegion/notifyEntryStateOnDisplay|iOS documentation}\n     * for further details (optional, defaults to false, iOS only).\n     * @return Returns an Observable that notifies of each region state discovered.\n     */\n    EstimoteBeacons.startMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return; };\n    /**\n     * Stop monitoring beacons. Available on iOS and Android.\n     *\n     * @usage\n     * ```\n     * let region: EstimoteBeaconRegion = {} // Empty region matches all beacons.\n     * EstimoteBeacons.stopMonitoringForRegion(region).then(() => { console.log('monitoring is stopped'); });\n     * ```\n     * @param region {EstimoteBeaconRegion} Dictionary with region properties (mandatory).\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.stopMonitoringForRegion = function (region) { return; };\n    /**\n     * Start monitoring secure beacons. Available on iOS.\n     * This function has the same parameters/behaviour as\n     * EstimoteBeacons.startMonitoringForRegion.\n     * To use secure beacons set the App ID and App Token using\n     * {@link EstimoteBeacons.setupAppIDAndAppToken}.\n     * @see {@link EstimoteBeacons.startMonitoringForRegion}\n     * @param region {EstimoteBeaconRegion} Region\n     * @param notifyEntryStateOnDisplay {boolean}\n     */\n    EstimoteBeacons.startSecureMonitoringForRegion = function (region, notifyEntryStateOnDisplay) { return; };\n    /**\n    * Stop monitoring secure beacons. Available on iOS.\n    * This function has the same parameters/behaviour as\n    * {@link EstimoteBeacons.stopMonitoringForRegion}.\n     * @param region {EstimoteBeaconRegion} Region\n    */\n    EstimoteBeacons.stopSecureMonitoringForRegion = function (region) { return; };\n    /**\n     * Connect to Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.connectToBeacon(FF:0F:F0:00:F0:00);\n     * ```\n     * ```\n     * EstimoteBeacons.connectToBeacon({\n     *     proximityUUID: '000000FF-F00F-0FF0-F000-000FF0F00000',\n     *     major: 1,\n     *     minor: 1\n     *   });\n     * ```\n     * @param beacon {Beacon} Beacon to connect to.\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.connectToBeacon = function (beacon) { return; };\n    /**\n     * Disconnect from connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * EstimoteBeacons.disconnectConnectedBeacon();\n     * ```\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.disconnectConnectedBeacon = function () { return; };\n    /**\n     * Write proximity UUID to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes constant ESTIMOTE_PROXIMITY_UUID\n     * EstimoteBeacons.writeConnectedProximityUUID(ESTIMOTE_PROXIMITY_UUID);\n     *\n     * @param uuid {string} String to write as new UUID\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.writeConnectedProximityUUID = function (uuid) { return; };\n    /**\n     * Write major to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes 1\n     * EstimoteBeacons.writeConnectedMajor(1);\n     *\n     * @param major {number} number to write as new major\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.writeConnectedMajor = function (major) { return; };\n    /**\n     * Write minor to connected Estimote Beacon. Available on Android.\n     *\n     * @usage\n     * ```\n     * // Example that writes 1\n     * EstimoteBeacons.writeConnectedMinor(1);\n     *\n     * @param minor {number} number to write as new minor\n     * @return returns a Promise.\n     */\n    EstimoteBeacons.writeConnectedMinor = function (minor) { return; };\n    /** Proximity value */\n    EstimoteBeacons.ProximityUnknown = 0;\n    /** Proximity value */\n    EstimoteBeacons.ProximityImmediate = 1;\n    /** Proximity value */\n    EstimoteBeacons.ProximityNear = 2;\n    /** Proximity value */\n    EstimoteBeacons.ProximityFar = 3;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorUnknown = 0;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorMintCocktail = 1;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorIcyMarshmallow = 2;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorBlueberryPie = 3;\n    /**\n     * Beacon colour.\n     */\n    EstimoteBeacons.BeaconColorSweetBeetroot = 4;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorCandyFloss = 5;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorLemonTart = 6;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorVanillaJello = 7;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorLiquoriceSwirl = 8;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorWhite = 9;\n    /** Beacon colour */\n    EstimoteBeacons.BeaconColorTransparent = 10;\n    /** Region state */\n    EstimoteBeacons.RegionStateUnknown = 'unknown';\n    /** Region state */\n    EstimoteBeacons.RegionStateOutside = 'outside';\n    /** Region state */\n    EstimoteBeacons.RegionStateInside = 'inside';\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"requestWhenInUseAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"requestAlwaysAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"authorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({\n            clearFunction: 'stopAdvertisingAsBeacon'\n        })\n    ], EstimoteBeacons, \"startAdvertisingAsBeacon\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopAdvertisingAsBeacon\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"enableAnalytics\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"isAnalyticsEnabled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"isAuthorized\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"setupAppIDAndAppToken\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopEstimoteBeaconDiscovery'\n        })\n    ], EstimoteBeacons, \"startEstimoteBeaconDiscovery\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopEstimoteBeaconDiscovery\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopRangingBeaconsInRegion',\n            clearWithArgs: true\n        })\n    ], EstimoteBeacons, \"startRangingBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopRangingBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopRangingSecureBeaconsInRegion',\n            clearWithArgs: true\n        })\n    ], EstimoteBeacons, \"startRangingSecureBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopRangingSecureBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopMonitoringForRegion',\n            clearWithArgs: true,\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], EstimoteBeacons, \"startMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopSecureMonitoringForRegion',\n            clearWithArgs: true,\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], EstimoteBeacons, \"startSecureMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"stopSecureMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"connectToBeacon\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"disconnectConnectedBeacon\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"writeConnectedProximityUUID\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"writeConnectedMajor\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], EstimoteBeacons, \"writeConnectedMinor\", null);\n    EstimoteBeacons = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'EstimoteBeacons',\n            plugin: 'cordova-plugin-estimote',\n            pluginRef: 'estimote.beacons',\n            repo: 'https://github.com/evothings/phonegap-estimotebeacons',\n            platforms: ['iOS', 'Android']\n        })\n    ], EstimoteBeacons);\n    return EstimoteBeacons;\n}());\nexports.EstimoteBeacons = EstimoteBeacons;\n//# sourceMappingURL=estimote-beacons.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 406 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Facebook\n * @description\n * Use the Facebook Connect plugin to obtain access to the native FB application on iOS and Android.\n *\n * Requires Cordova plugin: `cordova-plugin-facebook4`. For more info, please see the [Facebook Connect](https://github.com/jeduan/cordova-plugin-facebook4).\n *\n * #### Installation\n *\n *  To use the FB plugin, you first have to create a new Facebook App inside of the Facebook developer portal at [https://developers.facebook.com/apps](https://developers.facebook.com/apps).\n *\n * [![fb-getstarted-1](/img/docs/native/Facebook/1.png)](https://developers.facebook.com/apps/)\n *\n * Retrieve the `App ID` and `App Name`.\n *\n * [![fb-getstarted-2](/img/docs/native/Facebook/2.png)](https://developers.facebook.com/apps/)\n *\n * Then type in the following command in your Terminal, where APP_ID and APP_NAME are the values from the Facebook Developer portal.\n *\n * ```bash\n *  ionic plugin add cordova-plugin-facebook4 --save --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"\n * ```\n *\n * After, you'll need to add the native platforms you'll be using to your app in the Facebook Developer portal under your app's Settings:\n *\n * [![fb-getstarted-3](/img/docs/native/Facebook/3.png)](https://developers.facebook.com/apps/)\n *\n * Click `'Add Platform'`.\n *\n * [![fb-getstarted-4](/img/docs/native/Facebook/4.png)](https://developers.facebook.com/apps/)\n *\n * At this point you'll need to open your project's [`config.xml`](https://cordova.apache.org/docs/en/latest/config_ref/index.html) file, found in the root directory of your project.\n *\n * Take note of the `id` for the next step:\n * ```\n * <widget id=\"com.mycompany.testapp\" version=\"0.0.1\" xmlns=\"http://www.w3.org/ns/widgets\" xmlns:cdv=\"http://cordova.apache.org/ns/1.0\">\n * ```\n *\n * You can also edit the `id` to whatever you'd like it to be.\n *\n * #### iOS Install\n * Under 'Bundle ID', add the `id` from your `config.xml` file:\n *\n * [![fb-getstarted-5](/img/docs/native/Facebook/5.png)](https://developers.facebook.com/apps/)\n *\n *\n * #### Android Install\n * Under 'Google Play Package Name', add the `id` from your `config.xml` file:\n *\n * [![fb-getstarted-6](/img/docs/native/Facebook/6.png)](https://developers.facebook.com/apps/)\n *\n *\n * And that's it! You can now make calls to Facebook using the plugin.\n *\n * ## Events\n *\n * App events allow you to understand the makeup of users engaging with your app, measure the performance of your Facebook mobile app ads, and reach specific sets of your users with Facebook mobile app ads.\n *\n * - [iOS] [https://developers.facebook.com/docs/ios/app-events](https://developers.facebook.com/docs/ios/app-events)\n * - [Android] [https://developers.facebook.com/docs/android/app-events](https://developers.facebook.com/docs/android/app-events)\n * - [JS] Does not have an Events API, so the plugin functions are empty and will return an automatic success\n *\n * Activation events are automatically tracked for you in the plugin.\n *\n * Events are listed on the [insights page](https://www.facebook.com/insights/).\n *\n * For tracking events, see `logEvent` and `logPurchase`.\n *\n * @usage\n * ```typescript\n * import { Facebook } from 'ionic-native';\n *\n *\n *\n * ```\n *\n */\nvar Facebook = (function () {\n    function Facebook() {\n    }\n    /**\n     * Browser wrapper\n     * @param {number} appId Your Facebook AppID from their dashboard\n     * @param {string} version The version of API you may want to use. Optional\n     */\n    Facebook.browserInit = function (appId, version) {\n        return;\n    };\n    /**\n     * Login to Facebook to authenticate this app.\n     *\n     * ```typescript\n     * {\n     *   status: \"connected\",\n     *   authResponse: {\n     *     session_key: true,\n     *     accessToken: \"kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn\",\n     *     expiresIn: 5183979,\n     *     sig: \"...\",\n     *     secret: \"...\",\n     *     userID: \"634565435\"\n     *   }\n     * }\n     * ```\n     *\n     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) this app has upon logging in.\n     * @return {Promise<FacebookLoginResponse>} Returns a Promise that resolves with a status object if login succeeds, and rejects if login fails.\n     */\n    Facebook.login = function (permissions) { return; };\n    /**\n     * Logout of Facebook.\n     *\n     * For more info see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.logout)\n     * @return Returns a Promise that resolves on a successful logout, and rejects if logout fails.\n     */\n    Facebook.logout = function () { return; };\n    /**\n     * Determine if a user is logged in to Facebook and has authenticated your app.  There are three possible states for a user:\n     *\n     * 1) the user is logged into Facebook and has authenticated your application (connected)\n     * 2) the user is logged into Facebook but has not authenticated your application (not_authorized)\n     * 3) the user is either not logged into Facebook or explicitly logged out of your application so it doesn't attempt to connect to Facebook and thus, we don't know if they've authenticated your application or not (unknown)\n     *\n     * Resolves with a response like:\n     *\n     * ```\n     * {\n     *   authResponse: {\n     *     userID: \"12345678912345\",\n     *     accessToken: \"kgkh3g42kh4g23kh4g2kh34g2kg4k2h4gkh3g4k2h4gk23h4gk2h34gk234gk2h34AndSoOn\",\n     *     session_Key: true,\n     *     expiresIn: \"5183738\",\n     *     sig: \"...\"\n     *   },\n     *   status: \"connected\"\n     * }\n     * ```\n     *\n     * For more information see the [Facebook docs](https://developers.facebook.com/docs/reference/javascript/FB.getLoginStatus)\n     *\n     * @return Returns a Promise that resolves with a status, or rejects with an error\n     */\n    Facebook.getLoginStatus = function () { return; };\n    /**\n     * Get a Facebook access token for using Facebook services.\n     *\n     * @return Returns a Promise that resolves with an access token, or rejects with an error\n     */\n    Facebook.getAccessToken = function () { return; };\n    /**\n     * Show one of various Facebook dialogs. Example of options for a Share dialog:\n     *\n     * ```\n     * {\n     *   method: \"share\",\n     *   href: \"http://example.com\",\n     *   caption: \"Such caption, very feed.\",\n     *   description: \"Much description\",\n     *   picture: 'http://example.com/image.png'\n     * }\n     * ```\n     *\n     * For more options see the [Cordova plugin docs](https://github.com/jeduan/cordova-plugin-facebook4#show-a-dialog) and the [Facebook docs](https://developers.facebook.com/docs/javascript/reference/FB.ui)\n     * @options {Object}  options The dialog options\n     * @return Returns a Promise that resolves with success data, or rejects with an error\n     */\n    Facebook.showDialog = function (options) { return; };\n    /**\n     * Make a call to Facebook Graph API. Can take additional permissions beyond those granted on login.\n     *\n     * For more information see:\n     *\n     *  Calling the Graph API - https://developers.facebook.com/docs/javascript/reference/FB.api\n     *  Graph Explorer - https://developers.facebook.com/tools/explorer\n     *  Graph API - https://developers.facebook.com/docs/graph-api\n     *\n     * @param {string}  requestPath Graph API endpoint you want to call\n     * @param {string[]}  permissions List of [permissions](https://developers.facebook.com/docs/facebook-login/permissions) for this request.\n     * @return Returns a Promise that resolves with the result of the request, or rejects with an error\n     */\n    Facebook.api = function (requestPath, permissions) { return; };\n    /**\n     * Log an event.  For more information see the Events section above.\n     *\n     * @param {string}  name Name of the event\n     * @param {Object}  [params] An object containing extra data to log with the event\n     * @param {number}  [valueToSum] any value to be added to added to a sum on each event\n     * @return\n     */\n    Facebook.logEvent = function (name, params, valueToSum) { return; };\n    /**\n     * Log a purchase. For more information see the Events section above.\n     *\n     * @param {number}  value Value of the purchase.\n     * @param {string}  currency The currency, as an [ISO 4217 currency code](http://en.wikipedia.org/wiki/ISO_4217)\n     * @return Returns a Promise\n     */\n    Facebook.logPurchase = function (value, currency) { return; };\n    /**\n     * Open App Invite dialog. Does not require login.\n     *\n     * For more information see:\n     *\n     *   the App Invites Overview - https://developers.facebook.com/docs/app-invites/overview\n     *   the App Links docs - https://developers.facebook.com/docs/applinks\n     *\n     *\n     * @param {Object}  options An object containing an [App Link](https://developers.facebook.com/docs/applinks) URL to your app and an optional image URL.\n     *   url: [App Link](https://developers.facebook.com/docs/applinks) to your app\n     *   picture: image to be displayed in the App Invite dialog\n     *\n     * @return Returns a Promise that resolves with the result data, or rejects with an error\n     */\n    Facebook.appInvite = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"browserInit\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"login\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"logout\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"getLoginStatus\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"getAccessToken\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"showDialog\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"api\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"logEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"logPurchase\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Facebook, \"appInvite\", null);\n    Facebook = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Facebook',\n            plugin: 'cordova-plugin-facebook4',\n            pluginRef: 'facebookConnectPlugin',\n            repo: 'https://github.com/jeduan/cordova-plugin-facebook4',\n            install: 'ionic plugin add cordova-plugin-facebook4 --variable APP_ID=\"123456789\" --variable APP_NAME=\"myApplication\"'\n        })\n    ], Facebook);\n    return Facebook;\n}());\nexports.Facebook = Facebook;\n//# sourceMappingURL=facebook.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 407 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name File\n * @description\n * This plugin implements a File API allowing read/write access to files residing on the device.\n *\n * The File class implements static convenience functions to access files and directories.\n *\n * Example:\n * ```\n * import { File } from 'ionic-native';\n *\n * declare var cordova: any;\n * const fs:string = cordova.file.dataDirectory;\n * File.checkDir(this.fs, 'mydir').then(_ => console.log('yay')).catch(err => console.log('boooh'));\n * ```\n *\n *  This plugin is based on several specs, including : The HTML5 File API http://www.w3.org/TR/FileAPI/\n *  The (now-defunct) Directories and System extensions Latest: http://www.w3.org/TR/2012/WD-file-system-api-20120417/\n *  Although most of the plugin code was written when an earlier spec was current: http://www.w3.org/TR/2011/WD-file-system-api-20110419/\n *  It also implements the FileWriter spec : http://dev.w3.org/2009/dap/file-system/file-writer.html\n */\nvar File = (function () {\n    function File() {\n    }\n    /**\n     * Get free disk space\n     * @returns {Promise<number>} Returns a promise that resolves with the remaining free disk space\n     */\n    File.getFreeDiskSpace = function () {\n        return new Promise(function (resolve, reject) {\n            if (!cordova || !cordova.exec) {\n                plugin_1.pluginWarn({\n                    pluginName: 'File',\n                    plugin: 'cordova-plugin-file'\n                });\n                reject({ error: 'plugin_not_installed' });\n            }\n            else {\n                cordova.exec(resolve, reject, 'File', 'getFreeDiskSpace', []);\n            }\n        });\n    };\n    /**\n     * Check if a directory exists in a certain path, directory.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} dir Name of directory to check\n     * @return {Promise<boolean|FileError>} Returns a Promise that resolves to true if the directory exists or rejects with an error.\n     */\n    File.checkDir = function (path, dir) {\n        if ((/^\\//.test(dir))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        var fullpath = path + dir;\n        return File.resolveDirectoryUrl(fullpath)\n            .then(function () {\n            return true;\n        });\n    };\n    /**\n     * Creates a new directory in the specific path.\n     * The replace boolean value determines whether to replace an existing directory with the same name.\n     * If an existing directory exists and the replace value is false, the promise will fail and return an error.\n     *\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} dirName Name of directory to create\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\n     * @return {Promise<DirectoryEntry|FileError>} Returns a Promise that resolves with a DirectoryEntry or rejects with an error.\n     */\n    File.createDir = function (path, dirName, replace) {\n        if ((/^\\//.test(dirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        var options = {\n            create: true\n        };\n        if (!replace) {\n            options.exclusive = true;\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getDirectory(fse, dirName, options);\n        });\n    };\n    /**\n     * Remove a directory at a given path.\n     *\n     * @param {string} path The path to the directory\n     * @param {string} dirName The directory name\n     * @return {Promise<RemoveResult|FileError>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\n     */\n    File.removeDir = function (path, dirName) {\n        if ((/^\\//.test(dirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getDirectory(fse, dirName, { create: false });\n        })\n            .then(function (de) {\n            return File.remove(de);\n        });\n    };\n    /**\n     * Move a directory to a given path.\n     *\n     * @param {string} path The source path to the directory\n     * @param {string} dirName The source directory name\n     * @param {string} newPath The destionation path to the directory\n     * @param {string} newDirName The destination directory name\n     * @return {Promise<DirectoryEntry|Entry|FileError>} Returns a Promise that resolves to the new DirectoryEntry object or rejects with an error.\n     */\n    File.moveDir = function (path, dirName, newPath, newDirName) {\n        var _this = this;\n        newDirName = newDirName || dirName;\n        if ((/^\\//.test(newDirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return this.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return _this.getDirectory(fse, dirName, { create: false });\n        })\n            .then(function (srcde) {\n            return _this.resolveDirectoryUrl(newPath)\n                .then(function (deste) {\n                return File.move(srcde, deste, newDirName);\n            });\n        });\n    };\n    /**\n     * Copy a directory in various methods. If destination directory exists, will fail to copy.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} dirName Name of directory to copy\n     * @param {string} newPath Base FileSystem of new location\n     * @param {string} newDirName New name of directory to copy to (leave blank to remain the same)\n     * @return {Promise<Entry|FileError>} Returns a Promise that resolves to the new Entry object or rejects with an error.\n     */\n    File.copyDir = function (path, dirName, newPath, newDirName) {\n        var _this = this;\n        if ((/^\\//.test(newDirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return this.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return _this.getDirectory(fse, dirName, { create: false });\n        })\n            .then(function (srcde) {\n            return _this.resolveDirectoryUrl(newPath)\n                .then(function (deste) {\n                return File.copy(srcde, deste, newDirName);\n            });\n        });\n    };\n    /**\n     * List files and directory from a given path.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} dirName Name of directory\n     * @return {Promise<Entry[]>} Returns a Promise that resolves to an array of Entry objects or rejects with an error.\n     */\n    File.listDir = function (path, dirName) {\n        if ((/^\\//.test(dirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getDirectory(fse, dirName, { create: false, exclusive: false });\n        })\n            .then(function (de) {\n            var reader = de.createReader();\n            return File.readEntries(reader);\n        });\n    };\n    /**\n     * Removes all files and the directory from a desired location.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} dirName Name of directory\n     * @return {Promise<RemoveResult>} Returns a Promise that resolves with a RemoveResult or rejects with an error.\n     */\n    File.removeRecursively = function (path, dirName) {\n        if ((/^\\//.test(dirName))) {\n            var err = new FileError(5);\n            err.message = 'directory cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getDirectory(fse, dirName, { create: false });\n        })\n            .then(function (de) {\n            return File.rimraf(de);\n        });\n    };\n    /**\n     * Check if a file exists in a certain path, directory.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} file Name of file to check\n     * @return {Promise<boolean|FileError>} Returns a Promise that resolves with a boolean or rejects with an error.\n     */\n    File.checkFile = function (path, file) {\n        if ((/^\\//.test(file))) {\n            var err = new FileError(5);\n            err.message = 'file cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveLocalFilesystemUrl(path + file)\n            .then(function (fse) {\n            if (fse.isFile) {\n                return true;\n            }\n            else {\n                var err = new FileError(13);\n                err.message = 'input is not a file';\n                return Promise.reject(err);\n            }\n        });\n    };\n    /**\n     * Creates a new file in the specific path.\n     * The replace boolean value determines whether to replace an existing file with the same name.\n     * If an existing file exists and the replace value is false, the promise will fail and return an error.\n     *\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName Name of file to create\n     * @param {boolean} replace If true, replaces file with same name. If false returns error\n     * @return {Promise<FileEntry|FileError>} Returns a Promise that resolves to a FileEntry or rejects with an error.\n     */\n    File.createFile = function (path, fileName, replace) {\n        if ((/^\\//.test(fileName))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        var options = {\n            create: true\n        };\n        if (!replace) {\n            options.exclusive = true;\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, fileName, options);\n        });\n    };\n    /**\n     * Removes a file from a desired location.\n     *\n     * @param {string} path  Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName Name of file to remove\n     * @return {Promise<RemoveResult|FileError>} Returns a Promise that resolves to a RemoveResult or rejects with an error.\n     */\n    File.removeFile = function (path, fileName) {\n        if ((/^\\//.test(fileName))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, fileName, { create: false });\n        })\n            .then(function (fe) {\n            return File.remove(fe);\n        });\n    };\n    /** Write a new file to the desired location.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName path relative to base path\n     * @param {string | Blob} text content or blob to write\n     * @param {WriteOptions} options replace file if set to true. See WriteOptions for more information.\n     * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\n     */\n    File.writeFile = function (path, fileName, text, options) {\n        if ((/^\\//.test(fileName))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        var getFileOpts = {\n            create: true,\n            exclusive: options.replace\n        };\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, fileName, getFileOpts);\n        })\n            .then(function (fe) {\n            return File.createWriter(fe);\n        })\n            .then(function (writer) {\n            if (options.append) {\n                writer.seek(writer.length);\n            }\n            if (options.truncate) {\n                writer.truncate(options.truncate);\n            }\n            return File.write(writer, text);\n        });\n    };\n    /** Write to an existing file.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName path relative to base path\n     * @param {string | Blob} text content or blob to write\n     * @returns {Promise<void>} Returns a Promise that resolves or rejects with an error.\n     */\n    File.writeExistingFile = function (path, fileName, text) {\n        if ((/^\\//.test(fileName))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, fileName, { create: false });\n        })\n            .then(function (fe) {\n            return File.createWriter(fe);\n        })\n            .then(function (writer) {\n            return File.write(writer, text);\n        });\n    };\n    /**\n     * Read the contents of a file as text.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} file Name of file, relative to path.\n     * @return {Promise<string|FileError>} Returns a Promise that resolves with the contents of the file as string or rejects with an error.\n     */\n    File.readAsText = function (path, file) {\n        if ((/^\\//.test(file))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, file, { create: false });\n        })\n            .then(function (fe) {\n            var reader = new FileReader();\n            return new Promise(function (resolve, reject) {\n                reader.onloadend = function () {\n                    if (reader.result !== undefined || reader.result !== null) {\n                        resolve(reader.result);\n                    }\n                    else if (reader.error !== undefined || reader.error !== null) {\n                        reject(reader.error);\n                    }\n                    else {\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n                    }\n                };\n                fe.file(function (file) {\n                    reader.readAsText(file);\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        });\n    };\n    /**\n     * Read file and return data as a base64 encoded data url.\n     * A data url is of the form:\n     *      data:[<mediatype>][;base64],<data>\n  \n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} file Name of file, relative to path.\n     * @return {Promise<string|FileError>} Returns a Promise that resolves with the contents of the file as data URL or rejects with an error.\n     */\n    File.readAsDataURL = function (path, file) {\n        if ((/^\\//.test(file))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, file, { create: false });\n        })\n            .then(function (fe) {\n            var reader = new FileReader();\n            return new Promise(function (resolve, reject) {\n                reader.onloadend = function () {\n                    if (reader.result !== undefined || reader.result !== null) {\n                        resolve(reader.result);\n                    }\n                    else if (reader.error !== undefined || reader.error !== null) {\n                        reject(reader.error);\n                    }\n                    else {\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n                    }\n                };\n                fe.file(function (file) {\n                    reader.readAsDataURL(file);\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        });\n    };\n    /**\n     * Read file and return data as a binary data.\n  \n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} file Name of file, relative to path.\n     * @return {Promise<string|FileError>} Returns a Promise that resolves with the contents of the file as string rejects with an error.\n     */\n    File.readAsBinaryString = function (path, file) {\n        if ((/^\\//.test(file))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, file, { create: false });\n        })\n            .then(function (fe) {\n            var reader = new FileReader();\n            return new Promise(function (resolve, reject) {\n                reader.onloadend = function () {\n                    if (reader.result !== undefined || reader.result !== null) {\n                        resolve(reader.result);\n                    }\n                    else if (reader.error !== undefined || reader.error !== null) {\n                        reject(reader.error);\n                    }\n                    else {\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n                    }\n                };\n                fe.file(function (file) {\n                    reader.readAsBinaryString(file);\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        });\n    };\n    /**\n     * Read file and return data as an ArrayBuffer.\n  \n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} file Name of file, relative to path.\n     * @return {Promise<ArrayBuffer|FileError>} Returns a Promise that resolves with the contents of the file as ArrayBuffer or rejects with an error.\n     */\n    File.readAsArrayBuffer = function (path, file) {\n        if ((/^\\//.test(file))) {\n            var err = new FileError(5);\n            err.message = 'file-name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return File.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return File.getFile(fse, file, { create: false });\n        })\n            .then(function (fe) {\n            var reader = new FileReader();\n            return new Promise(function (resolve, reject) {\n                reader.onloadend = function () {\n                    if (reader.result !== undefined || reader.result !== null) {\n                        resolve(reader.result);\n                    }\n                    else if (reader.error !== undefined || reader.error !== null) {\n                        reject(reader.error);\n                    }\n                    else {\n                        reject({ code: null, message: 'READER_ONLOADEND_ERR' });\n                    }\n                };\n                fe.file(function (file) {\n                    reader.readAsArrayBuffer(file);\n                }, function (error) {\n                    reject(error);\n                });\n            });\n        });\n    };\n    /**\n     * Move a file to a given path.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName Name of file to move\n     * @param {string} newPath Base FileSystem of new location\n     * @param {string} newFileName New name of file to move to (leave blank to remain the same)\n     * @return {Promise<Entry|FileError>} Returns a Promise that resolves to the new Entry or rejects with an error.\n     */\n    File.moveFile = function (path, fileName, newPath, newFileName) {\n        var _this = this;\n        newFileName = newFileName || fileName;\n        if ((/^\\//.test(newFileName))) {\n            var err = new FileError(5);\n            err.message = 'file name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return this.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return _this.getFile(fse, fileName, { create: false });\n        })\n            .then(function (srcfe) {\n            return _this.resolveDirectoryUrl(newPath)\n                .then(function (deste) {\n                return File.move(srcfe, deste, newFileName);\n            });\n        });\n    };\n    /**\n     * Copy a file in various methods. If file exists, will fail to copy.\n     *\n     * @param {string} path Base FileSystem. Please refer to the iOS and Android filesystems above\n     * @param {string} fileName Name of file to copy\n     * @param {string} newPath Base FileSystem of new location\n     * @param {string} newFileName New name of file to copy to (leave blank to remain the same)\n     * @return {Promise<Entry|FileError>} Returns a Promise that resolves to an Entry or rejects with an error.\n     */\n    File.copyFile = function (path, fileName, newPath, newFileName) {\n        var _this = this;\n        newFileName = newFileName || fileName;\n        if ((/^\\//.test(newFileName))) {\n            var err = new FileError(5);\n            err.message = 'file name cannot start with \\/';\n            return Promise.reject(err);\n        }\n        return this.resolveDirectoryUrl(path)\n            .then(function (fse) {\n            return _this.getFile(fse, fileName, { create: false });\n        })\n            .then(function (srcfe) {\n            return _this.resolveDirectoryUrl(newPath)\n                .then(function (deste) {\n                return File.copy(srcfe, deste, newFileName);\n            });\n        });\n    };\n    // these private methods help avoid cascading error handling\n    // in the public ones, primarily simply wrapping callback\n    // operations to return Promises that can then be chained.\n    /**\n     * @private\n     */\n    File.fillErrorMessage = function (err) {\n        err.message = File.cordovaFileError[err.code];\n    };\n    /**\n     * Resolves a local file system URL\n     * @param fileUrl {string} file system url\n     * @returns {Promise<Entry>}\n     */\n    File.resolveLocalFilesystemUrl = function (fileUrl) {\n        return new Promise(function (resolve, reject) {\n            try {\n                window.resolveLocalFileSystemURL(fileUrl, function (entry) {\n                    resolve(entry);\n                }, function (err) {\n                    File.fillErrorMessage(err);\n                    reject(err);\n                });\n            }\n            catch (xc) {\n                File.fillErrorMessage(xc);\n                reject(xc);\n            }\n        });\n    };\n    /**\n     * Resolves a local directory url\n     * @param directoryUrl {string} directory system url\n     * @returns {Promise<DirectoryEntry>}\n     */\n    File.resolveDirectoryUrl = function (directoryUrl) {\n        return File.resolveLocalFilesystemUrl(directoryUrl)\n            .then(function (de) {\n            if (de.isDirectory) {\n                return de;\n            }\n            else {\n                var err = new FileError(13);\n                err.message = 'input is not a directory';\n                return Promise.reject(err);\n            }\n        });\n    };\n    /**\n     * Get a directory\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\n     * @param directoryName {string} Directory name\n     * @param flags {Flags} Options\n     * @returns {Promise<DirectoryEntry>}\n     */\n    File.getDirectory = function (directoryEntry, directoryName, flags) {\n        return new Promise(function (resolve, reject) {\n            try {\n                directoryEntry.getDirectory(directoryName, flags, function (de) {\n                    resolve(de);\n                }, function (err) {\n                    File.fillErrorMessage(err);\n                    reject(err);\n                });\n            }\n            catch (xc) {\n                File.fillErrorMessage(xc);\n                reject(xc);\n            }\n        });\n    };\n    /**\n     * Get a file\n     * @param directoryEntry {DirectoryEntry} Directory entry, obtained by resolveDirectoryUrl method\n     * @param fileName {string} File name\n     * @param flags {Flags} Options\n     * @returns {Promise<FileEntry>}\n     */\n    File.getFile = function (directoryEntry, fileName, flags) {\n        return new Promise(function (resolve, reject) {\n            try {\n                directoryEntry.getFile(fileName, flags, resolve, function (err) {\n                    File.fillErrorMessage(err);\n                    reject(err);\n                });\n            }\n            catch (xc) {\n                File.fillErrorMessage(xc);\n                reject(xc);\n            }\n        });\n    };\n    /**\n     * @private\n     */\n    File.remove = function (fe) {\n        return new Promise(function (resolve, reject) {\n            fe.remove(function () {\n                resolve({ success: true, fileRemoved: fe });\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.move = function (srce, destdir, newName) {\n        return new Promise(function (resolve, reject) {\n            srce.moveTo(destdir, newName, function (deste) {\n                resolve(deste);\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.copy = function (srce, destdir, newName) {\n        return new Promise(function (resolve, reject) {\n            srce.copyTo(destdir, newName, function (deste) {\n                resolve(deste);\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.readEntries = function (dr) {\n        return new Promise(function (resolve, reject) {\n            dr.readEntries(function (entries) {\n                resolve(entries);\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.rimraf = function (de) {\n        return new Promise(function (resolve, reject) {\n            de.removeRecursively(function () {\n                resolve({ success: true, fileRemoved: de });\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.createWriter = function (fe) {\n        return new Promise(function (resolve, reject) {\n            fe.createWriter(function (writer) {\n                resolve(writer);\n            }, function (err) {\n                File.fillErrorMessage(err);\n                reject(err);\n            });\n        });\n    };\n    /**\n     * @private\n     */\n    File.write = function (writer, gu) {\n        if (gu instanceof Blob) {\n            return this.writeFileInChunks(writer, gu);\n        }\n        return new Promise(function (resolve, reject) {\n            writer.onwriteend = function (evt) {\n                if (writer.error) {\n                    reject(writer.error);\n                }\n                else {\n                    resolve(evt);\n                }\n            };\n            writer.write(gu);\n        });\n    };\n    /**\n     * @private\n     */\n    File.writeFileInChunks = function (writer, file) {\n        var BLOCK_SIZE = 1024 * 1024;\n        var writtenSize = 0;\n        function writeNextChunk() {\n            var size = Math.min(BLOCK_SIZE, file.size - writtenSize);\n            var chunk = file.slice(writtenSize, writtenSize + size);\n            writtenSize += size;\n            writer.write(chunk);\n        }\n        return new Promise(function (resolve, reject) {\n            writer.onerror = reject;\n            writer.onwrite = function () {\n                if (writtenSize < file.size) {\n                    writeNextChunk();\n                }\n                else {\n                    resolve();\n                }\n            };\n            writeNextChunk();\n        });\n    };\n    File.cordovaFileError = {\n        1: 'NOT_FOUND_ERR',\n        2: 'SECURITY_ERR',\n        3: 'ABORT_ERR',\n        4: 'NOT_READABLE_ERR',\n        5: 'ENCODING_ERR',\n        6: 'NO_MODIFICATION_ALLOWED_ERR',\n        7: 'INVALID_STATE_ERR',\n        8: 'SYNTAX_ERR',\n        9: 'INVALID_MODIFICATION_ERR',\n        10: 'QUOTA_EXCEEDED_ERR',\n        11: 'TYPE_MISMATCH_ERR',\n        12: 'PATH_EXISTS_ERR',\n        13: 'WRONG_ENTRY_TYPE',\n        14: 'DIR_READ_ERR',\n    };\n    File = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'File',\n            plugin: 'cordova-plugin-file',\n            pluginRef: 'cordova.file',\n            repo: 'https://github.com/apache/cordova-plugin-file'\n        })\n    ], File);\n    return File;\n}());\nexports.File = File;\n//# sourceMappingURL=file.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 408 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name FileChooser\n * @description\n *\n * Opens the file picker on Android for the user to select a file, returns a file URI.\n *\n * @usage\n * ```\n * import {FileChooser} from 'ionic-native';\n *\n * FileChooser.open()\n *   .then(uri => console.log(uri);\n *   .catch(e => console.log(e);\n *\n * ```\n */\nvar FileChooser = (function () {\n    function FileChooser() {\n    }\n    /**\n     * Open a file\n     */\n    FileChooser.open = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], FileChooser, \"open\", null);\n    FileChooser = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'FileChooser',\n            plugin: 'http://github.com/don/cordova-filechooser.git',\n            pluginRef: 'fileChooser',\n            repo: 'https://github.com/don/cordova-filechooser',\n            platforms: ['Android']\n        })\n    ], FileChooser);\n    return FileChooser;\n}());\nexports.FileChooser = FileChooser;\n//# sourceMappingURL=file-chooser.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ZpbGUtY2hvb3Nlci5qcz83ZmJkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEZpbGVDaG9vc2VyXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBPcGVucyB0aGUgZmlsZSBwaWNrZXIgb24gQW5kcm9pZCBmb3IgdGhlIHVzZXIgdG8gc2VsZWN0IGEgZmlsZSwgcmV0dXJucyBhIGZpbGUgVVJJLlxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge0ZpbGVDaG9vc2VyfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIEZpbGVDaG9vc2VyLm9wZW4oKVxuICogICAudGhlbih1cmkgPT4gY29uc29sZS5sb2codXJpKTtcbiAqICAgLmNhdGNoKGUgPT4gY29uc29sZS5sb2coZSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBGaWxlQ2hvb3NlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmlsZUNob29zZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW4gYSBmaWxlXG4gICAgICovXG4gICAgRmlsZUNob29zZXIub3BlbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBGaWxlQ2hvb3NlciwgXCJvcGVuXCIsIG51bGwpO1xuICAgIEZpbGVDaG9vc2VyID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnRmlsZUNob29zZXInLFxuICAgICAgICAgICAgcGx1Z2luOiAnaHR0cDovL2dpdGh1Yi5jb20vZG9uL2NvcmRvdmEtZmlsZWNob29zZXIuZ2l0JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2ZpbGVDaG9vc2VyJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZG9uL2NvcmRvdmEtZmlsZWNob29zZXInLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIEZpbGVDaG9vc2VyKTtcbiAgICByZXR1cm4gRmlsZUNob29zZXI7XG59KCkpO1xuZXhwb3J0cy5GaWxlQ2hvb3NlciA9IEZpbGVDaG9vc2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZS1jaG9vc2VyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9maWxlLWNob29zZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQwOFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 409 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name FileOpener\n * @description\n * This plugin will open a file on your device file system with its default application.\n *\n * @usage\n * ```\n * import {FileOpener} from 'ionic-native';\n *\n *\n *\n * ```\n */\nvar FileOpener = (function () {\n    function FileOpener() {\n    }\n    /**\n     * Open an file\n     * @param filePath {string} File Path\n     * @param fileMIMEType {string} File MIME Type\n     */\n    FileOpener.open = function (filePath, fileMIMEType) { return; };\n    /**\n     * Uninstalls a package\n     * @param packageId {string}  Package ID\n     */\n    FileOpener.uninstall = function (packageId) { return; };\n    /**\n     * Check if an app is already installed\n     * @param packageId {string} Package ID\n     */\n    FileOpener.appIsInstalled = function (packageId) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            callbackStyle: 'object',\n            successName: 'success',\n            errorName: 'error'\n        })\n    ], FileOpener, \"open\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackStyle: 'object',\n            successName: 'success',\n            errorName: 'error'\n        })\n    ], FileOpener, \"uninstall\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackStyle: 'object',\n            successName: 'success',\n            errorName: 'error'\n        })\n    ], FileOpener, \"appIsInstalled\", null);\n    FileOpener = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'FileOpener',\n            plugin: 'cordova-plugin-file-opener2',\n            pluginRef: 'cordova.plugins.fileOpener2',\n            repo: 'https://github.com/pwlin/cordova-plugin-file-opener2'\n        })\n    ], FileOpener);\n    return FileOpener;\n}());\nexports.FileOpener = FileOpener;\n//# sourceMappingURL=file-opener.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ZpbGUtb3BlbmVyLmpzP2I0MmIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CLDRCQUE0QixPQUFPO0FBQ25DO0FBQ0EseURBQXlELFFBQVE7QUFDakU7QUFDQTtBQUNBLHlCQUF5QixPQUFPO0FBQ2hDO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBLHlCQUF5QixPQUFPO0FBQ2hDO0FBQ0Esc0RBQXNELFFBQVE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MDkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEZpbGVPcGVuZXJcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gd2lsbCBvcGVuIGEgZmlsZSBvbiB5b3VyIGRldmljZSBmaWxlIHN5c3RlbSB3aXRoIGl0cyBkZWZhdWx0IGFwcGxpY2F0aW9uLlxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge0ZpbGVPcGVuZXJ9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqXG4gKiBgYGBcbiAqL1xudmFyIEZpbGVPcGVuZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEZpbGVPcGVuZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW4gYW4gZmlsZVxuICAgICAqIEBwYXJhbSBmaWxlUGF0aCB7c3RyaW5nfSBGaWxlIFBhdGhcbiAgICAgKiBAcGFyYW0gZmlsZU1JTUVUeXBlIHtzdHJpbmd9IEZpbGUgTUlNRSBUeXBlXG4gICAgICovXG4gICAgRmlsZU9wZW5lci5vcGVuID0gZnVuY3Rpb24gKGZpbGVQYXRoLCBmaWxlTUlNRVR5cGUpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFVuaW5zdGFsbHMgYSBwYWNrYWdlXG4gICAgICogQHBhcmFtIHBhY2thZ2VJZCB7c3RyaW5nfSAgUGFja2FnZSBJRFxuICAgICAqL1xuICAgIEZpbGVPcGVuZXIudW5pbnN0YWxsID0gZnVuY3Rpb24gKHBhY2thZ2VJZCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gYXBwIGlzIGFscmVhZHkgaW5zdGFsbGVkXG4gICAgICogQHBhcmFtIHBhY2thZ2VJZCB7c3RyaW5nfSBQYWNrYWdlIElEXG4gICAgICovXG4gICAgRmlsZU9wZW5lci5hcHBJc0luc3RhbGxlZCA9IGZ1bmN0aW9uIChwYWNrYWdlSWQpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrU3R5bGU6ICdvYmplY3QnLFxuICAgICAgICAgICAgc3VjY2Vzc05hbWU6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIGVycm9yTmFtZTogJ2Vycm9yJ1xuICAgICAgICB9KVxuICAgIF0sIEZpbGVPcGVuZXIsIFwib3BlblwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBlcnJvck5hbWU6ICdlcnJvcidcbiAgICAgICAgfSlcbiAgICBdLCBGaWxlT3BlbmVyLCBcInVuaW5zdGFsbFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja1N0eWxlOiAnb2JqZWN0JyxcbiAgICAgICAgICAgIHN1Y2Nlc3NOYW1lOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBlcnJvck5hbWU6ICdlcnJvcidcbiAgICAgICAgfSlcbiAgICBdLCBGaWxlT3BlbmVyLCBcImFwcElzSW5zdGFsbGVkXCIsIG51bGwpO1xuICAgIEZpbGVPcGVuZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdGaWxlT3BlbmVyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWZpbGUtb3BlbmVyMicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuZmlsZU9wZW5lcjInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wd2xpbi9jb3Jkb3ZhLXBsdWdpbi1maWxlLW9wZW5lcjInXG4gICAgICAgIH0pXG4gICAgXSwgRmlsZU9wZW5lcik7XG4gICAgcmV0dXJuIEZpbGVPcGVuZXI7XG59KCkpO1xuZXhwb3J0cy5GaWxlT3BlbmVyID0gRmlsZU9wZW5lcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZpbGUtb3BlbmVyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9maWxlLW9wZW5lci5qc1xuLy8gbW9kdWxlIGlkID0gNDA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 410 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name FilePath\n * @description\n *\n * This plugin allows you to resolve the native filesystem path for Android content URIs and is based on code in the aFileChooser library.\n *\n * @usage\n * ```\n * import {FilePath} from 'ionic-native';\n *\n * FilePath.resolveNativePath(path)\n *   .then(filePath => console.log(filePath);\n *   .catch(err => console.log(err);\n *\n * ```\n */\nvar FilePath = (function () {\n    function FilePath() {\n    }\n    /**\n     * Resolve native path for given content URL/path.\n     * @param {String} path  Content URL/path.\n     */\n    FilePath.resolveNativePath = function (path) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], FilePath, \"resolveNativePath\", null);\n    FilePath = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'FilePath',\n            plugin: 'cordova-plugin-filepath',\n            pluginRef: 'window.FilePath',\n            repo: 'https://github.com/hiddentao/cordova-plugin-filepath',\n            platforms: ['Android']\n        })\n    ], FilePath);\n    return FilePath;\n}());\nexports.FilePath = FilePath;\n//# sourceMappingURL=filepath.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ZpbGVwYXRoLmpzP2EzMTciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGtEQUFrRCxRQUFRO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MTAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEZpbGVQYXRoXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIHJlc29sdmUgdGhlIG5hdGl2ZSBmaWxlc3lzdGVtIHBhdGggZm9yIEFuZHJvaWQgY29udGVudCBVUklzIGFuZCBpcyBiYXNlZCBvbiBjb2RlIGluIHRoZSBhRmlsZUNob29zZXIgbGlicmFyeS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtGaWxlUGF0aH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBGaWxlUGF0aC5yZXNvbHZlTmF0aXZlUGF0aChwYXRoKVxuICogICAudGhlbihmaWxlUGF0aCA9PiBjb25zb2xlLmxvZyhmaWxlUGF0aCk7XG4gKiAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIEZpbGVQYXRoID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGaWxlUGF0aCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVzb2x2ZSBuYXRpdmUgcGF0aCBmb3IgZ2l2ZW4gY29udGVudCBVUkwvcGF0aC5cbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aCAgQ29udGVudCBVUkwvcGF0aC5cbiAgICAgKi9cbiAgICBGaWxlUGF0aC5yZXNvbHZlTmF0aXZlUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRmlsZVBhdGgsIFwicmVzb2x2ZU5hdGl2ZVBhdGhcIiwgbnVsbCk7XG4gICAgRmlsZVBhdGggPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdGaWxlUGF0aCcsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1maWxlcGF0aCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICd3aW5kb3cuRmlsZVBhdGgnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9oaWRkZW50YW8vY29yZG92YS1wbHVnaW4tZmlsZXBhdGgnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIEZpbGVQYXRoKTtcbiAgICByZXR1cm4gRmlsZVBhdGg7XG59KCkpO1xuZXhwb3J0cy5GaWxlUGF0aCA9IEZpbGVQYXRoO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZmlsZXBhdGguanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ZpbGVwYXRoLmpzXG4vLyBtb2R1bGUgaWQgPSA0MTBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 411 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Transfer\n *\n * @description\n * This plugin allows you to upload and download files.\n *\n * @usage\n * ```typescript\n * import { Transfer } from 'ionic-native';\n *\n *\n * // Create instance:\n * const fileTransfer = new Transfer();\n *\n * // Upload a file:\n * fileTransfer.upload(..).then(..).catch(..);\n *\n * // Download a file:\n * fileTransfer.download(..).then(..).catch(..);\n *\n * // Abort active transfer:\n * fileTransfer.abort();\n *\n * E.g\n *\n * upload(){\n *   const fileTransfer = new Transfer();\n *   var options: any;\n *\n *   options = {\n *      fileKey: 'file',\n *      fileName: 'name.jpg',\n *      headers: {}\n *      .....\n *   }\n *   fileTransfer.upload(\"<file path>\", \"<api endpoint>\", options)\n *    .then((data) => {\n *      // success\n *    }, (err) => {\n *      // error\n *    })\n * }\n *\n * // Cordova\n * declare var cordova: any;\n *\n * download() {\n *   const fileTransfer = new Transfer();\n *   let url = 'http://www.example.com/file.pdf';\n *   fileTransfer.download(url, cordova.file.dataDirectory + 'file.pdf').then((entry) => {\n *     console.log('download complete: ' + entry.toURL());\n *   }, (error) => {\n *     // handle error\n *   });\n * }\n *\n * ```\n *\n * Note: You will not see your documents using a file explorer on your device. Use adb:\n *\n * ```\n * adb shell\n * run-as com.your.app\n * cd files\n * ls\n * ```\n */\nvar Transfer = (function () {\n    function Transfer() {\n        this._objectInstance = new FileTransfer();\n    }\n    /**\n     * Sends a file to a server.\n     *\n     * @param {string} fileUrl  Filesystem URL representing the file on the device or a data URI. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {string} url  URL of the server to receive the file, as encoded by encodeURI().\n     * @param {FileUploadOptions} options  Optional parameters.\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful since Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @return Returns a Promise that resolves to a FileUploadResult and rejects with FileTransferError.\n     */\n    Transfer.prototype.upload = function (fileUrl, url, options, trustAllHosts) {\n        return;\n    };\n    /**\n     * Downloads a file from server.\n     *\n     * @param {string} source  URL of the server to download the file, as encoded by encodeURI().\n     * @param {stirng} target  Filesystem url representing the file on the device. For backwards compatibility, this can also be the full path of the file on the device.\n     * @param {boolean} trustAllHosts  Optional parameter, defaults to false. If set to true, it accepts all security certificates. This is useful because Android rejects self-signed security certificates. Not recommended for production use. Supported on Android and iOS.\n     * @param {object} Optional parameters, currently only supports headers (such as Authorization (Basic Authentication), etc).\n     * @return Returns a Promise that resolves to a FileEntry object.\n     */\n    Transfer.prototype.download = function (source, target, trustAllHosts, options) {\n        return;\n    };\n    /**\n     * Registers a listener that gets called whenever a new chunk of data is transferred.\n     * @param {function} Listener that takes a progress event.\n     */\n    Transfer.prototype.onProgress = function (listener) {\n        this._objectInstance.onprogress = listener;\n    };\n    /**\n     * Aborts an in-progress transfer. The onerror callback is passed a FileTransferError\n     * object which has an error code of FileTransferError.ABORT_ERR.\n     */\n    Transfer.prototype.abort = function () { };\n    /**\n     * Error code rejected from upload with FileTransferError\n     * Defined in FileTransferError.\n     *      FILE_NOT_FOUND_ERR: 1   Return when file was not found\n     *      INVALID_URL_ERR: 2,     Return when url was invalid\n     *      CONNECTION_ERR: 3,      Return on connection error\n     *      ABORT_ERR: 4,           Return on aborting\n     *      NOT_MODIFIED_ERR: 5     Return on \"304 Not Modified\" HTTP response\n     * @enum {number}\n     */\n    Transfer.FileTransferErrorCode = {\n        FILE_NOT_FOUND_ERR: 1,\n        INVALID_URL_ERR: 2,\n        CONNECTION_ERR: 3,\n        ABORT_ERR: 4,\n        NOT_MODIFIED_ERR: 5\n    };\n    __decorate([\n        plugin_1.CordovaInstance({\n            successIndex: 2,\n            errorIndex: 3\n        })\n    ], Transfer.prototype, \"upload\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            successIndex: 2,\n            errorIndex: 3\n        })\n    ], Transfer.prototype, \"download\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], Transfer.prototype, \"abort\", null);\n    Transfer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'FileTransfer',\n            plugin: 'cordova-plugin-file-transfer',\n            pluginRef: 'FileTransfer',\n            repo: 'https://github.com/apache/cordova-plugin-file-transfer'\n        })\n    ], Transfer);\n    return Transfer;\n}());\nexports.Transfer = Transfer;\n//# sourceMappingURL=filetransfer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 412 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Flashlight\n * @description This plugin allows you to switch the flashlight / torch of the device on and off.\n *\n * Requires Cordova plugin: `cordova-plugin-flashlight`. For more info, please see the [Flashlight plugin docs](https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin).\n *\n * @usage\n * ```typescript\n * import { Flashlight } from 'ionic-native';\n *\n *\n *\n * ```\n */\nvar Flashlight = (function () {\n    function Flashlight() {\n    }\n    /**\n     * Checks if the flashlight is available\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean stating if the flashlight is available.\n     */\n    Flashlight.available = function () { return; };\n    /**\n     * Switches the flashlight on\n     * @returns {Promise<boolean>}\n     */\n    Flashlight.switchOn = function () { return; };\n    /**\n     * Switches the flashlight off\n     * @returns {Promise<boolean>}\n     */\n    Flashlight.switchOff = function () { return; };\n    /**\n     * Toggles the flashlight\n     * @returns {Promise<any>}\n     */\n    Flashlight.toggle = function () { return; };\n    /**\n     * Checks if the flashlight is turned on.\n     * @returns {boolean}\n     */\n    Flashlight.isSwitchedOn = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Flashlight, \"available\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Flashlight, \"switchOn\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Flashlight, \"switchOff\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Flashlight, \"toggle\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Flashlight, \"isSwitchedOn\", null);\n    Flashlight = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Flashlight',\n            plugin: 'cordova-plugin-flashlight',\n            pluginRef: 'window.plugins.flashlight',\n            repo: 'https://github.com/EddyVerbruggen/Flashlight-PhoneGap-Plugin.git'\n        })\n    ], Flashlight);\n    return Flashlight;\n}());\nexports.Flashlight = Flashlight;\n//# sourceMappingURL=flashlight.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ZsYXNobGlnaHQuanM/NGEyYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGFBQWE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSx3Q0FBd0MsUUFBUTtBQUNoRDtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDEyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBGbGFzaGxpZ2h0XG4gKiBAZGVzY3JpcHRpb24gVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzd2l0Y2ggdGhlIGZsYXNobGlnaHQgLyB0b3JjaCBvZiB0aGUgZGV2aWNlIG9uIGFuZCBvZmYuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1mbGFzaGxpZ2h0YC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0ZsYXNobGlnaHQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9GbGFzaGxpZ2h0LVBob25lR2FwLVBsdWdpbikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBGbGFzaGxpZ2h0IH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICpcbiAqIGBgYFxuICovXG52YXIgRmxhc2hsaWdodCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRmxhc2hsaWdodCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBmbGFzaGxpZ2h0IGlzIGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBib29sZWFuIHN0YXRpbmcgaWYgdGhlIGZsYXNobGlnaHQgaXMgYXZhaWxhYmxlLlxuICAgICAqL1xuICAgIEZsYXNobGlnaHQuYXZhaWxhYmxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIGZsYXNobGlnaHQgb25cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn1cbiAgICAgKi9cbiAgICBGbGFzaGxpZ2h0LnN3aXRjaE9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU3dpdGNoZXMgdGhlIGZsYXNobGlnaHQgb2ZmXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59XG4gICAgICovXG4gICAgRmxhc2hsaWdodC5zd2l0Y2hPZmYgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHRoZSBmbGFzaGxpZ2h0XG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBGbGFzaGxpZ2h0LnRvZ2dsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiB0aGUgZmxhc2hsaWdodCBpcyB0dXJuZWQgb24uXG4gICAgICogQHJldHVybnMge2Jvb2xlYW59XG4gICAgICovXG4gICAgRmxhc2hsaWdodC5pc1N3aXRjaGVkT24gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgRmxhc2hsaWdodCwgXCJhdmFpbGFibGVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEZsYXNobGlnaHQsIFwic3dpdGNoT25cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEZsYXNobGlnaHQsIFwic3dpdGNoT2ZmXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBGbGFzaGxpZ2h0LCBcInRvZ2dsZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzeW5jOiB0cnVlXG4gICAgICAgIH0pXG4gICAgXSwgRmxhc2hsaWdodCwgXCJpc1N3aXRjaGVkT25cIiwgbnVsbCk7XG4gICAgRmxhc2hsaWdodCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0ZsYXNobGlnaHQnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tZmxhc2hsaWdodCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICd3aW5kb3cucGx1Z2lucy5mbGFzaGxpZ2h0JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vRmxhc2hsaWdodC1QaG9uZUdhcC1QbHVnaW4uZ2l0J1xuICAgICAgICB9KVxuICAgIF0sIEZsYXNobGlnaHQpO1xuICAgIHJldHVybiBGbGFzaGxpZ2h0O1xufSgpKTtcbmV4cG9ydHMuRmxhc2hsaWdodCA9IEZsYXNobGlnaHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbGFzaGxpZ2h0LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9mbGFzaGxpZ2h0LmpzXG4vLyBtb2R1bGUgaWQgPSA0MTJcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 413 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\nvar Geofence = (function () {\n    function Geofence() {\n    }\n    /**\n     * Initializes the plugin. User will be prompted to allow the app to use location and notifications.\n     *\n     * @return {Promise<any>}\n     */\n    Geofence.initialize = function () { return; };\n    ;\n    /**\n     * Adds a new geofence or array of geofences. For geofence object, see above.\n     *\n     * @return {Promise<any>}\n     */\n    Geofence.addOrUpdate = function (geofences) { return; };\n    ;\n    /**\n     * Removes a geofence or array of geofences. `geofenceID` corresponds to one or more IDs specified when the\n     * geofence was created.\n     *\n     * @return {Promise<any>}\n     */\n    Geofence.remove = function (geofenceId) { return; };\n    ;\n    /**\n     * Removes all geofences.\n     *\n     * @return {Promise<any>}\n     */\n    Geofence.removeAll = function () { return; };\n    ;\n    /**\n     * Returns an array of geofences currently being monitored.\n     *\n     * @return {Promise<Array<string>>}\n     */\n    Geofence.getWatched = function () { return; };\n    ;\n    /**\n     * Called when a geofence is crossed in the direction specified by `TransitType`.\n     *\n     * @return {Promise<any>}\n     */\n    Geofence.onTransitionReceived = function () {\n        return new Observable_1.Observable(function (observer) {\n            window && window.geofence && (window.geofence.onTransitionReceived = observer.next.bind(observer));\n            return function () { return window.geofence.onTransitionReceived = function () { }; };\n        });\n    };\n    /**\n     * Called when the user clicks a geofence notification. iOS and Android only.\n     *\n     * @return {Promise<Object>}\n     */\n    Geofence.onNotificationClicked = function () {\n        return new Observable_1.Observable(function (observer) {\n            window && window.geofence && (window.geofence.onNotificationClicked = observer.next.bind(observer));\n            return function () { return window.geofence.onNotificationClicked = function () { }; };\n        });\n    };\n    Geofence.TransitionType = {\n        ENTER: 1,\n        EXIT: 2,\n        BOTH: 3\n    };\n    __decorate([\n        plugin_1.Cordova()\n    ], Geofence, \"initialize\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Geofence, \"addOrUpdate\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Geofence, \"remove\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Geofence, \"removeAll\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Geofence, \"getWatched\", null);\n    Geofence = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Geofence',\n            plugin: 'cordova-plugin-geofence',\n            pluginRef: 'geofence',\n            repo: 'https://github.com/cowbell/cordova-plugin-geofence/',\n            platforms: ['Android', 'iOS', 'Windows Phone 8', 'Windows Phone']\n        })\n    ], Geofence);\n    return Geofence;\n}());\nexports.Geofence = Geofence;\n//# sourceMappingURL=geofence.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2dlb2ZlbmNlLmpzP2VmMTYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQSx1Q0FBdUMsUUFBUTtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw0REFBNEQsR0FBRztBQUMvRixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsNkRBQTZELEdBQUc7QUFDaEcsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MTMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgncnhqcy9PYnNlcnZhYmxlJyk7XG52YXIgR2VvZmVuY2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEdlb2ZlbmNlKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgcGx1Z2luLiBVc2VyIHdpbGwgYmUgcHJvbXB0ZWQgdG8gYWxsb3cgdGhlIGFwcCB0byB1c2UgbG9jYXRpb24gYW5kIG5vdGlmaWNhdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgR2VvZmVuY2UuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIDtcbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbmV3IGdlb2ZlbmNlIG9yIGFycmF5IG9mIGdlb2ZlbmNlcy4gRm9yIGdlb2ZlbmNlIG9iamVjdCwgc2VlIGFib3ZlLlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgICAqL1xuICAgIEdlb2ZlbmNlLmFkZE9yVXBkYXRlID0gZnVuY3Rpb24gKGdlb2ZlbmNlcykgeyByZXR1cm47IH07XG4gICAgO1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBnZW9mZW5jZSBvciBhcnJheSBvZiBnZW9mZW5jZXMuIGBnZW9mZW5jZUlEYCBjb3JyZXNwb25kcyB0byBvbmUgb3IgbW9yZSBJRHMgc3BlY2lmaWVkIHdoZW4gdGhlXG4gICAgICogZ2VvZmVuY2Ugd2FzIGNyZWF0ZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgR2VvZmVuY2UucmVtb3ZlID0gZnVuY3Rpb24gKGdlb2ZlbmNlSWQpIHsgcmV0dXJuOyB9O1xuICAgIDtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBnZW9mZW5jZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgR2VvZmVuY2UucmVtb3ZlQWxsID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYW4gYXJyYXkgb2YgZ2VvZmVuY2VzIGN1cnJlbnRseSBiZWluZyBtb25pdG9yZWQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPEFycmF5PHN0cmluZz4+fVxuICAgICAqL1xuICAgIEdlb2ZlbmNlLmdldFdhdGNoZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICA7XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gYSBnZW9mZW5jZSBpcyBjcm9zc2VkIGluIHRoZSBkaXJlY3Rpb24gc3BlY2lmaWVkIGJ5IGBUcmFuc2l0VHlwZWAuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgR2VvZmVuY2Uub25UcmFuc2l0aW9uUmVjZWl2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICB3aW5kb3cgJiYgd2luZG93Lmdlb2ZlbmNlICYmICh3aW5kb3cuZ2VvZmVuY2Uub25UcmFuc2l0aW9uUmVjZWl2ZWQgPSBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiB3aW5kb3cuZ2VvZmVuY2Uub25UcmFuc2l0aW9uUmVjZWl2ZWQgPSBmdW5jdGlvbiAoKSB7IH07IH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdoZW4gdGhlIHVzZXIgY2xpY2tzIGEgZ2VvZmVuY2Ugbm90aWZpY2F0aW9uLiBpT1MgYW5kIEFuZHJvaWQgb25seS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8T2JqZWN0Pn1cbiAgICAgKi9cbiAgICBHZW9mZW5jZS5vbk5vdGlmaWNhdGlvbkNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICB3aW5kb3cgJiYgd2luZG93Lmdlb2ZlbmNlICYmICh3aW5kb3cuZ2VvZmVuY2Uub25Ob3RpZmljYXRpb25DbGlja2VkID0gb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gd2luZG93Lmdlb2ZlbmNlLm9uTm90aWZpY2F0aW9uQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHsgfTsgfTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBHZW9mZW5jZS5UcmFuc2l0aW9uVHlwZSA9IHtcbiAgICAgICAgRU5URVI6IDEsXG4gICAgICAgIEVYSVQ6IDIsXG4gICAgICAgIEJPVEg6IDNcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHZW9mZW5jZSwgXCJpbml0aWFsaXplXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHZW9mZW5jZSwgXCJhZGRPclVwZGF0ZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgR2VvZmVuY2UsIFwicmVtb3ZlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHZW9mZW5jZSwgXCJyZW1vdmVBbGxcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEdlb2ZlbmNlLCBcImdldFdhdGNoZWRcIiwgbnVsbCk7XG4gICAgR2VvZmVuY2UgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdHZW9mZW5jZScsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1nZW9mZW5jZScsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdnZW9mZW5jZScsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Nvd2JlbGwvY29yZG92YS1wbHVnaW4tZ2VvZmVuY2UvJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnLCAnV2luZG93cyBQaG9uZSddXG4gICAgICAgIH0pXG4gICAgXSwgR2VvZmVuY2UpO1xuICAgIHJldHVybiBHZW9mZW5jZTtcbn0oKSk7XG5leHBvcnRzLkdlb2ZlbmNlID0gR2VvZmVuY2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZW9mZW5jZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvZ2VvZmVuY2UuanNcbi8vIG1vZHVsZSBpZCA9IDQxM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 414 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @name Geolocation\n * @description\n * This plugin provides information about the device's location, such as latitude and longitude. Common sources of location information include Global Positioning System (GPS) and location inferred from network signals such as IP address, RFID, WiFi and Bluetooth MAC addresses, and GSM/CDMA cell IDs.\n *\n *  This API is based on the W3C Geolocation API Specification, and only executes on devices that don't already provide an implementation.\n *\n * @usage\n *\n * ```typescript\n * import { Geolocation } from 'ionic-native';\n *\n *\n * Geolocation.getCurrentPosition().then((resp) => {\n *  // resp.coords.latitude\n *  // resp.coords.longitude\n * }).catch((error) => {\n *   console.log('Error getting location', error);\n * });\n *\n * let watch = Geolocation.watchPosition();\n * watch.subscribe((data) => {\n *  // data can be a set of coordinates, or an error (if an error occurred).\n *  // data.coords.latitude\n *  // data.coords.longitude\n * });\n * ```\n * @interfaces\n * Coordinates\n * Geoposition\n * PositionError\n * GeolocationOptions\n */\nvar Geolocation = (function () {\n    function Geolocation() {\n    }\n    /**\n     * Get the device's current position.\n     *\n     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\n     * @return Returns a Promise that resolves with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or rejects with an error.\n     */\n    Geolocation.getCurrentPosition = function (options) { return; };\n    /**\n     * Watch the current device's position.  Clear the watch by unsubscribing from\n     * Observable changes.\n     *\n     * ```typescript\n     * var subscription = Geolocation.watchPosition()\n     *                               .filter((p) => p.code === undefined) //Filter Out Errors\n     *                               .subscribe(position => {\n     *   console.log(position.coords.longitude + ' ' + position.coords.latitude);\n     * });\n     *\n     * // To stop notifications\n     * subscription.unsubscribe();\n     * ```\n     *\n     * @param {GeolocationOptions} options  The [geolocation options](https://developer.mozilla.org/en-US/docs/Web/API/PositionOptions).\n     * @return Returns an Observable that notifies with the [position](https://developer.mozilla.org/en-US/docs/Web/API/Position) of the device, or errors.\n     */\n    Geolocation.watchPosition = function (options) {\n        return new Observable_1.Observable(function (observer) {\n            var watchId = navigator.geolocation.watchPosition(observer.next.bind(observer), observer.next.bind(observer), options);\n            return function () { return navigator.geolocation.clearWatch(watchId); };\n        });\n    };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Geolocation, \"getCurrentPosition\", null);\n    Geolocation = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Geolocation',\n            plugin: 'cordova-plugin-geolocation',\n            pluginRef: 'navigator.geolocation',\n            repo: 'https://github.com/apache/cordova-plugin-geolocation'\n        })\n    ], Geolocation);\n    return Geolocation;\n}());\nexports.Geolocation = Geolocation;\n//# sourceMappingURL=geolocation.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2dlb2xvY2F0aW9uLmpzPzk1ZmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQTtBQUNBLHlEQUF5RCxRQUFRO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrREFBa0Q7QUFDbEYsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG52YXIgT2JzZXJ2YWJsZV8xID0gcmVxdWlyZSgncnhqcy9PYnNlcnZhYmxlJyk7XG4vKipcbiAqIEBuYW1lIEdlb2xvY2F0aW9uXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHByb3ZpZGVzIGluZm9ybWF0aW9uIGFib3V0IHRoZSBkZXZpY2UncyBsb2NhdGlvbiwgc3VjaCBhcyBsYXRpdHVkZSBhbmQgbG9uZ2l0dWRlLiBDb21tb24gc291cmNlcyBvZiBsb2NhdGlvbiBpbmZvcm1hdGlvbiBpbmNsdWRlIEdsb2JhbCBQb3NpdGlvbmluZyBTeXN0ZW0gKEdQUykgYW5kIGxvY2F0aW9uIGluZmVycmVkIGZyb20gbmV0d29yayBzaWduYWxzIHN1Y2ggYXMgSVAgYWRkcmVzcywgUkZJRCwgV2lGaSBhbmQgQmx1ZXRvb3RoIE1BQyBhZGRyZXNzZXMsIGFuZCBHU00vQ0RNQSBjZWxsIElEcy5cbiAqXG4gKiAgVGhpcyBBUEkgaXMgYmFzZWQgb24gdGhlIFczQyBHZW9sb2NhdGlvbiBBUEkgU3BlY2lmaWNhdGlvbiwgYW5kIG9ubHkgZXhlY3V0ZXMgb24gZGV2aWNlcyB0aGF0IGRvbid0IGFscmVhZHkgcHJvdmlkZSBhbiBpbXBsZW1lbnRhdGlvbi5cbiAqXG4gKiBAdXNhZ2VcbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBHZW9sb2NhdGlvbiB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIEdlb2xvY2F0aW9uLmdldEN1cnJlbnRQb3NpdGlvbigpLnRoZW4oKHJlc3ApID0+IHtcbiAqICAvLyByZXNwLmNvb3Jkcy5sYXRpdHVkZVxuICogIC8vIHJlc3AuY29vcmRzLmxvbmdpdHVkZVxuICogfSkuY2F0Y2goKGVycm9yKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCdFcnJvciBnZXR0aW5nIGxvY2F0aW9uJywgZXJyb3IpO1xuICogfSk7XG4gKlxuICogbGV0IHdhdGNoID0gR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpO1xuICogd2F0Y2guc3Vic2NyaWJlKChkYXRhKSA9PiB7XG4gKiAgLy8gZGF0YSBjYW4gYmUgYSBzZXQgb2YgY29vcmRpbmF0ZXMsIG9yIGFuIGVycm9yIChpZiBhbiBlcnJvciBvY2N1cnJlZCkuXG4gKiAgLy8gZGF0YS5jb29yZHMubGF0aXR1ZGVcbiAqICAvLyBkYXRhLmNvb3Jkcy5sb25naXR1ZGVcbiAqIH0pO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogQ29vcmRpbmF0ZXNcbiAqIEdlb3Bvc2l0aW9uXG4gKiBQb3NpdGlvbkVycm9yXG4gKiBHZW9sb2NhdGlvbk9wdGlvbnNcbiAqL1xudmFyIEdlb2xvY2F0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHZW9sb2NhdGlvbigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBkZXZpY2UncyBjdXJyZW50IHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtHZW9sb2NhdGlvbk9wdGlvbnN9IG9wdGlvbnMgIFRoZSBbZ2VvbG9jYXRpb24gb3B0aW9uc10oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uT3B0aW9ucykuXG4gICAgICogQHJldHVybiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIFtwb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvZiB0aGUgZGV2aWNlLCBvciByZWplY3RzIHdpdGggYW4gZXJyb3IuXG4gICAgICovXG4gICAgR2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFdhdGNoIHRoZSBjdXJyZW50IGRldmljZSdzIHBvc2l0aW9uLiAgQ2xlYXIgdGhlIHdhdGNoIGJ5IHVuc3Vic2NyaWJpbmcgZnJvbVxuICAgICAqIE9ic2VydmFibGUgY2hhbmdlcy5cbiAgICAgKlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiB2YXIgc3Vic2NyaXB0aW9uID0gR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbigpXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlcigocCkgPT4gcC5jb2RlID09PSB1bmRlZmluZWQpIC8vRmlsdGVyIE91dCBFcnJvcnNcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3Vic2NyaWJlKHBvc2l0aW9uID0+IHtcbiAgICAgKiAgIGNvbnNvbGUubG9nKHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUgKyAnICcgKyBwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUpO1xuICAgICAqIH0pO1xuICAgICAqXG4gICAgICogLy8gVG8gc3RvcCBub3RpZmljYXRpb25zXG4gICAgICogc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0dlb2xvY2F0aW9uT3B0aW9uc30gb3B0aW9ucyAgVGhlIFtnZW9sb2NhdGlvbiBvcHRpb25zXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvUG9zaXRpb25PcHRpb25zKS5cbiAgICAgKiBAcmV0dXJuIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIHdpdGggdGhlIFtwb3NpdGlvbl0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1Bvc2l0aW9uKSBvZiB0aGUgZGV2aWNlLCBvciBlcnJvcnMuXG4gICAgICovXG4gICAgR2VvbG9jYXRpb24ud2F0Y2hQb3NpdGlvbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZV8xLk9ic2VydmFibGUoZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICB2YXIgd2F0Y2hJZCA9IG5hdmlnYXRvci5nZW9sb2NhdGlvbi53YXRjaFBvc2l0aW9uKG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksIG9ic2VydmVyLm5leHQuYmluZChvYnNlcnZlciksIG9wdGlvbnMpO1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5jbGVhcldhdGNoKHdhdGNoSWQpOyB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJ1xuICAgICAgICB9KVxuICAgIF0sIEdlb2xvY2F0aW9uLCBcImdldEN1cnJlbnRQb3NpdGlvblwiLCBudWxsKTtcbiAgICBHZW9sb2NhdGlvbiA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0dlb2xvY2F0aW9uJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWdlb2xvY2F0aW9uJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ25hdmlnYXRvci5nZW9sb2NhdGlvbicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1nZW9sb2NhdGlvbidcbiAgICAgICAgfSlcbiAgICBdLCBHZW9sb2NhdGlvbik7XG4gICAgcmV0dXJuIEdlb2xvY2F0aW9uO1xufSgpKTtcbmV4cG9ydHMuR2VvbG9jYXRpb24gPSBHZW9sb2NhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlb2xvY2F0aW9uLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9nZW9sb2NhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNDE0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 415 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Globalization\n * @description\n * @usage\n * ```typescript\n * import { Globalization } from 'ionic-native';\n *\n *\n * ```\n */\nvar Globalization = (function () {\n    function Globalization() {\n    }\n    /**\n     * Returns the BCP-47 compliant language identifier tag to the successCallback with a properties object as a parameter. That object should have a value property with a String value.\n     * @return {Promise<{value: string}>}\n     */\n    Globalization.getPreferredLanguage = function () { return; };\n    /**\n     * Returns the BCP 47 compliant locale identifier string to the successCallback with a properties object as a parameter.\n     * @return {Promise<{value: string}>}\n     */\n    Globalization.getLocaleName = function () { return; };\n    /**\n     * Converts date to string\n     * @param {Date} date Date you wish to convert\n     * @param options Options for the converted date. Length, selector.\n     * @return {Promise<{value: string}>} Returns a promise when the date has been converted.\n     */\n    Globalization.dateToString = function (date, options) { return; };\n    /**\n     * Parses a date formatted as a string, according to the client's user preferences and calendar using the time zone of the client, and returns the corresponding date object.\n     * @param {string} dateString Date as a string to be converted\n     * @param options Options for the converted date. Length, selector.\n     * @return {Promise<{value: string}>} Returns a promise when the date has been converted.\n     */\n    Globalization.stringToDate = function (dateString, options) { return; };\n    /**\n     * Returns a pattern string to format and parse dates according to the client's user preferences.\n     * @param options Object with the format length and selector\n     * @return {Promise<{value: string}>} Returns a promise.\n     */\n    Globalization.getDatePattern = function (options) { return; };\n    /**\n     * Returns an array of the names of the months or days of the week, depending on the client's user preferences and calendar.\n     * @param options Object with type (narrow or wide) and item (month or days).\n     * @return {Promise<{value: string}>} Returns a promise.\n     */\n    Globalization.getDateNames = function (options) { return; };\n    /**\n     * Indicates whether daylight savings time is in effect for a given date using the client's time zone and calendar.\n     * @param {data} date Date to process\n     * @returns {Promise<dst>} reutrns a promise with the value\n     */\n    Globalization.isDayLightSavingsTime = function (date) { return; };\n    /**\n     * Returns the first day of the week according to the client's user preferences and calendar.\n     * @returns {Promise<value>} reutrns a promise with the value\n     */\n    Globalization.getFirstDayOfWeek = function () { return; };\n    /**\n     * Returns a number formatted as a string according to the client's user preferences.\n     * @param options\n     */\n    Globalization.numberToString = function (options) { return; };\n    /**\n     *\n     * @param {string} stringToConvert String you want to conver to a number\n     * @param options  The type of number you want to return. Can be decimal, percent, or currency.\n     * @returns {Promise} Returns a promise with the value.\n     */\n    Globalization.stringToNumber = function (stringToConvert, options) { return; };\n    /**\n     * Returns a pattern string to format and parse numbers according to the client's user preferences.\n     * @param options Can be decimal, percent, or currency.\n     * @returns {Promise} returns a promise with the value.\n     */\n    Globalization.getNumberPattern = function (options) { return; };\n    /**\n     * Returns a pattern string to format and parse currency values according to the client's user preferences and ISO 4217 currency code.\n     * @param {string} currencyCode Currency Code.A\n     * @returns {Promise} returns a promise with the value\n     */\n    Globalization.getCurrencyPattern = function (currencyCode) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Globalization, \"getPreferredLanguage\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Globalization, \"getLocaleName\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], Globalization, \"dateToString\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], Globalization, \"stringToDate\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Globalization, \"getDatePattern\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Globalization, \"getDateNames\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Globalization, \"isDayLightSavingsTime\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Globalization, \"getFirstDayOfWeek\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], Globalization, \"numberToString\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], Globalization, \"stringToNumber\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Globalization, \"getNumberPattern\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Globalization, \"getCurrencyPattern\", null);\n    Globalization = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Globalization',\n            plugin: 'cordova-plugin-globalization',\n            pluginRef: 'navigator.globalization',\n            repo: 'https://github.com/apache/cordova-plugin-globalization'\n        })\n    ], Globalization);\n    return Globalization;\n}());\nexports.Globalization = Globalization;\n//# sourceMappingURL=globalization.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 416 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Google Plus\n * @description\n * @usage\n * ```typescript\n * import { GooglePlus } from 'ionic-native';\n *\n *\n * ```\n */\nvar GooglePlus = (function () {\n    function GooglePlus() {\n    }\n    /**\n     * The login function walks the user through the Google Auth process.\n     * @param options\n     */\n    GooglePlus.login = function (options) { return; };\n    /**\n     * You can call trySilentLogin to check if they're already signed in to the app and sign them in silently if they are.\n     * @param options\n     */\n    GooglePlus.trySilentLogin = function (options) { return; };\n    /**\n     * This will clear the OAuth2 token.\n     */\n    GooglePlus.logout = function () { return; };\n    /**\n     * This will clear the OAuth2 token, forget which account was used to login, and disconnect that account from the app. This will require the user to allow the app access again next time they sign in. Be aware that this effect is not always instantaneous. It can take time to completely disconnect.\n     */\n    GooglePlus.disconnect = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], GooglePlus, \"login\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GooglePlus, \"trySilentLogin\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GooglePlus, \"logout\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GooglePlus, \"disconnect\", null);\n    GooglePlus = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'GooglePlus',\n            plugin: 'cordova-plugin-googleplus',\n            pluginRef: 'window.plugins.googleplus',\n            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-googleplus',\n            platforms: ['Web', 'Android', 'iOS'],\n            install: 'ionic plugin add cordova-plugin-googleplus --variable REVERSED_CLIENT_ID=myreversedclientid'\n        })\n    ], GooglePlus);\n    return GooglePlus;\n}());\nexports.GooglePlus = GooglePlus;\n//# sourceMappingURL=google-plus.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2dvb2dsZS1wbHVzLmpzPzNkZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQyxRQUFRO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxRQUFRO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQxNi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgR29vZ2xlIFBsdXNcbiAqIEBkZXNjcmlwdGlvblxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBHb29nbGVQbHVzIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogYGBgXG4gKi9cbnZhciBHb29nbGVQbHVzID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBHb29nbGVQbHVzKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUaGUgbG9naW4gZnVuY3Rpb24gd2Fsa3MgdGhlIHVzZXIgdGhyb3VnaCB0aGUgR29vZ2xlIEF1dGggcHJvY2Vzcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIEdvb2dsZVBsdXMubG9naW4gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogWW91IGNhbiBjYWxsIHRyeVNpbGVudExvZ2luIHRvIGNoZWNrIGlmIHRoZXkncmUgYWxyZWFkeSBzaWduZWQgaW4gdG8gdGhlIGFwcCBhbmQgc2lnbiB0aGVtIGluIHNpbGVudGx5IGlmIHRoZXkgYXJlLlxuICAgICAqIEBwYXJhbSBvcHRpb25zXG4gICAgICovXG4gICAgR29vZ2xlUGx1cy50cnlTaWxlbnRMb2dpbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIHdpbGwgY2xlYXIgdGhlIE9BdXRoMiB0b2tlbi5cbiAgICAgKi9cbiAgICBHb29nbGVQbHVzLmxvZ291dCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFRoaXMgd2lsbCBjbGVhciB0aGUgT0F1dGgyIHRva2VuLCBmb3JnZXQgd2hpY2ggYWNjb3VudCB3YXMgdXNlZCB0byBsb2dpbiwgYW5kIGRpc2Nvbm5lY3QgdGhhdCBhY2NvdW50IGZyb20gdGhlIGFwcC4gVGhpcyB3aWxsIHJlcXVpcmUgdGhlIHVzZXIgdG8gYWxsb3cgdGhlIGFwcCBhY2Nlc3MgYWdhaW4gbmV4dCB0aW1lIHRoZXkgc2lnbiBpbi4gQmUgYXdhcmUgdGhhdCB0aGlzIGVmZmVjdCBpcyBub3QgYWx3YXlzIGluc3RhbnRhbmVvdXMuIEl0IGNhbiB0YWtlIHRpbWUgdG8gY29tcGxldGVseSBkaXNjb25uZWN0LlxuICAgICAqL1xuICAgIEdvb2dsZVBsdXMuZGlzY29ubmVjdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHb29nbGVQbHVzLCBcImxvZ2luXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHb29nbGVQbHVzLCBcInRyeVNpbGVudExvZ2luXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBHb29nbGVQbHVzLCBcImxvZ291dFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgR29vZ2xlUGx1cywgXCJkaXNjb25uZWN0XCIsIG51bGwpO1xuICAgIEdvb2dsZVBsdXMgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdHb29nbGVQbHVzJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWdvb2dsZXBsdXMnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnd2luZG93LnBsdWdpbnMuZ29vZ2xlcGx1cycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLWdvb2dsZXBsdXMnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ1dlYicsICdBbmRyb2lkJywgJ2lPUyddLFxuICAgICAgICAgICAgaW5zdGFsbDogJ2lvbmljIHBsdWdpbiBhZGQgY29yZG92YS1wbHVnaW4tZ29vZ2xlcGx1cyAtLXZhcmlhYmxlIFJFVkVSU0VEX0NMSUVOVF9JRD1teXJldmVyc2VkY2xpZW50aWQnXG4gICAgICAgIH0pXG4gICAgXSwgR29vZ2xlUGx1cyk7XG4gICAgcmV0dXJuIEdvb2dsZVBsdXM7XG59KCkpO1xuZXhwb3J0cy5Hb29nbGVQbHVzID0gR29vZ2xlUGx1cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdvb2dsZS1wbHVzLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9nb29nbGUtcGx1cy5qc1xuLy8gbW9kdWxlIGlkID0gNDE2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 417 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @private\n * You can listen to these events where appropriate\n */\nexports.GoogleMapsEvent = {\n    MAP_CLICK: 'click',\n    MAP_LONG_CLICK: 'long_click',\n    MY_LOCATION_CHANGE: 'my_location_change',\n    MY_LOCATION_BUTTON_CLICK: 'my_location_button_click',\n    INDOOR_BUILDING_FOCUSED: 'indoor_building_focused',\n    INDOOR_LEVEL_ACTIVATED: 'indoor_level_activated',\n    CAMERA_CHANGE: 'camera_change',\n    CAMERA_IDLE: 'camera_idle',\n    MAP_READY: 'map_ready',\n    MAP_LOADED: 'map_loaded',\n    MAP_WILL_MOVE: 'will_move',\n    MAP_CLOSE: 'map_close',\n    MARKER_CLICK: 'click',\n    OVERLAY_CLICK: 'overlay_click',\n    INFO_CLICK: 'info_click',\n    MARKER_DRAG: 'drag',\n    MARKER_DRAG_START: 'drag_start',\n    MARKER_DRAG_END: 'drag_end'\n};\n/**\n * @private\n */\nexports.GoogleMapsAnimation = {\n    BOUNCE: 'BOUNCE',\n    DROP: 'DROP'\n};\n/**\n * @name Google Maps\n * @description This plugin uses the native Google Maps SDK\n * @usage\n * ```\n * import { GoogleMap, GoogleMapsEvent } from 'ionic-native';\n *\n * // create a new map using element ID\n * let map = new GoogleMap('elementID');\n *\n * // or create a new map by passing HTMLElement\n * let element: HTMLElement = document.getElementById('elementID');\n *\n * // In Angular 2 or Ionic 2, if we have this element in html: <div #map></div>\n * // then we can use @ViewChild to find the element and pass it to GoogleMaps\n * @ViewChild('map') mapElement;\n * let map = new GoogleMap(mapElement);\n *\n * // listen to MAP_READY event\n * map.one(GoogleMapsEvent.MAP_READY).then(() => console.log('Map is ready!'));\n *\n *\n * // create LatLng object\n * let ionic: GoogleMapsLatLng = new GoogleMapsLatLng(43.0741904,-89.3809802);\n *\n * // create CameraPosition\n * let position: CameraPosition = {\n *   target: ionic,\n *   zoom: 18,\n *   tilt: 30\n * };\n *\n * // move the map's camera to position\n * map.moveCamera(position);\n *\n * // create new marker\n * let markerOptions: GoogleMapsMarkerOptions = {\n *   position: ionic,\n *   title: 'Ionic'\n * };\n *\n * map.addMarker(markerOptions)\n *   .then((marker: GoogleMapsMarker) => {\n *     marker.showInfoWindow();\n *   });\n * ```\n */\nvar GoogleMap = (function () {\n    function GoogleMap(element, options) {\n        if (!!plugin_1.getPlugin('plugin.google.maps.Map')) {\n            if (typeof element === 'string') {\n                element = document.getElementById(element);\n            }\n            this._objectInstance = plugin.google.maps.Map.getMap(element, options);\n        }\n        else {\n            plugin_1.pluginWarn({\n                pluginName: 'GoogleMap',\n                plugin: 'plugin.google.maps.Map'\n            });\n        }\n    }\n    /**\n     * Checks if a map object has been created and is available.\n     *\n     * @return {Promise<boolean>}\n     */\n    GoogleMap.isAvailable = function () { return; };\n    /**\n     * Listen to a map event.\n     *\n     * @return {Observable<any>}\n     */\n    GoogleMap.prototype.on = function (event) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return new Observable_1.Observable(function (observer) {\n                observer.error({ error: 'plugin_not_installed' });\n            });\n        }\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.on(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.off(event); };\n        });\n    };\n    /**\n     * Listen to a map event only once.\n     *\n     * @return {Promise<any>}\n     */\n    GoogleMap.prototype.one = function (event) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve) { return _this._objectInstance.one(event, resolve); });\n    };\n    GoogleMap.prototype.setDebuggable = function (isDebuggable) { };\n    GoogleMap.prototype.setClickable = function (isClickable) { };\n    /**\n     * Get the position of the camera.\n     *\n     * @return {Promise<CameraPosition>}\n     */\n    GoogleMap.prototype.getCameraPosition = function () { return; };\n    /**\n     * Get the location of the user.\n     *\n     * @return {Promise<MyLocation>}\n     */\n    GoogleMap.prototype.getMyLocation = function (options) { return; };\n    /**\n     * Get the visible region.\n     *\n     * @return {Promise<VisibleRegion>}\n     */\n    GoogleMap.prototype.getVisibleRegion = function () { return; };\n    GoogleMap.prototype.showDialog = function () { };\n    GoogleMap.prototype.closeDialog = function () { };\n    GoogleMap.prototype.getLicenseInfo = function () { return; };\n    GoogleMap.prototype.setCenter = function (latLng) { };\n    GoogleMap.prototype.setZoom = function (zoomLevel) { };\n    GoogleMap.prototype.setMapTypeId = function (typeId) { };\n    GoogleMap.prototype.setTilt = function (tiltLevel) { };\n    GoogleMap.prototype.animateCamera = function (animateCameraOptions) { return; };\n    GoogleMap.prototype.moveCamera = function (cameraPosition) { return; };\n    GoogleMap.prototype.setMyLocationEnabled = function (enabled) { };\n    GoogleMap.prototype.setIndoorEnabled = function (enabled) { };\n    GoogleMap.prototype.setTrafficEnabled = function (enabled) { };\n    GoogleMap.prototype.setCompassEnabled = function (enabled) { };\n    GoogleMap.prototype.setAllGesturesEnabled = function (enabled) { };\n    GoogleMap.prototype.addMarker = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addMarker(options, function (marker) {\n                if (marker) {\n                    resolve(new GoogleMapsMarker(marker));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addCircle = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addCircle(options, function (circle) {\n                if (circle) {\n                    resolve(new GoogleMapsCircle(circle));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addPolygon = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addPolygon(options, function (polygon) {\n                if (polygon) {\n                    resolve(new GoogleMapsPolygon(polygon));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addPolyline = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addPolyline(options, function (polyline) {\n                if (polyline) {\n                    resolve(new GoogleMapsPolyline(polyline));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addTileOverlay = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addTileOverlay(options, function (tileOverlay) {\n                if (tileOverlay) {\n                    resolve(new GoogleMapsTileOverlay(tileOverlay));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addGroundOverlay = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addGroundOverlay(options, function (groundOverlay) {\n                if (groundOverlay) {\n                    resolve(new GoogleMapsGroundOverlay(groundOverlay));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.addKmlOverlay = function (options) {\n        var _this = this;\n        if (!this._objectInstance) {\n            return Promise.reject({ error: 'plugin_not_installed' });\n        }\n        return new Promise(function (resolve, reject) {\n            _this._objectInstance.addKmlOverlay(options, function (kmlOverlay) {\n                if (kmlOverlay) {\n                    resolve(new GoogleMapsKmlOverlay(kmlOverlay));\n                }\n                else {\n                    reject();\n                }\n            });\n        });\n    };\n    GoogleMap.prototype.setDiv = function (domNode) { };\n    GoogleMap.prototype.setVisible = function (visible) { };\n    GoogleMap.prototype.setOptions = function (options) { };\n    GoogleMap.prototype.setBackgroundColor = function (backgroundColor) { };\n    GoogleMap.prototype.setPadding = function (top, right, bottom, left) { };\n    GoogleMap.prototype.clear = function () { };\n    GoogleMap.prototype.refreshLayout = function () { };\n    GoogleMap.prototype.fromLatLngToPoint = function (latLng, point) { return; };\n    GoogleMap.prototype.fromPointToLatLng = function (point, latLng) { return; };\n    GoogleMap.prototype.toDataURL = function () { return; };\n    GoogleMap.prototype.remove = function () { };\n    GoogleMap.prototype.panBy = function () { };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setDebuggable\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setClickable\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"getCameraPosition\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"getMyLocation\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"getVisibleRegion\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"showDialog\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"closeDialog\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"getLicenseInfo\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setCenter\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setZoom\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setMapTypeId\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setTilt\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"animateCamera\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"moveCamera\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setMyLocationEnabled\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setIndoorEnabled\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setTrafficEnabled\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setCompassEnabled\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setAllGesturesEnabled\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setDiv\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setOptions\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setBackgroundColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"setPadding\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"clear\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"refreshLayout\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"fromLatLngToPoint\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"fromPointToLatLng\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMap.prototype, \"toDataURL\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMap.prototype, \"panBy\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleMap, \"isAvailable\", null);\n    GoogleMap = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'GoogleMap',\n            pluginRef: 'plugin.google.maps.Map',\n            plugin: 'cordova-plugin-googlemaps',\n            repo: 'https://github.com/mapsplugin/cordova-plugin-googlemaps',\n            install: 'ionic plugin add cordova-plugin-googlemaps --variable API_KEY_FOR_ANDROID=\"YOUR_ANDROID_API_KEY_IS_HERE\" --variable API_KEY_FOR_IOS=\"YOUR_IOS_API_KEY_IS_HERE\"'\n        })\n    ], GoogleMap);\n    return GoogleMap;\n}());\nexports.GoogleMap = GoogleMap;\n/**\n * @private\n */\nvar GoogleMapsMarker = (function () {\n    function GoogleMapsMarker(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsMarker.prototype.addEventListener = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    GoogleMapsMarker.prototype.isVisible = function () { return; };\n    GoogleMapsMarker.prototype.setVisible = function (visible) { };\n    GoogleMapsMarker.prototype.getHashCode = function () { return; };\n    GoogleMapsMarker.prototype.remove = function () { };\n    GoogleMapsMarker.prototype.setOpacity = function (alpha) { };\n    GoogleMapsMarker.prototype.getOpacity = function () { return; };\n    GoogleMapsMarker.prototype.setZIndex = function () { };\n    GoogleMapsMarker.prototype.setIconAnchor = function (x, y) { };\n    GoogleMapsMarker.prototype.setInfoWindowAnchor = function (x, y) { };\n    GoogleMapsMarker.prototype.setDraggable = function (draggable) { };\n    GoogleMapsMarker.prototype.isDraggable = function () { return; };\n    GoogleMapsMarker.prototype.setFlat = function (flat) { return; };\n    GoogleMapsMarker.prototype.setIcon = function (icon) { return; };\n    GoogleMapsMarker.prototype.setTitle = function (title) { };\n    GoogleMapsMarker.prototype.getTitle = function () { return; };\n    GoogleMapsMarker.prototype.setSnippet = function (snippet) { };\n    GoogleMapsMarker.prototype.getSnippet = function () { return; };\n    GoogleMapsMarker.prototype.setRotation = function (rotation) { };\n    GoogleMapsMarker.prototype.getRotation = function () { return; };\n    GoogleMapsMarker.prototype.showInfoWindow = function () { return; };\n    GoogleMapsMarker.prototype.hideInfoWindow = function () { return; };\n    GoogleMapsMarker.prototype.setPosition = function (latLng) { return; };\n    GoogleMapsMarker.prototype.getPosition = function () { return; };\n    GoogleMapsMarker.prototype.getMap = function () { return; };\n    GoogleMapsMarker.prototype.setAnimation = function (animation) { };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"isVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMapsMarker.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getHashCode\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setIconAnchor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setInfoWindowAnchor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setDraggable\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"isDraggable\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setFlat\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setIcon\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setTitle\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getTitle\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setSnippet\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getSnippet\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setRotation\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getRotation\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"showInfoWindow\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"hideInfoWindow\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setPosition\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], GoogleMapsMarker.prototype, \"getPosition\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"getMap\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsMarker.prototype, \"setAnimation\", null);\n    return GoogleMapsMarker;\n}());\nexports.GoogleMapsMarker = GoogleMapsMarker;\n/**\n * @private\n */\nvar GoogleMapsCircle = (function () {\n    function GoogleMapsCircle(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsCircle.prototype.addEventListener = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    GoogleMapsCircle.prototype.getCenter = function () { return; };\n    GoogleMapsCircle.prototype.getRadius = function () { return; };\n    GoogleMapsCircle.prototype.getStrokeColor = function () { return; };\n    GoogleMapsCircle.prototype.getVisible = function () { return; };\n    GoogleMapsCircle.prototype.getZIndex = function () { return; };\n    GoogleMapsCircle.prototype.remove = function () { };\n    GoogleMapsCircle.prototype.setCenter = function (latLng) { };\n    GoogleMapsCircle.prototype.setFillColor = function (fillColor) { };\n    GoogleMapsCircle.prototype.setStrokeColor = function (strokeColor) { };\n    GoogleMapsCircle.prototype.setStrokeWidth = function (strokeWidth) { };\n    GoogleMapsCircle.prototype.setVisible = function (visible) { };\n    GoogleMapsCircle.prototype.setZIndex = function (zIndex) { };\n    GoogleMapsCircle.prototype.setRadius = function (radius) { };\n    GoogleMapsCircle.prototype.getMap = function () { return; };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getCenter\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getRadius\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getStrokeColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setCenter\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setFillColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setStrokeColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setStrokeWidth\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"setRadius\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsCircle.prototype, \"getMap\", null);\n    return GoogleMapsCircle;\n}());\nexports.GoogleMapsCircle = GoogleMapsCircle;\n/**\n * @private\n */\nvar GoogleMapsPolyline = (function () {\n    function GoogleMapsPolyline(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsPolyline.prototype.addEventListener = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    GoogleMapsPolyline.prototype.getPoints = function () { return; };\n    GoogleMapsPolyline.prototype.getCOlor = function () { return; };\n    GoogleMapsPolyline.prototype.getWidth = function () { return; };\n    GoogleMapsPolyline.prototype.getGeodesic = function () { return; };\n    GoogleMapsPolyline.prototype.getZIndex = function () { return; };\n    GoogleMapsPolyline.prototype.remove = function () { };\n    GoogleMapsPolyline.prototype.setPoints = function (points) { };\n    GoogleMapsPolyline.prototype.setColor = function (color) { };\n    GoogleMapsPolyline.prototype.setWidth = function (width) { };\n    GoogleMapsPolyline.prototype.setVisible = function (visible) { };\n    GoogleMapsPolyline.prototype.setZIndex = function (zIndex) { };\n    GoogleMapsPolyline.prototype.setGeoDesic = function (geoDesic) { };\n    GoogleMapsPolyline.prototype.getMap = function () { return; };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getPoints\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getCOlor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getWidth\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getGeodesic\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setPoints\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setWidth\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"setGeoDesic\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolyline.prototype, \"getMap\", null);\n    return GoogleMapsPolyline;\n}());\nexports.GoogleMapsPolyline = GoogleMapsPolyline;\n/**\n * @private\n */\nvar GoogleMapsPolygon = (function () {\n    function GoogleMapsPolygon(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsPolygon.prototype.addEventListener = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    GoogleMapsPolygon.prototype.getPoints = function () { return; };\n    GoogleMapsPolygon.prototype.getStrokeColor = function () { return; };\n    GoogleMapsPolygon.prototype.getFillColor = function () { return; };\n    GoogleMapsPolygon.prototype.getStrokeWidth = function () { return; };\n    GoogleMapsPolygon.prototype.getGeodesic = function () { return; };\n    GoogleMapsPolygon.prototype.getVisible = function () { return; };\n    GoogleMapsPolygon.prototype.getZIndex = function () { return; };\n    GoogleMapsPolygon.prototype.remove = function () { };\n    GoogleMapsPolygon.prototype.setPoints = function (points) { };\n    GoogleMapsPolygon.prototype.setStrokeColor = function (strokeColor) { };\n    GoogleMapsPolygon.prototype.setFillColor = function (fillColor) { };\n    GoogleMapsPolygon.prototype.setStrokeWidth = function (strokeWidth) { };\n    GoogleMapsPolygon.prototype.setVisible = function (visible) { };\n    GoogleMapsPolygon.prototype.setZIndex = function (zIndex) { };\n    GoogleMapsPolygon.prototype.setGeodesic = function (geodesic) { };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getPoints\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getStrokeColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getFillColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getStrokeWidth\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getGeodesic\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"getZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setPoints\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setStrokeColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setFillColor\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setStrokeWidth\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsPolygon.prototype, \"setGeodesic\", null);\n    return GoogleMapsPolygon;\n}());\nexports.GoogleMapsPolygon = GoogleMapsPolygon;\n/**\n * @private\n */\nvar GoogleMapsTileOverlay = (function () {\n    function GoogleMapsTileOverlay(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsTileOverlay.prototype.getVisible = function () { return; };\n    GoogleMapsTileOverlay.prototype.setVisible = function (visible) { };\n    GoogleMapsTileOverlay.prototype.getFadeIn = function () { return; };\n    GoogleMapsTileOverlay.prototype.setFadeIn = function (fadeIn) { };\n    GoogleMapsTileOverlay.prototype.getZIndex = function () { return; };\n    GoogleMapsTileOverlay.prototype.setZIndex = function (zIndex) { };\n    GoogleMapsTileOverlay.prototype.getOpacity = function () { return; };\n    GoogleMapsTileOverlay.prototype.setOpacity = function (opacity) { };\n    GoogleMapsTileOverlay.prototype.clearTileCache = function () { };\n    GoogleMapsTileOverlay.prototype.remove = function () { };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"getVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"getFadeIn\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"setFadeIn\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"getZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"setZIndex\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"getOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"setOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"clearTileCache\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsTileOverlay.prototype, \"remove\", null);\n    return GoogleMapsTileOverlay;\n}());\nexports.GoogleMapsTileOverlay = GoogleMapsTileOverlay;\n/**\n * @private\n */\nvar GoogleMapsGroundOverlay = (function () {\n    function GoogleMapsGroundOverlay(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsGroundOverlay.prototype.setBearing = function (bearing) { };\n    GoogleMapsGroundOverlay.prototype.getBearing = function () { return; };\n    GoogleMapsGroundOverlay.prototype.setOpacity = function (opacity) { };\n    GoogleMapsGroundOverlay.prototype.getOpacity = function () { return; };\n    GoogleMapsGroundOverlay.prototype.setVisible = function (visible) { };\n    GoogleMapsGroundOverlay.prototype.getVisible = function () { return; };\n    GoogleMapsGroundOverlay.prototype.setImage = function (image) { };\n    ;\n    GoogleMapsGroundOverlay.prototype.remove = function () { };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"setBearing\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"getBearing\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"setOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"getOpacity\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"setVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"getVisible\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"setImage\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsGroundOverlay.prototype, \"remove\", null);\n    return GoogleMapsGroundOverlay;\n}());\nexports.GoogleMapsGroundOverlay = GoogleMapsGroundOverlay;\n/**\n * @private\n */\nvar GoogleMapsKmlOverlay = (function () {\n    function GoogleMapsKmlOverlay(_objectInstance) {\n        this._objectInstance = _objectInstance;\n    }\n    GoogleMapsKmlOverlay.prototype.remove = function () { };\n    GoogleMapsKmlOverlay.prototype.getOverlays = function () { return; };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsKmlOverlay.prototype, \"remove\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsKmlOverlay.prototype, \"getOverlays\", null);\n    return GoogleMapsKmlOverlay;\n}());\nexports.GoogleMapsKmlOverlay = GoogleMapsKmlOverlay;\n/**\n * @private\n */\nvar GoogleMapsLatLngBounds = (function () {\n    function GoogleMapsLatLngBounds(southwestOrArrayOfLatLng, northeast) {\n        var args = !!northeast ? [southwestOrArrayOfLatLng, northeast] : southwestOrArrayOfLatLng;\n        this._objectInstance = new plugin.google.maps.LatLngBounds(args);\n    }\n    Object.defineProperty(GoogleMapsLatLngBounds.prototype, \"northeast\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoogleMapsLatLngBounds.prototype, \"southwest\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(GoogleMapsLatLngBounds.prototype, \"type\", {\n        get: function () { return; },\n        enumerable: true,\n        configurable: true\n    });\n    GoogleMapsLatLngBounds.prototype.toString = function () { return; };\n    GoogleMapsLatLngBounds.prototype.toUrlValue = function (precision) { return; };\n    GoogleMapsLatLngBounds.prototype.extend = function (LatLng) { };\n    GoogleMapsLatLngBounds.prototype.contains = function (LatLng) { return; };\n    GoogleMapsLatLngBounds.prototype.getCenter = function () { return; };\n    __decorate([\n        plugin_1.InstanceProperty\n    ], GoogleMapsLatLngBounds.prototype, \"northeast\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], GoogleMapsLatLngBounds.prototype, \"southwest\", null);\n    __decorate([\n        plugin_1.InstanceProperty\n    ], GoogleMapsLatLngBounds.prototype, \"type\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsLatLngBounds.prototype, \"toString\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsLatLngBounds.prototype, \"toUrlValue\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsLatLngBounds.prototype, \"extend\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsLatLngBounds.prototype, \"contains\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], GoogleMapsLatLngBounds.prototype, \"getCenter\", null);\n    return GoogleMapsLatLngBounds;\n}());\nexports.GoogleMapsLatLngBounds = GoogleMapsLatLngBounds;\n/**\n * @private\n */\nvar GoogleMapsLatLng = (function () {\n    function GoogleMapsLatLng(lat, lng) {\n        this.lat = lat;\n        this.lng = lng;\n    }\n    GoogleMapsLatLng.prototype.equals = function (other) {\n        return this.lat === other.lat && this.lng === other.lng;\n    };\n    GoogleMapsLatLng.prototype.toString = function () {\n        return this.lat + ',' + this.lng;\n    };\n    GoogleMapsLatLng.prototype.toUrlValue = function (precision) {\n        precision = precision || 6;\n        return this.lat.toFixed(precision) + ',' + this.lng.toFixed(precision);\n    };\n    return GoogleMapsLatLng;\n}());\nexports.GoogleMapsLatLng = GoogleMapsLatLng;\n/**\n * @private\n */\nvar Geocoder = (function () {\n    function Geocoder() {\n    }\n    /**\n     * Converts position to address and vice versa\n     * @param {GeocoderRequest} request Request object with either an address or a position\n     * @returns {Promise<GeocoderResult[]>}\n     */\n    Geocoder.geocode = function (request) {\n        return new Promise(function (resolve, reject) {\n            if (!plugin || !plugin.google || !plugin.google.maps || !plugin.google.maps.Geocoder) {\n                plugin_1.pluginWarn({\n                    pluginName: 'GoogleMap',\n                    plugin: 'plugin.google.maps.Map'\n                });\n                reject({ error: 'plugin_not_installed' });\n            }\n            else {\n                plugin.google.maps.Geocoder.geocode(request, resolve);\n            }\n        });\n    };\n    return Geocoder;\n}());\nexports.Geocoder = Geocoder;\n//# sourceMappingURL=googlemap.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 418 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Google Analytics\n * @description\n * This plugin connects to Google's native Universal Analytics SDK\n * Prerequisites:\n * - A Cordova 3.0+ project for iOS and/or Android\n * - A Mobile App property through the Google Analytics Admin Console\n * - (Android) Google Play Services SDK installed via [Android SDK Manager](https://developer.android.com/sdk/installing/adding-packages.html)\n */\nvar GoogleAnalytics = (function () {\n    function GoogleAnalytics() {\n    }\n    /**\n     * In your 'deviceready' handler, set up your Analytics tracker.\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/\n     * @param {string}  id  Your Google Analytics Mobile App property\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.startTrackerWithId = function (id) { return; };\n    /**\n     * Enabling Advertising Features in Google Analytics allows you to take advantage of Remarketing, Demographics & Interests reports, and more\n     * @param allow {boolean}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.setAllowIDFACollection = function (allow) { return; };\n    /**\n     * Set a UserId\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/user-id\n     * @param {string} id User ID\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.setUserId = function (id) { return; };\n    /**\n     * Set a anonymize Ip address\n     * @param anonymize {boolean} Set to true to anonymize the IP Address\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.setAnonymizeIp = function (anonymize) { return; };\n    /**\n     * Sets the app version\n     * @param appVersion {string} App version\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.setAppVersion = function (appVersion) { return; };\n    /**\n     * Set OptOut\n     * @param optout {boolean}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.setOptOut = function (optout) { return; };\n    /**\n     * Enable verbose logging\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.debugMode = function () { return; };\n    /**\n     * Track custom metric\n     * @param key {string}\n     * @param value {any}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.trackMetric = function (key, value) { return; };\n    /**\n     * Track a screen\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/screens\n     *\n     * @param title {string} Screen title\n     * @param campaignUrl {string} Campaign url for measuring referrals\n     * @param newSession {boolean} Set to true to create a new session\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.trackView = function (title, campaignUrl, newSession) { return; };\n    /**\n     * Add a Custom Dimension\n     * https://developers.google.com/analytics/devguides/platform/customdimsmets\n     * @param key {string}\n     * @param value {string}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.addCustomDimension = function (key, value) { return; };\n    /**\n     * Track an event\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/events\n     * @param category {string}\n     * @param action {string}\n     * @param label {string}\n     * @param value {number}\n     * @param newSession {boolean} Set to true to create a new session\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.trackEvent = function (category, action, label, value, newSession) { return; };\n    /**\n     * Track an exception\n     * @param description {string}\n     * @param fatal {boolean}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.trackException = function (description, fatal) { return; };\n    /**\n     * Track User Timing (App Speed)\n     * @param category {string}\n     * @param intervalInMilliseconds {number}\n     * @param variable {string}\n     * @param label {string}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.trackTiming = function (category, intervalInMilliseconds, variable, label) { return; };\n    /**\n     * Add a Transaction (Ecommerce)\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addTrans\n     * @param id {string}\n     * @param affiliation {string}\n     * @param revenue {number}\n     * @param tax {number}\n     * @param shipping {number}\n     * @param currencyCode {string}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.addTransaction = function (id, affiliation, revenue, tax, shipping, currencyCode) { return; };\n    /**\n     * Add a Transaction Item (Ecommerce)\n     * https://developers.google.com/analytics/devguides/collection/analyticsjs/ecommerce#addItem\n     * @param {string}  id\n     * @param {string}  name\n     * @param {string}  sku\n     * @param {string}  category\n     * @param {number}  price\n     * @param {number}  quantity\n     * @param {string}  currencyCode\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.addTransactionItem = function (id, name, sku, category, price, quantity, currencyCode) { return; };\n    /**\n     * Enable/disable automatic reporting of uncaught exceptions\n     * @param shouldEnable {boolean}\n     * @return {Promise<any>}\n     */\n    GoogleAnalytics.enableUncaughtExceptionReporting = function (shouldEnable) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"startTrackerWithId\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"setAllowIDFACollection\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"setUserId\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"setAnonymizeIp\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"setAppVersion\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"setOptOut\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"debugMode\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 2,\n            errorIndex: 3\n        })\n    ], GoogleAnalytics, \"trackMetric\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 3,\n            errorIndex: 4\n        })\n    ], GoogleAnalytics, \"trackView\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"addCustomDimension\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 5,\n            errorIndex: 6\n        })\n    ], GoogleAnalytics, \"trackEvent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"trackException\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"trackTiming\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"addTransaction\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"addTransactionItem\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], GoogleAnalytics, \"enableUncaughtExceptionReporting\", null);\n    GoogleAnalytics = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'GoogleAnalytics',\n            plugin: 'cordova-plugin-google-analytics',\n            pluginRef: 'ga',\n            repo: 'https://github.com/danwilson/google-analytics-plugin',\n            platforms: ['Android', 'iOS']\n        })\n    ], GoogleAnalytics);\n    return GoogleAnalytics;\n}());\nexports.GoogleAnalytics = GoogleAnalytics;\n//# sourceMappingURL=googleanalytics.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 419 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Hotspot\n * @description\n * @usage\n * ```typescript\n * import { Hotspot, Network } from 'ionic-native';\n *\n *\n * Hotspot.scanWifi().then((networks: Array<Network>) => {\n *     console.log(networks);\n * });\n *\n * ```\n */\nvar Hotspot = (function () {\n    function Hotspot() {\n    }\n    Hotspot.isAvailable = function () { return; };\n    Hotspot.toggleWifi = function () { return; };\n    /**\n     * Configures and starts hotspot with SSID and Password\n     *\n     * @param {string}    SSID        - SSID of your new Access Point\n     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password    - password for your new Access Point\n     *\n     * @return {Promise<void>}        - Promise to call once hotspot is started, or reject upon failure\n     */\n    Hotspot.createHotspot = function (ssid, mode, password) { return; };\n    /**\n     * Turns on Access Point\n     *\n     * @return {Promise<boolean>} - true if AP is started\n     */\n    Hotspot.startHotspot = function () { return; };\n    /**\n     * Configures hotspot with SSID and Password\n     *\n     * @param {string}    SSID        - SSID of your new Access Point\n     * @param {string}    mode        - encryption mode (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password    - password for your new Access Point\n     *\n     * @return {Promise<void>}        - Promise to call when hotspot is configured, or reject upon failure\n     */\n    Hotspot.configureHotspot = function (ssid, mode, password) { return; };\n    /**\n     * Turns off Access Point\n     *\n     * @return {Promise<boolean>} - Promise to turn off the hotspot, true on success, false on failure\n     */\n    Hotspot.stopHotspot = function () { return; };\n    /**\n     * Checks if hotspot is enabled\n     *\n     * @return {Promise<void>}    - Promise that hotspot is enabled, rejected if it is not enabled\n     */\n    Hotspot.isHotspotEnabled = function () { return; };\n    Hotspot.getAllHotspotDevices = function () { return; };\n    /**\n     * Connect to a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID to connect\n     * @param {string}    password\n     *      password to use\n     *\n     * @return {Promise<void>}\n     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n     */\n    Hotspot.connectToWifi = function (ssid, password) { return; };\n    /**\n     * Connect to a WiFi network\n     *\n     * @param {string}   ssid\n     *      SSID to connect\n     * @param {string}   password\n     *      Password to use\n     * @param {string}   authentication\n     *      Authentication modes to use (LEAP, SHARED, OPEN)\n     * @param {string[]} encryption\n     *      Encryption modes to use (CCMP, TKIP, WEP104, WEP40)\n     *\n     * @return {Promise<void>}\n     *      Promise that connection to the WiFi network was successfull, rejected if unsuccessful\n     */\n    Hotspot.connectToWifiAuthEncrypt = function (ssid, password, authentication, encryption) { return; };\n    /**\n     * Add a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID of network\n     * @param {string}    mode\n     *      Authentication mode of (Open, WEP, WPA, WPA_PSK)\n     * @param {string}    password\n     *      Password for network\n     *\n     * @return {Promise<void>}\n     *      Promise that adding the WiFi network was successfull, rejected if unsuccessful\n     */\n    Hotspot.addWifiNetwork = function (ssid, mode, password) { return; };\n    /**\n     * Remove a WiFi network\n     *\n     * @param {string}    ssid\n     *      SSID of network\n     *\n     * @return {Promise<void>}\n     *      Promise that removing the WiFi network was successfull, rejected if unsuccessful\n     */\n    Hotspot.removeWifiNetwork = function (ssid) { return; };\n    Hotspot.isConnectedToInternet = function () { return; };\n    Hotspot.isConnectedToInternetViaWifi = function () { return; };\n    Hotspot.isWifiOn = function () { return; };\n    Hotspot.isWifiSupported = function () { return; };\n    Hotspot.isWifiDirectSupported = function () { return; };\n    Hotspot.scanWifi = function () { return; };\n    Hotspot.scanWifiByLevel = function () { return; };\n    Hotspot.startWifiPeriodicallyScan = function (interval, duration) { return; };\n    Hotspot.stopWifiPeriodicallyScan = function () { return; };\n    Hotspot.getNetConfig = function () { return; };\n    Hotspot.getConnectionInfo = function () { return; };\n    Hotspot.pingHost = function (ip) { return; };\n    /**\n     * Gets MAC Address associated with IP Address from ARP File\n     *\n     * @param {string}        ip  - IP Address that you want the MAC Address of\n     *\n     * @return {Promise<string>}  - A Promise for the MAC Address\n     */\n    Hotspot.getMacAddressOfHost = function (ip) { return; };\n    /**\n     * Checks if IP is live using DNS\n     *\n     * @param {string}        ip  - IP Address you want to test\n     *\n     * @return {Promise<boolean>} - A Promise for whether the IP Address is reachable\n     */\n    Hotspot.isDnsLive = function (ip) { return; };\n    /**\n     * Checks if IP is live using socket And PORT\n     *\n     * @param {string}        ip  - IP Address you want to test\n     *\n     * @return {Promise<boolean>} - A Promise for whether the IP Address is reachable\n     */\n    Hotspot.isPortLive = function (ip) { return; };\n    /**\n     * Checks if device is rooted\n     *\n     * @return {Promise<boolean>} - A Promise for whether the device is rooted\n     */\n    Hotspot.isRooted = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"toggleWifi\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"createHotspot\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"startHotspot\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"configureHotspot\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"stopHotspot\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isHotspotEnabled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"getAllHotspotDevices\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"connectToWifi\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"connectToWifiAuthEncrypt\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"addWifiNetwork\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"removeWifiNetwork\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isConnectedToInternet\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isConnectedToInternetViaWifi\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isWifiOn\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isWifiSupported\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isWifiDirectSupported\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"scanWifi\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"scanWifiByLevel\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"startWifiPeriodicallyScan\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"stopWifiPeriodicallyScan\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"getNetConfig\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"getConnectionInfo\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"pingHost\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"getMacAddressOfHost\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isDnsLive\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isPortLive\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Hotspot, \"isRooted\", null);\n    Hotspot = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Hotspot',\n            plugin: 'cordova-plugin-hotspot',\n            pluginRef: 'cordova.plugins.hotspot',\n            repo: 'https://github.com/hypery2k/cordova-hotspot-plugin',\n            platforms: ['Android']\n        })\n    ], Hotspot);\n    return Hotspot;\n}());\nexports.Hotspot = Hotspot;\n//# sourceMappingURL=hotspot.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 420 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name HTTP\n * @description\n * Cordova / Phonegap plugin for communicating with HTTP servers. Supports iOS and Android.\n *\n * Advantages over Javascript requests:\n * - Background threading - all requests are done in a background thread\n * - SSL Pinning\n *\n * @usage\n * ```\n * import { HTTP } from 'ionic-native';\n *\n * HTTP.get('http://ionic.io', {}, {})\n *   .then(data => {\n *\n *     console.log(data.status);\n *     console.log(data.data); // data received by server\n *     console.log(data.headers);\n *\n *   })\n *   .catch(error => {\n *\n *     console.log(error.status);\n *     console.log(error.error); // error message as string\n *     console.log(error.headers);\n *\n *   });\n *\n * ```\n * @interfaces\n * HTTPResponse\n */\nvar HTTP = (function () {\n    function HTTP() {\n    }\n    /**\n     * This returns an object representing a basic HTTP Authorization header of the form.\n     * @param username {string} Username\n     * @param password {string} Password\n     * @return {Object} an object representing a basic HTTP Authorization header of the form {'Authorization': 'Basic base64encodedusernameandpassword'}\n     */\n    HTTP.getBasicAuthHeader = function (username, password) { return; };\n    /**\n     * This sets up all future requests to use Basic HTTP authentication with the given username and password.\n     * @param username {string} Username\n     * @param password {string} Password\n     */\n    HTTP.useBasicAuth = function (username, password) { };\n    /**\n     * Set a header for all future requests. Takes a header and a value.\n     * @param header {string} The name of the header\n     * @param value {string} The value of the header\n     */\n    HTTP.setHeader = function (header, value) { };\n    /**\n     * Enable or disable SSL Pinning. This defaults to false.\n     *\n     * To use SSL pinning you must include at least one .cer SSL certificate in your app project. You can pin to your server certificate or to one of the issuing CA certificates. For ios include your certificate in the root level of your bundle (just add the .cer file to your project/target at the root level). For android include your certificate in your project's platforms/android/assets folder. In both cases all .cer files found will be loaded automatically. If you only have a .pem certificate see this stackoverflow answer. You want to convert it to a DER encoded certificate with a .cer extension.\n     *\n     * As an alternative, you can store your .cer files in the www/certificates folder.\n     * @param enable {boolean} Set to true to enable\n     * @return {Promise<any>} returns a promise that will resolve on success, and reject on failure\n     */\n    HTTP.enableSSLPinning = function (enable) { return; };\n    /**\n     * Accept all SSL certificates. Or disabled accepting all certificates. Defaults to false.\n     * @param accept {boolean} Set to true to accept\n     * @return {Promise<any>} returns a promise that will resolve on success, and reject on failure\n     */\n    HTTP.acceptAllCerts = function (accept) { return; };\n    /**\n     * Whether or not to validate the domain name in the certificate. This defaults to true.\n     * @param validate {boolean} Set to true to validate\n     * @return {Promise<any>} returns a promise that will resolve on success, and reject on failure\n     */\n    HTTP.validateDomainName = function (validate) { return; };\n    /**\n     * Make a POST request\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @return {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    HTTP.post = function (url, body, headers) { return; };\n    /**\n     *\n     * @param url {string} The url to send the request to\n     * @param parameters {Object} Parameters to send with the request\n     * @param headers {Object} The headers to set for this request\n     * @return {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    HTTP.get = function (url, parameters, headers) { return; };\n    /**\n     *\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @param filePath {string} The local path of the file to upload\n     * @param name {string} The name of the parameter to pass the file along as\n     * @return {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    HTTP.uploadFile = function (url, body, headers, filePath, name) { return; };\n    /**\n     *\n     * @param url {string} The url to send the request to\n     * @param body {Object} The body of the request\n     * @param headers {Object} The headers to set for this request\n     * @param filePath {string} The path to donwload the file to, including the file name.\n     * @return {Promise<HTTPResponse>} returns a promise that resolve on success, and reject on failure\n     */\n    HTTP.downloadFile = function (url, body, headers, filePath) { return; };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], HTTP, \"getBasicAuthHeader\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], HTTP, \"useBasicAuth\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], HTTP, \"setHeader\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"enableSSLPinning\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"acceptAllCerts\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"validateDomainName\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"post\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"get\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"uploadFile\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], HTTP, \"downloadFile\", null);\n    HTTP = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'HTTP',\n            plugin: 'cordova-plugin-http',\n            pluginRef: 'cordovaHTTP',\n            repo: 'https://github.com/wymsee/cordova-HTTP',\n            platforms: ['Android', 'iOS']\n        })\n    ], HTTP);\n    return HTTP;\n}());\nexports.HTTP = HTTP;\n//# sourceMappingURL=http.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 421 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Httpd\n * @description\n * Embedded httpd for Cordova apps. Light weight HTTP server.\n * @usage\n * ```typescript\n * import {Httpd, HttpdOptions} from 'ionic-native';\n *\n * let options: HttpdOptions = {\n *      www_root: 'httpd_root', // relative path to app's www directory\n *      port: 80,\n *      localhost_only: false\n *  };\n *\n * Httpd.startServer(options).subscribe((data) => {\n *  console.log('Server is live');\n * });\n *\n * ```\n */\nvar Httpd = (function () {\n    function Httpd() {\n    }\n    /**\n     * Starts a web server.\n     * @returns {Observable<string>} Returns an Observable. Subscribe to receive the URL for your web server (if succeeded). Unsubscribe to stop the server.\n     * @param options {HttpdOptions}\n     */\n    Httpd.startServer = function (options) { return; };\n    /**\n     * Gets the URL of the running server\n     * @returns {Promise<string>} Returns a promise that resolves with the URL of the web server.\n     */\n    Httpd.getUrl = function () { return; };\n    /**\n     * Get the local path of the running webserver\n     * @returns {Promise<string>} Returns a promise that resolves with the local path of the web server.\n      */\n    Httpd.getLocalPath = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopServer'\n        })\n    ], Httpd, \"startServer\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Httpd, \"getUrl\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Httpd, \"getLocalPath\", null);\n    Httpd = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Httpd',\n            plugin: 'https://github.com/floatinghotpot/cordova-httpd.git',\n            pluginRef: 'cordova.plugins.CorHttpd',\n            repo: 'https://github.com/floatinghotpot/cordova-httpd',\n            platforms: ['iOS', 'Android']\n        })\n    ], Httpd);\n    return Httpd;\n}());\nexports.Httpd = Httpd;\n//# sourceMappingURL=httpd.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2h0dHBkLmpzPzUyY2MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEMsdUJBQXVCO0FBQ3ZCO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQSxnQ0FBZ0MsUUFBUTtBQUN4QztBQUNBO0FBQ0EsaUJBQWlCLGdCQUFnQjtBQUNqQztBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgSHR0cGRcbiAqIEBkZXNjcmlwdGlvblxuICogRW1iZWRkZWQgaHR0cGQgZm9yIENvcmRvdmEgYXBwcy4gTGlnaHQgd2VpZ2h0IEhUVFAgc2VydmVyLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge0h0dHBkLCBIdHRwZE9wdGlvbnN9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogbGV0IG9wdGlvbnM6IEh0dHBkT3B0aW9ucyA9IHtcbiAqICAgICAgd3d3X3Jvb3Q6ICdodHRwZF9yb290JywgLy8gcmVsYXRpdmUgcGF0aCB0byBhcHAncyB3d3cgZGlyZWN0b3J5XG4gKiAgICAgIHBvcnQ6IDgwLFxuICogICAgICBsb2NhbGhvc3Rfb25seTogZmFsc2VcbiAqICB9O1xuICpcbiAqIEh0dHBkLnN0YXJ0U2VydmVyKG9wdGlvbnMpLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xuICogIGNvbnNvbGUubG9nKCdTZXJ2ZXIgaXMgbGl2ZScpO1xuICogfSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBIdHRwZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSHR0cGQoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyBhIHdlYiBzZXJ2ZXIuXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8c3RyaW5nPn0gUmV0dXJucyBhbiBPYnNlcnZhYmxlLiBTdWJzY3JpYmUgdG8gcmVjZWl2ZSB0aGUgVVJMIGZvciB5b3VyIHdlYiBzZXJ2ZXIgKGlmIHN1Y2NlZWRlZCkuIFVuc3Vic2NyaWJlIHRvIHN0b3AgdGhlIHNlcnZlci5cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7SHR0cGRPcHRpb25zfVxuICAgICAqL1xuICAgIEh0dHBkLnN0YXJ0U2VydmVyID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEdldHMgdGhlIFVSTCBvZiB0aGUgcnVubmluZyBzZXJ2ZXJcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIFVSTCBvZiB0aGUgd2ViIHNlcnZlci5cbiAgICAgKi9cbiAgICBIdHRwZC5nZXRVcmwgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGxvY2FsIHBhdGggb2YgdGhlIHJ1bm5pbmcgd2Vic2VydmVyXG4gICAgICogQHJldHVybnMge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBsb2NhbCBwYXRoIG9mIHRoZSB3ZWIgc2VydmVyLlxuICAgICAgKi9cbiAgICBIdHRwZC5nZXRMb2NhbFBhdGggPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BTZXJ2ZXInXG4gICAgICAgIH0pXG4gICAgXSwgSHR0cGQsIFwic3RhcnRTZXJ2ZXJcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEh0dHBkLCBcImdldFVybFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgSHR0cGQsIFwiZ2V0TG9jYWxQYXRoXCIsIG51bGwpO1xuICAgIEh0dHBkID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnSHR0cGQnLFxuICAgICAgICAgICAgcGx1Z2luOiAnaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5naG90cG90L2NvcmRvdmEtaHR0cGQuZ2l0JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Db3JIdHRwZCcsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2Zsb2F0aW5naG90cG90L2NvcmRvdmEtaHR0cGQnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ11cbiAgICAgICAgfSlcbiAgICBdLCBIdHRwZCk7XG4gICAgcmV0dXJuIEh0dHBkO1xufSgpKTtcbmV4cG9ydHMuSHR0cGQgPSBIdHRwZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWh0dHBkLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9odHRwZC5qc1xuLy8gbW9kdWxlIGlkID0gNDIxXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 422 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @name IBeacon\n * @description\n * This plugin provides functions for working with iBeacons.\n *\n *  The plugin's API closely mimics the one exposed through the [CLLocationManager](https://developer.apple.com/library/ios/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html) introduced in iOS 7.\n *\n * @usage\n *\n * ```typescript\n * import { IBeacon } from 'ionic-native';\n *\n *\n * // Request permission to use location on iOS\n * IBeacon.requestAlwaysAuthorization();\n * // create a new delegate and register it with the native layer\n * let delegate = IBeacon.Delegate();\n *\n * // Subscribe to some of the delegate's event handlers\n * delegate.didRangeBeaconsInRegion()\n *   .subscribe(\n *     data => console.log('didRangeBeaconsInRegion: ', data),\n *     error => console.error();\n *   );\n * delegate.didStartMonitoringForRegion()\n *   .subscribe(\n *     data => console.log('didStartMonitoringForRegion: ', data),\n *     error => console.error();\n *   );\n * delegate.didEnterRegion()\n *   .subscribe(\n *     data => {\n *       console.log('didEnterRegion: ', data);\n *     }\n *   );\n *\n * let beaconRegion = IBeacon.BeaconRegion('deskBeacon','F7826DA6-ASDF-ASDF-8024-BC5B71E0893E');\n *\n * IBeacon.startMonitoringForRegion(beaconRegion)\n *   .then(\n *     () => console.log('Native layer recieved the request to monitoring'),\n *     error => console.error('Native layer failed to begin monitoring: ', error)\n *   );\n * ```\n */\nvar IBeacon = (function () {\n    function IBeacon() {\n    }\n    /**\n     * Instances of this class are delegates between the {@link LocationManager} and\n     * the code that consumes the messages generated on in the native layer.\n     *\n     * @returns {Delegate} An instance of the type {@type Delegate}.\n     */\n    IBeacon.Delegate = function () {\n        var delegate = new cordova.plugins.locationManager.Delegate();\n        delegate.didChangeAuthorizationStatus = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didChangeAuthorizationStatus = cb;\n            });\n        };\n        delegate.didDetermineStateForRegion = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didDetermineStateForRegion = cb;\n            });\n        };\n        delegate.didEnterRegion = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didEnterRegion = cb;\n            });\n        };\n        delegate.didExitRegion = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didExitRegion = cb;\n            });\n        };\n        delegate.didRangeBeaconsInRegion = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didRangeBeaconsInRegion = cb;\n            });\n        };\n        delegate.didStartMonitoringForRegion = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.didStartMonitoringForRegion = cb;\n            });\n        };\n        delegate.monitoringDidFailForRegionWithError = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.monitoringDidFailForRegionWithError = cb;\n            });\n        };\n        delegate.peripheralManagerDidStartAdvertising = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.peripheralManagerDidStartAdvertising = cb;\n            });\n        };\n        delegate.peripheralManagerDidUpdateState = function (pluginResult) {\n            return new Observable_1.Observable(function (observer) {\n                var cb = function (data) { return observer.next(data); };\n                return delegate.peripheralManagerDidUpdateState = cb;\n            });\n        };\n        cordova.plugins.locationManager.setDelegate(delegate);\n        return delegate;\n    };\n    /**\n     * Creates a new BeaconRegion\n     *\n     * @param {String} identifier @see {CLRegion}\n     * @param {String} uuid The proximity ID of the beacon being targeted.\n     * This value must not be blank nor invalid as a UUID.\n     * @param {Number} major The major value that you use to identify one or more beacons.\n     * @param {Number} minor The minor value that you use to identify a specific beacon.\n     * @param {BOOL} notifyEntryStateOnDisplay\n     *\n     * @return Returns the BeaconRegion that was created\n     */\n    IBeacon.BeaconRegion = function (identifer, uuid, major, minor, notifyEntryStateOnDisplay) {\n        return new cordova.plugins.locationManager.BeaconRegion(identifer, uuid, major, minor, notifyEntryStateOnDisplay);\n    };\n    /**\n     * @return Returns the Delegate\n     */\n    IBeacon.getDelegate = function () { return; };\n    /**\n     * @param {Delegate} delegate An instance of a delegate to register with the native layer.\n     *\n     * @return Returns the Delegate\n     */\n    IBeacon.setDelegate = function (delegate) { return; };\n    /**\n     * Signals the native layer that the client side is ready to consume messages.\n     * Readiness here means that it has a {Delegate} set by the consumer javascript\n     * code.\n     *\n     * The {LocationManager.setDelegate()} will implicitly call this method as well,\n     * therefore the only case when you have to call this manually is if you don't\n     * wish to specify a {Delegate} of yours.\n     *\n     * The purpose of this signaling mechanism is to make the events work when the\n     * app is being woken up by the Operating System to give it a chance to handle\n     * region monitoring events for example.\n     *\n     * If you don't set a {Delegate} and don't call this method manually, an error\n     * message get emitted in the native runtime and the DOM as well after a certain\n     * period of time.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the request and started to send events.\n     */\n    IBeacon.onDomDelegateReady = function () { return; };\n    /**\n     * Determines if bluetooth is switched on, according to the native layer.\n     * @returns Returns a promise which is resolved with a {Boolean}\n     * indicating whether bluetooth is active.\n     */\n    IBeacon.isBluetoothEnabled = function () { return; };\n    /**\n     * Enables Bluetooth using the native Layer. (ANDROID ONLY)\n     *\n     * @returns Returns a promise which is resolved when Bluetooth\n     * could be enabled. If not, the promise will be rejected with an error.\n     */\n    IBeacon.enableBluetooth = function () { return; };\n    /**\n     * Disables Bluetooth using the native Layer. (ANDROID ONLY)\n     *\n     * @returns Returns a promise which is resolved when Bluetooth\n     * could be enabled. If not, the promise will be rejected with an error.\n     */\n    IBeacon.disableBluetooth = function () { return; };\n    /**\n     * Start monitoring the specified region.\n     *\n     * If a region of the same type with the same identifier is already being\n     * monitored for this application,\n     * it will be removed from monitoring. For circular regions, the region\n     * monitoring service will prioritize\n     * regions by their size, favoring smaller regions over larger regions.\n     *\n     * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n     *\n     * @param {Region} region An instance of {Region} which will be monitored\n     * by the operating system.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the monitoring request.\n     */\n    IBeacon.startMonitoringForRegion = function (region) { return; };\n    /**\n     * Stop monitoring the specified region.  It is valid to call\n     * stopMonitoringForRegion: for a region that was registered for monitoring\n     * with a different location manager object, during this or previous\n     * launches of your application.\n     *\n     * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n     *\n     * @param {Region} region An instance of {Region} which will be monitored\n     * by the operating system.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the request to stop monitoring.\n     */\n    IBeacon.stopMonitoringForRegion = function (region) { return; };\n    /**\n     * Request state the for specified region. When result is ready\n     * didDetermineStateForRegion is triggered. This can be any region,\n     * also those which is not currently monitored.\n     *\n     * This is done asynchronously and may not be immediately reflected in monitoredRegions.\n     *\n     * @param {Region} region An instance of {Region} which will be monitored\n     * by the operating system.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the request to stop monitoring.\n     */\n    IBeacon.requestStateForRegion = function (region) { return; };\n    /**\n     * Start ranging the specified beacon region.\n     *\n     * If a region of the same type with the same identifier is already being\n     * monitored for this application, it will be removed from monitoring.\n     *\n     * This is done asynchronously and may not be immediately reflected in rangedRegions.\n     *\n     * @param {Region} region An instance of {BeaconRegion} which will be monitored\n     * by the operating system.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the monitoring request.\n     */\n    IBeacon.startRangingBeaconsInRegion = function (region) { return; };\n    /**\n     * Stop ranging the specified region.  It is valid to call\n     * stopMonitoringForRegion: for a region that was registered for ranging\n     * with a different location manager object, during this or previous\n     * launches of your application.\n     *\n     * This is done asynchronously and may not be immediately reflected in rangedRegions.\n     *\n     * @param {Region} region An instance of {BeaconRegion} which will be monitored\n     * by the operating system.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the request to stop monitoring.\n     */\n    IBeacon.stopRangingBeaconsInRegion = function (region) { return; };\n    /**\n     * Queries the native layer to determine the current authorization in effect.\n     *\n     * @returns Returns a promise which is resolved with the\n     * requested authorization status.\n     */\n    IBeacon.getAuthorizationStatus = function () { return; };\n    /**\n     * For iOS 8 and above only. The permission model has changed by Apple in iOS 8, making it necessary for apps to\n     * explicitly request permissions via methods like these:\n     * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestWhenInUseAuthorization\">requestWhenInUseAuthorization</a>\n     * <a href=\"https://developer.apple.com/library/prerelease/iOS/documentation/CoreLocation/Reference/CLLocationManager_Class/index.html#//apple_ref/occ/instm/CLLocationManager/requestAlwaysAuthorization\">requestAlwaysAuthorization</a>\n     *\n     * If you are using this plugin on Android devices only, you will never have to use this, nor {@code requestAlwaysAuthorization}\n     * @returns Returns a promise that is resolved when the request dialog is shown.\n     */\n    IBeacon.requestWhenInUseAuthorization = function () { return; };\n    /**\n     * See the docuemntation of {@code requestWhenInUseAuthorization} for further details.\n     *\n     * @returns Returns a promise which is resolved when the native layer\n     * shows the request dialog.\n     */\n    IBeacon.requestAlwaysAuthorization = function () { return; };\n    /**\n     *\n     * @returns Returns a promise which is resolved with an {Array}\n     * of {Region} instances that are being monitored by the native layer.\n     */\n    IBeacon.getMonitoredRegions = function () { return; };\n    /**\n     *\n     * @returns Returns a promise which is resolved with an {Array}\n     * of {Region} instances that are being ranged by the native layer.\n     */\n    IBeacon.getRangedRegions = function () { return; };\n    /**\n     * Determines if ranging is available or not, according to the native layer.\n     * @returns Returns a promise which is resolved with a {Boolean}\n     * indicating whether ranging is available or not.\n     */\n    IBeacon.isRangingAvailable = function () { return; };\n    /**\n     * Determines if region type is supported or not, according to the native layer.\n     *\n     * @param {Region} region An instance of {Region} which will be checked\n     * by the operating system.\n     *\n     * @returns Returns a promise which is resolved with a {Boolean}\n     * indicating whether the region type is supported or not.\n     */\n    IBeacon.isMonitoringAvailableForClass = function (region) { return; };\n    /**\n     * Start advertising the specified region.\n     *\n     * If a region a different identifier is already being advertised for\n     * this application, it will be replaced with the new identifier.\n     *\n     * This call will accept a valid beacon even when no BlueTooth is available,\n     * and will start when BlueTooth is powered on. See {Delegate.}\n     *\n     * @param {Region} region An instance of {Region} which will be advertised\n     * by the operating system.\n     * @param {Integer} measuredPower: Optional parameter, if left empty, the device will\n     * use it's own default value.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the advertising request.\n     */\n    IBeacon.startAdvertising = function (region, measuredPower) { return; };\n    /**\n     * Stop advertising as a beacon.\n     *\n     * This is done asynchronously and may not be immediately reflected in isAdvertising.\n     *\n     * @return Returns a promise which is resolved as soon as the\n     * native layer acknowledged the dispatch of the request to stop advertising.\n     */\n    IBeacon.stopAdvertising = function (region) { return; };\n    /**\n     * Determines if advertising is available or not, according to the native layer.\n     * @returns Returns a promise which is resolved with a {Boolean}\n     * indicating whether advertising is available or not.\n     */\n    IBeacon.isAdvertisingAvailable = function () { return; };\n    /**\n     * Determines if advertising is currently active, according to the native layer.\n     * @returns Returns a promise which is resolved with a {Boolean}\n     * indicating whether advertising is active.\n     */\n    IBeacon.isAdvertising = function () { return; };\n    /**\n     * Disables debug logging in the native layer. Use this method if you want\n     * to prevent this plugin from writing to the device logs.\n     *\n     * @returns Returns a promise which is resolved as soon as the\n     * native layer has set the logging level accordingly.\n     */\n    IBeacon.disableDebugLogs = function () { return; };\n    /**\n     * Enables the posting of debug notifications in the native layer. Use this method if you want\n     * to allow the plugin the posting local notifications.\n     * This can be very helpful when debugging how to apps behave when launched into the background.\n     *\n     * @returns Returns a promise which is resolved as soon as the\n     * native layer has set the flag to enabled.\n     */\n    IBeacon.enableDebugNotifications = function () { return; };\n    /**\n     * Disables the posting of debug notifications in the native layer. Use this method if you want\n     * to prevent the plugin from posting local notifications.\n     *\n     * @returns Returns a promise which is resolved as soon as the\n     * native layer has set the flag to disabled.\n     */\n    IBeacon.disableDebugNotifications = function () { return; };\n    /**\n     * Enables debug logging in the native layer. Use this method if you want\n     * a debug the inner workings of this plugin.\n     *\n     * @returns Returns a promise which is resolved as soon as the\n     * native layer has set the logging level accordingly.\n     */\n    IBeacon.enableDebugLogs = function () { return; };\n    /**\n     * Appends the provided [message] to the device logs.\n     * Note: If debug logging is turned off, this won't do anything.\n     *\n     * @param {String} message The message to append to the device logs.\n     *\n     * @returns Returns a promise which is resolved with the log\n     * message received by the native layer for appending. The returned message\n     * is expected to be equivalent to the one provided in the original call.\n     */\n    IBeacon.appendToDeviceLog = function (message) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], IBeacon, \"getDelegate\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], IBeacon, \"setDelegate\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"onDomDelegateReady\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"isBluetoothEnabled\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"enableBluetooth\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"disableBluetooth\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"startMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"stopMonitoringForRegion\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"requestStateForRegion\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"startRangingBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"stopRangingBeaconsInRegion\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"getAuthorizationStatus\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"requestWhenInUseAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"requestAlwaysAuthorization\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"getMonitoredRegions\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"getRangedRegions\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"isRangingAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"isMonitoringAvailableForClass\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"startAdvertising\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"stopAdvertising\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"isAdvertisingAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"isAdvertising\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"disableDebugLogs\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"enableDebugNotifications\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"disableDebugNotifications\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"enableDebugLogs\", null);\n    __decorate([\n        plugin_1.Cordova({ otherPromise: true })\n    ], IBeacon, \"appendToDeviceLog\", null);\n    IBeacon = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'IBeacon',\n            plugin: 'cordova-plugin-ibeacon',\n            pluginRef: 'cordova.plugins.locationManager',\n            repo: 'https://github.com/petermetz/cordova-plugin-ibeacon',\n            platforms: ['Android', 'iOS']\n        })\n    ], IBeacon);\n    return IBeacon;\n}());\nexports.IBeacon = IBeacon;\n//# sourceMappingURL=ibeacon.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 423 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Image Picker\n * @description\n * Cordova Plugin For Multiple Image Selection\n *\n * Requires Cordova plugin: `cordova-plugin-image-picker`.\n * For more info, please see the https://github.com/wymsee/cordova-imagePicker\n *\n * @usage\n * ```typescript\n * import { ImagePicker } from 'ionic-native';\n *\n *\n *\n * ImagePicker.getPictures(options).then((results) => {\n *   for (var i = 0; i < results.length; i++) {\n *       console.log('Image URI: ' + results[i]);\n *   }\n * }, (err) => { });\n * ```\n * @interfaces\n * ImagePickerOptions\n */\nvar ImagePicker = (function () {\n    function ImagePicker() {\n    }\n    /**\n     * Pick pictures from the library.\n     * @param {ImagePickerOptions} options\n     * @return Returns a Promise that resolves the image file URI\n     * otherwise rejects with an error.\n     */\n    ImagePicker.getPictures = function (options) { return; };\n    /**\n     * Check if we have permission to read images\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates whether we have permission\n     */\n    ImagePicker.hasReadPermission = function () { return; };\n    /**\n     * Request permission to read images\n     * @returns {Promise<any>}\n     */\n    ImagePicker.requestReadPermission = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], ImagePicker, \"getPictures\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android']\n        })\n    ], ImagePicker, \"hasReadPermission\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android']\n        })\n    ], ImagePicker, \"requestReadPermission\", null);\n    ImagePicker = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ImagePicker',\n            plugin: 'cordova-plugin-image-picker',\n            pluginRef: 'window.imagePicker',\n            repo: 'https://github.com/wymsee/cordova-imagePicker'\n        })\n    ], ImagePicker);\n    return ImagePicker;\n}());\nexports.ImagePicker = ImagePicker;\n//# sourceMappingURL=imagepicker.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ltYWdlcGlja2VyLmpzPzRiNDQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQTtBQUNBLElBQUksWUFBWSxFQUFFO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBLGtEQUFrRCxRQUFRO0FBQzFEO0FBQ0E7QUFDQSxpQkFBaUIsaUJBQWlCO0FBQ2xDO0FBQ0EsaURBQWlELFFBQVE7QUFDekQ7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLHFEQUFxRCxRQUFRO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBJbWFnZSBQaWNrZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBQbHVnaW4gRm9yIE11bHRpcGxlIEltYWdlIFNlbGVjdGlvblxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29yZG92YS1wbHVnaW4taW1hZ2UtcGlja2VyYC5cbiAqIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIGh0dHBzOi8vZ2l0aHViLmNvbS93eW1zZWUvY29yZG92YS1pbWFnZVBpY2tlclxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgSW1hZ2VQaWNrZXIgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKlxuICogSW1hZ2VQaWNrZXIuZ2V0UGljdHVyZXMob3B0aW9ucykudGhlbigocmVzdWx0cykgPT4ge1xuICogICBmb3IgKHZhciBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCdJbWFnZSBVUkk6ICcgKyByZXN1bHRzW2ldKTtcbiAqICAgfVxuICogfSwgKGVycikgPT4geyB9KTtcbiAqIGBgYFxuICogQGludGVyZmFjZXNcbiAqIEltYWdlUGlja2VyT3B0aW9uc1xuICovXG52YXIgSW1hZ2VQaWNrZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIEltYWdlUGlja2VyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBQaWNrIHBpY3R1cmVzIGZyb20gdGhlIGxpYnJhcnkuXG4gICAgICogQHBhcmFtIHtJbWFnZVBpY2tlck9wdGlvbnN9IG9wdGlvbnNcbiAgICAgKiBAcmV0dXJuIFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgdGhlIGltYWdlIGZpbGUgVVJJXG4gICAgICogb3RoZXJ3aXNlIHJlamVjdHMgd2l0aCBhbiBlcnJvci5cbiAgICAgKi9cbiAgICBJbWFnZVBpY2tlci5nZXRQaWN0dXJlcyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiB3ZSBoYXZlIHBlcm1pc3Npb24gdG8gcmVhZCBpbWFnZXNcbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGEgYm9vbGVhbiB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHdlIGhhdmUgcGVybWlzc2lvblxuICAgICAqL1xuICAgIEltYWdlUGlja2VyLmhhc1JlYWRQZXJtaXNzaW9uID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmVxdWVzdCBwZXJtaXNzaW9uIHRvIHJlYWQgaW1hZ2VzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBJbWFnZVBpY2tlci5yZXF1ZXN0UmVhZFBlcm1pc3Npb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBJbWFnZVBpY2tlciwgXCJnZXRQaWN0dXJlc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddXG4gICAgICAgIH0pXG4gICAgXSwgSW1hZ2VQaWNrZXIsIFwiaGFzUmVhZFBlcm1pc3Npb25cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIEltYWdlUGlja2VyLCBcInJlcXVlc3RSZWFkUGVybWlzc2lvblwiLCBudWxsKTtcbiAgICBJbWFnZVBpY2tlciA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0ltYWdlUGlja2VyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWltYWdlLXBpY2tlcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICd3aW5kb3cuaW1hZ2VQaWNrZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS93eW1zZWUvY29yZG92YS1pbWFnZVBpY2tlcidcbiAgICAgICAgfSlcbiAgICBdLCBJbWFnZVBpY2tlcik7XG4gICAgcmV0dXJuIEltYWdlUGlja2VyO1xufSgpKTtcbmV4cG9ydHMuSW1hZ2VQaWNrZXIgPSBJbWFnZVBpY2tlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlcGlja2VyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9pbWFnZXBpY2tlci5qc1xuLy8gbW9kdWxlIGlkID0gNDIzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 424 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name ImageResizer\n * @description\n * Cordova Plugin For Image Resize\n *\n * Requires plugin `info.protonet.imageresizer` - use the Ionic CLI and type in the following command:\n * `ionic plugin add https://github.com/protonet/cordova-plugin-image-resizer.git`\n *\n * For more info, please see the https://github.com/protonet/cordova-plugin-image-resizer\n *\n * @usage\n * ```typescript\n * import { ImageResizer, ImageResizerOptions } from 'ionic-native';\n *\n * let options = {\n *  uri: uri,\n *  folderName: 'Protonet',\n *  quality: 90,\n *  width: 1280,\n *  height: 1280\n * } as ImageResizerOptions;\n *\n * ImageResizer\n * .resize(options)\n * .then(\n *  (filePath: string) => { console.log('FilePath', filePath); },\n *  () => { console.log('Error occured'); }\n * )\n * ```\n */\nvar ImageResizer = (function () {\n    function ImageResizer() {\n    }\n    ImageResizer.resize = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], ImageResizer, \"resize\", null);\n    ImageResizer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ImageResizer',\n            plugin: 'https://github.com/protonet/cordova-plugin-image-resizer.git',\n            pluginRef: 'ImageResizer',\n            repo: 'https://github.com/protonet/cordova-plugin-image-resizer'\n        })\n    ], ImageResizer);\n    return ImageResizer;\n}());\nexports.ImageResizer = ImageResizer;\n//# sourceMappingURL=imageresizer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2ltYWdlcmVzaXplci5qcz84NGU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxvQ0FBb0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsbUNBQW1DLEVBQUU7QUFDaEUsV0FBVyw4QkFBOEI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLFFBQVE7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEltYWdlUmVzaXplclxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIFBsdWdpbiBGb3IgSW1hZ2UgUmVzaXplXG4gKlxuICogUmVxdWlyZXMgcGx1Z2luIGBpbmZvLnByb3RvbmV0LmltYWdlcmVzaXplcmAgLSB1c2UgdGhlIElvbmljIENMSSBhbmQgdHlwZSBpbiB0aGUgZm9sbG93aW5nIGNvbW1hbmQ6XG4gKiBgaW9uaWMgcGx1Z2luIGFkZCBodHRwczovL2dpdGh1Yi5jb20vcHJvdG9uZXQvY29yZG92YS1wbHVnaW4taW1hZ2UtcmVzaXplci5naXRgXG4gKlxuICogRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgaHR0cHM6Ly9naXRodWIuY29tL3Byb3RvbmV0L2NvcmRvdmEtcGx1Z2luLWltYWdlLXJlc2l6ZXJcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IEltYWdlUmVzaXplciwgSW1hZ2VSZXNpemVyT3B0aW9ucyB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogbGV0IG9wdGlvbnMgPSB7XG4gKiAgdXJpOiB1cmksXG4gKiAgZm9sZGVyTmFtZTogJ1Byb3RvbmV0JyxcbiAqICBxdWFsaXR5OiA5MCxcbiAqICB3aWR0aDogMTI4MCxcbiAqICBoZWlnaHQ6IDEyODBcbiAqIH0gYXMgSW1hZ2VSZXNpemVyT3B0aW9ucztcbiAqXG4gKiBJbWFnZVJlc2l6ZXJcbiAqIC5yZXNpemUob3B0aW9ucylcbiAqIC50aGVuKFxuICogIChmaWxlUGF0aDogc3RyaW5nKSA9PiB7IGNvbnNvbGUubG9nKCdGaWxlUGF0aCcsIGZpbGVQYXRoKTsgfSxcbiAqICAoKSA9PiB7IGNvbnNvbGUubG9nKCdFcnJvciBvY2N1cmVkJyk7IH1cbiAqIClcbiAqIGBgYFxuICovXG52YXIgSW1hZ2VSZXNpemVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJbWFnZVJlc2l6ZXIoKSB7XG4gICAgfVxuICAgIEltYWdlUmVzaXplci5yZXNpemUgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIEltYWdlUmVzaXplciwgXCJyZXNpemVcIiwgbnVsbCk7XG4gICAgSW1hZ2VSZXNpemVyID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnSW1hZ2VSZXNpemVyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wcm90b25ldC9jb3Jkb3ZhLXBsdWdpbi1pbWFnZS1yZXNpemVyLmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdJbWFnZVJlc2l6ZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wcm90b25ldC9jb3Jkb3ZhLXBsdWdpbi1pbWFnZS1yZXNpemVyJ1xuICAgICAgICB9KVxuICAgIF0sIEltYWdlUmVzaXplcik7XG4gICAgcmV0dXJuIEltYWdlUmVzaXplcjtcbn0oKSk7XG5leHBvcnRzLkltYWdlUmVzaXplciA9IEltYWdlUmVzaXplcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWltYWdlcmVzaXplci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvaW1hZ2VyZXNpemVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0MjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 425 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @name InAppBrowser\n * @description Launches in app Browser\n * @usage\n * ```typescript\n * import {InAppBrowser} from 'ionic-native';\n *\n *\n * ...\n *\n *\n * let browser = new InAppBrowser('https://ionic.io', '_system');\n * browser.executeScript(...);\n * browser.insertCSS(...);\n * browser.close();\n * ```\n */\nvar InAppBrowser = (function () {\n    /**\n     * Opens a URL in a new InAppBrowser instance, the current browser instance, or the system browser.\n     * @param  url     The URL to load.\n     * @param  target  The target in which to load the URL, an optional parameter that defaults to _self.\n     * @param  options Options for the InAppBrowser. Optional, defaulting to: location=yes.\n     *                 The options string must not contain any blank space, and each feature's\n     *                 name/value pairs must be separated by a comma. Feature names are case insensitive.\n     */\n    function InAppBrowser(url, target, options) {\n        try {\n            this._objectInstance = cordova.InAppBrowser.open(url, target, options);\n        }\n        catch (e) {\n            window.open(url);\n            console.warn('Native: InAppBrowser is not installed or you are running on a browser. Falling back to window.open, all instance methods will NOT work.');\n        }\n    }\n    InAppBrowser.open = function (url, target, options) {\n        console.warn('Native: Your current usage of the InAppBrowser plugin is depreciated as of ionic-native@1.3.8. Please check the Ionic Native docs for the latest usage details.');\n    };\n    /**\n     * Displays an InAppBrowser window that was opened hidden. Calling this has no effect\n     * if the InAppBrowser was already visible.\n     */\n    InAppBrowser.prototype.show = function () { };\n    /**\n     * Closes the InAppBrowser window.\n     */\n    InAppBrowser.prototype.close = function () { };\n    /**\n     * Injects JavaScript code into the InAppBrowser window.\n     * @param script    Details of the script to run, specifying either a file or code key.\n     */\n    InAppBrowser.prototype.executeScript = function (script) { return; };\n    /**\n     * Injects CSS into the InAppBrowser window.\n     * @param css       Details of the script to run, specifying either a file or code key.\n     */\n    InAppBrowser.prototype.insertCss = function (css) { return; };\n    /**\n     * A method that allows you to listen to events happening in the browser.\n     * @param event Event name\n     * @returns {Observable<any>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.\n     */\n    InAppBrowser.prototype.on = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], InAppBrowser.prototype, \"show\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], InAppBrowser.prototype, \"close\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], InAppBrowser.prototype, \"executeScript\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], InAppBrowser.prototype, \"insertCss\", null);\n    InAppBrowser = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'InAppBrowser',\n            plugin: 'cordova-plugin-inappbrowser',\n            pluginRef: 'cordova.InAppBrowser',\n            repo: 'https://github.com/apache/cordova-plugin-inappbrowser'\n        })\n    ], InAppBrowser);\n    return InAppBrowser;\n}());\nexports.InAppBrowser = InAppBrowser;\n//# sourceMappingURL=inappbrowser.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luYXBwYnJvd3Nlci5qcz9mMDUzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxhQUFhO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtDQUErQztBQUMvQztBQUNBO0FBQ0E7QUFDQSxnREFBZ0Q7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4REFBOEQsUUFBUTtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyx1RkFBdUY7QUFDdkgsU0FBUztBQUNUO0FBQ0E7QUFDQSxrQ0FBa0MsYUFBYTtBQUMvQztBQUNBO0FBQ0Esa0NBQWtDLGFBQWE7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbnZhciBPYnNlcnZhYmxlXzEgPSByZXF1aXJlKCdyeGpzL09ic2VydmFibGUnKTtcbi8qKlxuICogQG5hbWUgSW5BcHBCcm93c2VyXG4gKiBAZGVzY3JpcHRpb24gTGF1bmNoZXMgaW4gYXBwIEJyb3dzZXJcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtJbkFwcEJyb3dzZXJ9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIC4uLlxuICpcbiAqXG4gKiBsZXQgYnJvd3NlciA9IG5ldyBJbkFwcEJyb3dzZXIoJ2h0dHBzOi8vaW9uaWMuaW8nLCAnX3N5c3RlbScpO1xuICogYnJvd3Nlci5leGVjdXRlU2NyaXB0KC4uLik7XG4gKiBicm93c2VyLmluc2VydENTUyguLi4pO1xuICogYnJvd3Nlci5jbG9zZSgpO1xuICogYGBgXG4gKi9cbnZhciBJbkFwcEJyb3dzZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIC8qKlxuICAgICAqIE9wZW5zIGEgVVJMIGluIGEgbmV3IEluQXBwQnJvd3NlciBpbnN0YW5jZSwgdGhlIGN1cnJlbnQgYnJvd3NlciBpbnN0YW5jZSwgb3IgdGhlIHN5c3RlbSBicm93c2VyLlxuICAgICAqIEBwYXJhbSAgdXJsICAgICBUaGUgVVJMIHRvIGxvYWQuXG4gICAgICogQHBhcmFtICB0YXJnZXQgIFRoZSB0YXJnZXQgaW4gd2hpY2ggdG8gbG9hZCB0aGUgVVJMLCBhbiBvcHRpb25hbCBwYXJhbWV0ZXIgdGhhdCBkZWZhdWx0cyB0byBfc2VsZi5cbiAgICAgKiBAcGFyYW0gIG9wdGlvbnMgT3B0aW9ucyBmb3IgdGhlIEluQXBwQnJvd3Nlci4gT3B0aW9uYWwsIGRlZmF1bHRpbmcgdG86IGxvY2F0aW9uPXllcy5cbiAgICAgKiAgICAgICAgICAgICAgICAgVGhlIG9wdGlvbnMgc3RyaW5nIG11c3Qgbm90IGNvbnRhaW4gYW55IGJsYW5rIHNwYWNlLCBhbmQgZWFjaCBmZWF0dXJlJ3NcbiAgICAgKiAgICAgICAgICAgICAgICAgbmFtZS92YWx1ZSBwYWlycyBtdXN0IGJlIHNlcGFyYXRlZCBieSBhIGNvbW1hLiBGZWF0dXJlIG5hbWVzIGFyZSBjYXNlIGluc2Vuc2l0aXZlLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIEluQXBwQnJvd3Nlcih1cmwsIHRhcmdldCwgb3B0aW9ucykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5fb2JqZWN0SW5zdGFuY2UgPSBjb3Jkb3ZhLkluQXBwQnJvd3Nlci5vcGVuKHVybCwgdGFyZ2V0LCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgd2luZG93Lm9wZW4odXJsKTtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTmF0aXZlOiBJbkFwcEJyb3dzZXIgaXMgbm90IGluc3RhbGxlZCBvciB5b3UgYXJlIHJ1bm5pbmcgb24gYSBicm93c2VyLiBGYWxsaW5nIGJhY2sgdG8gd2luZG93Lm9wZW4sIGFsbCBpbnN0YW5jZSBtZXRob2RzIHdpbGwgTk9UIHdvcmsuJyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgSW5BcHBCcm93c2VyLm9wZW4gPSBmdW5jdGlvbiAodXJsLCB0YXJnZXQsIG9wdGlvbnMpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdOYXRpdmU6IFlvdXIgY3VycmVudCB1c2FnZSBvZiB0aGUgSW5BcHBCcm93c2VyIHBsdWdpbiBpcyBkZXByZWNpYXRlZCBhcyBvZiBpb25pYy1uYXRpdmVAMS4zLjguIFBsZWFzZSBjaGVjayB0aGUgSW9uaWMgTmF0aXZlIGRvY3MgZm9yIHRoZSBsYXRlc3QgdXNhZ2UgZGV0YWlscy4nKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERpc3BsYXlzIGFuIEluQXBwQnJvd3NlciB3aW5kb3cgdGhhdCB3YXMgb3BlbmVkIGhpZGRlbi4gQ2FsbGluZyB0aGlzIGhhcyBubyBlZmZlY3RcbiAgICAgKiBpZiB0aGUgSW5BcHBCcm93c2VyIHdhcyBhbHJlYWR5IHZpc2libGUuXG4gICAgICovXG4gICAgSW5BcHBCcm93c2VyLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIENsb3NlcyB0aGUgSW5BcHBCcm93c2VyIHdpbmRvdy5cbiAgICAgKi9cbiAgICBJbkFwcEJyb3dzZXIucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEluamVjdHMgSmF2YVNjcmlwdCBjb2RlIGludG8gdGhlIEluQXBwQnJvd3NlciB3aW5kb3cuXG4gICAgICogQHBhcmFtIHNjcmlwdCAgICBEZXRhaWxzIG9mIHRoZSBzY3JpcHQgdG8gcnVuLCBzcGVjaWZ5aW5nIGVpdGhlciBhIGZpbGUgb3IgY29kZSBrZXkuXG4gICAgICovXG4gICAgSW5BcHBCcm93c2VyLnByb3RvdHlwZS5leGVjdXRlU2NyaXB0ID0gZnVuY3Rpb24gKHNjcmlwdCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogSW5qZWN0cyBDU1MgaW50byB0aGUgSW5BcHBCcm93c2VyIHdpbmRvdy5cbiAgICAgKiBAcGFyYW0gY3NzICAgICAgIERldGFpbHMgb2YgdGhlIHNjcmlwdCB0byBydW4sIHNwZWNpZnlpbmcgZWl0aGVyIGEgZmlsZSBvciBjb2RlIGtleS5cbiAgICAgKi9cbiAgICBJbkFwcEJyb3dzZXIucHJvdG90eXBlLmluc2VydENzcyA9IGZ1bmN0aW9uIChjc3MpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEEgbWV0aG9kIHRoYXQgYWxsb3dzIHlvdSB0byBsaXN0ZW4gdG8gZXZlbnRzIGhhcHBlbmluZyBpbiB0aGUgYnJvd3Nlci5cbiAgICAgKiBAcGFyYW0gZXZlbnQgRXZlbnQgbmFtZVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYmFjayBhbiBvYnNlcnZhYmxlIHRoYXQgd2lsbCBsaXN0ZW4gdG8gdGhlIGV2ZW50IG9uIHN1YnNjcmliZSwgYW5kIHdpbGwgc3RvcCBsaXN0ZW5pbmcgdG8gdGhlIGV2ZW50IG9uIHVuc3Vic2NyaWJlLlxuICAgICAqL1xuICAgIEluQXBwQnJvd3Nlci5wcm90b3R5cGUub24gPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlXzEuT2JzZXJ2YWJsZShmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgICAgIF90aGlzLl9vYmplY3RJbnN0YW5jZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCBvYnNlcnZlci5uZXh0LmJpbmQob2JzZXJ2ZXIpKTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5fb2JqZWN0SW5zdGFuY2UucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb2JzZXJ2ZXIubmV4dC5iaW5kKG9ic2VydmVyKSk7IH07XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFJbnN0YW5jZSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBJbkFwcEJyb3dzZXIucHJvdG90eXBlLCBcInNob3dcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFJbnN0YW5jZSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBJbkFwcEJyb3dzZXIucHJvdG90eXBlLCBcImNsb3NlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhSW5zdGFuY2UoKVxuICAgIF0sIEluQXBwQnJvd3Nlci5wcm90b3R5cGUsIFwiZXhlY3V0ZVNjcmlwdFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YUluc3RhbmNlKClcbiAgICBdLCBJbkFwcEJyb3dzZXIucHJvdG90eXBlLCBcImluc2VydENzc1wiLCBudWxsKTtcbiAgICBJbkFwcEJyb3dzZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdJbkFwcEJyb3dzZXInLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4taW5hcHBicm93c2VyJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2NvcmRvdmEuSW5BcHBCcm93c2VyJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLWluYXBwYnJvd3NlcidcbiAgICAgICAgfSlcbiAgICBdLCBJbkFwcEJyb3dzZXIpO1xuICAgIHJldHVybiBJbkFwcEJyb3dzZXI7XG59KCkpO1xuZXhwb3J0cy5JbkFwcEJyb3dzZXIgPSBJbkFwcEJyb3dzZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmFwcGJyb3dzZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luYXBwYnJvd3Nlci5qc1xuLy8gbW9kdWxlIGlkID0gNDI1XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 426 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name InAppPurchase\n * @description\n * A lightweight Cordova plugin for in app purchases on iOS/Android.\n *\n * @usage\n * ```ts\n * import {InAppPurchase} from 'ionic-native';\n *\n * InAppPurchase\n *  .getProducts(['com.yourapp.prod1', 'com.yourapp.prod2', ...])\n *  .then((products) => {\n *    console.log(products);\n *     //  [{ productId: 'com.yourapp.prod1', 'title': '...', description: '...', price: '...' }, ...]\n *  })\n *  .catch((err) => {\n *    console.log(err);\n *  });\n *\n *\n * InAppPurchase\n *   .buy('com.yourapp.prod1')\n *   .then((data)=> {\n *     console.log(data);\n *     // {\n *     //   transactionId: ...\n *     //   receipt: ...\n *     //   signature: ...\n *     // }\n *   })\n *   .catch((err)=> {\n *     console.log(err);\n *   });\n *\n * ```\n *\n * @advanced\n *\n * ```ts\n * // fist buy the product...\n * InAppPurchase\n *   .buy('com.yourapp.consumable_prod1')\n *   .then(data => InAppPurchase.consume(data.productType, data.receipt, data.signature))\n *   .then(() => console.log('product was successfully consumed!'))\n *   .catch( err=> console.log(err))\n * ```\n *\n *\n */\nvar InAppPurchase = (function () {\n    function InAppPurchase() {\n    }\n    /**\n     * Retrieves a list of full product data from Apple/Google. This method must be called before making purchases.\n     * @param {array<string>} productId an array of product ids.\n     * @returns {Promise} Returns a Promise that resolves with an array of objects.\n     */\n    InAppPurchase.getProducts = function (productId) { return; };\n    /**\n     * Buy a product that matches the productId.\n     * @param {string} productId A string that matches the product you want to buy.\n     * @returns {Promise} Returns a Promise that resolves with the transaction details.\n     */\n    InAppPurchase.buy = function (productId) { return; };\n    /**\n     * Same as buy, but for subscription based products.\n     * @param {string} productId A string that matches the product you want to subscribe to.\n     * @returns {Promise} Returns a Promise that resolves with the transaction details.\n     */\n    InAppPurchase.subscribe = function (productId) { return; };\n    /**\n     * Call this function after purchasing a \"consumable\" product to mark it as consumed. On Android, you must consume products that you want to let the user purchase multiple times. If you will not consume the product after a purchase, the next time you will attempt to purchase it you will get the error message:\n     * @param {string} productType\n     * @param {string} receipt\n     * @param {string} signature\n     */\n    InAppPurchase.consume = function (productType, receipt, signature) { return; };\n    /**\n     * Restore all purchases from the store\n     * @returns {Promise} Returns a promise with an array of purchases.\n     */\n    InAppPurchase.restorePurchases = function () { return; };\n    /**\n     * Get the receipt.\n     * @returns {Promise<string>} Returns a promise that contains the string for the receipt\n     */\n    InAppPurchase.getReceipt = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true\n        })\n    ], InAppPurchase, \"getProducts\", null);\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true\n        })\n    ], InAppPurchase, \"buy\", null);\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true\n        })\n    ], InAppPurchase, \"subscribe\", null);\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true\n        })\n    ], InAppPurchase, \"consume\", null);\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true\n        })\n    ], InAppPurchase, \"restorePurchases\", null);\n    __decorate([\n        plugin_1.Cordova({\n            otherPromise: true,\n            platforms: ['iOS']\n        })\n    ], InAppPurchase, \"getReceipt\", null);\n    InAppPurchase = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'InAppPurchase',\n            plugin: 'cordova-plugin-inapppurchase',\n            pluginRef: 'inAppPurchase',\n            platforms: ['Android', 'iOS'],\n            repo: 'https://github.com/AlexDisler/cordova-plugin-inapppurchase'\n        })\n    ], InAppPurchase);\n    return InAppPurchase;\n}());\nexports.InAppPurchase = InAppPurchase;\n//# sourceMappingURL=inapppurchase.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 427 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Insomnia\n * @description\n * Prevent the screen of the mobile device from falling asleep.\n *\n * @usage\n * ```typescript\n * import { Insomnia } from 'ionic-native';\n *\n *\n * Insomnia.keepAwake()\n *   .then(\n *     () => console.log('success'),\n *     () => console.log('error')\n *   );\n *\n * Insomnia.allowSleepAgain()\n *   .then(\n *     () => console.log('success'),\n *     () => console.log('error')\n *   );\n * ```\n *\n */\nvar Insomnia = (function () {\n    function Insomnia() {\n    }\n    /**\n     * Keeps awake the application\n     * @returns {Promise}\n     */\n    Insomnia.keepAwake = function () { return; };\n    /**\n     * Allows the application to sleep again\n     * @returns {Promise}\n     */\n    Insomnia.allowSleepAgain = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Insomnia, \"keepAwake\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Insomnia, \"allowSleepAgain\", null);\n    Insomnia = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Insomnia',\n            plugin: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin.git',\n            pluginRef: 'plugins.insomnia',\n            repo: 'https://github.com/EddyVerbruggen/Insomnia-PhoneGap-Plugin',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], Insomnia);\n    return Insomnia;\n}());\nexports.Insomnia = Insomnia;\n//# sourceMappingURL=insomnia.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luc29tbmlhLmpzPzQ0MWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsV0FBVztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQyNy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgSW5zb21uaWFcbiAqIEBkZXNjcmlwdGlvblxuICogUHJldmVudCB0aGUgc2NyZWVuIG9mIHRoZSBtb2JpbGUgZGV2aWNlIGZyb20gZmFsbGluZyBhc2xlZXAuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBJbnNvbW5pYSB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIEluc29tbmlhLmtlZXBBd2FrZSgpXG4gKiAgIC50aGVuKFxuICogICAgICgpID0+IGNvbnNvbGUubG9nKCdzdWNjZXNzJyksXG4gKiAgICAgKCkgPT4gY29uc29sZS5sb2coJ2Vycm9yJylcbiAqICAgKTtcbiAqXG4gKiBJbnNvbW5pYS5hbGxvd1NsZWVwQWdhaW4oKVxuICogICAudGhlbihcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnc3VjY2VzcycpLFxuICogICAgICgpID0+IGNvbnNvbGUubG9nKCdlcnJvcicpXG4gKiAgICk7XG4gKiBgYGBcbiAqXG4gKi9cbnZhciBJbnNvbW5pYSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW5zb21uaWEoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEtlZXBzIGF3YWtlIHRoZSBhcHBsaWNhdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIEluc29tbmlhLmtlZXBBd2FrZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEFsbG93cyB0aGUgYXBwbGljYXRpb24gdG8gc2xlZXAgYWdhaW5cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZX1cbiAgICAgKi9cbiAgICBJbnNvbW5pYS5hbGxvd1NsZWVwQWdhaW4gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgSW5zb21uaWEsIFwia2VlcEF3YWtlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBJbnNvbW5pYSwgXCJhbGxvd1NsZWVwQWdhaW5cIiwgbnVsbCk7XG4gICAgSW5zb21uaWEgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdJbnNvbW5pYScsXG4gICAgICAgICAgICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vSW5zb21uaWEtUGhvbmVHYXAtUGx1Z2luLmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLmluc29tbmlhJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vSW5zb21uaWEtUGhvbmVHYXAtUGx1Z2luJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXVxuICAgICAgICB9KVxuICAgIF0sIEluc29tbmlhKTtcbiAgICByZXR1cm4gSW5zb21uaWE7XG59KCkpO1xuZXhwb3J0cy5JbnNvbW5pYSA9IEluc29tbmlhO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5zb21uaWEuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luc29tbmlhLmpzXG4vLyBtb2R1bGUgaWQgPSA0Mjdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 428 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Instagram\n * @description Share a photo with the instagram app\n *\n * @usage\n * ```\n * import {Instagram} from 'ionic-native';\n *\n * Instagram.share('data:image/png;uhduhf3hfif33', 'Caption')\n *   .then(() => console.log('Shared!'))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nvar Instagram = (function () {\n    function Instagram() {\n    }\n    /**\n     * Detect if the Instagram application is installed on the device.\n     *\n     * @return {Promise<boolean|string>} Returns a promise that returns a boolean value if installed, or the app version on android\n     */\n    Instagram.isInstalled = function () { return; };\n    /**\n     * Share an image on Instagram\n     * Note: Instagram app stopped accepting pre-filled captions on both iOS and Android. As a work-around, the caption is copied to the clipboard. You have to inform your users to paste the caption.\n     *\n     * @param canvasIdOrDataUrl The canvas element id or the dataURL of the image to share\n     * @param caption The caption of the image\n     * @return {Promise<any>} Returns a promise that resolves if the image was shared\n     */\n    Instagram.share = function (canvasIdOrDataUrl, caption) { return; };\n    /**\n     * Share a library asset or video\n     * @param assetLocalIdentifier A local fileURI\n     * @return {Promise<any>} Returns a promise that resolves if the image was shared\n     */\n    Instagram.shareAsset = function (assetLocalIdentifier) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            callbackStyle: 'node'\n        })\n    ], Instagram, \"isInstalled\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackStyle: 'node'\n        })\n    ], Instagram, \"share\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], Instagram, \"shareAsset\", null);\n    Instagram = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Instagram',\n            plugin: 'cordova-instagram-plugin',\n            pluginRef: 'Instagram',\n            repo: 'https://github.com/vstirbu/InstagramPlugin'\n        })\n    ], Instagram);\n    return Instagram;\n}());\nexports.Instagram = Instagram;\n//# sourceMappingURL=instagram.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luc3RhZ3JhbS5qcz8yN2MyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0Isd0JBQXdCO0FBQ3hDO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGFBQWE7QUFDN0I7QUFDQSw2REFBNkQsUUFBUTtBQUNyRTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYTtBQUM3QjtBQUNBLDREQUE0RCxRQUFRO0FBQ3BFO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDI4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBJbnN0YWdyYW1cbiAqIEBkZXNjcmlwdGlvbiBTaGFyZSBhIHBob3RvIHdpdGggdGhlIGluc3RhZ3JhbSBhcHBcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtJbnN0YWdyYW19IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogSW5zdGFncmFtLnNoYXJlKCdkYXRhOmltYWdlL3BuZzt1aGR1aGYzaGZpZjMzJywgJ0NhcHRpb24nKVxuICogICAudGhlbigoKSA9PiBjb25zb2xlLmxvZygnU2hhcmVkIScpKVxuICogICAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIEluc3RhZ3JhbSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSW5zdGFncmFtKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlY3QgaWYgdGhlIEluc3RhZ3JhbSBhcHBsaWNhdGlvbiBpcyBpbnN0YWxsZWQgb24gdGhlIGRldmljZS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbnxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJldHVybnMgYSBib29sZWFuIHZhbHVlIGlmIGluc3RhbGxlZCwgb3IgdGhlIGFwcCB2ZXJzaW9uIG9uIGFuZHJvaWRcbiAgICAgKi9cbiAgICBJbnN0YWdyYW0uaXNJbnN0YWxsZWQgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaGFyZSBhbiBpbWFnZSBvbiBJbnN0YWdyYW1cbiAgICAgKiBOb3RlOiBJbnN0YWdyYW0gYXBwIHN0b3BwZWQgYWNjZXB0aW5nIHByZS1maWxsZWQgY2FwdGlvbnMgb24gYm90aCBpT1MgYW5kIEFuZHJvaWQuIEFzIGEgd29yay1hcm91bmQsIHRoZSBjYXB0aW9uIGlzIGNvcGllZCB0byB0aGUgY2xpcGJvYXJkLiBZb3UgaGF2ZSB0byBpbmZvcm0geW91ciB1c2VycyB0byBwYXN0ZSB0aGUgY2FwdGlvbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBjYW52YXNJZE9yRGF0YVVybCBUaGUgY2FudmFzIGVsZW1lbnQgaWQgb3IgdGhlIGRhdGFVUkwgb2YgdGhlIGltYWdlIHRvIHNoYXJlXG4gICAgICogQHBhcmFtIGNhcHRpb24gVGhlIGNhcHRpb24gb2YgdGhlIGltYWdlXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBpbWFnZSB3YXMgc2hhcmVkXG4gICAgICovXG4gICAgSW5zdGFncmFtLnNoYXJlID0gZnVuY3Rpb24gKGNhbnZhc0lkT3JEYXRhVXJsLCBjYXB0aW9uKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaGFyZSBhIGxpYnJhcnkgYXNzZXQgb3IgdmlkZW9cbiAgICAgKiBAcGFyYW0gYXNzZXRMb2NhbElkZW50aWZpZXIgQSBsb2NhbCBmaWxlVVJJXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIGlmIHRoZSBpbWFnZSB3YXMgc2hhcmVkXG4gICAgICovXG4gICAgSW5zdGFncmFtLnNoYXJlQXNzZXQgPSBmdW5jdGlvbiAoYXNzZXRMb2NhbElkZW50aWZpZXIpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrU3R5bGU6ICdub2RlJ1xuICAgICAgICB9KVxuICAgIF0sIEluc3RhZ3JhbSwgXCJpc0luc3RhbGxlZFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja1N0eWxlOiAnbm9kZSdcbiAgICAgICAgfSlcbiAgICBdLCBJbnN0YWdyYW0sIFwic2hhcmVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnXG4gICAgICAgIH0pXG4gICAgXSwgSW5zdGFncmFtLCBcInNoYXJlQXNzZXRcIiwgbnVsbCk7XG4gICAgSW5zdGFncmFtID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnSW5zdGFncmFtJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtaW5zdGFncmFtLXBsdWdpbicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdJbnN0YWdyYW0nLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS92c3RpcmJ1L0luc3RhZ3JhbVBsdWdpbidcbiAgICAgICAgfSlcbiAgICBdLCBJbnN0YWdyYW0pO1xuICAgIHJldHVybiBJbnN0YWdyYW07XG59KCkpO1xuZXhwb3J0cy5JbnN0YWdyYW0gPSBJbnN0YWdyYW07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnN0YWdyYW0uanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2luc3RhZ3JhbS5qc1xuLy8gbW9kdWxlIGlkID0gNDI4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 429 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name IsDebug\n * @description\n * Detect if the app is running in debug mode or not.\n * Debug mode is when the app is built and installed locally via xcode / eclipse / the cordova cli etc, compared to release mode when the app was downloaded from the app / play store via an end user.\n *\n * @usage\n * ```\n * import {IsDebug} from 'ionic-native';\n *\n * IsDebug.getIsDebug()\n *   .then((isDebug: boolean) => console.log('Is debug:', isDebug))\n *   .catch((error: any) => console.error(error));\n *\n * ```\n */\nvar IsDebug = (function () {\n    function IsDebug() {\n    }\n    /**\n     * Determine if an app was installed via xcode / eclipse / the ionic CLI etc\n     * @return {Promise<boolean>} Returns a promise that resolves with true if the app was installed via xcode / eclipse / the ionic CLI etc. It will resolve to false if the app was downloaded from the app / play store by the end user.\n     */\n    IsDebug.getIsDebug = function () {\n        return;\n    };\n    __decorate([\n        plugin_1.Cordova()\n    ], IsDebug, \"getIsDebug\", null);\n    IsDebug = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'IsDebug',\n            plugin: 'cordova-plugin-is-debug',\n            pluginRef: 'cordova.plugins.IsDebug',\n            repo: 'https://github.com/mattlewis92/cordova-plugin-is-debug'\n        })\n    ], IsDebug);\n    return IsDebug;\n}());\nexports.IsDebug = IsDebug;\n//# sourceMappingURL=is-debug.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2lzLWRlYnVnLmpzP2I1ZmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQixpQkFBaUI7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQyOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgSXNEZWJ1Z1xuICogQGRlc2NyaXB0aW9uXG4gKiBEZXRlY3QgaWYgdGhlIGFwcCBpcyBydW5uaW5nIGluIGRlYnVnIG1vZGUgb3Igbm90LlxuICogRGVidWcgbW9kZSBpcyB3aGVuIHRoZSBhcHAgaXMgYnVpbHQgYW5kIGluc3RhbGxlZCBsb2NhbGx5IHZpYSB4Y29kZSAvIGVjbGlwc2UgLyB0aGUgY29yZG92YSBjbGkgZXRjLCBjb21wYXJlZCB0byByZWxlYXNlIG1vZGUgd2hlbiB0aGUgYXBwIHdhcyBkb3dubG9hZGVkIGZyb20gdGhlIGFwcCAvIHBsYXkgc3RvcmUgdmlhIGFuIGVuZCB1c2VyLlxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge0lzRGVidWd9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogSXNEZWJ1Zy5nZXRJc0RlYnVnKClcbiAqICAgLnRoZW4oKGlzRGVidWc6IGJvb2xlYW4pID0+IGNvbnNvbGUubG9nKCdJcyBkZWJ1ZzonLCBpc0RlYnVnKSlcbiAqICAgLmNhdGNoKChlcnJvcjogYW55KSA9PiBjb25zb2xlLmVycm9yKGVycm9yKSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBJc0RlYnVnID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBJc0RlYnVnKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmUgaWYgYW4gYXBwIHdhcyBpbnN0YWxsZWQgdmlhIHhjb2RlIC8gZWNsaXBzZSAvIHRoZSBpb25pYyBDTEkgZXRjXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxib29sZWFuPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRydWUgaWYgdGhlIGFwcCB3YXMgaW5zdGFsbGVkIHZpYSB4Y29kZSAvIGVjbGlwc2UgLyB0aGUgaW9uaWMgQ0xJIGV0Yy4gSXQgd2lsbCByZXNvbHZlIHRvIGZhbHNlIGlmIHRoZSBhcHAgd2FzIGRvd25sb2FkZWQgZnJvbSB0aGUgYXBwIC8gcGxheSBzdG9yZSBieSB0aGUgZW5kIHVzZXIuXG4gICAgICovXG4gICAgSXNEZWJ1Zy5nZXRJc0RlYnVnID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm47XG4gICAgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgSXNEZWJ1ZywgXCJnZXRJc0RlYnVnXCIsIG51bGwpO1xuICAgIElzRGVidWcgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdJc0RlYnVnJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWlzLWRlYnVnJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5Jc0RlYnVnJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbWF0dGxld2lzOTIvY29yZG92YS1wbHVnaW4taXMtZGVidWcnXG4gICAgICAgIH0pXG4gICAgXSwgSXNEZWJ1Zyk7XG4gICAgcmV0dXJuIElzRGVidWc7XG59KCkpO1xuZXhwb3J0cy5Jc0RlYnVnID0gSXNEZWJ1Zztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzLWRlYnVnLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9pcy1kZWJ1Zy5qc1xuLy8gbW9kdWxlIGlkID0gNDI5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 430 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Keyboard\n * @description\n * @usage\n * ```typescript\n * import { Keyboard } from 'ionic-native';\n *\n *\n *\n * ```\n */\nvar Keyboard = (function () {\n    function Keyboard() {\n    }\n    /**\n     * Hide the keyboard accessory bar with the next, previous and done buttons.\n     * @param hide {boolean}\n     */\n    Keyboard.hideKeyboardAccessoryBar = function (hide) { };\n    /**\n     * Force keyboard to be shown.\n     */\n    Keyboard.show = function () { };\n    /**\n     * Close the keyboard if open.\n     */\n    Keyboard.close = function () { };\n    /**\n     * Prevents the native UIScrollView from moving when an input is focused.\n     * @param disable\n     */\n    Keyboard.disableScroll = function (disable) { };\n    /**\n     * Creates an observable that notifies you when the keyboard is shown. Unsubscribe to observable to cancel event watch.\n     */\n    Keyboard.onKeyboardShow = function () { return; };\n    /**\n     * Creates an observable that notifies you when the keyboard is hidden. Unsubscribe to observable to cancel event watch.\n     */\n    Keyboard.onKeyboardHide = function () { return; };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Keyboard, \"hideKeyboardAccessoryBar\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true,\n            platforms: ['Android', 'BlackBerry 10', 'Windows']\n        })\n    ], Keyboard, \"show\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true,\n            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']\n        })\n    ], Keyboard, \"close\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true,\n            platforms: ['iOS', 'Windows']\n        })\n    ], Keyboard, \"disableScroll\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'native.keyboardshow',\n            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']\n        })\n    ], Keyboard, \"onKeyboardShow\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'native.keyboardhide',\n            platforms: ['iOS', 'Android', 'BlackBerry 10', 'Windows']\n        })\n    ], Keyboard, \"onKeyboardHide\", null);\n    Keyboard = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Keyboard',\n            plugin: 'ionic-plugin-keyboard',\n            pluginRef: 'cordova.plugins.Keyboard',\n            repo: 'https://github.com/driftyco/ionic-plugin-keyboard'\n        })\n    ], Keyboard);\n    return Keyboard;\n}());\nexports.Keyboard = Keyboard;\n//# sourceMappingURL=keyboard.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2tleWJvYXJkLmpzPzliMmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxXQUFXO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CO0FBQ3BCO0FBQ0EseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpREFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MzAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIEtleWJvYXJkXG4gKiBAZGVzY3JpcHRpb25cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgS2V5Ym9hcmQgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKlxuICogYGBgXG4gKi9cbnZhciBLZXlib2FyZCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gS2V5Ym9hcmQoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEhpZGUgdGhlIGtleWJvYXJkIGFjY2Vzc29yeSBiYXIgd2l0aCB0aGUgbmV4dCwgcHJldmlvdXMgYW5kIGRvbmUgYnV0dG9ucy5cbiAgICAgKiBAcGFyYW0gaGlkZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBLZXlib2FyZC5oaWRlS2V5Ym9hcmRBY2Nlc3NvcnlCYXIgPSBmdW5jdGlvbiAoaGlkZSkgeyB9O1xuICAgIC8qKlxuICAgICAqIEZvcmNlIGtleWJvYXJkIHRvIGJlIHNob3duLlxuICAgICAqL1xuICAgIEtleWJvYXJkLnNob3cgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGtleWJvYXJkIGlmIG9wZW4uXG4gICAgICovXG4gICAgS2V5Ym9hcmQuY2xvc2UgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogUHJldmVudHMgdGhlIG5hdGl2ZSBVSVNjcm9sbFZpZXcgZnJvbSBtb3Zpbmcgd2hlbiBhbiBpbnB1dCBpcyBmb2N1c2VkLlxuICAgICAqIEBwYXJhbSBkaXNhYmxlXG4gICAgICovXG4gICAgS2V5Ym9hcmQuZGlzYWJsZVNjcm9sbCA9IGZ1bmN0aW9uIChkaXNhYmxlKSB7IH07XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhbiBvYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgeW91IHdoZW4gdGhlIGtleWJvYXJkIGlzIHNob3duLiBVbnN1YnNjcmliZSB0byBvYnNlcnZhYmxlIHRvIGNhbmNlbCBldmVudCB3YXRjaC5cbiAgICAgKi9cbiAgICBLZXlib2FyZC5vbktleWJvYXJkU2hvdyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYW4gb2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIHlvdSB3aGVuIHRoZSBrZXlib2FyZCBpcyBoaWRkZW4uIFVuc3Vic2NyaWJlIHRvIG9ic2VydmFibGUgdG8gY2FuY2VsIGV2ZW50IHdhdGNoLlxuICAgICAqL1xuICAgIEtleWJvYXJkLm9uS2V5Ym9hcmRIaWRlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgS2V5Ym9hcmQsIFwiaGlkZUtleWJvYXJkQWNjZXNzb3J5QmFyXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN5bmM6IHRydWUsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ1dpbmRvd3MnXVxuICAgICAgICB9KVxuICAgIF0sIEtleWJvYXJkLCBcInNob3dcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3luYzogdHJ1ZSxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ1dpbmRvd3MnXVxuICAgICAgICB9KVxuICAgIF0sIEtleWJvYXJkLCBcImNsb3NlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN5bmM6IHRydWUsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnaU9TJywgJ1dpbmRvd3MnXVxuICAgICAgICB9KVxuICAgIF0sIEtleWJvYXJkLCBcImRpc2FibGVTY3JvbGxcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6ICduYXRpdmUua2V5Ym9hcmRzaG93JyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCcsICdCbGFja0JlcnJ5IDEwJywgJ1dpbmRvd3MnXVxuICAgICAgICB9KVxuICAgIF0sIEtleWJvYXJkLCBcIm9uS2V5Ym9hcmRTaG93XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGV2ZW50OiAnbmF0aXZlLmtleWJvYXJkaGlkZScsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnLCAnQmxhY2tCZXJyeSAxMCcsICdXaW5kb3dzJ11cbiAgICAgICAgfSlcbiAgICBdLCBLZXlib2FyZCwgXCJvbktleWJvYXJkSGlkZVwiLCBudWxsKTtcbiAgICBLZXlib2FyZCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ0tleWJvYXJkJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2lvbmljLXBsdWdpbi1rZXlib2FyZCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjb3Jkb3ZhLnBsdWdpbnMuS2V5Ym9hcmQnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcmlmdHljby9pb25pYy1wbHVnaW4ta2V5Ym9hcmQnXG4gICAgICAgIH0pXG4gICAgXSwgS2V5Ym9hcmQpO1xuICAgIHJldHVybiBLZXlib2FyZDtcbn0oKSk7XG5leHBvcnRzLktleWJvYXJkID0gS2V5Ym9hcmQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlib2FyZC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMva2V5Ym9hcmQuanNcbi8vIG1vZHVsZSBpZCA9IDQzMFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 431 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Launch Navigator\n * @description\n * Requires Cordova plugin: uk.co.workingedge.phonegap.plugin.launchnavigator. For more info, please see the [LaunchNavigator plugin docs](https://github.com/dpa99c/phonegap-launch-navigator).\n *\n * @usage\n * Please refer to the plugin's repo for detailed usage. This docs page only explains the Native wrapper.\n *\n * ```typescript\n * import { LaunchNavigator, LaunchNavigatorOptions } from 'ionic-native';\n *\n * let options: LaunchNavigatorOptions = {\n *   start: 'London, ON',\n *   app: LaunchNavigator.APPS.UBER\n * };\n *\n * LaunchNavigator.navigate('Toronto, ON', options)\n *   .then(\n *     success => console.log('Launched navigator'),\n *     error => console.log('Error launching navigator', error)\n *   );\n * ```\n */\nvar LaunchNavigator = (function () {\n    function LaunchNavigator() {\n    }\n    /**\n     * Launches navigator app\n     * @param destination {string|number[]} Location name or coordinates (as string or array)\n     * @param options {LaunchNavigatorOptions}\n     * @returns {Promise<any>}\n     */\n    LaunchNavigator.navigate = function (destination, options) { return; };\n    /**\n     * Determines if the given app is installed and available on the current device.\n     * @param app {string}\n     */\n    LaunchNavigator.isAppAvailable = function (app) { return; };\n    /**\n     * Returns a list indicating which apps are installed and available on the current device.\n     */\n    LaunchNavigator.availableApps = function () { return; };\n    /**\n     * Returns the display name of the specified app.\n     * @param app {string}\n     */\n    LaunchNavigator.getAppDisplayName = function (app) { return; };\n    /**\n     * Returns list of supported apps on a given platform.\n     * @param platform {string}\n     */\n    LaunchNavigator.getAppsForPlatform = function (platform) { return; };\n    /**\n     * Indicates if an app on a given platform supports specification of transport mode.\n     * @param app {string} specified as a string, you can use one of the constants, e.g `LaunchNavigator.APP.GOOGLE_MAPS`\n     * @param platform {string}\n     */\n    LaunchNavigator.supportsTransportMode = function (app, platform) { return; };\n    /**\n     * Returns the list of transport modes supported by an app on a given platform.\n     * @param app {string}\n     * @param platform {string}\n     */\n    LaunchNavigator.getTransportModes = function (app, platform) { return; };\n    /**\n     * Indicates if an app on a given platform supports specification of launch mode.\n     * Note that currently only Google Maps on Android does.\n     * @param app {string}\n     * @param platform {string}\n     */\n    LaunchNavigator.supportsLaunchMode = function (app, platform) { return; };\n    /**\n     * Indicates if an app on a given platform supports specification of start location.\n     * @param app {string}\n     * @param platform {string}\n     */\n    LaunchNavigator.supportsStart = function (app, platform) { return; };\n    LaunchNavigator.supportsStartName = function (app, platform) { return; };\n    LaunchNavigator.supportsDestName = function (app, platform) { return; };\n    LaunchNavigator.userSelect = function (destination, options) { };\n    LaunchNavigator.APP = {\n        USER_SELECT: 'user_select',\n        APPLE_MAPS: 'apple_maps',\n        GOOGLE_MAPS: 'google_maps',\n        WAZE: 'waze',\n        CITYMAPPER: 'citymapper',\n        NAVIGON: 'navigon',\n        TRANSIT_APP: 'transit_app',\n        YANDEX: 'yandex',\n        UBER: 'uber',\n        TOMTOM: 'tomtom',\n        BING_MAPS: 'bing_maps',\n        SYGIC: 'sygic',\n        HERE_MAPS: 'here_maps',\n        MOOVIT: 'moovit'\n    };\n    LaunchNavigator.TRANSPORT_MODE = {\n        DRIVING: 'driving',\n        WALKING: 'walking',\n        BICYCLING: 'bicycling',\n        TRANSIT: 'transit'\n    };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], LaunchNavigator, \"navigate\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LaunchNavigator, \"isAppAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LaunchNavigator, \"availableApps\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"getAppDisplayName\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"getAppsForPlatform\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"supportsTransportMode\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"getTransportModes\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"supportsLaunchMode\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"supportsStart\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"supportsStartName\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"supportsDestName\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], LaunchNavigator, \"userSelect\", null);\n    LaunchNavigator = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'LaunchNavigator',\n            plugin: 'uk.co.workingedge.phonegap.plugin.launchnavigator',\n            pluginRef: 'launchnavigator',\n            repo: 'https://github.com/dpa99c/phonegap-launch-navigator.git'\n        })\n    ], LaunchNavigator);\n    return LaunchNavigator;\n}());\nexports.LaunchNavigator = LaunchNavigator;\n//# sourceMappingURL=launchnavigator.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2xhdW5jaG5hdmlnYXRvci5qcz9iZmZkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVywwQ0FBMEM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLGdCQUFnQjtBQUMzQyx1QkFBdUI7QUFDdkIsaUJBQWlCO0FBQ2pCO0FBQ0EsZ0VBQWdFLFFBQVE7QUFDeEU7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLHFEQUFxRCxRQUFRO0FBQzdEO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQSx3REFBd0QsUUFBUTtBQUNoRTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0EsOERBQThELFFBQVE7QUFDdEU7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCLHdCQUF3QjtBQUN4QjtBQUNBLHNFQUFzRSxRQUFRO0FBQzlFO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCO0FBQ0Esa0VBQWtFLFFBQVE7QUFDMUU7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CLHdCQUF3QjtBQUN4QjtBQUNBLG1FQUFtRSxRQUFRO0FBQzNFO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkIsd0JBQXdCO0FBQ3hCO0FBQ0EsOERBQThELFFBQVE7QUFDdEUsa0VBQWtFLFFBQVE7QUFDMUUsaUVBQWlFLFFBQVE7QUFDekUsa0VBQWtFO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQzMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgTGF1bmNoIE5hdmlnYXRvclxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogdWsuY28ud29ya2luZ2VkZ2UucGhvbmVnYXAucGx1Z2luLmxhdW5jaG5hdmlnYXRvci4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0xhdW5jaE5hdmlnYXRvciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL2RwYTk5Yy9waG9uZWdhcC1sYXVuY2gtbmF2aWdhdG9yKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIFBsZWFzZSByZWZlciB0byB0aGUgcGx1Z2luJ3MgcmVwbyBmb3IgZGV0YWlsZWQgdXNhZ2UuIFRoaXMgZG9jcyBwYWdlIG9ubHkgZXhwbGFpbnMgdGhlIE5hdGl2ZSB3cmFwcGVyLlxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IExhdW5jaE5hdmlnYXRvciwgTGF1bmNoTmF2aWdhdG9yT3B0aW9ucyB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogbGV0IG9wdGlvbnM6IExhdW5jaE5hdmlnYXRvck9wdGlvbnMgPSB7XG4gKiAgIHN0YXJ0OiAnTG9uZG9uLCBPTicsXG4gKiAgIGFwcDogTGF1bmNoTmF2aWdhdG9yLkFQUFMuVUJFUlxuICogfTtcbiAqXG4gKiBMYXVuY2hOYXZpZ2F0b3IubmF2aWdhdGUoJ1Rvcm9udG8sIE9OJywgb3B0aW9ucylcbiAqICAgLnRoZW4oXG4gKiAgICAgc3VjY2VzcyA9PiBjb25zb2xlLmxvZygnTGF1bmNoZWQgbmF2aWdhdG9yJyksXG4gKiAgICAgZXJyb3IgPT4gY29uc29sZS5sb2coJ0Vycm9yIGxhdW5jaGluZyBuYXZpZ2F0b3InLCBlcnJvcilcbiAqICAgKTtcbiAqIGBgYFxuICovXG52YXIgTGF1bmNoTmF2aWdhdG9yID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBMYXVuY2hOYXZpZ2F0b3IoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIExhdW5jaGVzIG5hdmlnYXRvciBhcHBcbiAgICAgKiBAcGFyYW0gZGVzdGluYXRpb24ge3N0cmluZ3xudW1iZXJbXX0gTG9jYXRpb24gbmFtZSBvciBjb29yZGluYXRlcyAoYXMgc3RyaW5nIG9yIGFycmF5KVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtMYXVuY2hOYXZpZ2F0b3JPcHRpb25zfVxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgTGF1bmNoTmF2aWdhdG9yLm5hdmlnYXRlID0gZnVuY3Rpb24gKGRlc3RpbmF0aW9uLCBvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIGlmIHRoZSBnaXZlbiBhcHAgaXMgaW5zdGFsbGVkIGFuZCBhdmFpbGFibGUgb24gdGhlIGN1cnJlbnQgZGV2aWNlLlxuICAgICAqIEBwYXJhbSBhcHAge3N0cmluZ31cbiAgICAgKi9cbiAgICBMYXVuY2hOYXZpZ2F0b3IuaXNBcHBBdmFpbGFibGUgPSBmdW5jdGlvbiAoYXBwKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBpbmRpY2F0aW5nIHdoaWNoIGFwcHMgYXJlIGluc3RhbGxlZCBhbmQgYXZhaWxhYmxlIG9uIHRoZSBjdXJyZW50IGRldmljZS5cbiAgICAgKi9cbiAgICBMYXVuY2hOYXZpZ2F0b3IuYXZhaWxhYmxlQXBwcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGRpc3BsYXkgbmFtZSBvZiB0aGUgc3BlY2lmaWVkIGFwcC5cbiAgICAgKiBAcGFyYW0gYXBwIHtzdHJpbmd9XG4gICAgICovXG4gICAgTGF1bmNoTmF2aWdhdG9yLmdldEFwcERpc3BsYXlOYW1lID0gZnVuY3Rpb24gKGFwcCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBsaXN0IG9mIHN1cHBvcnRlZCBhcHBzIG9uIGEgZ2l2ZW4gcGxhdGZvcm0uXG4gICAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XG4gICAgICovXG4gICAgTGF1bmNoTmF2aWdhdG9yLmdldEFwcHNGb3JQbGF0Zm9ybSA9IGZ1bmN0aW9uIChwbGF0Zm9ybSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIGFuIGFwcCBvbiBhIGdpdmVuIHBsYXRmb3JtIHN1cHBvcnRzIHNwZWNpZmljYXRpb24gb2YgdHJhbnNwb3J0IG1vZGUuXG4gICAgICogQHBhcmFtIGFwcCB7c3RyaW5nfSBzcGVjaWZpZWQgYXMgYSBzdHJpbmcsIHlvdSBjYW4gdXNlIG9uZSBvZiB0aGUgY29uc3RhbnRzLCBlLmcgYExhdW5jaE5hdmlnYXRvci5BUFAuR09PR0xFX01BUFNgXG4gICAgICogQHBhcmFtIHBsYXRmb3JtIHtzdHJpbmd9XG4gICAgICovXG4gICAgTGF1bmNoTmF2aWdhdG9yLnN1cHBvcnRzVHJhbnNwb3J0TW9kZSA9IGZ1bmN0aW9uIChhcHAsIHBsYXRmb3JtKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBsaXN0IG9mIHRyYW5zcG9ydCBtb2RlcyBzdXBwb3J0ZWQgYnkgYW4gYXBwIG9uIGEgZ2l2ZW4gcGxhdGZvcm0uXG4gICAgICogQHBhcmFtIGFwcCB7c3RyaW5nfVxuICAgICAqIEBwYXJhbSBwbGF0Zm9ybSB7c3RyaW5nfVxuICAgICAqL1xuICAgIExhdW5jaE5hdmlnYXRvci5nZXRUcmFuc3BvcnRNb2RlcyA9IGZ1bmN0aW9uIChhcHAsIHBsYXRmb3JtKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBJbmRpY2F0ZXMgaWYgYW4gYXBwIG9uIGEgZ2l2ZW4gcGxhdGZvcm0gc3VwcG9ydHMgc3BlY2lmaWNhdGlvbiBvZiBsYXVuY2ggbW9kZS5cbiAgICAgKiBOb3RlIHRoYXQgY3VycmVudGx5IG9ubHkgR29vZ2xlIE1hcHMgb24gQW5kcm9pZCBkb2VzLlxuICAgICAqIEBwYXJhbSBhcHAge3N0cmluZ31cbiAgICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cbiAgICAgKi9cbiAgICBMYXVuY2hOYXZpZ2F0b3Iuc3VwcG9ydHNMYXVuY2hNb2RlID0gZnVuY3Rpb24gKGFwcCwgcGxhdGZvcm0pIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiBhbiBhcHAgb24gYSBnaXZlbiBwbGF0Zm9ybSBzdXBwb3J0cyBzcGVjaWZpY2F0aW9uIG9mIHN0YXJ0IGxvY2F0aW9uLlxuICAgICAqIEBwYXJhbSBhcHAge3N0cmluZ31cbiAgICAgKiBAcGFyYW0gcGxhdGZvcm0ge3N0cmluZ31cbiAgICAgKi9cbiAgICBMYXVuY2hOYXZpZ2F0b3Iuc3VwcG9ydHNTdGFydCA9IGZ1bmN0aW9uIChhcHAsIHBsYXRmb3JtKSB7IHJldHVybjsgfTtcbiAgICBMYXVuY2hOYXZpZ2F0b3Iuc3VwcG9ydHNTdGFydE5hbWUgPSBmdW5jdGlvbiAoYXBwLCBwbGF0Zm9ybSkgeyByZXR1cm47IH07XG4gICAgTGF1bmNoTmF2aWdhdG9yLnN1cHBvcnRzRGVzdE5hbWUgPSBmdW5jdGlvbiAoYXBwLCBwbGF0Zm9ybSkgeyByZXR1cm47IH07XG4gICAgTGF1bmNoTmF2aWdhdG9yLnVzZXJTZWxlY3QgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIG9wdGlvbnMpIHsgfTtcbiAgICBMYXVuY2hOYXZpZ2F0b3IuQVBQID0ge1xuICAgICAgICBVU0VSX1NFTEVDVDogJ3VzZXJfc2VsZWN0JyxcbiAgICAgICAgQVBQTEVfTUFQUzogJ2FwcGxlX21hcHMnLFxuICAgICAgICBHT09HTEVfTUFQUzogJ2dvb2dsZV9tYXBzJyxcbiAgICAgICAgV0FaRTogJ3dhemUnLFxuICAgICAgICBDSVRZTUFQUEVSOiAnY2l0eW1hcHBlcicsXG4gICAgICAgIE5BVklHT046ICduYXZpZ29uJyxcbiAgICAgICAgVFJBTlNJVF9BUFA6ICd0cmFuc2l0X2FwcCcsXG4gICAgICAgIFlBTkRFWDogJ3lhbmRleCcsXG4gICAgICAgIFVCRVI6ICd1YmVyJyxcbiAgICAgICAgVE9NVE9NOiAndG9tdG9tJyxcbiAgICAgICAgQklOR19NQVBTOiAnYmluZ19tYXBzJyxcbiAgICAgICAgU1lHSUM6ICdzeWdpYycsXG4gICAgICAgIEhFUkVfTUFQUzogJ2hlcmVfbWFwcycsXG4gICAgICAgIE1PT1ZJVDogJ21vb3ZpdCdcbiAgICB9O1xuICAgIExhdW5jaE5hdmlnYXRvci5UUkFOU1BPUlRfTU9ERSA9IHtcbiAgICAgICAgRFJJVklORzogJ2RyaXZpbmcnLFxuICAgICAgICBXQUxLSU5HOiAnd2Fsa2luZycsXG4gICAgICAgIEJJQ1lDTElORzogJ2JpY3ljbGluZycsXG4gICAgICAgIFRSQU5TSVQ6ICd0cmFuc2l0J1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgICAgICAgICAgZXJyb3JJbmRleDogMlxuICAgICAgICB9KVxuICAgIF0sIExhdW5jaE5hdmlnYXRvciwgXCJuYXZpZ2F0ZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgTGF1bmNoTmF2aWdhdG9yLCBcImlzQXBwQXZhaWxhYmxlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwiYXZhaWxhYmxlQXBwc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwiZ2V0QXBwRGlzcGxheU5hbWVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgTGF1bmNoTmF2aWdhdG9yLCBcImdldEFwcHNGb3JQbGF0Zm9ybVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwic3VwcG9ydHNUcmFuc3BvcnRNb2RlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIExhdW5jaE5hdmlnYXRvciwgXCJnZXRUcmFuc3BvcnRNb2Rlc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwic3VwcG9ydHNMYXVuY2hNb2RlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIExhdW5jaE5hdmlnYXRvciwgXCJzdXBwb3J0c1N0YXJ0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIExhdW5jaE5hdmlnYXRvciwgXCJzdXBwb3J0c1N0YXJ0TmFtZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwic3VwcG9ydHNEZXN0TmFtZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBMYXVuY2hOYXZpZ2F0b3IsIFwidXNlclNlbGVjdFwiLCBudWxsKTtcbiAgICBMYXVuY2hOYXZpZ2F0b3IgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdMYXVuY2hOYXZpZ2F0b3InLFxuICAgICAgICAgICAgcGx1Z2luOiAndWsuY28ud29ya2luZ2VkZ2UucGhvbmVnYXAucGx1Z2luLmxhdW5jaG5hdmlnYXRvcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdsYXVuY2huYXZpZ2F0b3InLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9kcGE5OWMvcGhvbmVnYXAtbGF1bmNoLW5hdmlnYXRvci5naXQnXG4gICAgICAgIH0pXG4gICAgXSwgTGF1bmNoTmF2aWdhdG9yKTtcbiAgICByZXR1cm4gTGF1bmNoTmF2aWdhdG9yO1xufSgpKTtcbmV4cG9ydHMuTGF1bmNoTmF2aWdhdG9yID0gTGF1bmNoTmF2aWdhdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGF1bmNobmF2aWdhdG9yLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9sYXVuY2huYXZpZ2F0b3IuanNcbi8vIG1vZHVsZSBpZCA9IDQzMVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 432 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Local Notifications\n * @description\n * This plugin allows you to display local notifications on the device\n *\n * @usage\n * ```typescript\n * import { LocalNotifications } from 'ionic-native';\n *\n *\n * // Schedule a single notification\n * LocalNotifications.schedule({\n *   id: 1,\n *   text: 'Single Notification',\n *   sound: isAndroid? 'file://sound.mp3': 'file://beep.caf',\n *   data: { secret: key }\n * });\n *\n *\n * // Schedule multiple notifications\n * LocalNotifications.schedule([{\n *    id: 1,\n *    text: 'Multi Notification 1',\n *    sound: isAndroid ? 'file://sound.mp3': 'file://beep.caf',\n *    data: { secret:key }\n *   },{\n *    id: 2,\n *    title: 'Local Notification Example',\n *    text: 'Multi Notification 2',\n *    icon: 'http://example.com/icon.png'\n * }]);\n *\n *\n * // Schedule delayed notification\n * LocalNotifications.schedule({\n *    text: 'Delayed Notification',\n *    at: new Date(new Date().getTime() + 3600),\n *    led: 'FF0000',\n *    sound: null\n * });\n * ```\n *\n */\nvar LocalNotifications = (function () {\n    function LocalNotifications() {\n    }\n    /**\n     * Schedules a single or multiple notifications\n     * @param options\n     */\n    LocalNotifications.schedule = function (options) { };\n    /**\n     * Updates a previously scheduled notification. Must include the id in the options parameter.\n     * @param options\n     */\n    LocalNotifications.update = function (options) { };\n    /**\n     * Clears single or multiple notifications\n     * @param notificationId A single notification id, or an array of notification ids.\n     * @returns {Promise} Returns a promise when the notification had been cleared\n     */\n    LocalNotifications.clear = function (notificationId) { return; };\n    /**\n     * Clears all notifications\n     * @returns {Promise} Returns a promise when all notifications have cleared\n     */\n    LocalNotifications.clearAll = function () { return; };\n    /**\n     * Cancels single or multiple notifications\n     * @param notificationId A single notification id, or an array of notification ids.\n     * @returns {Promise} Returns a promise when the notification is canceled\n     */\n    LocalNotifications.cancel = function (notificationId) { return; };\n    /**\n     * Cancels all notifications\n     * @returns {Promise} Returns a promise when all notifications are canceled\n     */\n    LocalNotifications.cancelAll = function () { return; };\n    /**\n     * Checks presence of a notification\n     * @param notificationId\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.isPresent = function (notificationId) { return; };\n    /**\n     * Checks is a notification is scheduled\n     * @param notificationId\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.isScheduled = function (notificationId) { return; };\n    /**\n     * Checks if a notification is triggered\n     * @param notificationId\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.isTriggered = function (notificationId) { return; };\n    /**\n     * Get all the notification ids\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getAllIds = function () { return; };\n    /**\n     * Get the ids of triggered notifications\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getTriggeredIds = function () { return; };\n    /**\n     * Get the ids of scheduled notifications\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getScheduledIds = function () { return; };\n    /**\n     * Get a notification object\n     * @param notificationId The id of the notification to get\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.get = function (notificationId) { return; };\n    /**\n     * Get a scheduled notification object\n     * @param notificationId The id of the notification to get\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getScheduled = function (notificationId) { return; };\n    /**\n     * Get a triggered notification object\n     * @param notificationId The id of the notification to get\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getTriggered = function (notificationId) { return; };\n    /**\n     * Get all notification objects\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getAll = function () { return; };\n    /**\n     * Get all scheduled notification objects\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getAllScheduled = function () { return; };\n    /**\n     * Get all triggered notification objects\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.getAllTriggered = function () { return; };\n    /**\n     * Register permission to show notifications if not already granted.\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.registerPermission = function () { return; };\n    /**\n     * Informs if the app has the permission to show notifications.\n     * @returns {Promise} Returns a promise\n     */\n    LocalNotifications.hasPermission = function () { return; };\n    /**\n     * Sets a callback for a specific event\n     * @param eventName The name of the event. Available events: schedule, trigger, click, update, clear, clearall, cancel, cancelall\n     * @param callback Call back function. All events return notification and state parameter. clear and clearall return state parameter only.\n     */\n    LocalNotifications.on = function (eventName, callback) { };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], LocalNotifications, \"schedule\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], LocalNotifications, \"update\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"clear\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 0,\n            errorIndex: 2\n        })\n    ], LocalNotifications, \"clearAll\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"cancel\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 0,\n            errorIndex: 2\n        })\n    ], LocalNotifications, \"cancelAll\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"isPresent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"isScheduled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"isTriggered\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getAllIds\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getTriggeredIds\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getScheduledIds\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"get\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getScheduled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getTriggered\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getAll\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getAllScheduled\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"getAllTriggered\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"registerPermission\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocalNotifications, \"hasPermission\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], LocalNotifications, \"on\", null);\n    LocalNotifications = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'LocalNotifications',\n            plugin: 'de.appplant.cordova.plugin.local-notification',\n            pluginRef: 'cordova.plugins.notification.local',\n            repo: 'https://github.com/katzer/cordova-plugin-local-notifications'\n        })\n    ], LocalNotifications);\n    return LocalNotifications;\n}());\nexports.LocalNotifications = LocalNotifications;\n//# sourceMappingURL=localnotifications.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 433 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name LocationAccuracy\n * @description\n * This Cordova/Phonegap plugin for Android and iOS to request enabling/changing of Location Services by triggering a native dialog from within the app, avoiding the need for the user to leave your app to change location settings manually.\n *\n * @usage\n * ```\n * import { LocationAccuracy } from 'ionic-native';\n *\n * LocationAccuracy.canRequest().then((canRequest: boolean) => {\n *\n *   if(canRequest) {\n *     // the accuracy option will be ignored by iOS\n *     LocationAccuracy.request(LocationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY).then(\n *       () => console.log('Request successful'),\n *       error => console.log('Error requesting location permissions', error)\n *     );\n *   }\n *\n * });\n *\n * ```\n */\nvar LocationAccuracy = (function () {\n    function LocationAccuracy() {\n    }\n    /**\n     * Indicates if you can request accurate location\n     * @returns {Promise<boolean>} Returns a promise that resovles with a boolean that indicates if you can request accurate location\n     */\n    LocationAccuracy.canRequest = function () { return; };\n    /**\n     * Indicates if a request is currently in progress\n     * @returns {Promise<boolean>} Returns a promise that resolves with a boolean that indicates if a request is currently in progress\n     */\n    LocationAccuracy.isRequesting = function () { return; };\n    /**\n     * Requests accurate location\n     * @param accuracy {number} Accuracy, from 0 to 4. You can use the static properties of this class that start with REQUEST_PRIORITY_\n     * @returns {Promise<any>} Returns a promise that resolves on success and rejects if an error occurred\n     */\n    LocationAccuracy.request = function (accuracy) { return; };\n    LocationAccuracy.REQUEST_PRIORITY_NO_POWER = 0;\n    LocationAccuracy.REQUEST_PRIORITY_LOW_POWER = 1;\n    LocationAccuracy.REQUEST_PRIORITY_BALANCED_POWER_ACCURACY = 2;\n    LocationAccuracy.REQUEST_PRIORITY_HIGH_ACCURACY = 3;\n    LocationAccuracy.SUCCESS_SETTINGS_SATISFIED = 0;\n    LocationAccuracy.SUCCESS_USER_AGREED = 1;\n    LocationAccuracy.ERROR_ALREADY_REQUESTING = -1;\n    LocationAccuracy.ERROR_INVALID_ACTION = 0;\n    LocationAccuracy.ERROR_INVALID_ACCURACY = 1;\n    LocationAccuracy.ERROR_EXCEPTION = 1;\n    LocationAccuracy.ERROR_CANNOT_CHANGE_ACCURACY = 3;\n    LocationAccuracy.ERROR_USER_DISAGREED = 4;\n    LocationAccuracy.ERROR_GOOGLE_API_CONNECTION_FAILED = 4;\n    __decorate([\n        plugin_1.Cordova()\n    ], LocationAccuracy, \"canRequest\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], LocationAccuracy, \"isRequesting\", null);\n    __decorate([\n        plugin_1.Cordova({ callbackOrder: 'reverse' })\n    ], LocationAccuracy, \"request\", null);\n    LocationAccuracy = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'LocationAccuracy',\n            plugin: 'cordova-plugin-request-location-accuracy',\n            pluginRef: 'cordova.plugins.locationAccuracy',\n            repo: 'https://github.com/dpa99c/cordova-plugin-request-location-accuracy'\n        })\n    ], LocationAccuracy);\n    return LocationAccuracy;\n}());\nexports.LocationAccuracy = LocationAccuracy;\n//# sourceMappingURL=location-accuracy.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL2xvY2F0aW9uLWFjY3VyYWN5LmpzP2E0MDIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixpQkFBaUI7QUFDbEM7QUFDQSwrQ0FBK0MsUUFBUTtBQUN2RDtBQUNBO0FBQ0EsaUJBQWlCLGlCQUFpQjtBQUNsQztBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0E7QUFDQSx3QkFBd0IsT0FBTztBQUMvQixpQkFBaUIsYUFBYTtBQUM5QjtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsMkJBQTJCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MzMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIExvY2F0aW9uQWNjdXJhY3lcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBDb3Jkb3ZhL1Bob25lZ2FwIHBsdWdpbiBmb3IgQW5kcm9pZCBhbmQgaU9TIHRvIHJlcXVlc3QgZW5hYmxpbmcvY2hhbmdpbmcgb2YgTG9jYXRpb24gU2VydmljZXMgYnkgdHJpZ2dlcmluZyBhIG5hdGl2ZSBkaWFsb2cgZnJvbSB3aXRoaW4gdGhlIGFwcCwgYXZvaWRpbmcgdGhlIG5lZWQgZm9yIHRoZSB1c2VyIHRvIGxlYXZlIHlvdXIgYXBwIHRvIGNoYW5nZSBsb2NhdGlvbiBzZXR0aW5ncyBtYW51YWxseS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHsgTG9jYXRpb25BY2N1cmFjeSB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogTG9jYXRpb25BY2N1cmFjeS5jYW5SZXF1ZXN0KCkudGhlbigoY2FuUmVxdWVzdDogYm9vbGVhbikgPT4ge1xuICpcbiAqICAgaWYoY2FuUmVxdWVzdCkge1xuICogICAgIC8vIHRoZSBhY2N1cmFjeSBvcHRpb24gd2lsbCBiZSBpZ25vcmVkIGJ5IGlPU1xuICogICAgIExvY2F0aW9uQWNjdXJhY3kucmVxdWVzdChMb2NhdGlvbkFjY3VyYWN5LlJFUVVFU1RfUFJJT1JJVFlfSElHSF9BQ0NVUkFDWSkudGhlbihcbiAqICAgICAgICgpID0+IGNvbnNvbGUubG9nKCdSZXF1ZXN0IHN1Y2Nlc3NmdWwnKSxcbiAqICAgICAgIGVycm9yID0+IGNvbnNvbGUubG9nKCdFcnJvciByZXF1ZXN0aW5nIGxvY2F0aW9uIHBlcm1pc3Npb25zJywgZXJyb3IpXG4gKiAgICAgKTtcbiAqICAgfVxuICpcbiAqIH0pO1xuICpcbiAqIGBgYFxuICovXG52YXIgTG9jYXRpb25BY2N1cmFjeSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTG9jYXRpb25BY2N1cmFjeSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5kaWNhdGVzIGlmIHlvdSBjYW4gcmVxdWVzdCBhY2N1cmF0ZSBsb2NhdGlvblxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGJvb2xlYW4+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc292bGVzIHdpdGggYSBib29sZWFuIHRoYXQgaW5kaWNhdGVzIGlmIHlvdSBjYW4gcmVxdWVzdCBhY2N1cmF0ZSBsb2NhdGlvblxuICAgICAqL1xuICAgIExvY2F0aW9uQWNjdXJhY3kuY2FuUmVxdWVzdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEluZGljYXRlcyBpZiBhIHJlcXVlc3QgaXMgY3VycmVudGx5IGluIHByb2dyZXNzXG4gICAgICogQHJldHVybnMge1Byb21pc2U8Ym9vbGVhbj59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgYSByZXF1ZXN0IGlzIGN1cnJlbnRseSBpbiBwcm9ncmVzc1xuICAgICAqL1xuICAgIExvY2F0aW9uQWNjdXJhY3kuaXNSZXF1ZXN0aW5nID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgYWNjdXJhdGUgbG9jYXRpb25cbiAgICAgKiBAcGFyYW0gYWNjdXJhY3kge251bWJlcn0gQWNjdXJhY3ksIGZyb20gMCB0byA0LiBZb3UgY2FuIHVzZSB0aGUgc3RhdGljIHByb3BlcnRpZXMgb2YgdGhpcyBjbGFzcyB0aGF0IHN0YXJ0IHdpdGggUkVRVUVTVF9QUklPUklUWV9cbiAgICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MgYW5kIHJlamVjdHMgaWYgYW4gZXJyb3Igb2NjdXJyZWRcbiAgICAgKi9cbiAgICBMb2NhdGlvbkFjY3VyYWN5LnJlcXVlc3QgPSBmdW5jdGlvbiAoYWNjdXJhY3kpIHsgcmV0dXJuOyB9O1xuICAgIExvY2F0aW9uQWNjdXJhY3kuUkVRVUVTVF9QUklPUklUWV9OT19QT1dFUiA9IDA7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5SRVFVRVNUX1BSSU9SSVRZX0xPV19QT1dFUiA9IDE7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5SRVFVRVNUX1BSSU9SSVRZX0JBTEFOQ0VEX1BPV0VSX0FDQ1VSQUNZID0gMjtcbiAgICBMb2NhdGlvbkFjY3VyYWN5LlJFUVVFU1RfUFJJT1JJVFlfSElHSF9BQ0NVUkFDWSA9IDM7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5TVUNDRVNTX1NFVFRJTkdTX1NBVElTRklFRCA9IDA7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5TVUNDRVNTX1VTRVJfQUdSRUVEID0gMTtcbiAgICBMb2NhdGlvbkFjY3VyYWN5LkVSUk9SX0FMUkVBRFlfUkVRVUVTVElORyA9IC0xO1xuICAgIExvY2F0aW9uQWNjdXJhY3kuRVJST1JfSU5WQUxJRF9BQ1RJT04gPSAwO1xuICAgIExvY2F0aW9uQWNjdXJhY3kuRVJST1JfSU5WQUxJRF9BQ0NVUkFDWSA9IDE7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5FUlJPUl9FWENFUFRJT04gPSAxO1xuICAgIExvY2F0aW9uQWNjdXJhY3kuRVJST1JfQ0FOTk9UX0NIQU5HRV9BQ0NVUkFDWSA9IDM7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5FUlJPUl9VU0VSX0RJU0FHUkVFRCA9IDQ7XG4gICAgTG9jYXRpb25BY2N1cmFjeS5FUlJPUl9HT09HTEVfQVBJX0NPTk5FQ1RJT05fRkFJTEVEID0gNDtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgTG9jYXRpb25BY2N1cmFjeSwgXCJjYW5SZXF1ZXN0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBMb2NhdGlvbkFjY3VyYWN5LCBcImlzUmVxdWVzdGluZ1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJyB9KVxuICAgIF0sIExvY2F0aW9uQWNjdXJhY3ksIFwicmVxdWVzdFwiLCBudWxsKTtcbiAgICBMb2NhdGlvbkFjY3VyYWN5ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnTG9jYXRpb25BY2N1cmFjeScsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1yZXF1ZXN0LWxvY2F0aW9uLWFjY3VyYWN5JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ2NvcmRvdmEucGx1Z2lucy5sb2NhdGlvbkFjY3VyYWN5JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vZHBhOTljL2NvcmRvdmEtcGx1Z2luLXJlcXVlc3QtbG9jYXRpb24tYWNjdXJhY3knXG4gICAgICAgIH0pXG4gICAgXSwgTG9jYXRpb25BY2N1cmFjeSk7XG4gICAgcmV0dXJuIExvY2F0aW9uQWNjdXJhY3k7XG59KCkpO1xuZXhwb3J0cy5Mb2NhdGlvbkFjY3VyYWN5ID0gTG9jYXRpb25BY2N1cmFjeTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2F0aW9uLWFjY3VyYWN5LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9sb2NhdGlvbi1hY2N1cmFjeS5qc1xuLy8gbW9kdWxlIGlkID0gNDMzXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 434 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Media Capture\n * @description\n * @usage\n * ```typescript\n * import { MediaCapture } from 'ionic-native';\n *\n *\n * let options: CaptureImageOptions = { limit: 3 };\n * MediaCapture.captureImage(options)\n *   .then(\n *     (data: MediaFile[]) => console.log(data),\n *     (err: CaptureError) => console.error(err)\n *   );\n *\n * ```\n */\nvar MediaCapture = (function () {\n    function MediaCapture() {\n    }\n    Object.defineProperty(MediaCapture, \"supportedImageModes\", {\n        /**\n         * The audio recording formats supported by the device.\n         * @returns {ConfigurationData[]}\n         */\n        get: function () {\n            return navigator.device.capture.supportedImageModes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MediaCapture, \"supportedAudioModes\", {\n        /**\n         * The recording image sizes and formats supported by the device.\n         * @returns {ConfigurationData[]}\n         */\n        get: function () {\n            return navigator.device.capture.supportedAudioModes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MediaCapture, \"supportedVideoModes\", {\n        /**\n         * The recording video resolutions and formats supported by the device.\n         * @returns {ConfigurationData[]}\n         */\n        get: function () {\n            return navigator.device.capture.supportedVideoModes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Start the audio recorder application and return information about captured audio clip files.\n     * @param options\n     */\n    MediaCapture.captureAudio = function (options) { return; };\n    /**\n     * Start the camera application and return information about captured image files.\n     * @param options\n     */\n    MediaCapture.captureImage = function (options) { return; };\n    /**\n     * Start the video recorder application and return information about captured video clip files.\n     * @param options\n     */\n    MediaCapture.captureVideo = function (options) { return; };\n    /**\n     * is fired if the capture call is successful\n     */\n    MediaCapture.onPendingCaptureResult = function () { return; };\n    /**\n     * is fired if the capture call is unsuccessful\n     */\n    MediaCapture.onPendingCaptureError = function () { return; };\n    __decorate([\n        plugin_1.CordovaProperty\n    ], MediaCapture, \"supportedImageModes\", null);\n    __decorate([\n        plugin_1.CordovaProperty\n    ], MediaCapture, \"supportedAudioModes\", null);\n    __decorate([\n        plugin_1.CordovaProperty\n    ], MediaCapture, \"supportedVideoModes\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], MediaCapture, \"captureAudio\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], MediaCapture, \"captureImage\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], MediaCapture, \"captureVideo\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'pendingcaptureresult'\n        })\n    ], MediaCapture, \"onPendingCaptureResult\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'pendingcaptureerror'\n        })\n    ], MediaCapture, \"onPendingCaptureError\", null);\n    MediaCapture = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'MediaCapture',\n            plugin: 'cordova-plugin-media-capture',\n            pluginRef: 'navigator.device.capture',\n            repo: 'https://github.com/apache/cordova-plugin-media-capture'\n        })\n    ], MediaCapture);\n    return MediaCapture;\n}());\nexports.MediaCapture = MediaCapture;\n//# sourceMappingURL=media-capture.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL21lZGlhLWNhcHR1cmUuanM/ZTgwMyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUI7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsUUFBUTtBQUM1RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsdURBQXVELFFBQVE7QUFDL0Q7QUFDQTtBQUNBO0FBQ0Esc0RBQXNELFFBQVE7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDM0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBNZWRpYSBDYXB0dXJlXG4gKiBAZGVzY3JpcHRpb25cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTWVkaWFDYXB0dXJlIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogbGV0IG9wdGlvbnM6IENhcHR1cmVJbWFnZU9wdGlvbnMgPSB7IGxpbWl0OiAzIH07XG4gKiBNZWRpYUNhcHR1cmUuY2FwdHVyZUltYWdlKG9wdGlvbnMpXG4gKiAgIC50aGVuKFxuICogICAgIChkYXRhOiBNZWRpYUZpbGVbXSkgPT4gY29uc29sZS5sb2coZGF0YSksXG4gKiAgICAgKGVycjogQ2FwdHVyZUVycm9yKSA9PiBjb25zb2xlLmVycm9yKGVycilcbiAqICAgKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIE1lZGlhQ2FwdHVyZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTWVkaWFDYXB0dXJlKCkge1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWFDYXB0dXJlLCBcInN1cHBvcnRlZEltYWdlTW9kZXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIGF1ZGlvIHJlY29yZGluZyBmb3JtYXRzIHN1cHBvcnRlZCBieSB0aGUgZGV2aWNlLlxuICAgICAgICAgKiBAcmV0dXJucyB7Q29uZmlndXJhdGlvbkRhdGFbXX1cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG5hdmlnYXRvci5kZXZpY2UuY2FwdHVyZS5zdXBwb3J0ZWRJbWFnZU1vZGVzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTWVkaWFDYXB0dXJlLCBcInN1cHBvcnRlZEF1ZGlvTW9kZXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogVGhlIHJlY29yZGluZyBpbWFnZSBzaXplcyBhbmQgZm9ybWF0cyBzdXBwb3J0ZWQgYnkgdGhlIGRldmljZS5cbiAgICAgICAgICogQHJldHVybnMge0NvbmZpZ3VyYXRpb25EYXRhW119XG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBuYXZpZ2F0b3IuZGV2aWNlLmNhcHR1cmUuc3VwcG9ydGVkQXVkaW9Nb2RlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1lZGlhQ2FwdHVyZSwgXCJzdXBwb3J0ZWRWaWRlb01vZGVzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFRoZSByZWNvcmRpbmcgdmlkZW8gcmVzb2x1dGlvbnMgYW5kIGZvcm1hdHMgc3VwcG9ydGVkIGJ5IHRoZSBkZXZpY2UuXG4gICAgICAgICAqIEByZXR1cm5zIHtDb25maWd1cmF0aW9uRGF0YVtdfVxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbmF2aWdhdG9yLmRldmljZS5jYXB0dXJlLnN1cHBvcnRlZFZpZGVvTW9kZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBhdWRpbyByZWNvcmRlciBhcHBsaWNhdGlvbiBhbmQgcmV0dXJuIGluZm9ybWF0aW9uIGFib3V0IGNhcHR1cmVkIGF1ZGlvIGNsaXAgZmlsZXMuXG4gICAgICogQHBhcmFtIG9wdGlvbnNcbiAgICAgKi9cbiAgICBNZWRpYUNhcHR1cmUuY2FwdHVyZUF1ZGlvID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFN0YXJ0IHRoZSBjYW1lcmEgYXBwbGljYXRpb24gYW5kIHJldHVybiBpbmZvcm1hdGlvbiBhYm91dCBjYXB0dXJlZCBpbWFnZSBmaWxlcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIE1lZGlhQ2FwdHVyZS5jYXB0dXJlSW1hZ2UgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU3RhcnQgdGhlIHZpZGVvIHJlY29yZGVyIGFwcGxpY2F0aW9uIGFuZCByZXR1cm4gaW5mb3JtYXRpb24gYWJvdXQgY2FwdHVyZWQgdmlkZW8gY2xpcCBmaWxlcy5cbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIE1lZGlhQ2FwdHVyZS5jYXB0dXJlVmlkZW8gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogaXMgZmlyZWQgaWYgdGhlIGNhcHR1cmUgY2FsbCBpcyBzdWNjZXNzZnVsXG4gICAgICovXG4gICAgTWVkaWFDYXB0dXJlLm9uUGVuZGluZ0NhcHR1cmVSZXN1bHQgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBpcyBmaXJlZCBpZiB0aGUgY2FwdHVyZSBjYWxsIGlzIHVuc3VjY2Vzc2Z1bFxuICAgICAqL1xuICAgIE1lZGlhQ2FwdHVyZS5vblBlbmRpbmdDYXB0dXJlRXJyb3IgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YVByb3BlcnR5XG4gICAgXSwgTWVkaWFDYXB0dXJlLCBcInN1cHBvcnRlZEltYWdlTW9kZXNcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFQcm9wZXJ0eVxuICAgIF0sIE1lZGlhQ2FwdHVyZSwgXCJzdXBwb3J0ZWRBdWRpb01vZGVzXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhUHJvcGVydHlcbiAgICBdLCBNZWRpYUNhcHR1cmUsIFwic3VwcG9ydGVkVmlkZW9Nb2Rlc1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBNZWRpYUNhcHR1cmUsIFwiY2FwdHVyZUF1ZGlvXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGNhbGxiYWNrT3JkZXI6ICdyZXZlcnNlJ1xuICAgICAgICB9KVxuICAgIF0sIE1lZGlhQ2FwdHVyZSwgXCJjYXB0dXJlSW1hZ2VcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnXG4gICAgICAgIH0pXG4gICAgXSwgTWVkaWFDYXB0dXJlLCBcImNhcHR1cmVWaWRlb1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBldmVudE9ic2VydmFibGU6IHRydWUsXG4gICAgICAgICAgICBldmVudDogJ3BlbmRpbmdjYXB0dXJlcmVzdWx0J1xuICAgICAgICB9KVxuICAgIF0sIE1lZGlhQ2FwdHVyZSwgXCJvblBlbmRpbmdDYXB0dXJlUmVzdWx0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGV2ZW50OiAncGVuZGluZ2NhcHR1cmVlcnJvcidcbiAgICAgICAgfSlcbiAgICBdLCBNZWRpYUNhcHR1cmUsIFwib25QZW5kaW5nQ2FwdHVyZUVycm9yXCIsIG51bGwpO1xuICAgIE1lZGlhQ2FwdHVyZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ01lZGlhQ2FwdHVyZScsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1tZWRpYS1jYXB0dXJlJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ25hdmlnYXRvci5kZXZpY2UuY2FwdHVyZScsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1tZWRpYS1jYXB0dXJlJ1xuICAgICAgICB9KVxuICAgIF0sIE1lZGlhQ2FwdHVyZSk7XG4gICAgcmV0dXJuIE1lZGlhQ2FwdHVyZTtcbn0oKSk7XG5leHBvcnRzLk1lZGlhQ2FwdHVyZSA9IE1lZGlhQ2FwdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW1lZGlhLWNhcHR1cmUuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL21lZGlhLWNhcHR1cmUuanNcbi8vIG1vZHVsZSBpZCA9IDQzNFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 435 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name NativeAudio\n * @description Native Audio Playback\n * @usage\n * ```typescript\n * import {NativeAudio} from 'ionic-native';\n *\n * NativeAudio.preloadSimple('uniqueId1', 'path/to/file.mp3').then(onSuccess, onError);\n * NativeAudio.preloadComplex('uniqueId2', 'path/to/file2.mp3', 1, 1, 0).then(onSuccess, onError);\n *\n * NativeAudio.play('uniqueId1').then(onSuccess, onError);\n * NativeAudio.loop('uniqueId2').then(onSuccess, onError);\n *\n * NativeAudio.setVolumeForComplexAsset('uniqueId2', 0.6).then(onSuccess,onError);\n *\n * NativeAudio.stop('uniqueId1').then(onSuccess,onError);\n *\n * NativeAudio.unload('uniqueId1').then(onSuccess,onError);\n *\n * ```\n */\nvar NativeAudio = (function () {\n    function NativeAudio() {\n    }\n    /**\n     * Loads an audio file into memory. Optimized for short clips / single shots (up to five seconds). Cannot be stopped / looped.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @returns {Promise<any>}\n     */\n    NativeAudio.preloadSimple = function (id, assetPath) { return; };\n    /**\n     * Loads an audio file into memory. Optimized for background music / ambient sound. Uses highlevel native APIs with a larger footprint. (iOS: AVAudioPlayer). Can be stopped / looped and used with multiple voices. Can be faded in and out using the delay parameter.\n     * @param id {string} unique ID for the audio file\n     * @param assetPath {string}  the relative path or absolute URL (inluding http://) to the audio asset.\n     * @param volume {number} the volume of the preloaded sound (0.1 to 1.0)\n     * @param voices {number} the number of multichannel voices available\n     * @param delay {number}\n     * @returns {Promise<any>}\n     */\n    NativeAudio.preloadComplex = function (id, assetPath, volume, voices, delay) { return; };\n    /**\n     * Plays an audio asset\n     * @param id {string} unique ID for the audio file\n     * @param completeCallback {Function} callback to be invoked when audio is done playing\n     */\n    NativeAudio.play = function (id, completeCallback) { return; };\n    /**\n     * Stops playing an audio\n     * @param id {string} unique ID for the audio file\n     */\n    NativeAudio.stop = function (id) { return; };\n    /**\n     * Loops an audio asset infinitely, this only works for complex assets\n     * @param id {string} unique ID for the audio file\n     * @return {Promise<any>}\n     */\n    NativeAudio.loop = function (id) { return; };\n    /**\n     * Unloads an audio file from memory\n     * @param id {string} unique ID for the audio file\n     */\n    NativeAudio.unload = function (id) { return; };\n    /**\n     * Changes the volume for preloaded complex assets.\n     * @param id {string} unique ID for the audio file\n     * @param volume {number} the volume of the audio asset (0.1 to 1.0)\n     */\n    NativeAudio.setVolumeForComplexAsset = function (id, volume) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"preloadSimple\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"preloadComplex\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], NativeAudio, \"play\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"stop\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"loop\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"unload\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeAudio, \"setVolumeForComplexAsset\", null);\n    NativeAudio = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'NativeAudio',\n            plugin: 'cordova-plugin-nativeaudio',\n            pluginRef: 'plugins.NativeAudio',\n            repo: 'https://github.com/floatinghotpot/cordova-plugin-nativeaudio'\n        })\n    ], NativeAudio);\n    return NativeAudio;\n}());\nexports.NativeAudio = NativeAudio;\n//# sourceMappingURL=native-audio.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL25hdGl2ZS1hdWRpby5qcz81MjFmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekIseUJBQXlCLE9BQU87QUFDaEMsaUJBQWlCO0FBQ2pCO0FBQ0EsMERBQTBELFFBQVE7QUFDbEU7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCLHlCQUF5QixPQUFPO0FBQ2hDLHNCQUFzQixPQUFPO0FBQzdCLHNCQUFzQixPQUFPO0FBQzdCLHFCQUFxQjtBQUNyQixpQkFBaUI7QUFDakI7QUFDQSxrRkFBa0YsUUFBUTtBQUMxRjtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekIsZ0NBQWdDLFNBQVM7QUFDekM7QUFDQSx3REFBd0QsUUFBUTtBQUNoRTtBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekI7QUFDQSxzQ0FBc0MsUUFBUTtBQUM5QztBQUNBO0FBQ0Esa0JBQWtCLE9BQU87QUFDekIsZ0JBQWdCO0FBQ2hCO0FBQ0Esc0NBQXNDLFFBQVE7QUFDOUM7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBLGtCQUFrQixPQUFPO0FBQ3pCLHNCQUFzQixPQUFPO0FBQzdCO0FBQ0Esa0VBQWtFLFFBQVE7QUFDMUU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQzNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgTmF0aXZlQXVkaW9cbiAqIEBkZXNjcmlwdGlvbiBOYXRpdmUgQXVkaW8gUGxheWJhY2tcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtOYXRpdmVBdWRpb30gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBOYXRpdmVBdWRpby5wcmVsb2FkU2ltcGxlKCd1bmlxdWVJZDEnLCAncGF0aC90by9maWxlLm1wMycpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqIE5hdGl2ZUF1ZGlvLnByZWxvYWRDb21wbGV4KCd1bmlxdWVJZDInLCAncGF0aC90by9maWxlMi5tcDMnLCAxLCAxLCAwKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gKlxuICogTmF0aXZlQXVkaW8ucGxheSgndW5pcXVlSWQxJykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICogTmF0aXZlQXVkaW8ubG9vcCgndW5pcXVlSWQyJykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICpcbiAqIE5hdGl2ZUF1ZGlvLnNldFZvbHVtZUZvckNvbXBsZXhBc3NldCgndW5pcXVlSWQyJywgMC42KS50aGVuKG9uU3VjY2VzcyxvbkVycm9yKTtcbiAqXG4gKiBOYXRpdmVBdWRpby5zdG9wKCd1bmlxdWVJZDEnKS50aGVuKG9uU3VjY2VzcyxvbkVycm9yKTtcbiAqXG4gKiBOYXRpdmVBdWRpby51bmxvYWQoJ3VuaXF1ZUlkMScpLnRoZW4ob25TdWNjZXNzLG9uRXJyb3IpO1xuICpcbiAqIGBgYFxuICovXG52YXIgTmF0aXZlQXVkaW8gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5hdGl2ZUF1ZGlvKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBMb2FkcyBhbiBhdWRpbyBmaWxlIGludG8gbWVtb3J5LiBPcHRpbWl6ZWQgZm9yIHNob3J0IGNsaXBzIC8gc2luZ2xlIHNob3RzICh1cCB0byBmaXZlIHNlY29uZHMpLiBDYW5ub3QgYmUgc3RvcHBlZCAvIGxvb3BlZC5cbiAgICAgKiBAcGFyYW0gaWQge3N0cmluZ30gdW5pcXVlIElEIGZvciB0aGUgYXVkaW8gZmlsZVxuICAgICAqIEBwYXJhbSBhc3NldFBhdGgge3N0cmluZ30gIHRoZSByZWxhdGl2ZSBwYXRoIG9yIGFic29sdXRlIFVSTCAoaW5sdWRpbmcgaHR0cDovLykgdG8gdGhlIGF1ZGlvIGFzc2V0LlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgTmF0aXZlQXVkaW8ucHJlbG9hZFNpbXBsZSA9IGZ1bmN0aW9uIChpZCwgYXNzZXRQYXRoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBMb2FkcyBhbiBhdWRpbyBmaWxlIGludG8gbWVtb3J5LiBPcHRpbWl6ZWQgZm9yIGJhY2tncm91bmQgbXVzaWMgLyBhbWJpZW50IHNvdW5kLiBVc2VzIGhpZ2hsZXZlbCBuYXRpdmUgQVBJcyB3aXRoIGEgbGFyZ2VyIGZvb3RwcmludC4gKGlPUzogQVZBdWRpb1BsYXllcikuIENhbiBiZSBzdG9wcGVkIC8gbG9vcGVkIGFuZCB1c2VkIHdpdGggbXVsdGlwbGUgdm9pY2VzLiBDYW4gYmUgZmFkZWQgaW4gYW5kIG91dCB1c2luZyB0aGUgZGVsYXkgcGFyYW1ldGVyLlxuICAgICAqIEBwYXJhbSBpZCB7c3RyaW5nfSB1bmlxdWUgSUQgZm9yIHRoZSBhdWRpbyBmaWxlXG4gICAgICogQHBhcmFtIGFzc2V0UGF0aCB7c3RyaW5nfSAgdGhlIHJlbGF0aXZlIHBhdGggb3IgYWJzb2x1dGUgVVJMIChpbmx1ZGluZyBodHRwOi8vKSB0byB0aGUgYXVkaW8gYXNzZXQuXG4gICAgICogQHBhcmFtIHZvbHVtZSB7bnVtYmVyfSB0aGUgdm9sdW1lIG9mIHRoZSBwcmVsb2FkZWQgc291bmQgKDAuMSB0byAxLjApXG4gICAgICogQHBhcmFtIHZvaWNlcyB7bnVtYmVyfSB0aGUgbnVtYmVyIG9mIG11bHRpY2hhbm5lbCB2b2ljZXMgYXZhaWxhYmxlXG4gICAgICogQHBhcmFtIGRlbGF5IHtudW1iZXJ9XG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICAgKi9cbiAgICBOYXRpdmVBdWRpby5wcmVsb2FkQ29tcGxleCA9IGZ1bmN0aW9uIChpZCwgYXNzZXRQYXRoLCB2b2x1bWUsIHZvaWNlcywgZGVsYXkpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFBsYXlzIGFuIGF1ZGlvIGFzc2V0XG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKiBAcGFyYW0gY29tcGxldGVDYWxsYmFjayB7RnVuY3Rpb259IGNhbGxiYWNrIHRvIGJlIGludm9rZWQgd2hlbiBhdWRpbyBpcyBkb25lIHBsYXlpbmdcbiAgICAgKi9cbiAgICBOYXRpdmVBdWRpby5wbGF5ID0gZnVuY3Rpb24gKGlkLCBjb21wbGV0ZUNhbGxiYWNrKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBwbGF5aW5nIGFuIGF1ZGlvXG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKi9cbiAgICBOYXRpdmVBdWRpby5zdG9wID0gZnVuY3Rpb24gKGlkKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBMb29wcyBhbiBhdWRpbyBhc3NldCBpbmZpbml0ZWx5LCB0aGlzIG9ubHkgd29ya3MgZm9yIGNvbXBsZXggYXNzZXRzXG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAgICovXG4gICAgTmF0aXZlQXVkaW8ubG9vcCA9IGZ1bmN0aW9uIChpZCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogVW5sb2FkcyBhbiBhdWRpbyBmaWxlIGZyb20gbWVtb3J5XG4gICAgICogQHBhcmFtIGlkIHtzdHJpbmd9IHVuaXF1ZSBJRCBmb3IgdGhlIGF1ZGlvIGZpbGVcbiAgICAgKi9cbiAgICBOYXRpdmVBdWRpby51bmxvYWQgPSBmdW5jdGlvbiAoaWQpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIENoYW5nZXMgdGhlIHZvbHVtZSBmb3IgcHJlbG9hZGVkIGNvbXBsZXggYXNzZXRzLlxuICAgICAqIEBwYXJhbSBpZCB7c3RyaW5nfSB1bmlxdWUgSUQgZm9yIHRoZSBhdWRpbyBmaWxlXG4gICAgICogQHBhcmFtIHZvbHVtZSB7bnVtYmVyfSB0aGUgdm9sdW1lIG9mIHRoZSBhdWRpbyBhc3NldCAoMC4xIHRvIDEuMClcbiAgICAgKi9cbiAgICBOYXRpdmVBdWRpby5zZXRWb2x1bWVGb3JDb21wbGV4QXNzZXQgPSBmdW5jdGlvbiAoaWQsIHZvbHVtZSkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIE5hdGl2ZUF1ZGlvLCBcInByZWxvYWRTaW1wbGVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIE5hdGl2ZUF1ZGlvLCBcInByZWxvYWRDb21wbGV4XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN1Y2Nlc3NJbmRleDogMSxcbiAgICAgICAgICAgIGVycm9ySW5kZXg6IDJcbiAgICAgICAgfSlcbiAgICBdLCBOYXRpdmVBdWRpbywgXCJwbGF5XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBOYXRpdmVBdWRpbywgXCJzdG9wXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBOYXRpdmVBdWRpbywgXCJsb29wXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBOYXRpdmVBdWRpbywgXCJ1bmxvYWRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIE5hdGl2ZUF1ZGlvLCBcInNldFZvbHVtZUZvckNvbXBsZXhBc3NldFwiLCBudWxsKTtcbiAgICBOYXRpdmVBdWRpbyA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ05hdGl2ZUF1ZGlvJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5hdGl2ZWF1ZGlvJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3BsdWdpbnMuTmF0aXZlQXVkaW8nLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9mbG9hdGluZ2hvdHBvdC9jb3Jkb3ZhLXBsdWdpbi1uYXRpdmVhdWRpbydcbiAgICAgICAgfSlcbiAgICBdLCBOYXRpdmVBdWRpbyk7XG4gICAgcmV0dXJuIE5hdGl2ZUF1ZGlvO1xufSgpKTtcbmV4cG9ydHMuTmF0aXZlQXVkaW8gPSBOYXRpdmVBdWRpbztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdGl2ZS1hdWRpby5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvbmF0aXZlLWF1ZGlvLmpzXG4vLyBtb2R1bGUgaWQgPSA0MzVcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 436 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name NativePageTransitions\n * @description\n * The Native Page Transitions plugin uses native hardware acceleration to animate your transitions between views. You have complete control over the type of transition, the duration, and direction.\n *\n * @usage\n * ```\n * import {NativePageTransitions, TransitionOptions} from 'ionic-native';\n *\n * let options: TransitionOptions = {\n *    direction: 'up',\n *    duration: 500,\n *    slowdownfactor: 3,\n *    slidePixels: 20,\n *    iosdelay: 100,\n *    androiddelay: 150,\n *    winphonedelay: 250,\n *    fixedPixelsTop: 0,\n *    fixedPixelsBottom: 60\n *  };\n *\n * NativePageTransitions.slide(options)\n *   .then(onSuccess)\n *   .catch(onError);\n *\n * ```\n */\nvar NativePageTransitions = (function () {\n    function NativePageTransitions() {\n    }\n    /**\n     * Perform a slide animation\n     * @param options {TransitionOptions} Options for the transition\n     */\n    NativePageTransitions.slide = function (options) { return; };\n    /**\n     * Perform a flip animation\n     * @param options {TransitionOptions} Options for the transition\n     */\n    NativePageTransitions.flip = function (options) { return; };\n    /**\n     * Perform a fade animation\n     * @param options {TransitionOptions} Options for the transition\n     */\n    NativePageTransitions.fade = function (options) { return; };\n    /**\n     * Perform a slide animation\n     * @param options {TransitionOptions} Options for the transition\n     */\n    NativePageTransitions.drawer = function (options) { return; };\n    /**\n     * Perform a slide animation\n     * @param options {TransitionOptions} Options for the transition\n     */\n    NativePageTransitions.curl = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], NativePageTransitions, \"slide\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativePageTransitions, \"flip\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS', 'Android'] })\n    ], NativePageTransitions, \"fade\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS', 'Android'] })\n    ], NativePageTransitions, \"drawer\", null);\n    __decorate([\n        plugin_1.Cordova({ platforms: ['iOS'] })\n    ], NativePageTransitions, \"curl\", null);\n    NativePageTransitions = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'NativePageTransitions',\n            plugin: 'com.telerik.plugins.nativepagetransitions',\n            pluginRef: 'plugins.nativepagetransitions',\n            repo: 'https://github.com/Telerik-Verified-Plugins/NativePageTransitions',\n            platforms: ['iOS', 'Android', 'Windows Phone']\n        })\n    ], NativePageTransitions);\n    return NativePageTransitions;\n}());\nexports.NativePageTransitions = NativePageTransitions;\n//# sourceMappingURL=native-page-transitions.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL25hdGl2ZS1wYWdlLXRyYW5zaXRpb25zLmpzPzFhYTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcseUNBQXlDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQSxzREFBc0QsUUFBUTtBQUM5RDtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBLHFEQUFxRCxRQUFRO0FBQzdEO0FBQ0E7QUFDQSx1QkFBdUIsa0JBQWtCO0FBQ3pDO0FBQ0EscURBQXFELFFBQVE7QUFDN0Q7QUFDQTtBQUNBLHVCQUF1QixrQkFBa0I7QUFDekM7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0EsdUJBQXVCLGtCQUFrQjtBQUN6QztBQUNBLHFEQUFxRCxRQUFRO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRDtBQUNBO0FBQ0EsMEJBQTBCLGdDQUFnQztBQUMxRDtBQUNBO0FBQ0EsMEJBQTBCLHFCQUFxQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MzYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIE5hdGl2ZVBhZ2VUcmFuc2l0aW9uc1xuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgTmF0aXZlIFBhZ2UgVHJhbnNpdGlvbnMgcGx1Z2luIHVzZXMgbmF0aXZlIGhhcmR3YXJlIGFjY2VsZXJhdGlvbiB0byBhbmltYXRlIHlvdXIgdHJhbnNpdGlvbnMgYmV0d2VlbiB2aWV3cy4gWW91IGhhdmUgY29tcGxldGUgY29udHJvbCBvdmVyIHRoZSB0eXBlIG9mIHRyYW5zaXRpb24sIHRoZSBkdXJhdGlvbiwgYW5kIGRpcmVjdGlvbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtOYXRpdmVQYWdlVHJhbnNpdGlvbnMsIFRyYW5zaXRpb25PcHRpb25zfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIGxldCBvcHRpb25zOiBUcmFuc2l0aW9uT3B0aW9ucyA9IHtcbiAqICAgIGRpcmVjdGlvbjogJ3VwJyxcbiAqICAgIGR1cmF0aW9uOiA1MDAsXG4gKiAgICBzbG93ZG93bmZhY3RvcjogMyxcbiAqICAgIHNsaWRlUGl4ZWxzOiAyMCxcbiAqICAgIGlvc2RlbGF5OiAxMDAsXG4gKiAgICBhbmRyb2lkZGVsYXk6IDE1MCxcbiAqICAgIHdpbnBob25lZGVsYXk6IDI1MCxcbiAqICAgIGZpeGVkUGl4ZWxzVG9wOiAwLFxuICogICAgZml4ZWRQaXhlbHNCb3R0b206IDYwXG4gKiAgfTtcbiAqXG4gKiBOYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUob3B0aW9ucylcbiAqICAgLnRoZW4ob25TdWNjZXNzKVxuICogICAuY2F0Y2gob25FcnJvcik7XG4gKlxuICogYGBgXG4gKi9cbnZhciBOYXRpdmVQYWdlVHJhbnNpdGlvbnMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICAgKi9cbiAgICBOYXRpdmVQYWdlVHJhbnNpdGlvbnMuc2xpZGUgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIGZsaXAgYW5pbWF0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMge1RyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgICAqL1xuICAgIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucy5mbGlwID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFBlcmZvcm0gYSBmYWRlIGFuaW1hdGlvblxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICAgKi9cbiAgICBOYXRpdmVQYWdlVHJhbnNpdGlvbnMuZmFkZSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBQZXJmb3JtIGEgc2xpZGUgYW5pbWF0aW9uXG4gICAgICogQHBhcmFtIG9wdGlvbnMge1RyYW5zaXRpb25PcHRpb25zfSBPcHRpb25zIGZvciB0aGUgdHJhbnNpdGlvblxuICAgICAqL1xuICAgIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucy5kcmF3ZXIgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUGVyZm9ybSBhIHNsaWRlIGFuaW1hdGlvblxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtUcmFuc2l0aW9uT3B0aW9uc30gT3B0aW9ucyBmb3IgdGhlIHRyYW5zaXRpb25cbiAgICAgKi9cbiAgICBOYXRpdmVQYWdlVHJhbnNpdGlvbnMuY3VybCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgTmF0aXZlUGFnZVRyYW5zaXRpb25zLCBcInNsaWRlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBOYXRpdmVQYWdlVHJhbnNpdGlvbnMsIFwiZmxpcFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCddIH0pXG4gICAgXSwgTmF0aXZlUGFnZVRyYW5zaXRpb25zLCBcImZhZGVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJywgJ0FuZHJvaWQnXSB9KVxuICAgIF0sIE5hdGl2ZVBhZ2VUcmFuc2l0aW9ucywgXCJkcmF3ZXJcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgICBdLCBOYXRpdmVQYWdlVHJhbnNpdGlvbnMsIFwiY3VybFwiLCBudWxsKTtcbiAgICBOYXRpdmVQYWdlVHJhbnNpdGlvbnMgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdOYXRpdmVQYWdlVHJhbnNpdGlvbnMnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29tLnRlbGVyaWsucGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAncGx1Z2lucy5uYXRpdmVwYWdldHJhbnNpdGlvbnMnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9UZWxlcmlrLVZlcmlmaWVkLVBsdWdpbnMvTmF0aXZlUGFnZVRyYW5zaXRpb25zJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydpT1MnLCAnQW5kcm9pZCcsICdXaW5kb3dzIFBob25lJ11cbiAgICAgICAgfSlcbiAgICBdLCBOYXRpdmVQYWdlVHJhbnNpdGlvbnMpO1xuICAgIHJldHVybiBOYXRpdmVQYWdlVHJhbnNpdGlvbnM7XG59KCkpO1xuZXhwb3J0cy5OYXRpdmVQYWdlVHJhbnNpdGlvbnMgPSBOYXRpdmVQYWdlVHJhbnNpdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uYXRpdmUtcGFnZS10cmFuc2l0aW9ucy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvbmF0aXZlLXBhZ2UtdHJhbnNpdGlvbnMuanNcbi8vIG1vZHVsZSBpZCA9IDQzNlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 437 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name NativeStorage\n * @description Native storage of variables in Android and iOS\n *\n * @usage\n * ```typescript\n * import { NativeStorage } from 'ionic-native';\n *\n * NativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})\n *   .then(\n *     () => console.log('Stored item!'),\n *     error => console.error('Error storing item', error)\n *   );\n *\n * NativeStorage.getItem('myitem')\n *   .then(\n *     data => console.log(data),\n *     error => console.error(error)\n *   );\n * ```\n */\nvar NativeStorage = (function () {\n    function NativeStorage() {\n    }\n    /**\n     * Stores a value\n     * @param reference {string}\n     * @param value\n     */\n    NativeStorage.setItem = function (reference, value) { return; };\n    /**\n     * Gets a stored item\n     * @param reference {string}\n     */\n    NativeStorage.getItem = function (reference) { return; };\n    /**\n     * Removes a single stored item\n     * @param reference {string}\n     */\n    NativeStorage.remove = function (reference) { return; };\n    /**\n     * Removes all stored values.\n     */\n    NativeStorage.clear = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeStorage, \"setItem\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeStorage, \"getItem\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeStorage, \"remove\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NativeStorage, \"clear\", null);\n    NativeStorage = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'NativeStorage',\n            plugin: 'cordova-plugin-nativestorage',\n            pluginRef: 'NativeStorage',\n            repo: 'https://github.com/TheCocoaProject/cordova-plugin-nativestorage'\n        })\n    ], NativeStorage);\n    return NativeStorage;\n}());\nexports.NativeStorage = NativeStorage;\n//# sourceMappingURL=nativestorage.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL25hdGl2ZXN0b3JhZ2UuanM/NWJmNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0Esb0NBQW9DLG1EQUFtRDtBQUN2RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSx5REFBeUQsUUFBUTtBQUNqRTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0Esa0RBQWtELFFBQVE7QUFDMUQ7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDM3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBOYXRpdmVTdG9yYWdlXG4gKiBAZGVzY3JpcHRpb24gTmF0aXZlIHN0b3JhZ2Ugb2YgdmFyaWFibGVzIGluIEFuZHJvaWQgYW5kIGlPU1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmF0aXZlU3RvcmFnZSB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogTmF0aXZlU3RvcmFnZS5zZXRJdGVtKCdteWl0ZW0nLCB7cHJvcGVydHk6ICd2YWx1ZScsIGFub3RoZXJQcm9wZXJ0eTogJ2Fub3RoZXJWYWx1ZSd9KVxuICogICAudGhlbihcbiAqICAgICAoKSA9PiBjb25zb2xlLmxvZygnU3RvcmVkIGl0ZW0hJyksXG4gKiAgICAgZXJyb3IgPT4gY29uc29sZS5lcnJvcignRXJyb3Igc3RvcmluZyBpdGVtJywgZXJyb3IpXG4gKiAgICk7XG4gKlxuICogTmF0aXZlU3RvcmFnZS5nZXRJdGVtKCdteWl0ZW0nKVxuICogICAudGhlbihcbiAqICAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAgIGVycm9yID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gKiAgICk7XG4gKiBgYGBcbiAqL1xudmFyIE5hdGl2ZVN0b3JhZ2UgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIE5hdGl2ZVN0b3JhZ2UoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0b3JlcyBhIHZhbHVlXG4gICAgICogQHBhcmFtIHJlZmVyZW5jZSB7c3RyaW5nfVxuICAgICAqIEBwYXJhbSB2YWx1ZVxuICAgICAqL1xuICAgIE5hdGl2ZVN0b3JhZ2Uuc2V0SXRlbSA9IGZ1bmN0aW9uIChyZWZlcmVuY2UsIHZhbHVlKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3RvcmVkIGl0ZW1cbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIHtzdHJpbmd9XG4gICAgICovXG4gICAgTmF0aXZlU3RvcmFnZS5nZXRJdGVtID0gZnVuY3Rpb24gKHJlZmVyZW5jZSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyBhIHNpbmdsZSBzdG9yZWQgaXRlbVxuICAgICAqIEBwYXJhbSByZWZlcmVuY2Uge3N0cmluZ31cbiAgICAgKi9cbiAgICBOYXRpdmVTdG9yYWdlLnJlbW92ZSA9IGZ1bmN0aW9uIChyZWZlcmVuY2UpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHN0b3JlZCB2YWx1ZXMuXG4gICAgICovXG4gICAgTmF0aXZlU3RvcmFnZS5jbGVhciA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBOYXRpdmVTdG9yYWdlLCBcInNldEl0ZW1cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIE5hdGl2ZVN0b3JhZ2UsIFwiZ2V0SXRlbVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgTmF0aXZlU3RvcmFnZSwgXCJyZW1vdmVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIE5hdGl2ZVN0b3JhZ2UsIFwiY2xlYXJcIiwgbnVsbCk7XG4gICAgTmF0aXZlU3RvcmFnZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ05hdGl2ZVN0b3JhZ2UnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbmF0aXZlc3RvcmFnZScsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdOYXRpdmVTdG9yYWdlJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVGhlQ29jb2FQcm9qZWN0L2NvcmRvdmEtcGx1Z2luLW5hdGl2ZXN0b3JhZ2UnXG4gICAgICAgIH0pXG4gICAgXSwgTmF0aXZlU3RvcmFnZSk7XG4gICAgcmV0dXJuIE5hdGl2ZVN0b3JhZ2U7XG59KCkpO1xuZXhwb3J0cy5OYXRpdmVTdG9yYWdlID0gTmF0aXZlU3RvcmFnZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdGl2ZXN0b3JhZ2UuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL25hdGl2ZXN0b3JhZ2UuanNcbi8vIG1vZHVsZSBpZCA9IDQzN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 438 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Market\n * @description\n * Opens an app's page in the market place (Google Play, App Store)\n *\n * @usage\n * ```\n * import {Market} from 'ionic-native';\n *\n * Market.open('your.package.name');\n *\n * ```\n */\nvar Market = (function () {\n    function Market() {\n    }\n    /**\n     * Opens an app in Google Play / App Store\n     * @param appId {string} Package name\n     * @param callbacks {Object} Optional callbacks\n     */\n    Market.open = function (appId, callbacks) { };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Market, \"open\", null);\n    Market = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Market',\n            plugin: 'cordova-plugin-market',\n            pluginRef: 'plugins.market',\n            repo: 'https://github.com/xmartlabs/cordova-plugin-market'\n        })\n    ], Market);\n    return Market;\n}());\nexports.Market = Market;\n//# sourceMappingURL=market.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL21hcmtldC5qcz9lYzVkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1Qix5QkFBeUIsT0FBTztBQUNoQztBQUNBLCtDQUErQztBQUMvQztBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0MzguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIE1hcmtldFxuICogQGRlc2NyaXB0aW9uXG4gKiBPcGVucyBhbiBhcHAncyBwYWdlIGluIHRoZSBtYXJrZXQgcGxhY2UgKEdvb2dsZSBQbGF5LCBBcHAgU3RvcmUpXG4gKlxuICogQHVzYWdlXG4gKiBgYGBcbiAqIGltcG9ydCB7TWFya2V0fSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIE1hcmtldC5vcGVuKCd5b3VyLnBhY2thZ2UubmFtZScpO1xuICpcbiAqIGBgYFxuICovXG52YXIgTWFya2V0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNYXJrZXQoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9wZW5zIGFuIGFwcCBpbiBHb29nbGUgUGxheSAvIEFwcCBTdG9yZVxuICAgICAqIEBwYXJhbSBhcHBJZCB7c3RyaW5nfSBQYWNrYWdlIG5hbWVcbiAgICAgKiBAcGFyYW0gY2FsbGJhY2tzIHtPYmplY3R9IE9wdGlvbmFsIGNhbGxiYWNrc1xuICAgICAqL1xuICAgIE1hcmtldC5vcGVuID0gZnVuY3Rpb24gKGFwcElkLCBjYWxsYmFja3MpIHsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBNYXJrZXQsIFwib3BlblwiLCBudWxsKTtcbiAgICBNYXJrZXQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdNYXJrZXQnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tbWFya2V0JyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3BsdWdpbnMubWFya2V0JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20veG1hcnRsYWJzL2NvcmRvdmEtcGx1Z2luLW1hcmtldCdcbiAgICAgICAgfSlcbiAgICBdLCBNYXJrZXQpO1xuICAgIHJldHVybiBNYXJrZXQ7XG59KCkpO1xuZXhwb3J0cy5NYXJrZXQgPSBNYXJrZXQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1tYXJrZXQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL21hcmtldC5qc1xuLy8gbW9kdWxlIGlkID0gNDM4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 439 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name MediaPlugin\n * @description\n * @usage\n * ```typescript\n * import { MediaPlugin } from 'ionic-native';\n *\n *\n *\n * // Create a MediaPlugin instance.  Expects path to file or url as argument\n * var file = new MediaPlugin('path/to/file.mp3');\n *\n * // Catch the Success & Error Output\n * // Platform Quirks\n * // iOS calls success on completion of playback only\n * // Android calls success on completion of playback AND on release()\n * file.init.then(() => {\n *   console.log('Playback Finished');\n * }, (err) => {\n *   console.log('somthing went wrong! error code: ' + err.code + ' message: ' + err.message);\n * });\n *\n * // play the file\n * file.play();\n *\n * // pause the file\n * file.pause();\n *\n * // get current playback position\n * file.getCurrentPosition().then((position) => {\n *   console.log(position);\n * });\n *\n * // get file duration\n * file.getDuration().then((duration) => {\n *   console.log(position);\n * });\n *\n * // skip to 10 seconds (expects int value in ms)\n * file.seekTo(10000);\n *\n * // stop playing the file\n * file.stop();\n *\n * // release the native audio resource\n * // Platform Quirks:\n * // iOS simply create a new instance and the old one will be overwritten\n * // Android you must call release() to destroy instances of media when you are done\n * file.release();\n *\n * // Recording to a file\n * var newFile = new MediaPlugin('path/to/file.mp3');\n * newFile.startRecord();\n *\n * newFile.stopRecord();\n *\n *\n *\n * ```\n */\nvar MediaPlugin = (function () {\n    // Methods\n    /**\n     * Open a media file\n     * @param src {string} A URI containing the audio content.\n     * @param onStatusUpdate {Function} A callback function to be invoked when the status of the file changes\n     */\n    function MediaPlugin(src, onStatusUpdate) {\n        var _this = this;\n        if (!!plugin_1.getPlugin('Media')) {\n            this.init = new Promise(function (resolve, reject) {\n                _this._objectInstance = new Media(src, resolve, reject, onStatusUpdate);\n            });\n        }\n        else {\n            plugin_1.pluginWarn({\n                pluginName: 'MediaPlugin',\n                plugin: 'cordova-plugin-media'\n            });\n        }\n    }\n    /**\n     * Get the current amplitude of the current recording.\n     * @returns {Promise} Returns a promise with the amplitude of the current recording\n     */\n    MediaPlugin.prototype.getCurrentAmplitude = function () { return; };\n    /**\n     * Get the current position within an audio file. Also updates the Media object's position parameter.\n     * @returns {Promise} Returns a promise with the position of the current recording\n     */\n    MediaPlugin.prototype.getCurrentPosition = function () { return; };\n    /**\n     * Get the duration of an audio file in seconds. If the duration is unknown, it returns a value of -1.\n     * @returns {Promise} Returns a promise with the duration of the current recording\n     */\n    MediaPlugin.prototype.getDuration = function () { return; };\n    /**\n     * Starts or resumes playing an audio file.\n     */\n    MediaPlugin.prototype.play = function (iosOptions) { };\n    /**\n     * Pauses playing an audio file.\n     */\n    MediaPlugin.prototype.pause = function () { };\n    /**\n     * Releases the underlying operating system's audio resources. This is particularly important for Android, since there are a finite amount of OpenCore instances for media playback. Applications should call the release function for any Media resource that is no longer needed.\n     */\n    MediaPlugin.prototype.release = function () { };\n    /**\n     * Sets the current position within an audio file.\n     * @param {number} milliseconds The time position you want to set for the current audio file\n     */\n    MediaPlugin.prototype.seekTo = function (milliseconds) { };\n    /**\n     * Set the volume for an audio file.\n     * @param volume The volume to set for playback. The value must be within the range of 0.0 to 1.0.\n     */\n    MediaPlugin.prototype.setVolume = function (volume) { };\n    /**\n     * Starts recording an audio file.\n     */\n    MediaPlugin.prototype.startRecord = function () { };\n    /**\n     * Stops recording\n     */\n    MediaPlugin.prototype.stopRecord = function () { };\n    /**\n     * Stops playing an audio file.\n     */\n    MediaPlugin.prototype.stop = function () { };\n    // Constants\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_NONE = 0;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_STARTING = 1;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_RUNNING = 2;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_PAUSED = 3;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_STOPPED = 4;\n    // error codes\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_ERR_ABORTED = 1;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_ERR_NETWORK = 2;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_ERR_DECODE = 3;\n    /**\n     * @private\n     */\n    MediaPlugin.MEDIA_ERR_NONE_SUPPORTED = 4;\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], MediaPlugin.prototype, \"getCurrentAmplitude\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], MediaPlugin.prototype, \"getCurrentPosition\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"getDuration\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"play\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"pause\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"release\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"seekTo\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"setVolume\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"startRecord\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"stopRecord\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], MediaPlugin.prototype, \"stop\", null);\n    MediaPlugin = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'MediaPlugin',\n            repo: 'https://github.com/apache/cordova-plugin-media',\n            plugin: 'cordova-plugin-media',\n            pluginRef: 'Media'\n        })\n    ], MediaPlugin);\n    return MediaPlugin;\n}());\nexports.MediaPlugin = MediaPlugin;\n//# sourceMappingURL=media.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 440 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Mixpanel\n * @description\n * Cordova Plugin that wraps Mixpanel SDK for Android and iOS\n *\n * @usage\n * ```\n * import {Mixpanel} from 'ionic-native';\n *\n * Mixpanel.init(token)\n *   .then(onSuccess)\n *   .catch(onError);\n *\n * ```\n */\nvar Mixpanel = (function () {\n    function Mixpanel() {\n    }\n    /**\n     *\n     * @param aliasId {string}\n     * @param originalId {string}\n     * @returns {Promise<any>}\n     */\n    Mixpanel.alias = function (aliasId, originalId) { return; };\n    /**\n     *\n     * @returns {Promise<any>}\n     */\n    Mixpanel.distinctId = function () { return; };\n    /**\n     *\n     */\n    Mixpanel.flush = function () { return; };\n    /**\n     *\n     * @param distinctId {string}\n     * @returns {Promise<any>}\n     */\n    Mixpanel.identify = function (distinctId) { return; };\n    /**\n     *\n     * @param token {string}\n     * @returns {Promise<any>}\n     */\n    Mixpanel.init = function (token) { return; };\n    /**\n     *\n     * @param superProperties\n     * @returns {Promise<any>}\n     */\n    Mixpanel.registerSuperProperties = function (superProperties) { return; };\n    /**\n     *\n     * @returns {Promise<any>}\n     */\n    Mixpanel.reset = function () { return; };\n    /**\n     *\n     * @param eventName\n     * @param eventProperties\n     */\n    Mixpanel.track = function (eventName, eventProperties) { return; };\n    /**\n     *\n     * @returns {Promise<any>}\n     */\n    Mixpanel.showSurvey = function () { return; };\n    Object.defineProperty(Mixpanel, \"people\", {\n        /**\n         *\n         * @returns {MixpanelPeople}\n         */\n        get: function () {\n            return MixpanelPeople;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ;\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"alias\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"distinctId\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"flush\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"identify\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"init\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"registerSuperProperties\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"reset\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"track\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Mixpanel, \"showSurvey\", null);\n    Mixpanel = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Mixpanel',\n            plugin: 'cordova-plugin-mixpanel',\n            pluginRef: 'mixpanel',\n            repo: 'https://github.com/samzilverberg/cordova-mixpanel-plugin'\n        })\n    ], Mixpanel);\n    return Mixpanel;\n}());\nexports.Mixpanel = Mixpanel;\n/**\n * @private\n */\nvar MixpanelPeople = (function () {\n    function MixpanelPeople() {\n    }\n    /**\n     *\n     * @param distinctId {string}\n     * @return {Promise<any>}\n     */\n    MixpanelPeople.identify = function (distinctId) { return; };\n    /**\n     *\n     * @param peopleProperties {string}\n     * @return {Promise<any>}\n     */\n    MixpanelPeople.increment = function (peopleProperties) { return; };\n    /**\n     *\n     * @param pushId\n     * @return {Promise<any>}\n     */\n    MixpanelPeople.setPushId = function (pushId) { return; };\n    /**\n     *\n     * @param peopleProperties\n     * @return {Promise<any>}\n     */\n    MixpanelPeople.set = function (peopleProperties) { return; };\n    /**\n     *\n     * @param peopleProperties\n     * @return {Promise<any>}\n     */\n    MixpanelPeople.setOnce = function (peopleProperties) { return; };\n    /**\n     * @private\n     */\n    MixpanelPeople.plugin = 'cordova-plugin-mixpanel';\n    /**\n     * @private\n     */\n    MixpanelPeople.pluginRef = 'mixpanel.people';\n    __decorate([\n        plugin_1.Cordova()\n    ], MixpanelPeople, \"identify\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], MixpanelPeople, \"increment\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], MixpanelPeople, \"setPushId\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], MixpanelPeople, \"set\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], MixpanelPeople, \"setOnce\", null);\n    return MixpanelPeople;\n}());\nexports.MixpanelPeople = MixpanelPeople;\n//# sourceMappingURL=mixpanel.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 441 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name MusicControls\n * @description\n * Music controls for Cordova applications.\n * Display a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.\n * Handle also headset event (plug, unplug, headset button).\n *\n * @usage\n * ```\n * import {MusicControls} from 'ionic-native';\n *\n * MusicControls.create({\n *   track       : 'Time is Running Out',        // optional, default : ''\n *   artist      : 'Muse',                       // optional, default : ''\n *   cover       : 'albums/absolution.jpg',      // optional, default : nothing\n *   // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n *   //           or a remote url ('http://...', 'https://...', 'ftp://...')\n *   isPlaying   : true,                         // optional, default : true\n *   dismissable : true,                         // optional, default : false\n *\n *   // hide previous/next/close buttons:\n *   hasPrev   : false,      // show previous button, optional, default: true\n *   hasNext   : false,      // show next button, optional, default: true\n *   hasClose  : true,       // show close button, optional, default: false\n *\n *   // Android only, optional\n *   // text displayed in the status bar when the notification (and the ticker) are updated\n *   ticker    : 'Now playing \"Time is Running Out\"'\n *  });\n *\n *  MusicControls.subscribe().subscribe(action => {\n *\n *    switch(action) {\n *        case 'music-controls-next':\n *            // Do something\n *            break;\n *        case 'music-controls-previous':\n *            // Do something\n *            break;\n *        case 'music-controls-pause':\n *            // Do something\n *            break;\n *        case 'music-controls-play':\n *            // Do something\n *            break;\n *        case 'music-controls-destroy':\n *            // Do something\n *            break;\n *\n *        // Headset events (Android only)\n *        case 'music-controls-media-button' :\n *            // Do something\n *            break;\n *        case 'music-controls-headset-unplugged':\n *            // Do something\n *            break;\n *        case 'music-controls-headset-plugged':\n *            // Do something\n *            break;\n *        default:\n *            break;\n *    }\n *\n *  });\n *\n *  MusicControls.listen(); // activates the observable above\n *\n *  MusicControls.updateIsPlaying(true);\n *\n *\n * ```\n */\nvar MusicControls = (function () {\n    function MusicControls() {\n    }\n    /**\n     * Create the media controls\n     * @param options {MusicControlsOptions}\n     * @returns {Promise<any>}\n     */\n    MusicControls.create = function (options) { return; };\n    /**\n     * Destroy the media controller\n     * @returns {Promise<any>}\n     */\n    MusicControls.destroy = function () { return; };\n    /**\n     * Subscribe to the events of the media controller\n     * @returns {Observable<any>}\n     */\n    MusicControls.subscribe = function () { return; };\n    /**\n     * Start listening for events, this enables the Observable from the subscribe method\n     */\n    MusicControls.listen = function () { };\n    /**\n     * Toggle play/pause:\n     * @param isPlaying {boolean}\n     */\n    MusicControls.updateIsPlaying = function (isPlaying) { };\n    __decorate([\n        plugin_1.Cordova()\n    ], MusicControls, \"create\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], MusicControls, \"destroy\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], MusicControls, \"subscribe\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], MusicControls, \"listen\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], MusicControls, \"updateIsPlaying\", null);\n    MusicControls = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'MusicControls',\n            plugin: 'cordova-plugin-music-controls',\n            pluginRef: 'MusicControls',\n            repo: 'https://github.com/homerours/cordova-music-controls-plugin'\n        })\n    ], MusicControls);\n    return MusicControls;\n}());\nexports.MusicControls = MusicControls;\n//# sourceMappingURL=music-controls.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 442 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Network\n * @description\n * Requires Cordova plugin: cordova-plugin-network-information. For more info, please see the [Network plugin docs](https://github.com/apache/cordova-plugin-network-information).\n *\n * @usage\n * ```typescript\n * import { Network } from 'ionic-native';\n *\n * // watch network for a disconnect\n * let disconnectSubscription = Network.onDisconnect().subscribe(() => {\n *   console.log('network was disconnected :-(');\n * });\n *\n * // stop disconnect watch\n * disconnectSubscription.unsubscribe();\n *\n *\n * // watch network for a connection\n * let connectSubscription = Network.onConnect().subscribe(() => {\n *   console.log('network connected!');\n\n *   // We just got a connection but we need to wait briefly\n *\n   // before we determine the connection type.  Might need to wait\n\n *   // prior to doing any api requests as well.\n *   setTimeout(() => {\n *     if (Network.connection === 'wifi') {\n *       console.log('we got a wifi connection, woohoo!');\n *     }\n *   }, 3000);\n * });\n *\n * // stop connect watch\n * connectSubscription.unsubscribe();\n *\n * ```\n * @advanced\n * The `connection` property will return one of the following connection types: `unknown`, `ethernet`, `wifi`, `2g`, `3g`, `4g`, `cellular`, `none`\n */\nvar Network = (function () {\n    function Network() {\n    }\n    Object.defineProperty(Network, \"connection\", {\n        /**\n         * Return the network connection type\n         */\n        get: function () { return navigator.connection.type; },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Get notified when the device goes offline\n     * @returns {Observable<any>} Returns an observable.\n     */\n    Network.onDisconnect = function () { return; };\n    /**\n     * Get notified when the device goes online\n     * @returns {Observable<any>} Returns an observable.\n     */\n    Network.onConnect = function () { return; };\n    __decorate([\n        plugin_1.CordovaProperty\n    ], Network, \"connection\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'offline'\n        })\n    ], Network, \"onDisconnect\", null);\n    __decorate([\n        plugin_1.Cordova({\n            eventObservable: true,\n            event: 'online'\n        })\n    ], Network, \"onConnect\", null);\n    Network = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Network',\n            plugin: 'cordova-plugin-network-information',\n            repo: 'https://github.com/apache/cordova-plugin-network-information',\n            platforms: ['Amazon Fire OS', 'iOS', 'Android', 'BlackBerry 10', 'Windows Phone 7', 'Windows Phone 8', 'Windows', 'Firefox OS', 'Browser'],\n            pluginRef: 'navigator.connection'\n        })\n    ], Network);\n    return Network;\n}());\nexports.Network = Network;\n//# sourceMappingURL=network.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL25ldHdvcmsuanM/ZTBjNSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrQ0FBa0MsRUFBRTtBQUM5RDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQSxxQ0FBcUMsUUFBUTtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ0Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgTmV0d29ya1xuICogQGRlc2NyaXB0aW9uXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tbmV0d29yay1pbmZvcm1hdGlvbi4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW05ldHdvcmsgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tbmV0d29yay1pbmZvcm1hdGlvbikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBOZXR3b3JrIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiAvLyB3YXRjaCBuZXR3b3JrIGZvciBhIGRpc2Nvbm5lY3RcbiAqIGxldCBkaXNjb25uZWN0U3Vic2NyaXB0aW9uID0gTmV0d29yay5vbkRpc2Nvbm5lY3QoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnbmV0d29yayB3YXMgZGlzY29ubmVjdGVkIDotKCcpO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBkaXNjb25uZWN0IHdhdGNoXG4gKiBkaXNjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICpcbiAqIC8vIHdhdGNoIG5ldHdvcmsgZm9yIGEgY29ubmVjdGlvblxuICogbGV0IGNvbm5lY3RTdWJzY3JpcHRpb24gPSBOZXR3b3JrLm9uQ29ubmVjdCgpLnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIGNvbnNvbGUubG9nKCduZXR3b3JrIGNvbm5lY3RlZCEnKTtcblxuICogICAvLyBXZSBqdXN0IGdvdCBhIGNvbm5lY3Rpb24gYnV0IHdlIG5lZWQgdG8gd2FpdCBicmllZmx5XG4gKlxuICAgLy8gYmVmb3JlIHdlIGRldGVybWluZSB0aGUgY29ubmVjdGlvbiB0eXBlLiAgTWlnaHQgbmVlZCB0byB3YWl0XG5cbiAqICAgLy8gcHJpb3IgdG8gZG9pbmcgYW55IGFwaSByZXF1ZXN0cyBhcyB3ZWxsLlxuICogICBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgICBpZiAoTmV0d29yay5jb25uZWN0aW9uID09PSAnd2lmaScpIHtcbiAqICAgICAgIGNvbnNvbGUubG9nKCd3ZSBnb3QgYSB3aWZpIGNvbm5lY3Rpb24sIHdvb2hvbyEnKTtcbiAqICAgICB9XG4gKiAgIH0sIDMwMDApO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBjb25uZWN0IHdhdGNoXG4gKiBjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICogYGBgXG4gKiBAYWR2YW5jZWRcbiAqIFRoZSBgY29ubmVjdGlvbmAgcHJvcGVydHkgd2lsbCByZXR1cm4gb25lIG9mIHRoZSBmb2xsb3dpbmcgY29ubmVjdGlvbiB0eXBlczogYHVua25vd25gLCBgZXRoZXJuZXRgLCBgd2lmaWAsIGAyZ2AsIGAzZ2AsIGA0Z2AsIGBjZWxsdWxhcmAsIGBub25lYFxuICovXG52YXIgTmV0d29yayA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTmV0d29yaygpIHtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5ldHdvcmssIFwiY29ubmVjdGlvblwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm4gdGhlIG5ldHdvcmsgY29ubmVjdGlvbiB0eXBlXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5hdmlnYXRvci5jb25uZWN0aW9uLnR5cGU7IH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEdldCBub3RpZmllZCB3aGVuIHRoZSBkZXZpY2UgZ29lcyBvZmZsaW5lXG4gICAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlLlxuICAgICAqL1xuICAgIE5ldHdvcmsub25EaXNjb25uZWN0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogR2V0IG5vdGlmaWVkIHdoZW4gdGhlIGRldmljZSBnb2VzIG9ubGluZVxuICAgICAqIEByZXR1cm5zIHtPYnNlcnZhYmxlPGFueT59IFJldHVybnMgYW4gb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICBOZXR3b3JrLm9uQ29ubmVjdCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhUHJvcGVydHlcbiAgICBdLCBOZXR3b3JrLCBcImNvbm5lY3Rpb25cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZXZlbnQ6ICdvZmZsaW5lJ1xuICAgICAgICB9KVxuICAgIF0sIE5ldHdvcmssIFwib25EaXNjb25uZWN0XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGV2ZW50OiAnb25saW5lJ1xuICAgICAgICB9KVxuICAgIF0sIE5ldHdvcmssIFwib25Db25uZWN0XCIsIG51bGwpO1xuICAgIE5ldHdvcmsgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdOZXR3b3JrJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24nLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tbmV0d29yay1pbmZvcm1hdGlvbicsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnaU9TJywgJ0FuZHJvaWQnLCAnQmxhY2tCZXJyeSAxMCcsICdXaW5kb3dzIFBob25lIDcnLCAnV2luZG93cyBQaG9uZSA4JywgJ1dpbmRvd3MnLCAnRmlyZWZveCBPUycsICdCcm93c2VyJ10sXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuY29ubmVjdGlvbidcbiAgICAgICAgfSlcbiAgICBdLCBOZXR3b3JrKTtcbiAgICByZXR1cm4gTmV0d29yaztcbn0oKSk7XG5leHBvcnRzLk5ldHdvcmsgPSBOZXR3b3JrO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bmV0d29yay5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvbmV0d29yay5qc1xuLy8gbW9kdWxlIGlkID0gNDQyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 443 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name NFC\n * @description\n * The NFC plugin allows you to read and write NFC tags. You can also beam to, and receive from, other NFC enabled devices.\n *\n * Use to\n * - read data from NFC tags\n * - write data to NFC tags\n * - send data to other NFC enabled devices\n * - receive data from NFC devices\n *\n * This plugin uses NDEF (NFC Data Exchange Format) for maximum compatibilty between NFC devices, tag types, and operating systems.\n *\n * @usage\n * ```\n * import {NFC, Ndef} from 'ionic-native';\n *\n * let message = Ndef.textRecord('Hello world');\n * NFC.share([message]).then(onSuccess).catch(onError);\n *\n * ```\n */\nvar NFC = (function () {\n    function NFC() {\n    }\n    /**\n     * Registers an event listener for any NDEF tag.\n     * @param onSuccess\n     * @param onFailure\n     * @return {Promise<any>}\n     */\n    NFC.addNdefListener = function (onSuccess, onFailure) { return; };\n    /**\n     * Registers an event listener for tags matching any tag type.\n     * @param mimeType\n     * @param onSuccess\n     * @param onFailure\n     * @return {Promise<any>}\n     */\n    NFC.addTagDiscoveredListener = function (mimeType, onSuccess, onFailure) { return; };\n    /**\n     * Registers an event listener for NDEF tags matching a specified MIME type.\n     * @param onSuccess\n     * @param onFailure\n     * @return {Promise<any>}\n     */\n    NFC.addMimeTypeListener = function (onSuccess, onFailure) { return; };\n    /**\n     * Registers an event listener for formatable NDEF tags.\n     * @param onSuccess\n     * @param onFailure\n     * @return {Promise<any>}\n     */\n    NFC.addNdefFormatableListener = function (onSuccess, onFailure) { return; };\n    /**\n     * Qrites an NdefMessage to a NFC tag.\n     * @param message {any[]}\n     * @return {Promise<any>}\n     */\n    NFC.write = function (message) { return; };\n    /**\n     * Makes a NFC tag read only. **Warning** this is permanent.\n     * @return {Promise<any>}\n     */\n    NFC.makeReadyOnly = function () { return; };\n    /**\n     * Shares an NDEF Message via peer-to-peer.\n     * @param message An array of NDEF Records.\n     * @return {Promise<any>}\n     */\n    NFC.share = function (message) { return; };\n    /**\n     * Stop sharing NDEF data via peer-to-peer.\n     * @return {Promise<any>}\n     */\n    NFC.unshare = function () { return; };\n    /**\n     * Erase a NDEF tag\n     */\n    NFC.erase = function () { return; };\n    /**\n     * Send a file to another device via NFC handover.\n     * @param uris A URI as a String, or an array of URIs.\n     * @return {Promise<any>}\n     */\n    NFC.handover = function (uris) { return; };\n    /**\n     * Stop sharing NDEF data via NFC handover.\n     * @return {Promise<any>}\n     */\n    NFC.stopHandover = function () { return; };\n    /**\n     * Show the NFC settings on the device.\n     * @return {Promise<any>}\n     */\n    NFC.showSettings = function () { return; };\n    /**\n     * Check if NFC is available and enabled on this device.\n     * @return {Promise<any>}\n     */\n    NFC.enabled = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            successIndex: 0,\n            errorIndex: 3,\n            clearFunction: 'removeNdefListener',\n            clearWithArgs: true\n        })\n    ], NFC, \"addNdefListener\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            successIndex: 1,\n            errorIndex: 4,\n            clearFunction: 'removeTagDiscoveredListener',\n            clearWithArgs: true\n        })\n    ], NFC, \"addTagDiscoveredListener\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            successIndex: 0,\n            errorIndex: 3,\n            clearFunction: 'removeMimeTypeListener',\n            clearWithArgs: true\n        })\n    ], NFC, \"addMimeTypeListener\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            successIndex: 0,\n            errorIndex: 3\n        })\n    ], NFC, \"addNdefFormatableListener\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"write\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"makeReadyOnly\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"share\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"unshare\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"erase\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"handover\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"stopHandover\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"showSettings\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], NFC, \"enabled\", null);\n    NFC = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'NFC',\n            plugin: 'phonegap-nfc',\n            pluginRef: 'nfc',\n            repo: 'https://github.com/chariotsolutions/phonegap-nfc'\n        })\n    ], NFC);\n    return NFC;\n}());\nexports.NFC = NFC;\n/**\n * @private\n */\nvar Ndef = (function () {\n    function Ndef() {\n    }\n    Ndef.uriRecord = function (uri) { return; };\n    Ndef.textRecord = function (text) { return; };\n    Ndef.mimeMediaRecord = function (mimeType, payload) { return; };\n    Ndef.androidApplicationRecord = function (packageName) { return; };\n    /**\n     * @private\n     */\n    Ndef.pluginName = 'NFC';\n    /**\n     * @private\n     */\n    Ndef.plugin = 'phonegap-nfc';\n    /**\n     * @private\n     */\n    Ndef.pluginRef = 'ndef';\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Ndef, \"uriRecord\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Ndef, \"textRecord\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Ndef, \"mimeMediaRecord\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], Ndef, \"androidApplicationRecord\", null);\n    return Ndef;\n}());\nexports.Ndef = Ndef;\n//# sourceMappingURL=nfc.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 444 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name OneSignal\n * @description\n * The OneSignal plugin is an client implementation for using the [OneSignal](https://onesignal.com/) Service.\n * OneSignal is a simple implementation for delivering push notifications.\n *\n * Requires Cordova plugin: `onesignal-cordova-plugin`. For more info, please see the [OneSignal Cordova Docs](https://documentation.onesignal.com/docs/phonegap-sdk-installation).\n *\n * @usage\n * ```typescript\n * import { OneSignal } from 'ionic-native';\n *\n * OneSignal.startInit('b2f7f966-d8cc-11e4-bed1-df8f05be55ba', '703322744261');\n *\n * OneSignal.inFocusDisplaying(OneSignal.OSInFocusDisplayOption.InAppAlert);\n *\n * OneSignal.handleNotificationReceived().subscribe(() => {\n *  // do something when notification is received\n * });\n *\n * OneSignal.handleNotificationOpened().subscribe(() => {\n *   // do something when a notification is opened\n * });\n *\n * OneSignal.endInit();\n * ```\n *\n */\nvar OneSignal = (function () {\n    function OneSignal() {\n    }\n    /**\n     * Start the initialization process. Once you are done configuring OneSignal, call the endInit function.\n     *\n     * @param {string} appId Your AppId from your OneSignal app\n     * @param {string} googleProjectNumber The Google Project Number (which you can get from the Google Developer Portal) and the autoRegister option.\n     */\n    OneSignal.startInit = function (appId, googleProjectNumber) { return; };\n    /**\n     * Callback to run when a notification is received\n     * @return {Observable<any>}\n     */\n    OneSignal.handleNotificationReceived = function () { return; };\n    /**\n     * Callback to run when a notification is opened\n     * @return {Observable<any>}\n     */\n    OneSignal.handleNotificationOpened = function () { return; };\n    /**\n     *\n     * @param settings\n     */\n    OneSignal.iOSSettings = function (settings) { return; };\n    OneSignal.endInit = function () { return; };\n    /**\n     * Retrieve a list of tags that have been set on the user from the OneSignal server.\n     *\n     * @returns {Promise} Returns a Promise that resolves when tags are recieved.\n     */\n    OneSignal.getTags = function () { return; };\n    /**\n     * Lets you retrieve the OneSignal user id and device token.\n     * Your handler is called after the device is successfully registered with OneSignal.\n     *\n     * @returns {Promise} Returns a Promise that reolves if the device was successfully registered.\n     * It returns a JSON with `userId`and `pushToken`.\n     */\n    OneSignal.getIds = function () { return; };\n    /**\n     * Tag a user based on an app event of your choosing so later you can create segments on [onesignal.com](https://onesignal.com/) to target these users.\n     * Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.\n     *\n     * @param {string} Key of your choosing to create or update.\n     * @param {string} Value to set on the key. NOTE: Passing in a blank String deletes the key, you can also call deleteTag.\n     */\n    OneSignal.sendTag = function (key, value) { };\n    /**\n     * Tag a user based on an app event of your choosing so later you can create segments on [onesignal.com](https://onesignal.com/) to target these users.\n     * Recommend using sendTags over sendTag if you need to set more than one tag on a user at a time.\n     *\n     * @param {string} Pass a json object with key/value pairs like: {key: \"value\", key2: \"value2\"}\n     */\n    OneSignal.sendTags = function (json) { };\n    /**\n     * Deletes a tag that was previously set on a user with `sendTag` or `sendTags`. Use `deleteTags` if you need to delete more than one.\n     *\n     * @param {string} Key to remove.\n     */\n    OneSignal.deleteTag = function (key) { };\n    /**\n     * Deletes tags that were previously set on a user with `sendTag` or `sendTags`.\n     *\n     * @param {Array<string>} Keys to remove.\n     */\n    OneSignal.deleteTags = function (keys) { };\n    /**\n     * Call this when you would like to prompt an iOS user to accept push notifications with the default system prompt.\n     * Only use if you passed false to autoRegister when calling init.\n     */\n    OneSignal.registerForPushNotifications = function () { };\n    /**\n    * Warning:\n    * Only applies to Android and Amazon. You can call this from your UI from a button press for example to give your user's options for your notifications.\n    *\n    * By default OneSignal always vibrates the device when a notification is displayed unless the device is in a total silent mode.\n    * Passing false means that the device will only vibrate lightly when the device is in it's vibrate only mode.\n    *\n    * @param {boolean} false to disable vibrate, true to re-enable it.\n    */\n    OneSignal.enableVibrate = function (enable) { };\n    /**\n    * Warning:\n    * Only applies to Android and Amazon. You can call this from your UI from a button press for example to give your user's options for your notifications.\n    *\n    * By default OneSignal plays the system's default notification sound when the device's notification system volume is turned on.\n    * Passing false means that the device will only vibrate unless the device is set to a total silent mode.\n    *\n    * @param {boolean} false to disable sound, true to re-enable it.\n    */\n    OneSignal.enableSound = function (enable) { };\n    /**\n    *\n    * Setting to control how OneSignal notifications will be shown when one is received while your app is in focus. By default this is set to inAppAlert, which can be helpful during development.\n    *\n    * @param {number} displayOption Options are 0 = None, 1 = InAppAlert, and 2 = Notification.\n    */\n    OneSignal.inFocusDisplaying = function (displayOption) { };\n    /**\n    * You can call this method with false to opt users out of receiving all notifications through OneSignal.\n    * You can pass true later to opt users back into notifications.\n    *\n    * @param {boolean} enable\n    */\n    OneSignal.setSubscription = function (enable) { };\n    /**\n    *\n    * @param {notificationObj} Parameters see POST [documentation](https://documentation.onesignal.com/v2.0/docs/notifications-create-notification)\n    * @returns {Promise} Returns a Promise that resolves if the notification was send successfully.\n    */\n    OneSignal.postNotification = function (notificationObj) { return; };\n    /**\n    * Prompts the user for location permission to allow geotagging based on the \"Location radius\" filter on the OneSignal dashboard.\n    */\n    OneSignal.promptLocation = function () { };\n    /**\n     *\n     * @param email {string}\n     */\n    OneSignal.syncHashedEmail = function (email) { };\n    /**\n    * Enable logging to help debug if you run into an issue setting up OneSignal.\n    * The logging levels are as follows: 0 = None, 1= Fatal, 2 = Errors, 3 = Warnings, 4 = Info, 5 = Debug, 6 = Verbose\n  \n    * The higher the value the more information is shown.\n    *\n    * @param {loglevel} contains two properties: logLevel (for console logging) and visualLevel (for dialog messages)\n    */\n    OneSignal.setLogLevel = function (logLevel) { };\n    /**\n     * constants to use in inFocusDisplaying()\n     */\n    OneSignal.OSInFocusDisplayOption = {\n        None: 0,\n        InAppAlert: 1,\n        Notification: 2\n    };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"startInit\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], OneSignal, \"handleNotificationReceived\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], OneSignal, \"handleNotificationOpened\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"iOSSettings\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"endInit\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], OneSignal, \"getTags\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], OneSignal, \"getIds\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"sendTag\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"sendTags\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"deleteTag\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"deleteTags\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"registerForPushNotifications\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"enableVibrate\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"enableSound\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"inFocusDisplaying\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"setSubscription\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], OneSignal, \"postNotification\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"promptLocation\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"syncHashedEmail\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], OneSignal, \"setLogLevel\", null);\n    OneSignal = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'OneSignal',\n            plugin: 'onesignal-cordova-plugin',\n            pluginRef: 'plugins.OneSignal',\n            repo: 'https://github.com/OneSignal/OneSignal-Cordova-SDK'\n        })\n    ], OneSignal);\n    return OneSignal;\n}());\nexports.OneSignal = OneSignal;\n//# sourceMappingURL=onesignal.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 445 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Photo Viewer\n * @description This plugin can display your image in full screen with the ability to pan, zoom, and share the image.\n * @usage\n * ```typescript\n * import { PhotoViewer } from 'ionic-native';\n *\n * PhotoViewer.show('https://mysite.com/path/to/image.jpg');\n *\n * PhotoViewer.show('https://mysite.com/path/to/image.jpg', 'My image title', {share: false});\n * ```\n */\nvar PhotoViewer = (function () {\n    function PhotoViewer() {\n    }\n    /**\n     * Shows an image in full screen\n     * @param url {string} URL or path to image\n     * @param title {string}\n     * @param options {any}\n     */\n    PhotoViewer.show = function (url, title, options) { };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], PhotoViewer, \"show\", null);\n    PhotoViewer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'PhotoViewer',\n            plugin: 'com-sarriaroman-photoviewer',\n            pluginRef: 'PhotoViewer',\n            repo: 'https://github.com/sarriaroman/photoviewer'\n        })\n    ], PhotoViewer);\n    return PhotoViewer;\n}());\nexports.PhotoViewer = PhotoViewer;\n//# sourceMappingURL=photo-viewer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3Bob3RvLXZpZXdlci5qcz9mYWY5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsY0FBYztBQUN6QjtBQUNBO0FBQ0E7QUFDQSwrRUFBK0UsYUFBYTtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixPQUFPO0FBQzFCLHFCQUFxQjtBQUNyQix1QkFBdUI7QUFDdkI7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDQ1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBQaG90byBWaWV3ZXJcbiAqIEBkZXNjcmlwdGlvbiBUaGlzIHBsdWdpbiBjYW4gZGlzcGxheSB5b3VyIGltYWdlIGluIGZ1bGwgc2NyZWVuIHdpdGggdGhlIGFiaWxpdHkgdG8gcGFuLCB6b29tLCBhbmQgc2hhcmUgdGhlIGltYWdlLlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBQaG90b1ZpZXdlciB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogUGhvdG9WaWV3ZXIuc2hvdygnaHR0cHM6Ly9teXNpdGUuY29tL3BhdGgvdG8vaW1hZ2UuanBnJyk7XG4gKlxuICogUGhvdG9WaWV3ZXIuc2hvdygnaHR0cHM6Ly9teXNpdGUuY29tL3BhdGgvdG8vaW1hZ2UuanBnJywgJ015IGltYWdlIHRpdGxlJywge3NoYXJlOiBmYWxzZX0pO1xuICogYGBgXG4gKi9cbnZhciBQaG90b1ZpZXdlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGhvdG9WaWV3ZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3dzIGFuIGltYWdlIGluIGZ1bGwgc2NyZWVuXG4gICAgICogQHBhcmFtIHVybCB7c3RyaW5nfSBVUkwgb3IgcGF0aCB0byBpbWFnZVxuICAgICAqIEBwYXJhbSB0aXRsZSB7c3RyaW5nfVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHthbnl9XG4gICAgICovXG4gICAgUGhvdG9WaWV3ZXIuc2hvdyA9IGZ1bmN0aW9uICh1cmwsIHRpdGxlLCBvcHRpb25zKSB7IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgUGhvdG9WaWV3ZXIsIFwic2hvd1wiLCBudWxsKTtcbiAgICBQaG90b1ZpZXdlciA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1Bob3RvVmlld2VyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvbS1zYXJyaWFyb21hbi1waG90b3ZpZXdlcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdQaG90b1ZpZXdlcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3NhcnJpYXJvbWFuL3Bob3Rvdmlld2VyJ1xuICAgICAgICB9KVxuICAgIF0sIFBob3RvVmlld2VyKTtcbiAgICByZXR1cm4gUGhvdG9WaWV3ZXI7XG59KCkpO1xuZXhwb3J0cy5QaG90b1ZpZXdlciA9IFBob3RvVmlld2VyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGhvdG8tdmlld2VyLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9waG90by12aWV3ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ0NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 446 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Screen Orientation\n * @description\n * Cordova plugin to set/lock the screen orientation in a common way for iOS, Android, WP8 and Blackberry 10.\n * This plugin is based on an early version of Screen Orientation API so the api does not currently match the current spec.\n *\n * Requires Cordova plugin: `cordova-plugin-screen-orientation`. For more info, please see the [Screen Orientation plugin docs](https://github.com/apache/cordova-plugin-screen-orientation).\n *\n * @usage\n * ```typescript\n * import { ScreenOrientation } from 'ionic-native';\n *\n *\n * // set to either landscape\n * ScreenOrientation.lockOrientation('landscape');\n *\n * // allow user rotate\n * ScreenOrientation.unlockOrientation();\n * ```\n *\n * @advanced\n *\n * Accepted orientation values:\n *\n * | Value                         | Description                                                                  |\n * |-------------------------------|------------------------------------------------------------------------------|\n * | portrait-primary              | The orientation is in the primary portrait mode.                             |\n * | portrait-secondary            | The orientation is in the secondary portrait mode.                           |\n * | landscape-primary             | The orientation is in the primary landscape mode.                            |\n * | landscape-secondary           | The orientation is in the secondary landscape mode.                          |\n * | portrait                      | The orientation is either portrait-primary or portrait-secondary (sensor).   |\n * | landscape                     | The orientation is either landscape-primary or landscape-secondary (sensor). |\n *\n */\nvar ScreenOrientation = (function () {\n    function ScreenOrientation() {\n    }\n    /**\n     * Lock the orientation to the passed value.\n     * See below for accepted values\n     * @param {orientation} The orientation which should be locked. Accepted values see table below.\n     */\n    ScreenOrientation.lockOrientation = function (orientation) { };\n    /**\n     * Unlock and allow all orientations.\n     */\n    ScreenOrientation.unlockOrientation = function () { };\n    Object.defineProperty(ScreenOrientation, \"orientation\", {\n        /*\n         * Get the current orientation of the device.\n         */\n        get: function () {\n            return window.screen.orientation;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], ScreenOrientation, \"lockOrientation\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], ScreenOrientation, \"unlockOrientation\", null);\n    __decorate([\n        plugin_1.CordovaProperty\n    ], ScreenOrientation, \"orientation\", null);\n    ScreenOrientation = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ScreenOrientation',\n            plugin: 'cordova-plugin-screen-orientation',\n            pluginRef: 'window.screen',\n            repo: 'https://github.com/apache/cordova-plugin-screen-orientation',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], ScreenOrientation);\n    return ScreenOrientation;\n}());\nexports.ScreenOrientation = ScreenOrientation;\n//# sourceMappingURL=screen-orientation.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NjcmVlbi1vcmllbnRhdGlvbi5qcz8xNWRjIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLG9CQUFvQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxZQUFZO0FBQzNCO0FBQ0EsZ0VBQWdFO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NDYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFNjcmVlbiBPcmllbnRhdGlvblxuICogQGRlc2NyaXB0aW9uXG4gKiBDb3Jkb3ZhIHBsdWdpbiB0byBzZXQvbG9jayB0aGUgc2NyZWVuIG9yaWVudGF0aW9uIGluIGEgY29tbW9uIHdheSBmb3IgaU9TLCBBbmRyb2lkLCBXUDggYW5kIEJsYWNrYmVycnkgMTAuXG4gKiBUaGlzIHBsdWdpbiBpcyBiYXNlZCBvbiBhbiBlYXJseSB2ZXJzaW9uIG9mIFNjcmVlbiBPcmllbnRhdGlvbiBBUEkgc28gdGhlIGFwaSBkb2VzIG5vdCBjdXJyZW50bHkgbWF0Y2ggdGhlIGN1cnJlbnQgc3BlYy5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXNjcmVlbi1vcmllbnRhdGlvbmAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtTY3JlZW4gT3JpZW50YXRpb24gcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9hcGFjaGUvY29yZG92YS1wbHVnaW4tc2NyZWVuLW9yaWVudGF0aW9uKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNjcmVlbk9yaWVudGF0aW9uIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogLy8gc2V0IHRvIGVpdGhlciBsYW5kc2NhcGVcbiAqIFNjcmVlbk9yaWVudGF0aW9uLmxvY2tPcmllbnRhdGlvbignbGFuZHNjYXBlJyk7XG4gKlxuICogLy8gYWxsb3cgdXNlciByb3RhdGVcbiAqIFNjcmVlbk9yaWVudGF0aW9uLnVubG9ja09yaWVudGF0aW9uKCk7XG4gKiBgYGBcbiAqXG4gKiBAYWR2YW5jZWRcbiAqXG4gKiBBY2NlcHRlZCBvcmllbnRhdGlvbiB2YWx1ZXM6XG4gKlxuICogfCBWYWx1ZSAgICAgICAgICAgICAgICAgICAgICAgICB8IERlc2NyaXB0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCBwb3J0cmFpdC1wcmltYXJ5ICAgICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBpbiB0aGUgcHJpbWFyeSBwb3J0cmFpdCBtb2RlLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBwb3J0cmFpdC1zZWNvbmRhcnkgICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBpbiB0aGUgc2Vjb25kYXJ5IHBvcnRyYWl0IG1vZGUuICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBsYW5kc2NhcGUtcHJpbWFyeSAgICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBpbiB0aGUgcHJpbWFyeSBsYW5kc2NhcGUgbW9kZS4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBsYW5kc2NhcGUtc2Vjb25kYXJ5ICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBpbiB0aGUgc2Vjb25kYXJ5IGxhbmRzY2FwZSBtb2RlLiAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCBwb3J0cmFpdCAgICAgICAgICAgICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBlaXRoZXIgcG9ydHJhaXQtcHJpbWFyeSBvciBwb3J0cmFpdC1zZWNvbmRhcnkgKHNlbnNvcikuICAgfFxuICogfCBsYW5kc2NhcGUgICAgICAgICAgICAgICAgICAgICB8IFRoZSBvcmllbnRhdGlvbiBpcyBlaXRoZXIgbGFuZHNjYXBlLXByaW1hcnkgb3IgbGFuZHNjYXBlLXNlY29uZGFyeSAoc2Vuc29yKS4gfFxuICpcbiAqL1xudmFyIFNjcmVlbk9yaWVudGF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JlZW5PcmllbnRhdGlvbigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9jayB0aGUgb3JpZW50YXRpb24gdG8gdGhlIHBhc3NlZCB2YWx1ZS5cbiAgICAgKiBTZWUgYmVsb3cgZm9yIGFjY2VwdGVkIHZhbHVlc1xuICAgICAqIEBwYXJhbSB7b3JpZW50YXRpb259IFRoZSBvcmllbnRhdGlvbiB3aGljaCBzaG91bGQgYmUgbG9ja2VkLiBBY2NlcHRlZCB2YWx1ZXMgc2VlIHRhYmxlIGJlbG93LlxuICAgICAqL1xuICAgIFNjcmVlbk9yaWVudGF0aW9uLmxvY2tPcmllbnRhdGlvbiA9IGZ1bmN0aW9uIChvcmllbnRhdGlvbikgeyB9O1xuICAgIC8qKlxuICAgICAqIFVubG9jayBhbmQgYWxsb3cgYWxsIG9yaWVudGF0aW9ucy5cbiAgICAgKi9cbiAgICBTY3JlZW5PcmllbnRhdGlvbi51bmxvY2tPcmllbnRhdGlvbiA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU2NyZWVuT3JpZW50YXRpb24sIFwib3JpZW50YXRpb25cIiwge1xuICAgICAgICAvKlxuICAgICAgICAgKiBHZXQgdGhlIGN1cnJlbnQgb3JpZW50YXRpb24gb2YgdGhlIGRldmljZS5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5zY3JlZW4ub3JpZW50YXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIFNjcmVlbk9yaWVudGF0aW9uLCBcImxvY2tPcmllbnRhdGlvblwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBTY3JlZW5PcmllbnRhdGlvbiwgXCJ1bmxvY2tPcmllbnRhdGlvblwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YVByb3BlcnR5XG4gICAgXSwgU2NyZWVuT3JpZW50YXRpb24sIFwib3JpZW50YXRpb25cIiwgbnVsbCk7XG4gICAgU2NyZWVuT3JpZW50YXRpb24gPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdTY3JlZW5PcmllbnRhdGlvbicsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zY3JlZW4tb3JpZW50YXRpb24nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnd2luZG93LnNjcmVlbicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1zY3JlZW4tb3JpZW50YXRpb24nLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgUGhvbmUgOCddXG4gICAgICAgIH0pXG4gICAgXSwgU2NyZWVuT3JpZW50YXRpb24pO1xuICAgIHJldHVybiBTY3JlZW5PcmllbnRhdGlvbjtcbn0oKSk7XG5leHBvcnRzLlNjcmVlbk9yaWVudGF0aW9uID0gU2NyZWVuT3JpZW50YXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY3JlZW4tb3JpZW50YXRpb24uanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NjcmVlbi1vcmllbnRhdGlvbi5qc1xuLy8gbW9kdWxlIGlkID0gNDQ2XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 447 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name PayPal\n * @description\n * PayPal plugin for Cordova/Ionic Applications\n *\n * @usage\n * ```\n * import {PayPal, PayPalPayment, PayPalConfiguration} from \"ionic-native\";\n *\n * PayPal.init({\n *   \"PayPalEnvironmentProduction\": \"YOUR_PRODUCTION_CLIENT_ID\",\n *   \"PayPalEnvironmentSandbox\": \"YOUR_SANDBOX_CLIENT_ID\"\n * }).then(() => {\n *   // Environments: PayPalEnvironmentNoNetwork, PayPalEnvironmentSandbox, PayPalEnvironmentProduction\n *   PayPal.prepareToRender('PayPalEnvironmentSandbox', new PayPalConfiguration({\n *     // Only needed if you get an \"Internal Service Error\" after PayPal login!\n *     //payPalShippingAddressOption: 2 // PayPalShippingAddressOptionPayPal\n *   })).then(() => {\n *     let payment = new PayPalPayment('3.33', 'USD', 'Description', 'sale');\n *     PayPal.renderSinglePaymentUI(payment).then(() => {\n *       // Successfully paid\n *\n *       // Example sandbox response\n *       //\n *       // {\n *       //   \"client\": {\n *       //     \"environment\": \"sandbox\",\n *       //     \"product_name\": \"PayPal iOS SDK\",\n *       //     \"paypal_sdk_version\": \"2.16.0\",\n *       //     \"platform\": \"iOS\"\n *       //   },\n *       //   \"response_type\": \"payment\",\n *       //   \"response\": {\n *       //     \"id\": \"PAY-1AB23456CD789012EF34GHIJ\",\n *       //     \"state\": \"approved\",\n *       //     \"create_time\": \"2016-10-03T13:33:33Z\",\n *       //     \"intent\": \"sale\"\n *       //   }\n *       // }\n *     }, () => {\n *       // Error or render dialog closed without being successful\n *     });\n *   }, () => {\n *     // Error in configuration\n *   });\n * }, () => {\n *   // Error in initialization, maybe PayPal isn't supported or something else\n * });\n * ```\n * @interfaces\n * PayPalEnvironment\n * PayPalConfigurationOptions\n * @classes\n * PayPalPayment\n * PayPalItem\n * PayPalPaymentDetails\n * PayPalShippingAddress\n */\nvar PayPal = (function () {\n    function PayPal() {\n    }\n    /**\n     * Retrieve the version of the PayPal iOS SDK library. Useful when contacting support.\n     */\n    PayPal.version = function () { return; };\n    /**\n     * You must preconnect to PayPal to prepare the device for processing payments.\n     * This improves the user experience, by making the presentation of the\n     * UI faster. The preconnect is valid for a limited time, so\n     * the recommended time to preconnect is on page load.\n     *\n     * @param {PayPalEnvironment} clientIdsForEnvironments: set of client ids for environments\n     */\n    PayPal.init = function (clientIdsForEnvironments) { return; };\n    /**\n     * You must preconnect to PayPal to prepare the device for processing payments.\n     * This improves the user experience, by making the presentation of the UI faster.\n     * The preconnect is valid for a limited time, so the recommended time to preconnect is on page load.\n     *\n     * @param {String} environment: available options are \"PayPalEnvironmentNoNetwork\", \"PayPalEnvironmentProduction\" and \"PayPalEnvironmentSandbox\"\n     * @param {PayPalConfiguration} configuration: PayPalConfiguration object, for Future Payments merchantName, merchantPrivacyPolicyURL and merchantUserAgreementURL must be set be set\n     **/\n    PayPal.prepareToRender = function (environment, configuration) { return; };\n    /**\n     * Start PayPal UI to collect payment from the user.\n     * See https://developer.paypal.com/webapps/developer/docs/integration/mobile/ios-integration-guide/\n     * for more documentation of the params.\n     *\n     * @param {PayPalPayment} payment PayPalPayment object\n     */\n    PayPal.renderSinglePaymentUI = function (payment) { return; };\n    /**\n     * Once a user has consented to future payments, when the user subsequently initiates a PayPal payment\n     * from their device to be completed by your server, PayPal uses a Correlation ID to verify that the\n     * payment is originating from a valid, user-consented device+application.\n     * This helps reduce fraud and decrease declines.\n     * This method MUST be called prior to initiating a pre-consented payment (a \"future payment\") from a mobile device.\n     * Pass the result to your server, to include in the payment request sent to PayPal.\n     * Do not otherwise cache or store this value.\n     */\n    PayPal.clientMetadataID = function () { return; };\n    /**\n     * Please Read Docs on Future Payments at https://github.com/paypal/PayPal-iOS-SDK#future-payments\n     */\n    PayPal.renderFuturePaymentUI = function () { return; };\n    /**\n     * Please Read Docs on Profile Sharing at https://github.com/paypal/PayPal-iOS-SDK#profile-sharing\n     *\n     * @param {Array<string>} scopes scopes Set of requested scope-values. Accepted scopes are: openid, profile, address, email, phone, futurepayments and paypalattributes\n     * See https://developer.paypal.com/docs/integration/direct/identity/attributes/ for more details\n     **/\n    PayPal.renderProfileSharingUI = function (scopes) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"version\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"init\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"prepareToRender\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"renderSinglePaymentUI\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"clientMetadataID\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"renderFuturePaymentUI\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PayPal, \"renderProfileSharingUI\", null);\n    PayPal = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'PayPal',\n            plugin: 'com.paypal.cordova.mobilesdk',\n            pluginRef: 'PayPalMobile',\n            repo: 'https://github.com/paypal/PayPal-Cordova-Plugin'\n        })\n    ], PayPal);\n    return PayPal;\n}());\nexports.PayPal = PayPal;\n/**\n * @private\n */\nvar PayPalPayment = (function () {\n    function PayPalPayment(amount, currency, shortDescription, intent, details) {\n        /**\n         * Optional Build Notation code (\"BN code\"), obtained from partnerprogram@paypal.com,\n         * for your tracking purposes.\n         */\n        this.bnCode = 'PhoneGap_SP';\n        this.amount = amount;\n        this.currency = currency;\n        this.shortDescription = shortDescription;\n        this.intent = intent;\n        this.details = details;\n    }\n    return PayPalPayment;\n}());\nexports.PayPalPayment = PayPalPayment;\n/**\n * @private\n */\nvar PayPalItem = (function () {\n    /**\n     * The PayPalItem class defines an optional itemization for a payment.\n     * @see https://developer.paypal.com/docs/api/#item-object for more details.\n     * @param {String} name: Name of the item. 127 characters max\n     * @param {Number} quantity: Number of units. 10 characters max.\n     * @param {String} price: Unit price for this item 10 characters max.\n     * May be negative for \"coupon\" etc\n     * @param {String} currency: ISO standard currency code.\n     * @param {String} sku: The stock keeping unit for this item. 50 characters max (optional)\n     */\n    function PayPalItem(name, quantity, price, currency, sku) {\n        this.name = name;\n        this.quantity = quantity;\n        this.price = price;\n        this.currency = currency;\n        this.sku = sku;\n    }\n    return PayPalItem;\n}());\nexports.PayPalItem = PayPalItem;\n/**\n * @private\n */\nvar PayPalPaymentDetails = (function () {\n    /**\n     * The PayPalPaymentDetails class defines optional amount details.\n     * @param {String} subtotal: Sub-total (amount) of items being paid for. 10 characters max with support for 2 decimal places.\n     * @param {String} shipping: Amount charged for shipping. 10 characters max with support for 2 decimal places.\n     * @param {String} tax: Amount charged for tax. 10 characters max with support for 2 decimal places.\n     */\n    function PayPalPaymentDetails(subtotal, shipping, tax) {\n        this.subtotal = subtotal;\n        this.shipping = shipping;\n        this.tax = tax;\n    }\n    return PayPalPaymentDetails;\n}());\nexports.PayPalPaymentDetails = PayPalPaymentDetails;\n/**\n * @private\n */\nvar PayPalConfiguration = (function () {\n    /**\n     * You use a PayPalConfiguration object to configure many aspects of how the SDK behaves.\n     * see defaults for options available\n     */\n    function PayPalConfiguration(options) {\n        var defaults = {\n            defaultUserEmail: null,\n            defaultUserPhoneCountryCode: null,\n            defaultUserPhoneNumber: null,\n            merchantName: null,\n            merchantPrivacyPolicyURL: null,\n            merchantUserAgreementURL: null,\n            acceptCreditCards: true,\n            payPalShippingAddressOption: 0,\n            rememberUser: true,\n            languageOrLocale: null,\n            disableBlurWhenBackgrounding: false,\n            presentingInPopover: false,\n            forceDefaultsInSandbox: false,\n            sandboxUserPassword: null,\n            sandboxUserPin: null\n        };\n        if (options && typeof options === 'object') {\n            for (var i in options) {\n                if (defaults.hasOwnProperty(i)) {\n                    defaults[i] = options[i];\n                }\n            }\n        }\n        return defaults;\n    }\n    return PayPalConfiguration;\n}());\nexports.PayPalConfiguration = PayPalConfiguration;\n/**\n * @private\n */\nvar PayPalShippingAddress = (function () {\n    /**\n     * See the documentation of the individual properties for more detail.\n     * @param {String} recipientName: Name of the recipient at this address. 50 characters max.\n     * @param {String} line1: Line 1 of the address (e.g., Number, street, etc). 100 characters max.\n     * @param {String} line2: Line 2 of the address (e.g., Suite, apt #, etc). 100 characters max. Optional.\n     * @param {String} city: City name. 50 characters max.\n     * @param {String} state: 2-letter code for US states, and the equivalent for other countries. 100 characters max. Required in certain countries.\n     * @param {String} postalCode: ZIP code or equivalent is usually required for countries that have them. 20 characters max. Required in certain countries.\n     * @param {String} countryCode: 2-letter country code. 2 characters max.\n     */\n    function PayPalShippingAddress(recipientName, line1, line2, city, state, postalCode, countryCode) {\n        this.recipientName = recipientName;\n        this.line1 = line1;\n        this.line2 = line2;\n        this.city = city;\n        this.state = state;\n        this.postalCode = postalCode;\n        this.countryCode = countryCode;\n    }\n    return PayPalShippingAddress;\n}());\nexports.PayPalShippingAddress = PayPalShippingAddress;\n//# sourceMappingURL=pay-pal.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 448 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Pin Dialog\n * @description\n *\n * @usage\n * ```typescript\n * import { PinDialog } from 'ionic-native';\n *\n *\n * PinDialog.prompt('Enter your PIN', 'Verify PIN', ['OK', 'Cancel'])\n *   .then(\n *     (result: any) => {\n *       if (result.buttonIndex == 1) console.log('User clicked OK, value is: ', result.input1);\n *       else if(result.buttonIndex == 2) console.log('User cancelled');\n *     }\n *   );\n * ```\n */\nvar PinDialog = (function () {\n    function PinDialog() {\n    }\n    /**\n     * Show pin dialog\n     * @param {string} message Message to show the user\n     * @param {string} title Title of the dialog\n     * @param {string[]} buttons Buttons to show\n     */\n    PinDialog.prompt = function (message, title, buttons) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1\n        })\n    ], PinDialog, \"prompt\", null);\n    PinDialog = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'PinDialog',\n            plugin: 'cordova-plugin-pin-dialog',\n            pluginRef: 'plugins.pinDialog',\n            repo: 'https://github.com/Paldom/PinDialog'\n        })\n    ], PinDialog);\n    return PinDialog;\n}());\nexports.PinDialog = PinDialog;\n//# sourceMappingURL=pin-dialog.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3Bpbi1kaWFsb2cuanM/MzYwZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxTQUFTO0FBQ3hCO0FBQ0EsMkRBQTJELFFBQVE7QUFDbkU7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NDguanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFBpbiBEaWFsb2dcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUGluRGlhbG9nIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogUGluRGlhbG9nLnByb21wdCgnRW50ZXIgeW91ciBQSU4nLCAnVmVyaWZ5IFBJTicsIFsnT0snLCAnQ2FuY2VsJ10pXG4gKiAgIC50aGVuKFxuICogICAgIChyZXN1bHQ6IGFueSkgPT4ge1xuICogICAgICAgaWYgKHJlc3VsdC5idXR0b25JbmRleCA9PSAxKSBjb25zb2xlLmxvZygnVXNlciBjbGlja2VkIE9LLCB2YWx1ZSBpczogJywgcmVzdWx0LmlucHV0MSk7XG4gKiAgICAgICBlbHNlIGlmKHJlc3VsdC5idXR0b25JbmRleCA9PSAyKSBjb25zb2xlLmxvZygnVXNlciBjYW5jZWxsZWQnKTtcbiAqICAgICB9XG4gKiAgICk7XG4gKiBgYGBcbiAqL1xudmFyIFBpbkRpYWxvZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUGluRGlhbG9nKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTaG93IHBpbiBkaWFsb2dcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSBNZXNzYWdlIHRvIHNob3cgdGhlIHVzZXJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gdGl0bGUgVGl0bGUgb2YgdGhlIGRpYWxvZ1xuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IGJ1dHRvbnMgQnV0dG9ucyB0byBzaG93XG4gICAgICovXG4gICAgUGluRGlhbG9nLnByb21wdCA9IGZ1bmN0aW9uIChtZXNzYWdlLCB0aXRsZSwgYnV0dG9ucykgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3VjY2Vzc0luZGV4OiAxXG4gICAgICAgIH0pXG4gICAgXSwgUGluRGlhbG9nLCBcInByb21wdFwiLCBudWxsKTtcbiAgICBQaW5EaWFsb2cgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdQaW5EaWFsb2cnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcGluLWRpYWxvZycsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLnBpbkRpYWxvZycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL1BhbGRvbS9QaW5EaWFsb2cnXG4gICAgICAgIH0pXG4gICAgXSwgUGluRGlhbG9nKTtcbiAgICByZXR1cm4gUGluRGlhbG9nO1xufSgpKTtcbmV4cG9ydHMuUGluRGlhbG9nID0gUGluRGlhbG9nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGluLWRpYWxvZy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvcGluLWRpYWxvZy5qc1xuLy8gbW9kdWxlIGlkID0gNDQ4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 449 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name PowerManagement\n * @description\n * The PowerManagement plugin offers access to the devices power-management functionality.\n * It should be used for applications which keep running for a long time without any user interaction.\n *\n * @usage\n * ```\n * import {PowerManagement} from 'ionic-native';\n *\n * PowerManagement.acquire()\n *   .then(onSuccess)\n *   .catch(onError);\n *\n * ```\n */\nvar PowerManagement = (function () {\n    function PowerManagement() {\n    }\n    /**\n     * Acquire a wakelock by calling this.\n     */\n    PowerManagement.acquire = function () { return; };\n    /**\n     * This acquires a partial wakelock, allowing the screen to be dimmed.\n     */\n    PowerManagement.dim = function () { return; };\n    /**\n     * Release the wakelock. It's important to do this when you're finished with the wakelock, to avoid unnecessary battery drain.\n     */\n    PowerManagement.release = function () { return; };\n    /**\n     * By default, the plugin will automatically release a wakelock when your app is paused (e.g. when the screen is turned off, or the user switches to another app).\n     * It will reacquire the wakelock upon app resume. If you would prefer to disable this behaviour, you can use this function.\n     * @param set {boolean}\n     */\n    PowerManagement.setReleaseOnPause = function (set) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], PowerManagement, \"acquire\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PowerManagement, \"dim\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PowerManagement, \"release\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], PowerManagement, \"setReleaseOnPause\", null);\n    PowerManagement = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'PowerManagement',\n            plugin: 'cordova-plugin-powermanagement-orig',\n            pluginRef: 'powerManagement',\n            repo: 'https://github.com/Viras-/cordova-plugin-powermanagement'\n        })\n    ], PowerManagement);\n    return PowerManagement;\n}());\nexports.PowerManagement = PowerManagement;\n//# sourceMappingURL=power-management.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3Bvd2VyLW1hbmFnZW1lbnQuanM/ZDc5ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBLHdEQUF3RCxRQUFRO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDQ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBQb3dlck1hbmFnZW1lbnRcbiAqIEBkZXNjcmlwdGlvblxuICogVGhlIFBvd2VyTWFuYWdlbWVudCBwbHVnaW4gb2ZmZXJzIGFjY2VzcyB0byB0aGUgZGV2aWNlcyBwb3dlci1tYW5hZ2VtZW50IGZ1bmN0aW9uYWxpdHkuXG4gKiBJdCBzaG91bGQgYmUgdXNlZCBmb3IgYXBwbGljYXRpb25zIHdoaWNoIGtlZXAgcnVubmluZyBmb3IgYSBsb25nIHRpbWUgd2l0aG91dCBhbnkgdXNlciBpbnRlcmFjdGlvbi5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtQb3dlck1hbmFnZW1lbnR9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogUG93ZXJNYW5hZ2VtZW50LmFjcXVpcmUoKVxuICogICAudGhlbihvblN1Y2Nlc3MpXG4gKiAgIC5jYXRjaChvbkVycm9yKTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIFBvd2VyTWFuYWdlbWVudCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gUG93ZXJNYW5hZ2VtZW50KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBY3F1aXJlIGEgd2FrZWxvY2sgYnkgY2FsbGluZyB0aGlzLlxuICAgICAqL1xuICAgIFBvd2VyTWFuYWdlbWVudC5hY3F1aXJlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogVGhpcyBhY3F1aXJlcyBhIHBhcnRpYWwgd2FrZWxvY2ssIGFsbG93aW5nIHRoZSBzY3JlZW4gdG8gYmUgZGltbWVkLlxuICAgICAqL1xuICAgIFBvd2VyTWFuYWdlbWVudC5kaW0gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBSZWxlYXNlIHRoZSB3YWtlbG9jay4gSXQncyBpbXBvcnRhbnQgdG8gZG8gdGhpcyB3aGVuIHlvdSdyZSBmaW5pc2hlZCB3aXRoIHRoZSB3YWtlbG9jaywgdG8gYXZvaWQgdW5uZWNlc3NhcnkgYmF0dGVyeSBkcmFpbi5cbiAgICAgKi9cbiAgICBQb3dlck1hbmFnZW1lbnQucmVsZWFzZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEJ5IGRlZmF1bHQsIHRoZSBwbHVnaW4gd2lsbCBhdXRvbWF0aWNhbGx5IHJlbGVhc2UgYSB3YWtlbG9jayB3aGVuIHlvdXIgYXBwIGlzIHBhdXNlZCAoZS5nLiB3aGVuIHRoZSBzY3JlZW4gaXMgdHVybmVkIG9mZiwgb3IgdGhlIHVzZXIgc3dpdGNoZXMgdG8gYW5vdGhlciBhcHApLlxuICAgICAqIEl0IHdpbGwgcmVhY3F1aXJlIHRoZSB3YWtlbG9jayB1cG9uIGFwcCByZXN1bWUuIElmIHlvdSB3b3VsZCBwcmVmZXIgdG8gZGlzYWJsZSB0aGlzIGJlaGF2aW91ciwgeW91IGNhbiB1c2UgdGhpcyBmdW5jdGlvbi5cbiAgICAgKiBAcGFyYW0gc2V0IHtib29sZWFufVxuICAgICAqL1xuICAgIFBvd2VyTWFuYWdlbWVudC5zZXRSZWxlYXNlT25QYXVzZSA9IGZ1bmN0aW9uIChzZXQpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBQb3dlck1hbmFnZW1lbnQsIFwiYWNxdWlyZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgUG93ZXJNYW5hZ2VtZW50LCBcImRpbVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgUG93ZXJNYW5hZ2VtZW50LCBcInJlbGVhc2VcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFBvd2VyTWFuYWdlbWVudCwgXCJzZXRSZWxlYXNlT25QYXVzZVwiLCBudWxsKTtcbiAgICBQb3dlck1hbmFnZW1lbnQgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdQb3dlck1hbmFnZW1lbnQnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tcG93ZXJtYW5hZ2VtZW50LW9yaWcnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAncG93ZXJNYW5hZ2VtZW50JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vVmlyYXMtL2NvcmRvdmEtcGx1Z2luLXBvd2VybWFuYWdlbWVudCdcbiAgICAgICAgfSlcbiAgICBdLCBQb3dlck1hbmFnZW1lbnQpO1xuICAgIHJldHVybiBQb3dlck1hbmFnZW1lbnQ7XG59KCkpO1xuZXhwb3J0cy5Qb3dlck1hbmFnZW1lbnQgPSBQb3dlck1hbmFnZW1lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3dlci1tYW5hZ2VtZW50LmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9wb3dlci1tYW5hZ2VtZW50LmpzXG4vLyBtb2R1bGUgaWQgPSA0NDlcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 450 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Printer\n * @description Prints documents or HTML rendered content\n * @usage\n * ```typescript\n * import {Printer, PrintOptions} from 'ionic-native';\n *\n * Printer.isAvailable().then(onSuccess, onError);\n *\n * let options: PrintOptions = {\n *      name: 'MyDocument',\n *      printerId: 'printer007',\n *      duplex: true,\n *      landscape: true,\n *      grayscale: true\n *    };\n *\n * Printer.print(content, options).then(onSuccess, onError);\n * ```\n */\nvar Printer = (function () {\n    function Printer() {\n    }\n    /**\n     * Checks whether to device is capable of printing.\n     */\n    Printer.isAvailable = function () { return; };\n    /**\n     * Sends content to the printer.\n     * @param {content} The content to print. Can be a URL or an HTML string. If a HTML DOM Object is provided, its innerHtml property value will be used.\n     * @param {options} The options to pass to the printer\n     */\n    Printer.print = function (content, options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Printer, \"isAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Printer, \"print\", null);\n    Printer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Printer',\n            plugin: 'de.appplant.cordova.plugin.printer',\n            pluginRef: 'cordova.plugins.printer',\n            repo: 'https://github.com/katzer/cordova-plugin-printer.git',\n            platforms: ['Android', 'iOS']\n        })\n    ], Printer);\n    return Printer;\n}());\nexports.Printer = Printer;\n//# sourceMappingURL=printer.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ByaW50ZXIuanM/N2UzYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNCQUFzQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUNBQXVDLFFBQVE7QUFDL0M7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLFFBQVE7QUFDdkI7QUFDQSxpREFBaUQsUUFBUTtBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDUwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBQcmludGVyXG4gKiBAZGVzY3JpcHRpb24gUHJpbnRzIGRvY3VtZW50cyBvciBIVE1MIHJlbmRlcmVkIGNvbnRlbnRcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtQcmludGVyLCBQcmludE9wdGlvbnN9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogUHJpbnRlci5pc0F2YWlsYWJsZSgpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqXG4gKiBsZXQgb3B0aW9uczogUHJpbnRPcHRpb25zID0ge1xuICogICAgICBuYW1lOiAnTXlEb2N1bWVudCcsXG4gKiAgICAgIHByaW50ZXJJZDogJ3ByaW50ZXIwMDcnLFxuICogICAgICBkdXBsZXg6IHRydWUsXG4gKiAgICAgIGxhbmRzY2FwZTogdHJ1ZSxcbiAqICAgICAgZ3JheXNjYWxlOiB0cnVlXG4gKiAgICB9O1xuICpcbiAqIFByaW50ZXIucHJpbnQoY29udGVudCwgb3B0aW9ucykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICogYGBgXG4gKi9cbnZhciBQcmludGVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBQcmludGVyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0byBkZXZpY2UgaXMgY2FwYWJsZSBvZiBwcmludGluZy5cbiAgICAgKi9cbiAgICBQcmludGVyLmlzQXZhaWxhYmxlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU2VuZHMgY29udGVudCB0byB0aGUgcHJpbnRlci5cbiAgICAgKiBAcGFyYW0ge2NvbnRlbnR9IFRoZSBjb250ZW50IHRvIHByaW50LiBDYW4gYmUgYSBVUkwgb3IgYW4gSFRNTCBzdHJpbmcuIElmIGEgSFRNTCBET00gT2JqZWN0IGlzIHByb3ZpZGVkLCBpdHMgaW5uZXJIdG1sIHByb3BlcnR5IHZhbHVlIHdpbGwgYmUgdXNlZC5cbiAgICAgKiBAcGFyYW0ge29wdGlvbnN9IFRoZSBvcHRpb25zIHRvIHBhc3MgdG8gdGhlIHByaW50ZXJcbiAgICAgKi9cbiAgICBQcmludGVyLnByaW50ID0gZnVuY3Rpb24gKGNvbnRlbnQsIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBQcmludGVyLCBcImlzQXZhaWxhYmxlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBQcmludGVyLCBcInByaW50XCIsIG51bGwpO1xuICAgIFByaW50ZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdQcmludGVyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2RlLmFwcHBsYW50LmNvcmRvdmEucGx1Z2luLnByaW50ZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnY29yZG92YS5wbHVnaW5zLnByaW50ZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9rYXR6ZXIvY29yZG92YS1wbHVnaW4tcHJpbnRlci5naXQnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgICAgICAgfSlcbiAgICBdLCBQcmludGVyKTtcbiAgICByZXR1cm4gUHJpbnRlcjtcbn0oKSk7XG5leHBvcnRzLlByaW50ZXIgPSBQcmludGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJpbnRlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvcHJpbnRlci5qc1xuLy8gbW9kdWxlIGlkID0gNDUwXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 451 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Push\n * @description\n * Register and receive push notifications.\n *\n * Requires Cordova plugin: `phonegap-plugin-push`. For more info, please see the [Push plugin docs](https://github.com/phonegap/phonegap-plugin-push).\n *\n * For TypeScript users, see the [Push plugin docs about using TypeScript for custom notifications](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/TYPESCRIPT.md).\n *\n * @usage\n * ```typescript\n * import { Push } from 'ionic-native';\n * ```\n */\nvar Push = (function () {\n    function Push() {\n    }\n    /**\n     * Initialize the plugin on the native side.\n     *\n     * ```\n     * var push = Push.init({\n     *    android: {\n     *        senderID: '12345679'\n     *    },\n     *    ios: {\n     *        alert: 'true',\n     *        badge: true,\n     *        sound: 'false'\n     *    },\n     *    windows: {}\n     * });\n     * ```\n     *\n     * @param {PushOptions} options  The Push [options](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#parameters).\n     * @return {PushNotification}  Returns a new [PushNotification](https://github.com/phonegap/phonegap-plugin-push/blob/master/docs/API.md#pushonevent-callback) object.\n     */\n    Push.init = function (options) { return; };\n    /**\n     * Check whether the push notification permission has been granted.\n     * @return {Promise} Returns a Promise that resolves with an object with one property: isEnabled, a boolean that indicates if permission has been granted.\n     */\n    Push.hasPermission = function () { return; };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Push, \"init\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Push, \"hasPermission\", null);\n    Push = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Push',\n            plugin: 'phonegap-plugin-push',\n            pluginRef: 'PushNotification',\n            repo: 'https://github.com/phonegap/phonegap-plugin-push'\n        })\n    ], Push);\n    return Push;\n}());\nexports.Push = Push;\n//# sourceMappingURL=push.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3B1c2guanM/OGMwMiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVztBQUNYO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLHNDQUFzQyxRQUFRO0FBQzlDO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDUxLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBQdXNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJlZ2lzdGVyIGFuZCByZWNlaXZlIHB1c2ggbm90aWZpY2F0aW9ucy5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYHBob25lZ2FwLXBsdWdpbi1wdXNoYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1B1c2ggcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tcHVzaCkuXG4gKlxuICogRm9yIFR5cGVTY3JpcHQgdXNlcnMsIHNlZSB0aGUgW1B1c2ggcGx1Z2luIGRvY3MgYWJvdXQgdXNpbmcgVHlwZVNjcmlwdCBmb3IgY3VzdG9tIG5vdGlmaWNhdGlvbnNdKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tcHVzaC9ibG9iL21hc3Rlci9kb2NzL1RZUEVTQ1JJUFQubWQpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgUHVzaCB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKiBgYGBcbiAqL1xudmFyIFB1c2ggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFB1c2goKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemUgdGhlIHBsdWdpbiBvbiB0aGUgbmF0aXZlIHNpZGUuXG4gICAgICpcbiAgICAgKiBgYGBcbiAgICAgKiB2YXIgcHVzaCA9IFB1c2guaW5pdCh7XG4gICAgICogICAgYW5kcm9pZDoge1xuICAgICAqICAgICAgICBzZW5kZXJJRDogJzEyMzQ1Njc5J1xuICAgICAqICAgIH0sXG4gICAgICogICAgaW9zOiB7XG4gICAgICogICAgICAgIGFsZXJ0OiAndHJ1ZScsXG4gICAgICogICAgICAgIGJhZGdlOiB0cnVlLFxuICAgICAqICAgICAgICBzb3VuZDogJ2ZhbHNlJ1xuICAgICAqICAgIH0sXG4gICAgICogICAgd2luZG93czoge31cbiAgICAgKiB9KTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7UHVzaE9wdGlvbnN9IG9wdGlvbnMgIFRoZSBQdXNoIFtvcHRpb25zXShodHRwczovL2dpdGh1Yi5jb20vcGhvbmVnYXAvcGhvbmVnYXAtcGx1Z2luLXB1c2gvYmxvYi9tYXN0ZXIvZG9jcy9BUEkubWQjcGFyYW1ldGVycykuXG4gICAgICogQHJldHVybiB7UHVzaE5vdGlmaWNhdGlvbn0gIFJldHVybnMgYSBuZXcgW1B1c2hOb3RpZmljYXRpb25dKGh0dHBzOi8vZ2l0aHViLmNvbS9waG9uZWdhcC9waG9uZWdhcC1wbHVnaW4tcHVzaC9ibG9iL21hc3Rlci9kb2NzL0FQSS5tZCNwdXNob25ldmVudC1jYWxsYmFjaykgb2JqZWN0LlxuICAgICAqL1xuICAgIFB1c2guaW5pdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBDaGVjayB3aGV0aGVyIHRoZSBwdXNoIG5vdGlmaWNhdGlvbiBwZXJtaXNzaW9uIGhhcyBiZWVuIGdyYW50ZWQuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIGFuIG9iamVjdCB3aXRoIG9uZSBwcm9wZXJ0eTogaXNFbmFibGVkLCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgcGVybWlzc2lvbiBoYXMgYmVlbiBncmFudGVkLlxuICAgICAqL1xuICAgIFB1c2guaGFzUGVybWlzc2lvbiA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN5bmM6IHRydWVcbiAgICAgICAgfSlcbiAgICBdLCBQdXNoLCBcImluaXRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFB1c2gsIFwiaGFzUGVybWlzc2lvblwiLCBudWxsKTtcbiAgICBQdXNoID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnUHVzaCcsXG4gICAgICAgICAgICBwbHVnaW46ICdwaG9uZWdhcC1wbHVnaW4tcHVzaCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdQdXNoTm90aWZpY2F0aW9uJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vcGhvbmVnYXAvcGhvbmVnYXAtcGx1Z2luLXB1c2gnXG4gICAgICAgIH0pXG4gICAgXSwgUHVzaCk7XG4gICAgcmV0dXJuIFB1c2g7XG59KCkpO1xuZXhwb3J0cy5QdXNoID0gUHVzaDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXB1c2guanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3B1c2guanNcbi8vIG1vZHVsZSBpZCA9IDQ1MVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 452 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name SafariViewController\n * @description\n * @usage\n * ```\n * import { SafariViewController } from 'ionic-native';\n *\n *\n * SafariViewController.isAvailable()\n *   .then(\n *     (available: boolean) => {\n *       if(available){\n *\n *         SafariViewController.show({\n *           url: 'http://ionic.io',\n *           hidden: false,\n *           animated: false,\n *           transition: 'curl',\n *           enterReaderModeIfAvailable: true,\n *           tintColor: '#ff0000'\n *         })\n *         .then(\n *           (result: any) => {\n *             if(result.event === 'opened') console.log('Opened');\n *             else if(result.event === 'loaded') console.log('Loaded');\n *             else if(result.event === 'closed') console.log('Closed');\n *           },\n *           (error: any) => console.error(error)\n *         );\n *\n *       } else {\n *         // use fallback browser, example InAppBrowser\n *       }\n *     }\n *   );\n * ```\n */\nvar SafariViewController = (function () {\n    function SafariViewController() {\n    }\n    /**\n     * Checks if SafariViewController is available\n     */\n    SafariViewController.isAvailable = function () { return; };\n    /**\n     * Shows Safari View Controller\n     * @param options\n     */\n    SafariViewController.show = function (options) { return; };\n    /**\n     * Hides Safari View Controller\n     */\n    SafariViewController.hide = function () { };\n    /**\n     * Tries to connect to the  Chrome's custom tabs service. you must call this method before calling any of the other methods listed below.\n     */\n    SafariViewController.connectToService = function () { return; };\n    /**\n     * Call this method whenever there's a chance the user will open an external url.\n     */\n    SafariViewController.warmUp = function () { return; };\n    /**\n     * For even better performance optimization, call this methods if there's more than a 50% chance the user will open a certain URL.\n     * @param url\n     */\n    SafariViewController.mayLaunchUrl = function (url) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"isAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"show\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"hide\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"connectToService\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"warmUp\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SafariViewController, \"mayLaunchUrl\", null);\n    SafariViewController = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SafariViewController',\n            plugin: 'cordova-plugin-safariviewcontroller',\n            pluginRef: 'SafariViewController',\n            platforms: ['iOS', 'Android'],\n            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-safariviewcontroller'\n        })\n    ], SafariViewController);\n    return SafariViewController;\n}());\nexports.SafariViewController = SafariViewController;\n//# sourceMappingURL=safari-view-controller.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NhZmFyaS12aWV3LWNvbnRyb2xsZXIuanM/M2FlOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0E7QUFDQTtBQUNBLHlEQUF5RCxRQUFRO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0RBQXdELFFBQVE7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ1Mi5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgU2FmYXJpVmlld0NvbnRyb2xsZXJcbiAqIEBkZXNjcmlwdGlvblxuICogQHVzYWdlXG4gKiBgYGBcbiAqIGltcG9ydCB7IFNhZmFyaVZpZXdDb250cm9sbGVyIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogU2FmYXJpVmlld0NvbnRyb2xsZXIuaXNBdmFpbGFibGUoKVxuICogICAudGhlbihcbiAqICAgICAoYXZhaWxhYmxlOiBib29sZWFuKSA9PiB7XG4gKiAgICAgICBpZihhdmFpbGFibGUpe1xuICpcbiAqICAgICAgICAgU2FmYXJpVmlld0NvbnRyb2xsZXIuc2hvdyh7XG4gKiAgICAgICAgICAgdXJsOiAnaHR0cDovL2lvbmljLmlvJyxcbiAqICAgICAgICAgICBoaWRkZW46IGZhbHNlLFxuICogICAgICAgICAgIGFuaW1hdGVkOiBmYWxzZSxcbiAqICAgICAgICAgICB0cmFuc2l0aW9uOiAnY3VybCcsXG4gKiAgICAgICAgICAgZW50ZXJSZWFkZXJNb2RlSWZBdmFpbGFibGU6IHRydWUsXG4gKiAgICAgICAgICAgdGludENvbG9yOiAnI2ZmMDAwMCdcbiAqICAgICAgICAgfSlcbiAqICAgICAgICAgLnRoZW4oXG4gKiAgICAgICAgICAgKHJlc3VsdDogYW55KSA9PiB7XG4gKiAgICAgICAgICAgICBpZihyZXN1bHQuZXZlbnQgPT09ICdvcGVuZWQnKSBjb25zb2xlLmxvZygnT3BlbmVkJyk7XG4gKiAgICAgICAgICAgICBlbHNlIGlmKHJlc3VsdC5ldmVudCA9PT0gJ2xvYWRlZCcpIGNvbnNvbGUubG9nKCdMb2FkZWQnKTtcbiAqICAgICAgICAgICAgIGVsc2UgaWYocmVzdWx0LmV2ZW50ID09PSAnY2xvc2VkJykgY29uc29sZS5sb2coJ0Nsb3NlZCcpO1xuICogICAgICAgICAgIH0sXG4gKiAgICAgICAgICAgKGVycm9yOiBhbnkpID0+IGNvbnNvbGUuZXJyb3IoZXJyb3IpXG4gKiAgICAgICAgICk7XG4gKlxuICogICAgICAgfSBlbHNlIHtcbiAqICAgICAgICAgLy8gdXNlIGZhbGxiYWNrIGJyb3dzZXIsIGV4YW1wbGUgSW5BcHBCcm93c2VyXG4gKiAgICAgICB9XG4gKiAgICAgfVxuICogICApO1xuICogYGBgXG4gKi9cbnZhciBTYWZhcmlWaWV3Q29udHJvbGxlciA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2FmYXJpVmlld0NvbnRyb2xsZXIoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENoZWNrcyBpZiBTYWZhcmlWaWV3Q29udHJvbGxlciBpcyBhdmFpbGFibGVcbiAgICAgKi9cbiAgICBTYWZhcmlWaWV3Q29udHJvbGxlci5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFNob3dzIFNhZmFyaSBWaWV3IENvbnRyb2xsZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9uc1xuICAgICAqL1xuICAgIFNhZmFyaVZpZXdDb250cm9sbGVyLnNob3cgPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogSGlkZXMgU2FmYXJpIFZpZXcgQ29udHJvbGxlclxuICAgICAqL1xuICAgIFNhZmFyaVZpZXdDb250cm9sbGVyLmhpZGUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogVHJpZXMgdG8gY29ubmVjdCB0byB0aGUgIENocm9tZSdzIGN1c3RvbSB0YWJzIHNlcnZpY2UuIHlvdSBtdXN0IGNhbGwgdGhpcyBtZXRob2QgYmVmb3JlIGNhbGxpbmcgYW55IG9mIHRoZSBvdGhlciBtZXRob2RzIGxpc3RlZCBiZWxvdy5cbiAgICAgKi9cbiAgICBTYWZhcmlWaWV3Q29udHJvbGxlci5jb25uZWN0VG9TZXJ2aWNlID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogQ2FsbCB0aGlzIG1ldGhvZCB3aGVuZXZlciB0aGVyZSdzIGEgY2hhbmNlIHRoZSB1c2VyIHdpbGwgb3BlbiBhbiBleHRlcm5hbCB1cmwuXG4gICAgICovXG4gICAgU2FmYXJpVmlld0NvbnRyb2xsZXIud2FybVVwID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogRm9yIGV2ZW4gYmV0dGVyIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiwgY2FsbCB0aGlzIG1ldGhvZHMgaWYgdGhlcmUncyBtb3JlIHRoYW4gYSA1MCUgY2hhbmNlIHRoZSB1c2VyIHdpbGwgb3BlbiBhIGNlcnRhaW4gVVJMLlxuICAgICAqIEBwYXJhbSB1cmxcbiAgICAgKi9cbiAgICBTYWZhcmlWaWV3Q29udHJvbGxlci5tYXlMYXVuY2hVcmwgPSBmdW5jdGlvbiAodXJsKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgU2FmYXJpVmlld0NvbnRyb2xsZXIsIFwiaXNBdmFpbGFibGVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFNhZmFyaVZpZXdDb250cm9sbGVyLCBcInNob3dcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFNhZmFyaVZpZXdDb250cm9sbGVyLCBcImhpZGVcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFNhZmFyaVZpZXdDb250cm9sbGVyLCBcImNvbm5lY3RUb1NlcnZpY2VcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFNhZmFyaVZpZXdDb250cm9sbGVyLCBcIndhcm1VcFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgU2FmYXJpVmlld0NvbnRyb2xsZXIsIFwibWF5TGF1bmNoVXJsXCIsIG51bGwpO1xuICAgIFNhZmFyaVZpZXdDb250cm9sbGVyID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnU2FmYXJpVmlld0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2FmYXJpdmlld2NvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnU2FmYXJpVmlld0NvbnRyb2xsZXInLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ2lPUycsICdBbmRyb2lkJ10sXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL0VkZHlWZXJicnVnZ2VuL2NvcmRvdmEtcGx1Z2luLXNhZmFyaXZpZXdjb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgIF0sIFNhZmFyaVZpZXdDb250cm9sbGVyKTtcbiAgICByZXR1cm4gU2FmYXJpVmlld0NvbnRyb2xsZXI7XG59KCkpO1xuZXhwb3J0cy5TYWZhcmlWaWV3Q29udHJvbGxlciA9IFNhZmFyaVZpZXdDb250cm9sbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2FmYXJpLXZpZXctY29udHJvbGxlci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc2FmYXJpLXZpZXctY29udHJvbGxlci5qc1xuLy8gbW9kdWxlIGlkID0gNDUyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 453 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Screenshot\n * @description Captures a screen shot\n * @usage\n * ```typescript\n * import {Screenshot} from 'ionic-native';\n *\n * // Take a screenshot and save to file\n * Screenshot.save('jpg', 80, 'myscreenshot.jpg').then(onSuccess, onError);\n *\n * // Take a screenshot and get temporary file URI\n * Screenshot.URI(80).then(onSuccess, onError);\n * ```\n */\nvar Screenshot = (function () {\n    function Screenshot() {\n    }\n    /**\n     *  Takes screenshot and saves the image\n     *\n     * @param {string} format. Format can take the value of either 'jpg' or 'png'\n     * On ios, only 'jpg' format is supported\n     * @param {number} quality. Determines the quality of the screenshot.\n     *        Default quality is set to 100.\n     * @param {string} filename. Name of the file as stored on the storage\n     */\n    Screenshot.save = function (format, quality, filename) {\n        return new Promise(function (resolve, reject) {\n            navigator.screenshot.save(function (error, result) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(result);\n                }\n            }, format, quality, filename);\n        });\n    };\n    /**\n     *  Takes screenshot and returns the image as an URI\n     *\n     * @param {number} quality. Determines the quality of the screenshot.\n     *        Default quality is set to 100.\n     */\n    Screenshot.URI = function (quality) {\n        return new Promise(function (resolve, reject) {\n            navigator.screenshot.URI(function (error, result) {\n                if (error) {\n                    reject(error);\n                }\n                else {\n                    resolve(result);\n                }\n            }, quality);\n        });\n    };\n    Screenshot = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Screenshot',\n            plugin: 'https://github.com/gitawego/cordova-screenshot.git',\n            pluginRef: 'navigator.screenshot',\n            repo: 'https://github.com/gitawego/cordova-screenshot.git'\n        })\n    ], Screenshot);\n    return Screenshot;\n}());\nexports.Screenshot = Screenshot;\n//# sourceMappingURL=screenshot.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NjcmVlbnNob3QuanM/Yjg3MyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFdBQVc7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBLGVBQWUsT0FBTztBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ1My5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgU2NyZWVuc2hvdFxuICogQGRlc2NyaXB0aW9uIENhcHR1cmVzIGEgc2NyZWVuIHNob3RcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtTY3JlZW5zaG90fSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIC8vIFRha2UgYSBzY3JlZW5zaG90IGFuZCBzYXZlIHRvIGZpbGVcbiAqIFNjcmVlbnNob3Quc2F2ZSgnanBnJywgODAsICdteXNjcmVlbnNob3QuanBnJykudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICpcbiAqIC8vIFRha2UgYSBzY3JlZW5zaG90IGFuZCBnZXQgdGVtcG9yYXJ5IGZpbGUgVVJJXG4gKiBTY3JlZW5zaG90LlVSSSg4MCkudGhlbihvblN1Y2Nlc3MsIG9uRXJyb3IpO1xuICogYGBgXG4gKi9cbnZhciBTY3JlZW5zaG90ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTY3JlZW5zaG90KCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiAgVGFrZXMgc2NyZWVuc2hvdCBhbmQgc2F2ZXMgdGhlIGltYWdlXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gZm9ybWF0LiBGb3JtYXQgY2FuIHRha2UgdGhlIHZhbHVlIG9mIGVpdGhlciAnanBnJyBvciAncG5nJ1xuICAgICAqIE9uIGlvcywgb25seSAnanBnJyBmb3JtYXQgaXMgc3VwcG9ydGVkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHF1YWxpdHkuIERldGVybWluZXMgdGhlIHF1YWxpdHkgb2YgdGhlIHNjcmVlbnNob3QuXG4gICAgICogICAgICAgIERlZmF1bHQgcXVhbGl0eSBpcyBzZXQgdG8gMTAwLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBmaWxlbmFtZS4gTmFtZSBvZiB0aGUgZmlsZSBhcyBzdG9yZWQgb24gdGhlIHN0b3JhZ2VcbiAgICAgKi9cbiAgICBTY3JlZW5zaG90LnNhdmUgPSBmdW5jdGlvbiAoZm9ybWF0LCBxdWFsaXR5LCBmaWxlbmFtZSkge1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgbmF2aWdhdG9yLnNjcmVlbnNob3Quc2F2ZShmdW5jdGlvbiAoZXJyb3IsIHJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIGZvcm1hdCwgcXVhbGl0eSwgZmlsZW5hbWUpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqICBUYWtlcyBzY3JlZW5zaG90IGFuZCByZXR1cm5zIHRoZSBpbWFnZSBhcyBhbiBVUklcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBxdWFsaXR5LiBEZXRlcm1pbmVzIHRoZSBxdWFsaXR5IG9mIHRoZSBzY3JlZW5zaG90LlxuICAgICAqICAgICAgICBEZWZhdWx0IHF1YWxpdHkgaXMgc2V0IHRvIDEwMC5cbiAgICAgKi9cbiAgICBTY3JlZW5zaG90LlVSSSA9IGZ1bmN0aW9uIChxdWFsaXR5KSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICBuYXZpZ2F0b3Iuc2NyZWVuc2hvdC5VUkkoZnVuY3Rpb24gKGVycm9yLCByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCBxdWFsaXR5KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTY3JlZW5zaG90ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnU2NyZWVuc2hvdCcsXG4gICAgICAgICAgICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vZ2l0YXdlZ28vY29yZG92YS1zY3JlZW5zaG90LmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICduYXZpZ2F0b3Iuc2NyZWVuc2hvdCcsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2dpdGF3ZWdvL2NvcmRvdmEtc2NyZWVuc2hvdC5naXQnXG4gICAgICAgIH0pXG4gICAgXSwgU2NyZWVuc2hvdCk7XG4gICAgcmV0dXJuIFNjcmVlbnNob3Q7XG59KCkpO1xuZXhwb3J0cy5TY3JlZW5zaG90ID0gU2NyZWVuc2hvdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjcmVlbnNob3QuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NjcmVlbnNob3QuanNcbi8vIG1vZHVsZSBpZCA9IDQ1M1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 454 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Secure Storage\n * @description\n * This plugin gets, sets and removes key,value pairs from a device's secure storage.\n *\n * Requires Cordova plugin: `cordova-plugin-secure-storage`. For more info, please see the [Cordova Secure Storage docs](https://github.com/Crypho/cordova-plugin-secure-storage).\n *\n * @usage\n *\n * ```typescript\n * import { SecureStorage } from 'ionic-native';\n *\n * let secureStorage: SecureStorage = new SecureStorage();\n * secureStorage.create('my_store_name')\n *  .then(\n *    () => console.log('Storage is ready!'),\n *    error => console.log(error)\n * );\n *\n * secureStorage.get('myitem')\n *  .then(\n *    data => console.log(data),\n *    error => console.log(error)\n * );\n *\n * secureStorage.set('myitem', 'myvalue')\n *  .then(\n *    data => console.log(data),\n *    error => console.log(error)\n * );\n *\n * secureStorage.remove('myitem')\n * .then(\n *    data => console.log(data),\n *    error => console.log(error)\n * );\n * ```\n */\nvar SecureStorage = (function () {\n    function SecureStorage() {\n    }\n    /**\n     * Creates a namespaced storage.\n     * @param store {string}\n     */\n    SecureStorage.prototype.create = function (store) {\n        var _this = this;\n        return new Promise(function (res, rej) {\n            _this._objectInstance = new cordova.plugins.SecureStorage(res, rej, store);\n        });\n    };\n    /**\n     * Gets a stored item\n     * @param reference {string}\n     */\n    SecureStorage.prototype.get = function (reference) { return; };\n    /**\n     * Stores a value\n     * @param reference {string}\n     * @param value {string}\n     */\n    SecureStorage.prototype.set = function (reference, value) { return; };\n    /**\n     * Removes a single stored item\n     * @param reference {string}\n     */\n    SecureStorage.prototype.remove = function (reference) { return; };\n    __decorate([\n        plugin_1.CordovaInstance({\n            callbackOrder: 'reverse'\n        })\n    ], SecureStorage.prototype, \"get\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            callbackOrder: 'reverse'\n        })\n    ], SecureStorage.prototype, \"set\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            callbackOrder: 'reverse'\n        })\n    ], SecureStorage.prototype, \"remove\", null);\n    SecureStorage = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SecureStorage',\n            plugin: 'cordova-plugin-secure-storage',\n            pluginRef: 'plugins.securestorage',\n            repo: 'https://github.com/Crypho/cordova-plugin-secure-storage',\n            platforms: ['Android', 'iOS', 'Windows Phone', 'Browser']\n        })\n    ], SecureStorage);\n    return SecureStorage;\n}());\nexports.SecureStorage = SecureStorage;\n//# sourceMappingURL=securestorage.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NlY3VyZXN0b3JhZ2UuanM/ZTdhYyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLHdEQUF3RCxRQUFRO0FBQ2hFO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekIscUJBQXFCO0FBQ3JCO0FBQ0EsK0RBQStELFFBQVE7QUFDdkU7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLDJEQUEyRCxRQUFRO0FBQ25FO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NTQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFNlY3VyZSBTdG9yYWdlXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIGdldHMsIHNldHMgYW5kIHJlbW92ZXMga2V5LHZhbHVlIHBhaXJzIGZyb20gYSBkZXZpY2UncyBzZWN1cmUgc3RvcmFnZS5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW0NvcmRvdmEgU2VjdXJlIFN0b3JhZ2UgZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL0NyeXBoby9jb3Jkb3ZhLXBsdWdpbi1zZWN1cmUtc3RvcmFnZSkuXG4gKlxuICogQHVzYWdlXG4gKlxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU2VjdXJlU3RvcmFnZSB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogbGV0IHNlY3VyZVN0b3JhZ2U6IFNlY3VyZVN0b3JhZ2UgPSBuZXcgU2VjdXJlU3RvcmFnZSgpO1xuICogc2VjdXJlU3RvcmFnZS5jcmVhdGUoJ215X3N0b3JlX25hbWUnKVxuICogIC50aGVuKFxuICogICAgKCkgPT4gY29uc29sZS5sb2coJ1N0b3JhZ2UgaXMgcmVhZHkhJyksXG4gKiAgICBlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcilcbiAqICk7XG4gKlxuICogc2VjdXJlU3RvcmFnZS5nZXQoJ215aXRlbScpXG4gKiAgLnRoZW4oXG4gKiAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiApO1xuICpcbiAqIHNlY3VyZVN0b3JhZ2Uuc2V0KCdteWl0ZW0nLCAnbXl2YWx1ZScpXG4gKiAgLnRoZW4oXG4gKiAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiApO1xuICpcbiAqIHNlY3VyZVN0b3JhZ2UucmVtb3ZlKCdteWl0ZW0nKVxuICogLnRoZW4oXG4gKiAgICBkYXRhID0+IGNvbnNvbGUubG9nKGRhdGEpLFxuICogICAgZXJyb3IgPT4gY29uc29sZS5sb2coZXJyb3IpXG4gKiApO1xuICogYGBgXG4gKi9cbnZhciBTZWN1cmVTdG9yYWdlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBTZWN1cmVTdG9yYWdlKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmFtZXNwYWNlZCBzdG9yYWdlLlxuICAgICAqIEBwYXJhbSBzdG9yZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIFNlY3VyZVN0b3JhZ2UucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdG9yZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcywgcmVqKSB7XG4gICAgICAgICAgICBfdGhpcy5fb2JqZWN0SW5zdGFuY2UgPSBuZXcgY29yZG92YS5wbHVnaW5zLlNlY3VyZVN0b3JhZ2UocmVzLCByZWosIHN0b3JlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHZXRzIGEgc3RvcmVkIGl0ZW1cbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIHtzdHJpbmd9XG4gICAgICovXG4gICAgU2VjdXJlU3RvcmFnZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gKHJlZmVyZW5jZSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU3RvcmVzIGEgdmFsdWVcbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIHtzdHJpbmd9XG4gICAgICogQHBhcmFtIHZhbHVlIHtzdHJpbmd9XG4gICAgICovXG4gICAgU2VjdXJlU3RvcmFnZS5wcm90b3R5cGUuc2V0ID0gZnVuY3Rpb24gKHJlZmVyZW5jZSwgdmFsdWUpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYSBzaW5nbGUgc3RvcmVkIGl0ZW1cbiAgICAgKiBAcGFyYW0gcmVmZXJlbmNlIHtzdHJpbmd9XG4gICAgICovXG4gICAgU2VjdXJlU3RvcmFnZS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24gKHJlZmVyZW5jZSkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFJbnN0YW5jZSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBTZWN1cmVTdG9yYWdlLnByb3RvdHlwZSwgXCJnZXRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFJbnN0YW5jZSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBTZWN1cmVTdG9yYWdlLnByb3RvdHlwZSwgXCJzZXRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmFJbnN0YW5jZSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBTZWN1cmVTdG9yYWdlLnByb3RvdHlwZSwgXCJyZW1vdmVcIiwgbnVsbCk7XG4gICAgU2VjdXJlU3RvcmFnZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1NlY3VyZVN0b3JhZ2UnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tc2VjdXJlLXN0b3JhZ2UnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAncGx1Z2lucy5zZWN1cmVzdG9yYWdlJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vQ3J5cGhvL2NvcmRvdmEtcGx1Z2luLXNlY3VyZS1zdG9yYWdlJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lJywgJ0Jyb3dzZXInXVxuICAgICAgICB9KVxuICAgIF0sIFNlY3VyZVN0b3JhZ2UpO1xuICAgIHJldHVybiBTZWN1cmVTdG9yYWdlO1xufSgpKTtcbmV4cG9ydHMuU2VjdXJlU3RvcmFnZSA9IFNlY3VyZVN0b3JhZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zZWN1cmVzdG9yYWdlLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9zZWN1cmVzdG9yYWdlLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 455 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Shake\n * @description Handles shake gesture\n * @usage\n * ```typescript\n * import {Shake} from 'ionic-native';\n *\n * let watch = Shake.startWatch(60).subscribe(() => {\n *   // do something\n *   });\n *\n * watch.unsubscribe();\n * ```\n */\nvar Shake = (function () {\n    function Shake() {\n    }\n    /**\n     * Watch for shake gesture\n     * @param sensitivity {number} Optional sensitivity parameter. Defaults to 40\n     */\n    Shake.startWatch = function (sensitivity) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'stopWatch',\n            successIndex: 0,\n            errorIndex: 2\n        })\n    ], Shake, \"startWatch\", null);\n    Shake = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Shake',\n            plugin: 'cordova-plugin-shake',\n            pluginRef: 'shake',\n            repo: 'https://github.com/leecrossley/cordova-plugin-shake'\n        })\n    ], Shake);\n    return Shake;\n}());\nexports.Shake = Shake;\n//# sourceMappingURL=shake.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NoYWtlLmpzPzUzYWEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkIsT0FBTztBQUNsQztBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDU1LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBTaGFrZVxuICogQGRlc2NyaXB0aW9uIEhhbmRsZXMgc2hha2UgZ2VzdHVyZVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge1NoYWtlfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIGxldCB3YXRjaCA9IFNoYWtlLnN0YXJ0V2F0Y2goNjApLnN1YnNjcmliZSgoKSA9PiB7XG4gKiAgIC8vIGRvIHNvbWV0aGluZ1xuICogICB9KTtcbiAqXG4gKiB3YXRjaC51bnN1YnNjcmliZSgpO1xuICogYGBgXG4gKi9cbnZhciBTaGFrZSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU2hha2UoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdhdGNoIGZvciBzaGFrZSBnZXN0dXJlXG4gICAgICogQHBhcmFtIHNlbnNpdGl2aXR5IHtudW1iZXJ9IE9wdGlvbmFsIHNlbnNpdGl2aXR5IHBhcmFtZXRlci4gRGVmYXVsdHMgdG8gNDBcbiAgICAgKi9cbiAgICBTaGFrZS5zdGFydFdhdGNoID0gZnVuY3Rpb24gKHNlbnNpdGl2aXR5KSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ3N0b3BXYXRjaCcsXG4gICAgICAgICAgICBzdWNjZXNzSW5kZXg6IDAsXG4gICAgICAgICAgICBlcnJvckluZGV4OiAyXG4gICAgICAgIH0pXG4gICAgXSwgU2hha2UsIFwic3RhcnRXYXRjaFwiLCBudWxsKTtcbiAgICBTaGFrZSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1NoYWtlJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNoYWtlJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3NoYWtlJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbGVlY3Jvc3NsZXkvY29yZG92YS1wbHVnaW4tc2hha2UnXG4gICAgICAgIH0pXG4gICAgXSwgU2hha2UpO1xuICAgIHJldHVybiBTaGFrZTtcbn0oKSk7XG5leHBvcnRzLlNoYWtlID0gU2hha2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zaGFrZS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc2hha2UuanNcbi8vIG1vZHVsZSBpZCA9IDQ1NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 456 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Sim\n * @description\n * Gets info from the Sim card like the carrier name, mcc, mnc and country code and other system dependent info.\n *\n * Requires Cordova plugin: `cordova-plugin-sim`. For more info, please see the [Cordova Sim docs](https://github.com/pbakondy/cordova-plugin-sim).\n *\n * @usage\n * ```typescript\n * import { Sim } from 'ionic-native';\n *\n *\n * Sim.getSimInfo().then(\n *   (info) => console.log('Sim info: ', info),\n *   (err) => console.log('Unable to get sim info: ', err)\n * );\n * ```\n */\nvar Sim = (function () {\n    function Sim() {\n    }\n    /**\n     * Returns info from the SIM card.\n     * @returns {Promise}\n     */\n    Sim.getSimInfo = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Sim, \"getSimInfo\", null);\n    Sim = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Sim',\n            plugin: 'cordova-plugin-sim',\n            pluginRef: 'plugins.sim',\n            repo: 'https://github.com/pbakondy/cordova-plugin-sim',\n            platforms: ['Android', 'iOS', 'Windows Phone']\n        })\n    ], Sim);\n    return Sim;\n}());\nexports.Sim = Sim;\n//# sourceMappingURL=sim.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NpbS5qcz9iODg5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxNQUFNO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0Esa0NBQWtDLFFBQVE7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ1Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgU2ltXG4gKiBAZGVzY3JpcHRpb25cbiAqIEdldHMgaW5mbyBmcm9tIHRoZSBTaW0gY2FyZCBsaWtlIHRoZSBjYXJyaWVyIG5hbWUsIG1jYywgbW5jIGFuZCBjb3VudHJ5IGNvZGUgYW5kIG90aGVyIHN5c3RlbSBkZXBlbmRlbnQgaW5mby5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXNpbWAuIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtDb3Jkb3ZhIFNpbSBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vcGJha29uZHkvY29yZG92YS1wbHVnaW4tc2ltKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNpbSB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIFNpbS5nZXRTaW1JbmZvKCkudGhlbihcbiAqICAgKGluZm8pID0+IGNvbnNvbGUubG9nKCdTaW0gaW5mbzogJywgaW5mbyksXG4gKiAgIChlcnIpID0+IGNvbnNvbGUubG9nKCdVbmFibGUgdG8gZ2V0IHNpbSBpbmZvOiAnLCBlcnIpXG4gKiApO1xuICogYGBgXG4gKi9cbnZhciBTaW0gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNpbSgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBpbmZvIGZyb20gdGhlIFNJTSBjYXJkLlxuICAgICAqIEByZXR1cm5zIHtQcm9taXNlfVxuICAgICAqL1xuICAgIFNpbS5nZXRTaW1JbmZvID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFNpbSwgXCJnZXRTaW1JbmZvXCIsIG51bGwpO1xuICAgIFNpbSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1NpbScsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zaW0nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAncGx1Z2lucy5zaW0nLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9wYmFrb25keS9jb3Jkb3ZhLXBsdWdpbi1zaW0nLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgUGhvbmUnXVxuICAgICAgICB9KVxuICAgIF0sIFNpbSk7XG4gICAgcmV0dXJuIFNpbTtcbn0oKSk7XG5leHBvcnRzLlNpbSA9IFNpbTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpbS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc2ltLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 457 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name SMS\n * @description\n *\n * Requires Cordova plugin: cordova-plugin-sms. For more info, please see the [SMS plugin docs](https://github.com/cordova-sms/cordova-sms-plugin).\n *\n * @usage\n * ```typescript\n * import { SMS } from 'ionic-native';\n *\n *\n * // Send a text message using default options\n * SMS.send('416123456', 'Hello world!');\n * ```\n */\nvar SMS = (function () {\n    function SMS() {\n    }\n    /**\n     * Sends sms to a number\n     * @param phoneNumber {string|Array<string>} Phone number\n     * @param message {string} Message\n     * @param options {SmsOptions} Options\n     * @returns {Promise<any>} Resolves promise when the SMS has been sent\n     */\n    SMS.send = function (phoneNumber, message, options) { return; };\n    /**\n     * This function lets you know if the app has permission to send SMS\n     * @return {Promise<boolean>} returns a promise that resolves with a boolean that indicates if we have permission\n     */\n    SMS.hasPermission = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], SMS, \"send\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['Android']\n        })\n    ], SMS, \"hasPermission\", null);\n    SMS = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SMS',\n            plugin: 'cordova-sms-plugin',\n            pluginRef: 'sms',\n            repo: 'https://github.com/cordova-sms/cordova-sms-plugin',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], SMS);\n    return SMS;\n}());\nexports.SMS = SMS;\n//# sourceMappingURL=sms.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3Ntcy5qcz84ZGQyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsTUFBTTtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCLHFCQUFxQjtBQUNoRCx1QkFBdUIsT0FBTztBQUM5Qix1QkFBdUIsV0FBVztBQUNsQyxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBLHlEQUF5RCxRQUFRO0FBQ2pFO0FBQ0E7QUFDQSxnQkFBZ0IsaUJBQWlCO0FBQ2pDO0FBQ0EscUNBQXFDLFFBQVE7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ1Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgU01TXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogY29yZG92YS1wbHVnaW4tc21zLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbU01TIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vY29yZG92YS1zbXMvY29yZG92YS1zbXMtcGx1Z2luKS5cbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNNUyB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIC8vIFNlbmQgYSB0ZXh0IG1lc3NhZ2UgdXNpbmcgZGVmYXVsdCBvcHRpb25zXG4gKiBTTVMuc2VuZCgnNDE2MTIzNDU2JywgJ0hlbGxvIHdvcmxkIScpO1xuICogYGBgXG4gKi9cbnZhciBTTVMgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNNUygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgc21zIHRvIGEgbnVtYmVyXG4gICAgICogQHBhcmFtIHBob25lTnVtYmVyIHtzdHJpbmd8QXJyYXk8c3RyaW5nPn0gUGhvbmUgbnVtYmVyXG4gICAgICogQHBhcmFtIG1lc3NhZ2Uge3N0cmluZ30gTWVzc2FnZVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtTbXNPcHRpb25zfSBPcHRpb25zXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmVzb2x2ZXMgcHJvbWlzZSB3aGVuIHRoZSBTTVMgaGFzIGJlZW4gc2VudFxuICAgICAqL1xuICAgIFNNUy5zZW5kID0gZnVuY3Rpb24gKHBob25lTnVtYmVyLCBtZXNzYWdlLCBvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBUaGlzIGZ1bmN0aW9uIGxldHMgeW91IGtub3cgaWYgdGhlIGFwcCBoYXMgcGVybWlzc2lvbiB0byBzZW5kIFNNU1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8Ym9vbGVhbj59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgd2UgaGF2ZSBwZXJtaXNzaW9uXG4gICAgICovXG4gICAgU01TLmhhc1Blcm1pc3Npb24gPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgU01TLCBcInNlbmRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIFNNUywgXCJoYXNQZXJtaXNzaW9uXCIsIG51bGwpO1xuICAgIFNNUyA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1NNUycsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXNtcy1wbHVnaW4nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnc21zJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vY29yZG92YS1zbXMvY29yZG92YS1zbXMtcGx1Z2luJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXVxuICAgICAgICB9KVxuICAgIF0sIFNNUyk7XG4gICAgcmV0dXJuIFNNUztcbn0oKSk7XG5leHBvcnRzLlNNUyA9IFNNUztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNtcy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc21zLmpzXG4vLyBtb2R1bGUgaWQgPSA0NTdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 458 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Social Sharing\n * @description\n * Share text, files, images, and links via social networks, sms, and email.\n * @usage\n * ```typescript\n * import { SocialSharing } from 'ionic-native';\n *\n * // Check if sharing via email is supported\n * SocialSharing.canShareViaEmail().then(() => {\n *   // Sharing via email is possible\n * }).catch(() => {\n *   // Sharing via email is not possible\n * });\n *\n * // Share via email\n * SocialSharing.shareViaEmail('Body', 'Subject', 'recipient@example.org').then(() => {\n *   // Success!\n * }).catch(() => {\n *   // Error!\n * });\n * ```\n */\nvar SocialSharing = (function () {\n    function SocialSharing() {\n    }\n    /**\n     * Shares using the share sheet\n     * @param message {string} The message you would like to share.\n     * @param subject {string} The subject\n     * @param file {string|string[]} URL(s) to file(s) or image(s), local path(s) to file(s) or image(s), or base64 data of an image. Only the first file/image will be used on Windows Phone.\n     * @param url {string} A URL to share\n     * @returns {Promise}\n     */\n    SocialSharing.share = function (message, subject, file, url) { return; };\n    /**\n     * Shares using the share sheet with additional options and returns a result object or an error message (requires plugin version 5.1.0+)\n     * @param options {object} The options object with the message, subject, files, url and chooserTitle properties.\n     * @returns {Promise}\n     */\n    SocialSharing.shareWithOptions = function (options) { return; };\n    /**\n     * Checks if you can share via a specific app.\n     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n     * @param message {string}\n     * @param subject {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise}\n     */\n    SocialSharing.canShareVia = function (appName, message, subject, image, url) { return; };\n    /**\n     * Shares directly to Twitter\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaTwitter = function (message, image, url) { return; };\n    /**\n     * Shares directly to Facebook\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaFacebook = function (message, image, url) { return; };\n    /**\n     * Shares directly to Facebook with a paste message hint\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @param pasteMessageHint {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaFacebookWithPasteMessageHint = function (message, image, url, pasteMessageHint) { return; };\n    /**\n     * Shares directly to Instagram\n     * @param message {string}\n     * @param image {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaInstagram = function (message, image) { return; };\n    /**\n     * Shares directly to WhatsApp\n     * @param message {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaWhatsApp = function (message, image, url) { return; };\n    /**\n     * Shares directly to a WhatsApp Contact\n     * @param receiver {string} Pass phone number on Android, and Addressbook ID (abid) on iOS\n     * @param message {string} Message to send\n     * @param image {string} Image to send (does not work on iOS\n     * @param url {string} Link to send\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaWhatsAppToReceiver = function (receiver, message, image, url) { return; };\n    /**\n     * Share via SMS\n     * @param messge {string} message to send\n     * @param phoneNumber {string} Number or multiple numbers seperated by commas\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaSMS = function (messge, phoneNumber) { return; };\n    /**\n     * Checks if you can share via email\n     * @returns {Promise}\n     */\n    SocialSharing.canShareViaEmail = function () { return; };\n    /**\n     * Share via Email\n     * @param message {string}\n     * @param subject {string}\n     * @param to {string[]}\n     * @param cc {string[]} Optional\n     * @param bcc {string[]} Optional\n     * @param files {string|string[]} Optional URL or local path to file(s) to attach\n     * @returns {Promise}\n     */\n    SocialSharing.shareViaEmail = function (message, subject, to, cc, bcc, files) { return; };\n    /**\n     * Share via AppName\n     * @param appName {string} App name or package name. Examples: instagram or com.apple.social.facebook\n     * @param message {string}\n     * @param subject {string}\n     * @param image {string}\n     * @param url {string}\n     * @returns {Promise}\n     */\n    SocialSharing.shareVia = function (appName, message, subject, image, url) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], SocialSharing, \"share\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 5,\n            errorIndex: 6,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"canShareVia\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 3,\n            errorIndex: 4,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaTwitter\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 3,\n            errorIndex: 4,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaFacebook\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 4,\n            errorIndex: 5,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaFacebookWithPasteMessageHint\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaInstagram\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 3,\n            errorIndex: 4,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaWhatsApp\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 4,\n            errorIndex: 5,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaWhatsAppToReceiver\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareViaSMS\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"canShareViaEmail\", null);\n    __decorate([\n        plugin_1.Cordova({\n            platforms: ['iOS', 'Android'],\n            successIndex: 6,\n            errorIndex: 7\n        })\n    ], SocialSharing, \"shareViaEmail\", null);\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 5,\n            errorIndex: 6,\n            platforms: ['iOS', 'Android']\n        })\n    ], SocialSharing, \"shareVia\", null);\n    SocialSharing = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SocialSharing',\n            plugin: 'cordova-plugin-x-socialsharing',\n            pluginRef: 'plugins.socialsharing',\n            repo: 'https://github.com/EddyVerbruggen/SocialSharing-PhoneGap-Plugin',\n            platforms: ['iOS', 'Android', 'Windows Phone']\n        })\n    ], SocialSharing);\n    return SocialSharing;\n}());\nexports.SocialSharing = SocialSharing;\n//# sourceMappingURL=socialsharing.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 459 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Spinner Dialog\n * @description\n * @usage\n * ```typescript\n * import { SpinnerDialog } from 'ionic-native';\n *\n *\n * SpinnerDialog.show();\n *\n * SpinnerDialog.hide();\n * ```\n */\nvar SpinnerDialog = (function () {\n    function SpinnerDialog() {\n    }\n    /**\n     * Shows the spinner dialog\n     * @param title {string} Spinner title (shows on Android only)\n     * @param message {string} Spinner message\n     * @param cancelCallback {boolean|function} Set to true to set spinner not cancelable. Or provide a function to call when the user cancels the spinner.\n     * @param iOSOptions {object} Options for iOS only\n     */\n    SpinnerDialog.show = function (title, message, cancelCallback, iOSOptions) { };\n    /**\n     * Hides the spinner dialog if visible\n     */\n    SpinnerDialog.hide = function () { };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], SpinnerDialog, \"show\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], SpinnerDialog, \"hide\", null);\n    SpinnerDialog = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SpinnerDialog',\n            plugin: 'cordova-plugin-spinner-dialog',\n            pluginRef: 'window.plugins.spinnerDialog',\n            repo: 'https://github.com/Paldom/SpinnerDialog',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], SpinnerDialog);\n    return SpinnerDialog;\n}());\nexports.SpinnerDialog = SpinnerDialog;\n//# sourceMappingURL=spinnerdialog.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NwaW5uZXJkaWFsb2cuanM/OGE5ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUIsT0FBTztBQUM1Qix1QkFBdUIsT0FBTztBQUM5Qiw4QkFBOEIsaUJBQWlCO0FBQy9DLDBCQUEwQixPQUFPO0FBQ2pDO0FBQ0EsZ0ZBQWdGO0FBQ2hGO0FBQ0E7QUFDQTtBQUNBLHNDQUFzQztBQUN0QztBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDU5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBTcGlubmVyIERpYWxvZ1xuICogQGRlc2NyaXB0aW9uXG4gKiBAdXNhZ2VcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFNwaW5uZXJEaWFsb2cgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBTcGlubmVyRGlhbG9nLnNob3coKTtcbiAqXG4gKiBTcGlubmVyRGlhbG9nLmhpZGUoKTtcbiAqIGBgYFxuICovXG52YXIgU3Bpbm5lckRpYWxvZyA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Bpbm5lckRpYWxvZygpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHNwaW5uZXIgZGlhbG9nXG4gICAgICogQHBhcmFtIHRpdGxlIHtzdHJpbmd9IFNwaW5uZXIgdGl0bGUgKHNob3dzIG9uIEFuZHJvaWQgb25seSlcbiAgICAgKiBAcGFyYW0gbWVzc2FnZSB7c3RyaW5nfSBTcGlubmVyIG1lc3NhZ2VcbiAgICAgKiBAcGFyYW0gY2FuY2VsQ2FsbGJhY2sge2Jvb2xlYW58ZnVuY3Rpb259IFNldCB0byB0cnVlIHRvIHNldCBzcGlubmVyIG5vdCBjYW5jZWxhYmxlLiBPciBwcm92aWRlIGEgZnVuY3Rpb24gdG8gY2FsbCB3aGVuIHRoZSB1c2VyIGNhbmNlbHMgdGhlIHNwaW5uZXIuXG4gICAgICogQHBhcmFtIGlPU09wdGlvbnMge29iamVjdH0gT3B0aW9ucyBmb3IgaU9TIG9ubHlcbiAgICAgKi9cbiAgICBTcGlubmVyRGlhbG9nLnNob3cgPSBmdW5jdGlvbiAodGl0bGUsIG1lc3NhZ2UsIGNhbmNlbENhbGxiYWNrLCBpT1NPcHRpb25zKSB7IH07XG4gICAgLyoqXG4gICAgICogSGlkZXMgdGhlIHNwaW5uZXIgZGlhbG9nIGlmIHZpc2libGVcbiAgICAgKi9cbiAgICBTcGlubmVyRGlhbG9nLmhpZGUgPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3luYzogdHJ1ZVxuICAgICAgICB9KVxuICAgIF0sIFNwaW5uZXJEaWFsb2csIFwic2hvd1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzeW5jOiB0cnVlXG4gICAgICAgIH0pXG4gICAgXSwgU3Bpbm5lckRpYWxvZywgXCJoaWRlXCIsIG51bGwpO1xuICAgIFNwaW5uZXJEaWFsb2cgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdTcGlubmVyRGlhbG9nJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXNwaW5uZXItZGlhbG9nJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ3dpbmRvdy5wbHVnaW5zLnNwaW5uZXJEaWFsb2cnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9QYWxkb20vU3Bpbm5lckRpYWxvZycsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnLCAnV2luZG93cyBQaG9uZSA4J11cbiAgICAgICAgfSlcbiAgICBdLCBTcGlubmVyRGlhbG9nKTtcbiAgICByZXR1cm4gU3Bpbm5lckRpYWxvZztcbn0oKSk7XG5leHBvcnRzLlNwaW5uZXJEaWFsb2cgPSBTcGlubmVyRGlhbG9nO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3Bpbm5lcmRpYWxvZy5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc3Bpbm5lcmRpYWxvZy5qc1xuLy8gbW9kdWxlIGlkID0gNDU5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 460 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Splashscreen\n * @description This plugin displays and hides a splash screen during application launch. The methods below allows showing and hiding the splashscreen after the app has loaded.\n * @usage\n * ```typescript\n * import { Splashscreen } from 'ionic-native';\n *\n *\n * Splashscreen.show();\n *\n * Splashscreen.hide();\n * ```\n */\nvar Splashscreen = (function () {\n    function Splashscreen() {\n    }\n    /**\n     * Shows the splashscreen\n     */\n    Splashscreen.show = function () { };\n    /**\n     * Hides the splashscreen\n     */\n    Splashscreen.hide = function () { };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Splashscreen, \"show\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Splashscreen, \"hide\", null);\n    Splashscreen = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Splashscreen',\n            plugin: 'cordova-plugin-splashscreen',\n            pluginRef: 'navigator.splashscreen',\n            repo: 'https://github.com/apache/cordova-plugin-splashscreen'\n        })\n    ], Splashscreen);\n    return Splashscreen;\n}());\nexports.Splashscreen = Splashscreen;\n//# sourceMappingURL=splashscreen.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3NwbGFzaHNjcmVlbi5qcz9jZWYyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFDQUFxQztBQUNyQztBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFNwbGFzaHNjcmVlblxuICogQGRlc2NyaXB0aW9uIFRoaXMgcGx1Z2luIGRpc3BsYXlzIGFuZCBoaWRlcyBhIHNwbGFzaCBzY3JlZW4gZHVyaW5nIGFwcGxpY2F0aW9uIGxhdW5jaC4gVGhlIG1ldGhvZHMgYmVsb3cgYWxsb3dzIHNob3dpbmcgYW5kIGhpZGluZyB0aGUgc3BsYXNoc2NyZWVuIGFmdGVyIHRoZSBhcHAgaGFzIGxvYWRlZC5cbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU3BsYXNoc2NyZWVuIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKlxuICogU3BsYXNoc2NyZWVuLnNob3coKTtcbiAqXG4gKiBTcGxhc2hzY3JlZW4uaGlkZSgpO1xuICogYGBgXG4gKi9cbnZhciBTcGxhc2hzY3JlZW4gPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNwbGFzaHNjcmVlbigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2hvd3MgdGhlIHNwbGFzaHNjcmVlblxuICAgICAqL1xuICAgIFNwbGFzaHNjcmVlbi5zaG93ID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBzcGxhc2hzY3JlZW5cbiAgICAgKi9cbiAgICBTcGxhc2hzY3JlZW4uaGlkZSA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzeW5jOiB0cnVlXG4gICAgICAgIH0pXG4gICAgXSwgU3BsYXNoc2NyZWVuLCBcInNob3dcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3luYzogdHJ1ZVxuICAgICAgICB9KVxuICAgIF0sIFNwbGFzaHNjcmVlbiwgXCJoaWRlXCIsIG51bGwpO1xuICAgIFNwbGFzaHNjcmVlbiA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1NwbGFzaHNjcmVlbicsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1zcGxhc2hzY3JlZW4nLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnbmF2aWdhdG9yLnNwbGFzaHNjcmVlbicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi1zcGxhc2hzY3JlZW4nXG4gICAgICAgIH0pXG4gICAgXSwgU3BsYXNoc2NyZWVuKTtcbiAgICByZXR1cm4gU3BsYXNoc2NyZWVuO1xufSgpKTtcbmV4cG9ydHMuU3BsYXNoc2NyZWVuID0gU3BsYXNoc2NyZWVuO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3BsYXNoc2NyZWVuLmpzLm1hcFxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vIC4vfi9pb25pYy1uYXRpdmUvZGlzdC9lczUvcGx1Z2lucy9zcGxhc2hzY3JlZW4uanNcbi8vIG1vZHVsZSBpZCA9IDQ2MFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 461 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name SQLite\n *\n * @description\n * Access SQLite databases on the device.\n *\n * @usage\n *\n * ```typescript\n * import { SQLite } from 'ionic-native';\n *\n * let db = new SQLite();\n * db.openDatabase({\n *   name: 'data.db',\n *   location: 'default' // the location field is required\n * }).then(() => {\n *   db.executeSql('create table danceMoves(name VARCHAR(32))', {}).then(() => {\n *\n *   }, (err) => {\n *     console.error('Unable to execute sql: ', err);\n *   });\n * }, (err) => {\n *   console.error('Unable to open database: ', err);\n * });\n * ```\n *\n */\nvar SQLite = (function () {\n    function SQLite() {\n    }\n    Object.defineProperty(SQLite.prototype, \"databaseFeatures\", {\n        get: function () {\n            return this._objectInstance.databaseFeatures;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Open or create a SQLite database file.\n     *\n     * See the plugin docs for an explanation of all options: https://github.com/litehelpers/Cordova-sqlite-storage#opening-a-database\n     *\n     * @param config the config for opening the database.\n     * @usage\n     *\n     * ```typescript\n     * import { SQLite } from 'ionic-native';\n     *\n     * let db = new SQLite();\n     * db.openDatabase({\n     *   name: 'data.db',\n     *   location: 'default' // the location field is required\n     * }).then(() => {\n     *   db.executeSql('create table danceMoves(name VARCHAR(32))', {}).then(() => {\n     *\n     *   }, (err) => {\n     *     console.error('Unable to execute sql', err);\n     *   })\n     * }, (err) => {\n     *   console.error('Unable to open database', err);\n     * });\n     * ```\n     */\n    SQLite.prototype.openDatabase = function (config) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            if (typeof sqlitePlugin !== 'undefined') {\n                sqlitePlugin.openDatabase(config, function (db) {\n                    _this._objectInstance = db;\n                    resolve(db);\n                }, function (error) {\n                    console.warn(error);\n                    reject(error);\n                });\n            }\n            else {\n                plugin_1.pluginWarn({\n                    pluginName: 'SQLite',\n                    plugin: 'cordova-sqlite-storage'\n                });\n            }\n        });\n    };\n    SQLite.prototype.addTransaction = function (transaction) { };\n    SQLite.prototype.transaction = function (fn) { return; };\n    SQLite.prototype.readTransaction = function (fn) { return; };\n    SQLite.prototype.startNextTransaction = function () { };\n    SQLite.prototype.close = function () { return; };\n    SQLite.prototype.start = function () { };\n    /**\n     * Execute SQL on the opened database. Note, you must call `openDatabase` first, and\n     * ensure it resolved and successfully opened the database.\n     *\n     * @usage\n     *\n     * ```typescript\n     * db.executeSql('SELECT FROM puppies WHERE type = ?', ['cavalier']).then((resultSet) => {\n     *   // Access the items through resultSet.rows\n     *   // resultSet.rows.item(i)\n     * }, (err) => {})\n     * ```\n     */\n    SQLite.prototype.executeSql = function (statement, params) { return; };\n    SQLite.prototype.addStatement = function (sql, values) { return; };\n    SQLite.prototype.sqlBatch = function (sqlStatements) { return; };\n    SQLite.prototype.abortallPendingTransactions = function () { };\n    SQLite.prototype.handleStatementSuccess = function (handler, response) { };\n    SQLite.prototype.handleStatementFailure = function (handler, response) { };\n    SQLite.prototype.run = function () { };\n    SQLite.prototype.abort = function (txFailure) { };\n    SQLite.prototype.finish = function () { };\n    SQLite.prototype.abortFromQ = function (sqlerror) { };\n    SQLite.echoTest = function () { return; };\n    SQLite.deleteDatabase = function (first) { return; };\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"addTransaction\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            successIndex: 2,\n            errorIndex: 1\n        })\n    ], SQLite.prototype, \"transaction\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], SQLite.prototype, \"readTransaction\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"startNextTransaction\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], SQLite.prototype, \"close\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"start\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], SQLite.prototype, \"executeSql\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], SQLite.prototype, \"addStatement\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], SQLite.prototype, \"sqlBatch\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"abortallPendingTransactions\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"handleStatementSuccess\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"handleStatementFailure\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"run\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"abort\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"finish\", null);\n    __decorate([\n        plugin_1.CordovaInstance({\n            sync: true\n        })\n    ], SQLite.prototype, \"abortFromQ\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SQLite, \"echoTest\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], SQLite, \"deleteDatabase\", null);\n    SQLite = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'SQLite',\n            pluginRef: 'sqlitePlugin',\n            plugin: 'cordova-sqlite-storage',\n            repo: 'https://github.com/litehelpers/Cordova-sqlite-storage'\n        })\n    ], SQLite);\n    return SQLite;\n}());\nexports.SQLite = SQLite;\n//# sourceMappingURL=sqlite.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 462 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Status Bar\n * @description\n * Manage the appearance of the native status bar.\n *\n * Requires Cordova plugin: `cordova-plugin-statusbar`. For more info, please see the [StatusBar plugin docs](https://github.com/apache/cordova-plugin-statusbar).\n *\n * @usage\n * ```typescript\n * import { StatusBar } from 'ionic-native';\n *\n *\n * StatusBar.overlaysWebView(true); // let status bar overlay webview\n *\n * StatusBar.backgroundColorByHexString('#ffffff'); // set status bar to white\n * ```\n *\n */\nvar StatusBar = (function () {\n    function StatusBar() {\n    }\n    /**\n     * Set whether the status bar overlays the main app view. The default\n     * is true.\n     *\n     * @param {boolean} doesOverlay  Whether the status bar overlays the main app view.\n     */\n    StatusBar.overlaysWebView = function (doesOverlay) { };\n    ;\n    /**\n     * Use the default statusbar (dark text, for light backgrounds).\n     */\n    StatusBar.styleDefault = function () { };\n    ;\n    /**\n     * Use the lightContent statusbar (light text, for dark backgrounds).\n     */\n    StatusBar.styleLightContent = function () { };\n    ;\n    /**\n     * Use the blackTranslucent statusbar (light text, for dark backgrounds).\n     */\n    StatusBar.styleBlackTranslucent = function () { };\n    ;\n    /**\n     * Use the blackOpaque statusbar (light text, for dark backgrounds).\n     */\n    StatusBar.styleBlackOpaque = function () { };\n    ;\n    /**\n     * Set the status bar to a specific named color. Valid options:\n     * black, darkGray, lightGray, white, gray, red, green, blue, cyan, yellow, magenta, orange, purple, brown.\n     *\n     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.\n     *\n     * @param {string} colorName  The name of the color (from above)\n     */\n    StatusBar.backgroundColorByName = function (colorName) { };\n    ;\n    /**\n     * Set the status bar to a specific hex color (CSS shorthand supported!).\n     *\n     * iOS note: you must call StatusBar.overlaysWebView(false) to enable color changing.\n     *\n     * @param {string} hexString  The hex value of the color.\n     */\n    StatusBar.backgroundColorByHexString = function (hexString) { };\n    ;\n    /**\n     * Hide the StatusBar\n     */\n    StatusBar.hide = function () { };\n    ;\n    /**\n    * Show the StatusBar\n    */\n    StatusBar.show = function () { };\n    ;\n    Object.defineProperty(StatusBar, \"isVisible\", {\n        /**\n         * Whether the StatusBar is currently visible or not.\n         */\n        get: function () { return window.StatusBar.isVisible; },\n        enumerable: true,\n        configurable: true\n    });\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"overlaysWebView\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"styleDefault\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"styleLightContent\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"styleBlackTranslucent\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"styleBlackOpaque\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"backgroundColorByName\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"backgroundColorByHexString\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"hide\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], StatusBar, \"show\", null);\n    __decorate([\n        plugin_1.CordovaProperty\n    ], StatusBar, \"isVisible\", null);\n    StatusBar = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'StatusBar',\n            plugin: 'cordova-plugin-statusbar',\n            pluginRef: 'StatusBar',\n            repo: 'https://github.com/apache/cordova-plugin-statusbar',\n            platforms: ['iOS', 'Android', 'Windows Phone 8', 'Windows 8', 'Windows 10']\n        })\n    ], StatusBar);\n    return StatusBar;\n}());\nexports.StatusBar = StatusBar;\n//# sourceMappingURL=statusbar.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 463 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Stepcounter\n * @description\n * Cordova plugin for using device's stepcounter on Android (API > 19)\n *\n * Use to\n * - start and stop stepcounter service\n * - read device's stepcounter data\n *\n * @usage\n * ```\n * import { Stepcounter } from 'ionic-native';\n *\n * let startingOffset = 0;\n * Stepcounter.start(startingOffset).then(onSuccess => console.log('stepcounter-start success', onSuccess), onFailure => console.log('stepcounter-start error', onFailure));\n *\n * Stepcounter.getHistory().then(historyObj => console.log('stepcounter-history success', historyObj), onFailure => console.log('stepcounter-history error', onFailure));\n *\n * ```\n */\nvar Stepcounter = (function () {\n    function Stepcounter() {\n    }\n    /**\n     * Start the step counter\n     *\n     * @param startingOffset {number} will be added to the total steps counted in this session\n     * @return {Promise} Returns a Promise that resolves on success or rejects on failure\n     */\n    Stepcounter.start = function (startingOffset) { return; };\n    /**\n     * Stop the step counter\n     * @return {Promise} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\n     */\n    Stepcounter.stop = function () { return; };\n    /**\n     * Get the amount of steps for today (or -1 if it no data given)\n     * @return {Promise} Returns a Promise that resolves on success with the amount of steps today, or rejects on failure\n     */\n    Stepcounter.getTodayStepCount = function () { return; };\n    /**\n     * Get the amount of steps since the start command has been called\n     * @return {Promise} Returns a Promise that resolves on success with the amount of steps since the start command has been called, or rejects on failure\n     */\n    Stepcounter.getStepCount = function () { return; };\n    /**\n     * Returns true/false if Android device is running >API level 19 && has the step counter API available\n     * @return {Promise} Returns a Promise that resolves on success, or rejects on failure\n     */\n    Stepcounter.deviceCanCountSteps = function () { return; };\n    /**\n     * Get the step history (JavaScript object)\n     * @return {Promise} Returns a Promise that resolves on success, or rejects on failure\n     */\n    Stepcounter.getHistory = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"start\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"stop\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"getTodayStepCount\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"getStepCount\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"deviceCanCountSteps\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Stepcounter, \"getHistory\", null);\n    Stepcounter = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Stepcounter',\n            plugin: 'https://github.com/texh/cordova-plugin-stepcounter',\n            pluginRef: 'stepcounter',\n            repo: 'https://github.com/texh/cordova-plugin-stepcounter',\n            platforms: ['Android']\n        })\n    ], Stepcounter);\n    return Stepcounter;\n}());\nexports.Stepcounter = Stepcounter;\n//# sourceMappingURL=stepcounter.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3N0ZXBjb3VudGVyLmpzP2EyMTIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEIsT0FBTztBQUNyQyxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLGlEQUFpRCxRQUFRO0FBQ3pEO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLG1EQUFtRCxRQUFRO0FBQzNEO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLDBDQUEwQyxRQUFRO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFN0ZXBjb3VudGVyXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvcmRvdmEgcGx1Z2luIGZvciB1c2luZyBkZXZpY2UncyBzdGVwY291bnRlciBvbiBBbmRyb2lkIChBUEkgPiAxOSlcbiAqXG4gKiBVc2UgdG9cbiAqIC0gc3RhcnQgYW5kIHN0b3Agc3RlcGNvdW50ZXIgc2VydmljZVxuICogLSByZWFkIGRldmljZSdzIHN0ZXBjb3VudGVyIGRhdGFcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHsgU3RlcGNvdW50ZXIgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqIGxldCBzdGFydGluZ09mZnNldCA9IDA7XG4gKiBTdGVwY291bnRlci5zdGFydChzdGFydGluZ09mZnNldCkudGhlbihvblN1Y2Nlc3MgPT4gY29uc29sZS5sb2coJ3N0ZXBjb3VudGVyLXN0YXJ0IHN1Y2Nlc3MnLCBvblN1Y2Nlc3MpLCBvbkZhaWx1cmUgPT4gY29uc29sZS5sb2coJ3N0ZXBjb3VudGVyLXN0YXJ0IGVycm9yJywgb25GYWlsdXJlKSk7XG4gKlxuICogU3RlcGNvdW50ZXIuZ2V0SGlzdG9yeSgpLnRoZW4oaGlzdG9yeU9iaiA9PiBjb25zb2xlLmxvZygnc3RlcGNvdW50ZXItaGlzdG9yeSBzdWNjZXNzJywgaGlzdG9yeU9iaiksIG9uRmFpbHVyZSA9PiBjb25zb2xlLmxvZygnc3RlcGNvdW50ZXItaGlzdG9yeSBlcnJvcicsIG9uRmFpbHVyZSkpO1xuICpcbiAqIGBgYFxuICovXG52YXIgU3RlcGNvdW50ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFN0ZXBjb3VudGVyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTdGFydCB0aGUgc3RlcCBjb3VudGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0gc3RhcnRpbmdPZmZzZXQge251bWJlcn0gd2lsbCBiZSBhZGRlZCB0byB0aGUgdG90YWwgc3RlcHMgY291bnRlZCBpbiB0aGlzIHNlc3Npb25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3Mgb3IgcmVqZWN0cyBvbiBmYWlsdXJlXG4gICAgICovXG4gICAgU3RlcGNvdW50ZXIuc3RhcnQgPSBmdW5jdGlvbiAoc3RhcnRpbmdPZmZzZXQpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFN0b3AgdGhlIHN0ZXAgY291bnRlclxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gc3VjY2VzcyB3aXRoIHRoZSBhbW91bnQgb2Ygc3RlcHMgc2luY2UgdGhlIHN0YXJ0IGNvbW1hbmQgaGFzIGJlZW4gY2FsbGVkLCBvciByZWplY3RzIG9uIGZhaWx1cmVcbiAgICAgKi9cbiAgICBTdGVwY291bnRlci5zdG9wID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbW91bnQgb2Ygc3RlcHMgZm9yIHRvZGF5IChvciAtMSBpZiBpdCBubyBkYXRhIGdpdmVuKVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gc3VjY2VzcyB3aXRoIHRoZSBhbW91bnQgb2Ygc3RlcHMgdG9kYXksIG9yIHJlamVjdHMgb24gZmFpbHVyZVxuICAgICAqL1xuICAgIFN0ZXBjb3VudGVyLmdldFRvZGF5U3RlcENvdW50ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhbW91bnQgb2Ygc3RlcHMgc2luY2UgdGhlIHN0YXJ0IGNvbW1hbmQgaGFzIGJlZW4gY2FsbGVkXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbiBzdWNjZXNzIHdpdGggdGhlIGFtb3VudCBvZiBzdGVwcyBzaW5jZSB0aGUgc3RhcnQgY29tbWFuZCBoYXMgYmVlbiBjYWxsZWQsIG9yIHJlamVjdHMgb24gZmFpbHVyZVxuICAgICAqL1xuICAgIFN0ZXBjb3VudGVyLmdldFN0ZXBDb3VudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdHJ1ZS9mYWxzZSBpZiBBbmRyb2lkIGRldmljZSBpcyBydW5uaW5nID5BUEkgbGV2ZWwgMTkgJiYgaGFzIHRoZSBzdGVwIGNvdW50ZXIgQVBJIGF2YWlsYWJsZVxuICAgICAqIEByZXR1cm4ge1Byb21pc2V9IFJldHVybnMgYSBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgb24gc3VjY2Vzcywgb3IgcmVqZWN0cyBvbiBmYWlsdXJlXG4gICAgICovXG4gICAgU3RlcGNvdW50ZXIuZGV2aWNlQ2FuQ291bnRTdGVwcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEdldCB0aGUgc3RlcCBoaXN0b3J5IChKYXZhU2NyaXB0IG9iamVjdClcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIG9uIHN1Y2Nlc3MsIG9yIHJlamVjdHMgb24gZmFpbHVyZVxuICAgICAqL1xuICAgIFN0ZXBjb3VudGVyLmdldEhpc3RvcnkgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgU3RlcGNvdW50ZXIsIFwic3RhcnRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFN0ZXBjb3VudGVyLCBcInN0b3BcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFN0ZXBjb3VudGVyLCBcImdldFRvZGF5U3RlcENvdW50XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBTdGVwY291bnRlciwgXCJnZXRTdGVwQ291bnRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFN0ZXBjb3VudGVyLCBcImRldmljZUNhbkNvdW50U3RlcHNcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFN0ZXBjb3VudGVyLCBcImdldEhpc3RvcnlcIiwgbnVsbCk7XG4gICAgU3RlcGNvdW50ZXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdTdGVwY291bnRlcicsXG4gICAgICAgICAgICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vdGV4aC9jb3Jkb3ZhLXBsdWdpbi1zdGVwY291bnRlcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdzdGVwY291bnRlcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3RleGgvY29yZG92YS1wbHVnaW4tc3RlcGNvdW50ZXInLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnXVxuICAgICAgICB9KVxuICAgIF0sIFN0ZXBjb3VudGVyKTtcbiAgICByZXR1cm4gU3RlcGNvdW50ZXI7XG59KCkpO1xuZXhwb3J0cy5TdGVwY291bnRlciA9IFN0ZXBjb3VudGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c3RlcGNvdW50ZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3N0ZXBjb3VudGVyLmpzXG4vLyBtb2R1bGUgaWQgPSA0NjNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 464 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name StreamingMedia\n * @description\n * This plugin allows you to stream audio and video in a fullscreen, native player on iOS and Android.\n *\n * @usage\n * ```\n * import {StreamingMedia, StreamingVideoOptions} from 'ionic-native';\n *\n * let options: StreamingVideoOptions = {\n *   successCallback: () => { console.log('Video played') },\n *   errorCallback: (e) => { console.log('Error streaming') },\n *   orientation: 'landscape'\n * };\n *\n * StreamingMedia.('https://path/to/video/stream', options);\n *\n * ```\n */\nvar StreamingMedia = (function () {\n    function StreamingMedia() {\n    }\n    /**\n     * Streams a video\n     * @param videoUrl {string} The URL of the video\n     * @param options {StreamingVideoOptions} Options\n     */\n    StreamingMedia.playVideo = function (videoUrl, options) { };\n    /**\n     * Streams an audio\n     * @param audioUrl {string} The URL of the audio stream\n     * @param options {StreamingAudioOptions} Options\n     */\n    StreamingMedia.playAudio = function (audioUrl, options) { };\n    /**\n     * Stops streaming audio\n     */\n    StreamingMedia.stopAudio = function () { };\n    /**\n     * Pauses streaming audio\n     */\n    StreamingMedia.pauseAudio = function () { };\n    /**\n     * Resumes streaming audio\n     */\n    StreamingMedia.resumeAudio = function () { };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], StreamingMedia, \"playVideo\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], StreamingMedia, \"playAudio\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], StreamingMedia, \"stopAudio\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['iOS'] })\n    ], StreamingMedia, \"pauseAudio\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true, platforms: ['iOS'] })\n    ], StreamingMedia, \"resumeAudio\", null);\n    StreamingMedia = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'StreamingMedia',\n            plugin: 'cordova-plugin-streaming-media',\n            pluginRef: 'plugins.streamingMedia',\n            repo: 'https://github.com/nchutchind/cordova-plugin-streaming-media',\n            platforms: ['Android', 'iOS']\n        })\n    ], StreamingMedia);\n    return StreamingMedia;\n}());\nexports.StreamingMedia = StreamingMedia;\n//# sourceMappingURL=streaming-media.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3N0cmVhbWluZy1tZWRpYS5qcz81OGYwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHNDQUFzQztBQUNqRDtBQUNBO0FBQ0EsNkJBQTZCLDhCQUE4QjtBQUMzRCw0QkFBNEIsaUNBQWlDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBLHdCQUF3QixPQUFPO0FBQy9CLHVCQUF1QixzQkFBc0I7QUFDN0M7QUFDQSw2REFBNkQ7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsNENBQTRDO0FBQzVDO0FBQ0E7QUFDQTtBQUNBLDZDQUE2QztBQUM3QztBQUNBO0FBQ0E7QUFDQSw4Q0FBOEM7QUFDOUM7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBLDBCQUEwQixhQUFhO0FBQ3ZDO0FBQ0E7QUFDQSwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQSwwQkFBMEIsaUNBQWlDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ2NC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgU3RyZWFtaW5nTWVkaWFcbiAqIEBkZXNjcmlwdGlvblxuICogVGhpcyBwbHVnaW4gYWxsb3dzIHlvdSB0byBzdHJlYW0gYXVkaW8gYW5kIHZpZGVvIGluIGEgZnVsbHNjcmVlbiwgbmF0aXZlIHBsYXllciBvbiBpT1MgYW5kIEFuZHJvaWQuXG4gKlxuICogQHVzYWdlXG4gKiBgYGBcbiAqIGltcG9ydCB7U3RyZWFtaW5nTWVkaWEsIFN0cmVhbWluZ1ZpZGVvT3B0aW9uc30gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBsZXQgb3B0aW9uczogU3RyZWFtaW5nVmlkZW9PcHRpb25zID0ge1xuICogICBzdWNjZXNzQ2FsbGJhY2s6ICgpID0+IHsgY29uc29sZS5sb2coJ1ZpZGVvIHBsYXllZCcpIH0sXG4gKiAgIGVycm9yQ2FsbGJhY2s6IChlKSA9PiB7IGNvbnNvbGUubG9nKCdFcnJvciBzdHJlYW1pbmcnKSB9LFxuICogICBvcmllbnRhdGlvbjogJ2xhbmRzY2FwZSdcbiAqIH07XG4gKlxuICogU3RyZWFtaW5nTWVkaWEuKCdodHRwczovL3BhdGgvdG8vdmlkZW8vc3RyZWFtJywgb3B0aW9ucyk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBTdHJlYW1pbmdNZWRpYSA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3RyZWFtaW5nTWVkaWEoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0cmVhbXMgYSB2aWRlb1xuICAgICAqIEBwYXJhbSB2aWRlb1VybCB7c3RyaW5nfSBUaGUgVVJMIG9mIHRoZSB2aWRlb1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHtTdHJlYW1pbmdWaWRlb09wdGlvbnN9IE9wdGlvbnNcbiAgICAgKi9cbiAgICBTdHJlYW1pbmdNZWRpYS5wbGF5VmlkZW8gPSBmdW5jdGlvbiAodmlkZW9VcmwsIG9wdGlvbnMpIHsgfTtcbiAgICAvKipcbiAgICAgKiBTdHJlYW1zIGFuIGF1ZGlvXG4gICAgICogQHBhcmFtIGF1ZGlvVXJsIHtzdHJpbmd9IFRoZSBVUkwgb2YgdGhlIGF1ZGlvIHN0cmVhbVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtTdHJlYW1pbmdBdWRpb09wdGlvbnN9IE9wdGlvbnNcbiAgICAgKi9cbiAgICBTdHJlYW1pbmdNZWRpYS5wbGF5QXVkaW8gPSBmdW5jdGlvbiAoYXVkaW9VcmwsIG9wdGlvbnMpIHsgfTtcbiAgICAvKipcbiAgICAgKiBTdG9wcyBzdHJlYW1pbmcgYXVkaW9cbiAgICAgKi9cbiAgICBTdHJlYW1pbmdNZWRpYS5zdG9wQXVkaW8gPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogUGF1c2VzIHN0cmVhbWluZyBhdWRpb1xuICAgICAqL1xuICAgIFN0cmVhbWluZ01lZGlhLnBhdXNlQXVkaW8gPSBmdW5jdGlvbiAoKSB7IH07XG4gICAgLyoqXG4gICAgICogUmVzdW1lcyBzdHJlYW1pbmcgYXVkaW9cbiAgICAgKi9cbiAgICBTdHJlYW1pbmdNZWRpYS5yZXN1bWVBdWRpbyA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBTdHJlYW1pbmdNZWRpYSwgXCJwbGF5VmlkZW9cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlIH0pXG4gICAgXSwgU3RyZWFtaW5nTWVkaWEsIFwicGxheUF1ZGlvXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIFN0cmVhbWluZ01lZGlhLCBcInN0b3BBdWRpb1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUsIHBsYXRmb3JtczogWydpT1MnXSB9KVxuICAgIF0sIFN0cmVhbWluZ01lZGlhLCBcInBhdXNlQXVkaW9cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoeyBzeW5jOiB0cnVlLCBwbGF0Zm9ybXM6IFsnaU9TJ10gfSlcbiAgICBdLCBTdHJlYW1pbmdNZWRpYSwgXCJyZXN1bWVBdWRpb1wiLCBudWxsKTtcbiAgICBTdHJlYW1pbmdNZWRpYSA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1N0cmVhbWluZ01lZGlhJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLXN0cmVhbWluZy1tZWRpYScsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLnN0cmVhbWluZ01lZGlhJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vbmNodXRjaGluZC9jb3Jkb3ZhLXBsdWdpbi1zdHJlYW1pbmctbWVkaWEnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgICAgICAgfSlcbiAgICBdLCBTdHJlYW1pbmdNZWRpYSk7XG4gICAgcmV0dXJuIFN0cmVhbWluZ01lZGlhO1xufSgpKTtcbmV4cG9ydHMuU3RyZWFtaW5nTWVkaWEgPSBTdHJlYW1pbmdNZWRpYTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXN0cmVhbWluZy1tZWRpYS5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvc3RyZWFtaW5nLW1lZGlhLmpzXG4vLyBtb2R1bGUgaWQgPSA0NjRcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 465 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @name 3DTouch\n * @description\n * @usage\n * Please do refer to the original plugin's repo for detailed usage. The usage example here might not be sufficient.\n * ```\n * import { ThreeDeeTouch } from 'ionic-native';\n *\n * // import for type completion on variables\n * import { ThreeDeeTouchQuickAction, ThreeDeeTouchForceTouch } from 'ionic-native';\n * ...\n *\n * ThreeDeeTouch.isAvailable().then(isAvailable => console.log(\"3D Touch available? \" + isAvailable));\n *\n * ThreeDeeTouch.watchForceTouches()\n *   .subscribe(\n *     (data: ThreeDeeTouchForceTouch) => {\n *       console.log(\"Force touch %\" + data.force);\n *       console.log(\"Force touch timestamp: \" + data.timestamp);\n *       console.log(\"Force touch x: \" + data.x);\n *       console.log(\"Force touch y: \" + data.y);\n *     }\n *   );\n *\n *\n * let actions: Array<ThreeDeeTouchQuickAction> = [\n *   {\n *     type: 'checkin',\n *     title: 'Check in',\n *     subtitle: 'Quickly check in',\n *     iconType: 'Compose'\n *   },\n *   {\n *     type: 'share',\n *     title: 'Share',\n *     subtitle: 'Share like you care',\n *     iconType: 'Share'\n *   },\n *   {\n *     type: 'search',\n *     title: 'Search',\n *     iconType: 'Search'\n *   },\n *   {\n *     title: 'Show favorites',\n *     iconTemplate: 'HeartTemplate'\n *   }\n * ];\n * ThreeDeeTouch.configureQuickActions(actions);\n *\n * ThreeDeeTouch.onHomeIconPressed().subscribe(\n *  (payload) => {\n *    // returns an object that is the button you presed\n *    console.log('Pressed the ${payload.title} button')\n *    console.log(payload.type)\n *\n *  }\n * )\n * ```\n */\nvar ThreeDeeTouch = (function () {\n    function ThreeDeeTouch() {\n    }\n    /**\n     * You need an iPhone 6S or some future tech to use the features of this plugin, so you can check at runtime if the user's device is supported.\n     * @returns {Promise<boolean>} returns a promise that resolves with a boolean that indicates whether the plugin is available or not\n     */\n    ThreeDeeTouch.isAvailable = function () { return; };\n    /**\n     * You can get a notification when the user force touches the webview. The plugin defines a Force Touch when at least 75% of the maximum force is applied to the screen. Your app will receive the x and y coordinates, so you have to figure out which UI element was touched.\n     * @returns {Observable<ThreeDeeTouchForceTouch>} Returns an observable that sends a `ThreeDeeTouchForceTouch` object\n     */\n    ThreeDeeTouch.watchForceTouches = function () { return; };\n    /**\n     * setup the 3D-touch actions, takes an array of objects with the following\n     * @param {string} type (optional) A type that can be used `onHomeIconPressed` callback\n     * @param {string} title Title for your action\n     * @param {string} subtitle (optional) A short description for your action\n     * @param {string} iconType (optional) Choose between Prohibit, Contact, Home, MarkLocation, Favorite, Love, Cloud, Invitation, Confirmation, Mail, Message, Date, Time, CapturePhoto, CaptureVideo, Task, TaskCompleted, Alarm, Bookmark, Shuffle, Audio, Update\n     * @param {string} iconTemplate (optional) Can be used to provide your own icon\n     */\n    ThreeDeeTouch.configureQuickActions = function (quickActions) { };\n    /**\n     * When a home icon is pressed, your app launches and this JS callback is invoked.\n     * @returns {Observable<any>} returns an observable that notifies you when he user presses on the home screen icon\n     */\n    ThreeDeeTouch.onHomeIconPressed = function () {\n        return new Observable_1.Observable(function (observer) {\n            if (window.ThreeDeeTouch && window.ThreeDeeTouch.onHomeIconPressed) {\n                window.ThreeDeeTouch.onHomeIconPressed = observer.next.bind(observer);\n            }\n            else {\n                observer.error('3dTouch plugin is not available.');\n                observer.complete();\n            }\n        });\n    };\n    /**\n     * Enable Link Preview.\n     * UIWebView and WKWebView (the webviews powering Cordova apps) don't allow the fancy new link preview feature of iOS9.\n     */\n    ThreeDeeTouch.enableLinkPreview = function () { };\n    /**\n     * Disabled the link preview feature, if enabled.\n     */\n    ThreeDeeTouch.disableLinkPreview = function () { };\n    __decorate([\n        plugin_1.Cordova()\n    ], ThreeDeeTouch, \"isAvailable\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true\n        })\n    ], ThreeDeeTouch, \"watchForceTouches\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], ThreeDeeTouch, \"configureQuickActions\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], ThreeDeeTouch, \"enableLinkPreview\", null);\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], ThreeDeeTouch, \"disableLinkPreview\", null);\n    ThreeDeeTouch = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ThreeDeeTouch',\n            plugin: 'cordova-plugin-3dtouch',\n            pluginRef: 'ThreeDeeTouch',\n            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-3dtouch',\n            platforms: ['iOS']\n        })\n    ], ThreeDeeTouch);\n    return ThreeDeeTouch;\n}());\nexports.ThreeDeeTouch = ThreeDeeTouch;\n//# sourceMappingURL=3dtouch.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 466 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Toast\n * @description\n * This plugin allows you to show a native Toast (a little text popup) on iOS, Android and WP8. It's great for showing a non intrusive native notification which is guaranteed always in the viewport of the browser.\n *\n * Requires Cordova plugin: `cordova-plugin-x-toast`. For more info, please see the [Toast plugin docs](https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin).\n *\n * @usage\n * ```typescript\n * import { Toast } from 'ionic-native';\n *\n *\n * Toast.show(\"I'm a toast\", '5000', 'center').subscribe(\n *   toast => {\n *     console.log(toast);\n *   }\n * );\n * ```\n * @interfaces\n * ToastOptions\n */\nvar Toast = (function () {\n    function Toast() {\n    }\n    /**\n     * Show a native toast for the given duration at the specified position.\n     *\n     * @param {string} message  The message to display.\n     * @param {string} duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n     * @param {string} position  Where to position the toast, either 'top', 'center', or 'bottom'.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.show = function (message, duration, position) { return; };\n    /**\n     * Manually hide any currently visible toast.\n     * @return {Promise} Returns a Promise that resolves on success.\n     */\n    Toast.hide = function () { return; };\n    /**\n     * Show a native toast with the given options.\n     *\n     * @param {Object} options  Options for showing a toast. Available options:\n     *   message  The message to display.\n     *   duration  Duration to show the toast, either 'short', 'long' or any number of milliseconds: '1500'.\n     *   position  Where to position the toast, either 'top', 'center', or 'bottom'.\n     *   addPixelsY  Offset in pixels to move the toast up or down from its specified position.\n     *\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showWithOptions = function (options) { return; };\n    /**\n     * Shorthand for `show(message, 'short', 'top')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showShortTop = function (message) { return; };\n    /**\n     * Shorthand for `show(message, 'short', 'center')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showShortCenter = function (message) { return; };\n    /**\n     * Shorthand for `show(message, 'short', 'bottom')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showShortBottom = function (message) { return; };\n    /**\n     * Shorthand for `show(message, 'long', 'top')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showLongTop = function (message) { return; };\n    /**\n     * Shorthand for `show(message, 'long', 'center')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showLongCenter = function (message) { return; };\n    /**\n     * Shorthand for `show(message, 'long', 'bottom')`.\n     * @return {Observable}  Returns an Observable that notifies first on success and then when tapped, rejects on error.\n     */\n    Toast.showLongBottom = function (message) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"show\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], Toast, \"hide\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showWithOptions\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showShortTop\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showShortCenter\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showShortBottom\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showLongTop\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showLongCenter\", null);\n    __decorate([\n        plugin_1.Cordova({\n            observable: true,\n            clearFunction: 'hide'\n        })\n    ], Toast, \"showLongBottom\", null);\n    Toast = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Toast',\n            plugin: 'cordova-plugin-x-toast',\n            pluginRef: 'plugins.toast',\n            repo: 'https://github.com/EddyVerbruggen/Toast-PhoneGap-Plugin',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], Toast);\n    return Toast;\n}());\nexports.Toast = Toast;\n//# sourceMappingURL=toast.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3RvYXN0LmpzPzVhMDgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZUFBZSxPQUFPO0FBQ3RCLGdCQUFnQixXQUFXO0FBQzNCO0FBQ0EseURBQXlELFFBQVE7QUFDakU7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0EsOEJBQThCLFFBQVE7QUFDdEM7QUFDQTtBQUNBO0FBQ0EsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLGdEQUFnRCxRQUFRO0FBQ3hEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLDZDQUE2QyxRQUFRO0FBQ3JEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLGdEQUFnRCxRQUFRO0FBQ3hEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLGdEQUFnRCxRQUFRO0FBQ3hEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQSxnQkFBZ0IsV0FBVztBQUMzQjtBQUNBLCtDQUErQyxRQUFRO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDY2LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBUb2FzdFxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGlzIHBsdWdpbiBhbGxvd3MgeW91IHRvIHNob3cgYSBuYXRpdmUgVG9hc3QgKGEgbGl0dGxlIHRleHQgcG9wdXApIG9uIGlPUywgQW5kcm9pZCBhbmQgV1A4LiBJdCdzIGdyZWF0IGZvciBzaG93aW5nIGEgbm9uIGludHJ1c2l2ZSBuYXRpdmUgbm90aWZpY2F0aW9uIHdoaWNoIGlzIGd1YXJhbnRlZWQgYWx3YXlzIGluIHRoZSB2aWV3cG9ydCBvZiB0aGUgYnJvd3Nlci5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXgtdG9hc3RgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbVG9hc3QgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9Ub2FzdC1QaG9uZUdhcC1QbHVnaW4pLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgVG9hc3QgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiBUb2FzdC5zaG93KFwiSSdtIGEgdG9hc3RcIiwgJzUwMDAnLCAnY2VudGVyJykuc3Vic2NyaWJlKFxuICogICB0b2FzdCA9PiB7XG4gKiAgICAgY29uc29sZS5sb2codG9hc3QpO1xuICogICB9XG4gKiApO1xuICogYGBgXG4gKiBAaW50ZXJmYWNlc1xuICogVG9hc3RPcHRpb25zXG4gKi9cbnZhciBUb2FzdCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG9hc3QoKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNob3cgYSBuYXRpdmUgdG9hc3QgZm9yIHRoZSBnaXZlbiBkdXJhdGlvbiBhdCB0aGUgc3BlY2lmaWVkIHBvc2l0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGR1cmF0aW9uICBEdXJhdGlvbiB0byBzaG93IHRoZSB0b2FzdCwgZWl0aGVyICdzaG9ydCcsICdsb25nJyBvciBhbnkgbnVtYmVyIG9mIG1pbGxpc2Vjb25kczogJzE1MDAnLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBwb3NpdGlvbiAgV2hlcmUgdG8gcG9zaXRpb24gdGhlIHRvYXN0LCBlaXRoZXIgJ3RvcCcsICdjZW50ZXInLCBvciAnYm90dG9tJy5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSAgUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgZmlyc3Qgb24gc3VjY2VzcyBhbmQgdGhlbiB3aGVuIHRhcHBlZCwgcmVqZWN0cyBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBUb2FzdC5zaG93ID0gZnVuY3Rpb24gKG1lc3NhZ2UsIGR1cmF0aW9uLCBwb3NpdGlvbikgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogTWFudWFsbHkgaGlkZSBhbnkgY3VycmVudGx5IHZpc2libGUgdG9hc3QuXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBvbiBzdWNjZXNzLlxuICAgICAqL1xuICAgIFRvYXN0LmhpZGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IGEgbmF0aXZlIHRvYXN0IHdpdGggdGhlIGdpdmVuIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAgT3B0aW9ucyBmb3Igc2hvd2luZyBhIHRvYXN0LiBBdmFpbGFibGUgb3B0aW9uczpcbiAgICAgKiAgIG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXkuXG4gICAgICogICBkdXJhdGlvbiAgRHVyYXRpb24gdG8gc2hvdyB0aGUgdG9hc3QsIGVpdGhlciAnc2hvcnQnLCAnbG9uZycgb3IgYW55IG51bWJlciBvZiBtaWxsaXNlY29uZHM6ICcxNTAwJy5cbiAgICAgKiAgIHBvc2l0aW9uICBXaGVyZSB0byBwb3NpdGlvbiB0aGUgdG9hc3QsIGVpdGhlciAndG9wJywgJ2NlbnRlcicsIG9yICdib3R0b20nLlxuICAgICAqICAgYWRkUGl4ZWxzWSAgT2Zmc2V0IGluIHBpeGVscyB0byBtb3ZlIHRoZSB0b2FzdCB1cCBvciBkb3duIGZyb20gaXRzIHNwZWNpZmllZCBwb3NpdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9ICBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBmaXJzdCBvbiBzdWNjZXNzIGFuZCB0aGVuIHdoZW4gdGFwcGVkLCByZWplY3RzIG9uIGVycm9yLlxuICAgICAqL1xuICAgIFRvYXN0LnNob3dXaXRoT3B0aW9ucyA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG9ydGhhbmQgZm9yIGBzaG93KG1lc3NhZ2UsICdzaG9ydCcsICd0b3AnKWAuXG4gICAgICogQHJldHVybiB7T2JzZXJ2YWJsZX0gIFJldHVybnMgYW4gT2JzZXJ2YWJsZSB0aGF0IG5vdGlmaWVzIGZpcnN0IG9uIHN1Y2Nlc3MgYW5kIHRoZW4gd2hlbiB0YXBwZWQsIHJlamVjdHMgb24gZXJyb3IuXG4gICAgICovXG4gICAgVG9hc3Quc2hvd1Nob3J0VG9wID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFNob3J0aGFuZCBmb3IgYHNob3cobWVzc2FnZSwgJ3Nob3J0JywgJ2NlbnRlcicpYC5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSAgUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgZmlyc3Qgb24gc3VjY2VzcyBhbmQgdGhlbiB3aGVuIHRhcHBlZCwgcmVqZWN0cyBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBUb2FzdC5zaG93U2hvcnRDZW50ZXIgPSBmdW5jdGlvbiAobWVzc2FnZSkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogU2hvcnRoYW5kIGZvciBgc2hvdyhtZXNzYWdlLCAnc2hvcnQnLCAnYm90dG9tJylgLlxuICAgICAqIEByZXR1cm4ge09ic2VydmFibGV9ICBSZXR1cm5zIGFuIE9ic2VydmFibGUgdGhhdCBub3RpZmllcyBmaXJzdCBvbiBzdWNjZXNzIGFuZCB0aGVuIHdoZW4gdGFwcGVkLCByZWplY3RzIG9uIGVycm9yLlxuICAgICAqL1xuICAgIFRvYXN0LnNob3dTaG9ydEJvdHRvbSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG9ydGhhbmQgZm9yIGBzaG93KG1lc3NhZ2UsICdsb25nJywgJ3RvcCcpYC5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSAgUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgZmlyc3Qgb24gc3VjY2VzcyBhbmQgdGhlbiB3aGVuIHRhcHBlZCwgcmVqZWN0cyBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBUb2FzdC5zaG93TG9uZ1RvcCA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG9ydGhhbmQgZm9yIGBzaG93KG1lc3NhZ2UsICdsb25nJywgJ2NlbnRlcicpYC5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSAgUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgZmlyc3Qgb24gc3VjY2VzcyBhbmQgdGhlbiB3aGVuIHRhcHBlZCwgcmVqZWN0cyBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBUb2FzdC5zaG93TG9uZ0NlbnRlciA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG9ydGhhbmQgZm9yIGBzaG93KG1lc3NhZ2UsICdsb25nJywgJ2JvdHRvbScpYC5cbiAgICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlfSAgUmV0dXJucyBhbiBPYnNlcnZhYmxlIHRoYXQgbm90aWZpZXMgZmlyc3Qgb24gc3VjY2VzcyBhbmQgdGhlbiB3aGVuIHRhcHBlZCwgcmVqZWN0cyBvbiBlcnJvci5cbiAgICAgKi9cbiAgICBUb2FzdC5zaG93TG9uZ0JvdHRvbSA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ2hpZGUnXG4gICAgICAgIH0pXG4gICAgXSwgVG9hc3QsIFwic2hvd1wiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgVG9hc3QsIFwiaGlkZVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ2hpZGUnXG4gICAgICAgIH0pXG4gICAgXSwgVG9hc3QsIFwic2hvd1dpdGhPcHRpb25zXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgICAgICAgICBjbGVhckZ1bmN0aW9uOiAnaGlkZSdcbiAgICAgICAgfSlcbiAgICBdLCBUb2FzdCwgXCJzaG93U2hvcnRUb3BcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFyRnVuY3Rpb246ICdoaWRlJ1xuICAgICAgICB9KVxuICAgIF0sIFRvYXN0LCBcInNob3dTaG9ydENlbnRlclwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ2hpZGUnXG4gICAgICAgIH0pXG4gICAgXSwgVG9hc3QsIFwic2hvd1Nob3J0Qm90dG9tXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIG9ic2VydmFibGU6IHRydWUsXG4gICAgICAgICAgICBjbGVhckZ1bmN0aW9uOiAnaGlkZSdcbiAgICAgICAgfSlcbiAgICBdLCBUb2FzdCwgXCJzaG93TG9uZ1RvcFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBvYnNlcnZhYmxlOiB0cnVlLFxuICAgICAgICAgICAgY2xlYXJGdW5jdGlvbjogJ2hpZGUnXG4gICAgICAgIH0pXG4gICAgXSwgVG9hc3QsIFwic2hvd0xvbmdDZW50ZXJcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgb2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICAgICAgICAgIGNsZWFyRnVuY3Rpb246ICdoaWRlJ1xuICAgICAgICB9KVxuICAgIF0sIFRvYXN0LCBcInNob3dMb25nQm90dG9tXCIsIG51bGwpO1xuICAgIFRvYXN0ID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnVG9hc3QnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4teC10b2FzdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLnRvYXN0JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vRWRkeVZlcmJydWdnZW4vVG9hc3QtUGhvbmVHYXAtUGx1Z2luJyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ2lPUycsICdXaW5kb3dzIFBob25lIDgnXVxuICAgICAgICB9KVxuICAgIF0sIFRvYXN0KTtcbiAgICByZXR1cm4gVG9hc3Q7XG59KCkpO1xuZXhwb3J0cy5Ub2FzdCA9IFRvYXN0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG9hc3QuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3RvYXN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NjZcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 467 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name TouchID\n * @description\n * Scan the fingerprint of a user with the TouchID sensor.\n *\n * Requires Cordova plugin: `cordova-plugin-touch-id`. For more info, please see the [TouchID plugin docs](https://github.com/EddyVerbruggen/cordova-plugin-touch-id).\n *\n * @usage\n * ### Import Touch ID Plugin into Project\n * ```typescript\n * import { TouchID } from 'ionic-native';\n * ```\n * ### Check for Touch ID Availability\n * ```typescript\n * TouchID.isAvailable()\n *   .then(\n *     res => console.log('TouchID is available!'),\n *     err => console.error('TouchID is not available', err)\n *   );\n * ```\n * ### Invoke Touch ID w/ Custom Message\n *\n * ```typescript\n * TouchID.verifyFingerprint('Scan your fingerprint please')\n *   .then(\n *     res => console.log('Ok', res),\n *     err => console.error('Error', err)\n *   );\n * ```\n *\n * ### Error Codes\n *\n * The plugin will reject for various reasons. Your app will most likely need to respond to the cases differently.\n *\n * Here is a list of some of the error codes:\n *\n *  -  `-1` - Fingerprint scan failed more than 3 times\n *  -  `-2` or `-128` - User tapped the 'Cancel' button\n *  -  `-3` - User tapped the 'Enter Passcode' or 'Enter Password' button\n *  -  `-4` - The scan was cancelled by the system (Home button for example)\n *  -  `-6` - TouchID is not Available\n *  -  `-8` - TouchID is locked out from too many tries\n */\nvar TouchID = (function () {\n    function TouchID() {\n    }\n    /**\n     * Checks Whether TouchID is available or not.\n     *\n     * @return {Promise} Returns a Promise that resolves if yes, rejects if no.\n     */\n    TouchID.isAvailable = function () { return; };\n    /**\n     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, brings up standard system passcode screen.\n     *\n     * @param {string} message  The message to display\n     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n     */\n    TouchID.verifyFingerprint = function (message) { return; };\n    /**\n     * Show TouchID dialog and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\n     *\n     * @param {string} message  The message to display\n     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n     */\n    TouchID.verifyFingerprintWithCustomPasswordFallback = function (message) { return; };\n    /**\n     * Show TouchID dialog with custom 'Enter Password' message and wait for a fingerprint scan. If user taps 'Enter Password' button, rejects with code '-3' (see above).\n     *\n     * @param {string} message  The message to display\n     * @param {string} enterPasswordLabel  Custom text for the 'Enter Password' button\n     * @return {Promise} Returns a Promise the resolves if the fingerprint scan was successful, rejects with an error code (see above).\n     */\n    TouchID.verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel = function (message, enterPasswordLabel) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], TouchID, \"isAvailable\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], TouchID, \"verifyFingerprint\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], TouchID, \"verifyFingerprintWithCustomPasswordFallback\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], TouchID, \"verifyFingerprintWithCustomPasswordFallbackAndEnterPasswordLabel\", null);\n    TouchID = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'TouchID',\n            plugin: 'cordova-plugin-touch-id',\n            pluginRef: 'plugins.touchid',\n            repo: 'https://github.com/EddyVerbruggen/cordova-plugin-touch-id',\n            platforms: ['iOS']\n        })\n    ], TouchID);\n    return TouchID;\n}());\nexports.TouchID = TouchID;\n//# sourceMappingURL=touchid.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3RvdWNoaWQuanM/NDkzYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxRQUFRO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLHVDQUF1QyxRQUFRO0FBQy9DO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLG9EQUFvRCxRQUFRO0FBQzVEO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBLDhFQUE4RSxRQUFRO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBLGVBQWUsT0FBTztBQUN0QixlQUFlLE9BQU87QUFDdEIsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQSx1SEFBdUgsUUFBUTtBQUMvSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDY3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBUb3VjaElEXG4gKiBAZGVzY3JpcHRpb25cbiAqIFNjYW4gdGhlIGZpbmdlcnByaW50IG9mIGEgdXNlciB3aXRoIHRoZSBUb3VjaElEIHNlbnNvci5cbiAqXG4gKiBSZXF1aXJlcyBDb3Jkb3ZhIHBsdWdpbjogYGNvcmRvdmEtcGx1Z2luLXRvdWNoLWlkYC4gRm9yIG1vcmUgaW5mbywgcGxlYXNlIHNlZSB0aGUgW1RvdWNoSUQgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCkuXG4gKlxuICogQHVzYWdlXG4gKiAjIyMgSW1wb3J0IFRvdWNoIElEIFBsdWdpbiBpbnRvIFByb2plY3RcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIGltcG9ydCB7IFRvdWNoSUQgfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICogYGBgXG4gKiAjIyMgQ2hlY2sgZm9yIFRvdWNoIElEIEF2YWlsYWJpbGl0eVxuICogYGBgdHlwZXNjcmlwdFxuICogVG91Y2hJRC5pc0F2YWlsYWJsZSgpXG4gKiAgIC50aGVuKFxuICogICAgIHJlcyA9PiBjb25zb2xlLmxvZygnVG91Y2hJRCBpcyBhdmFpbGFibGUhJyksXG4gKiAgICAgZXJyID0+IGNvbnNvbGUuZXJyb3IoJ1RvdWNoSUQgaXMgbm90IGF2YWlsYWJsZScsIGVycilcbiAqICAgKTtcbiAqIGBgYFxuICogIyMjIEludm9rZSBUb3VjaCBJRCB3LyBDdXN0b20gTWVzc2FnZVxuICpcbiAqIGBgYHR5cGVzY3JpcHRcbiAqIFRvdWNoSUQudmVyaWZ5RmluZ2VycHJpbnQoJ1NjYW4geW91ciBmaW5nZXJwcmludCBwbGVhc2UnKVxuICogICAudGhlbihcbiAqICAgICByZXMgPT4gY29uc29sZS5sb2coJ09rJywgcmVzKSxcbiAqICAgICBlcnIgPT4gY29uc29sZS5lcnJvcignRXJyb3InLCBlcnIpXG4gKiAgICk7XG4gKiBgYGBcbiAqXG4gKiAjIyMgRXJyb3IgQ29kZXNcbiAqXG4gKiBUaGUgcGx1Z2luIHdpbGwgcmVqZWN0IGZvciB2YXJpb3VzIHJlYXNvbnMuIFlvdXIgYXBwIHdpbGwgbW9zdCBsaWtlbHkgbmVlZCB0byByZXNwb25kIHRvIHRoZSBjYXNlcyBkaWZmZXJlbnRseS5cbiAqXG4gKiBIZXJlIGlzIGEgbGlzdCBvZiBzb21lIG9mIHRoZSBlcnJvciBjb2RlczpcbiAqXG4gKiAgLSAgYC0xYCAtIEZpbmdlcnByaW50IHNjYW4gZmFpbGVkIG1vcmUgdGhhbiAzIHRpbWVzXG4gKiAgLSAgYC0yYCBvciBgLTEyOGAgLSBVc2VyIHRhcHBlZCB0aGUgJ0NhbmNlbCcgYnV0dG9uXG4gKiAgLSAgYC0zYCAtIFVzZXIgdGFwcGVkIHRoZSAnRW50ZXIgUGFzc2NvZGUnIG9yICdFbnRlciBQYXNzd29yZCcgYnV0dG9uXG4gKiAgLSAgYC00YCAtIFRoZSBzY2FuIHdhcyBjYW5jZWxsZWQgYnkgdGhlIHN5c3RlbSAoSG9tZSBidXR0b24gZm9yIGV4YW1wbGUpXG4gKiAgLSAgYC02YCAtIFRvdWNoSUQgaXMgbm90IEF2YWlsYWJsZVxuICogIC0gIGAtOGAgLSBUb3VjaElEIGlzIGxvY2tlZCBvdXQgZnJvbSB0b28gbWFueSB0cmllc1xuICovXG52YXIgVG91Y2hJRCA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gVG91Y2hJRCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIFdoZXRoZXIgVG91Y2hJRCBpcyBhdmFpbGFibGUgb3Igbm90LlxuICAgICAqXG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB5ZXMsIHJlamVjdHMgaWYgbm8uXG4gICAgICovXG4gICAgVG91Y2hJRC5pc0F2YWlsYWJsZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFNob3cgVG91Y2hJRCBkaWFsb2cgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCBicmluZ3MgdXAgc3RhbmRhcmQgc3lzdGVtIHBhc3Njb2RlIHNjcmVlbi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBtZXNzYWdlICBUaGUgbWVzc2FnZSB0byBkaXNwbGF5XG4gICAgICogQHJldHVybiB7UHJvbWlzZX0gUmV0dXJucyBhIFByb21pc2UgdGhlIHJlc29sdmVzIGlmIHRoZSBmaW5nZXJwcmludCBzY2FuIHdhcyBzdWNjZXNzZnVsLCByZWplY3RzIHdpdGggYW4gZXJyb3IgY29kZSAoc2VlIGFib3ZlKS5cbiAgICAgKi9cbiAgICBUb3VjaElELnZlcmlmeUZpbmdlcnByaW50ID0gZnVuY3Rpb24gKG1lc3NhZ2UpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFNob3cgVG91Y2hJRCBkaWFsb2cgYW5kIHdhaXQgZm9yIGEgZmluZ2VycHJpbnQgc2Nhbi4gSWYgdXNlciB0YXBzICdFbnRlciBQYXNzd29yZCcgYnV0dG9uLCByZWplY3RzIHdpdGggY29kZSAnLTMnIChzZWUgYWJvdmUpLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgIFRoZSBtZXNzYWdlIHRvIGRpc3BsYXlcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm5zIGEgUHJvbWlzZSB0aGUgcmVzb2x2ZXMgaWYgdGhlIGZpbmdlcnByaW50IHNjYW4gd2FzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgd2l0aCBhbiBlcnJvciBjb2RlIChzZWUgYWJvdmUpLlxuICAgICAqL1xuICAgIFRvdWNoSUQudmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFjayA9IGZ1bmN0aW9uIChtZXNzYWdlKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBTaG93IFRvdWNoSUQgZGlhbG9nIHdpdGggY3VzdG9tICdFbnRlciBQYXNzd29yZCcgbWVzc2FnZSBhbmQgd2FpdCBmb3IgYSBmaW5nZXJwcmludCBzY2FuLiBJZiB1c2VyIHRhcHMgJ0VudGVyIFBhc3N3b3JkJyBidXR0b24sIHJlamVjdHMgd2l0aCBjb2RlICctMycgKHNlZSBhYm92ZSkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gbWVzc2FnZSAgVGhlIG1lc3NhZ2UgdG8gZGlzcGxheVxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBlbnRlclBhc3N3b3JkTGFiZWwgIEN1c3RvbSB0ZXh0IGZvciB0aGUgJ0VudGVyIFBhc3N3b3JkJyBidXR0b25cbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlfSBSZXR1cm5zIGEgUHJvbWlzZSB0aGUgcmVzb2x2ZXMgaWYgdGhlIGZpbmdlcnByaW50IHNjYW4gd2FzIHN1Y2Nlc3NmdWwsIHJlamVjdHMgd2l0aCBhbiBlcnJvciBjb2RlIChzZWUgYWJvdmUpLlxuICAgICAqL1xuICAgIFRvdWNoSUQudmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFja0FuZEVudGVyUGFzc3dvcmRMYWJlbCA9IGZ1bmN0aW9uIChtZXNzYWdlLCBlbnRlclBhc3N3b3JkTGFiZWwpIHsgcmV0dXJuOyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBUb3VjaElELCBcImlzQXZhaWxhYmxlXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBUb3VjaElELCBcInZlcmlmeUZpbmdlcnByaW50XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBUb3VjaElELCBcInZlcmlmeUZpbmdlcnByaW50V2l0aEN1c3RvbVBhc3N3b3JkRmFsbGJhY2tcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFRvdWNoSUQsIFwidmVyaWZ5RmluZ2VycHJpbnRXaXRoQ3VzdG9tUGFzc3dvcmRGYWxsYmFja0FuZEVudGVyUGFzc3dvcmRMYWJlbFwiLCBudWxsKTtcbiAgICBUb3VjaElEID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnVG91Y2hJRCcsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdwbHVnaW5zLnRvdWNoaWQnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9FZGR5VmVyYnJ1Z2dlbi9jb3Jkb3ZhLXBsdWdpbi10b3VjaC1pZCcsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnaU9TJ11cbiAgICAgICAgfSlcbiAgICBdLCBUb3VjaElEKTtcbiAgICByZXR1cm4gVG91Y2hJRDtcbn0oKSk7XG5leHBvcnRzLlRvdWNoSUQgPSBUb3VjaElEO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dG91Y2hpZC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvdG91Y2hpZC5qc1xuLy8gbW9kdWxlIGlkID0gNDY3XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 468 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name TextToSpeech\n * @description\n * Text to Speech plugin\n *\n * @usage\n * ```\n * import {TextToSpeech} from 'ionic-native';\n *\n * TextToSpeech.speak('Hello World')\n *   .then(() => console.log('Success'))\n *   .catch((reason: any) => console.log(reason));\n *\n * ```\n */\nvar TextToSpeech = (function () {\n    function TextToSpeech() {\n    }\n    /**\n     * This function speaks\n     * @param options {string | TTSOptions} Text to speak or TTSOptions\n     * @return {Promise<any>} Returns a promise that resolves when the speaking finishes\n     */\n    TextToSpeech.speak = function (options) {\n        return;\n    };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 1,\n            errorIndex: 2\n        })\n    ], TextToSpeech, \"speak\", null);\n    TextToSpeech = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'TextToSpeech',\n            plugin: 'cordova-plugin-tts',\n            pluginRef: 'TTS',\n            repo: 'https://github.com/vilic/cordova-plugin-tts'\n        })\n    ], TextToSpeech);\n    return TextToSpeech;\n}());\nexports.TextToSpeech = TextToSpeech;\n//# sourceMappingURL=text-to-speech.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3RleHQtdG8tc3BlZWNoLmpzPzY4YzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsYUFBYTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0JBQW9CO0FBQzNDLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ2OC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgVGV4dFRvU3BlZWNoXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRleHQgdG8gU3BlZWNoIHBsdWdpblxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge1RleHRUb1NwZWVjaH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBUZXh0VG9TcGVlY2guc3BlYWsoJ0hlbGxvIFdvcmxkJylcbiAqICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coJ1N1Y2Nlc3MnKSlcbiAqICAgLmNhdGNoKChyZWFzb246IGFueSkgPT4gY29uc29sZS5sb2cocmVhc29uKSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBUZXh0VG9TcGVlY2ggPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFRleHRUb1NwZWVjaCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhpcyBmdW5jdGlvbiBzcGVha3NcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7c3RyaW5nIHwgVFRTT3B0aW9uc30gVGV4dCB0byBzcGVhayBvciBUVFNPcHRpb25zXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHNwZWFraW5nIGZpbmlzaGVzXG4gICAgICovXG4gICAgVGV4dFRvU3BlZWNoLnNwZWFrID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgICAgICAgICAgZXJyb3JJbmRleDogMlxuICAgICAgICB9KVxuICAgIF0sIFRleHRUb1NwZWVjaCwgXCJzcGVha1wiLCBudWxsKTtcbiAgICBUZXh0VG9TcGVlY2ggPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdUZXh0VG9TcGVlY2gnLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdHRzJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ1RUUycsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL3ZpbGljL2NvcmRvdmEtcGx1Z2luLXR0cydcbiAgICAgICAgfSlcbiAgICBdLCBUZXh0VG9TcGVlY2gpO1xuICAgIHJldHVybiBUZXh0VG9TcGVlY2g7XG59KCkpO1xuZXhwb3J0cy5UZXh0VG9TcGVlY2ggPSBUZXh0VG9TcGVlY2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LXRvLXNwZWVjaC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvdGV4dC10by1zcGVlY2guanNcbi8vIG1vZHVsZSBpZCA9IDQ2OFxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 469 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\nvar Observable_1 = __webpack_require__(3);\n/**\n * @name ThemeableBrowser\n * @description\n * In-app browser that allows styling.\n *\n * @usage\n * ```\n * import { ThemeableBrowser } from 'ionic-native';\n *\n * // can add options from the original InAppBrowser in a JavaScript object form (not string)\n * // This options object also takes additional parameters introduced by the ThemeableBrowser plugin\n * // This example only shows the additional parameters for ThemeableBrowser\n * // Note that that `image` and `imagePressed` values refer to resources that are stored in your app\n * let options = {\n *      statusbar: {\n *          color: '#ffffffff'\n *      },\n *      toolbar: {\n *          height: 44,\n *          color: '#f0f0f0ff'\n *      },\n *      title: {\n *          color: '#003264ff',\n *          showPageTitle: true\n *      },\n *      backButton: {\n *          image: 'back',\n *          imagePressed: 'back_pressed',\n *          align: 'left',\n *          event: 'backPressed'\n *      },\n *      forwardButton: {\n *          image: 'forward',\n *          imagePressed: 'forward_pressed',\n *          align: 'left',\n *          event: 'forwardPressed'\n *      },\n *      closeButton: {\n *          image: 'close',\n *          imagePressed: 'close_pressed',\n *          align: 'left',\n *          event: 'closePressed'\n *      },\n *      customButtons: [\n *          {\n *              image: 'share',\n *              imagePressed: 'share_pressed',\n *              align: 'right',\n *              event: 'sharePressed'\n *          }\n *      ],\n *      menu: {\n *          image: 'menu',\n *          imagePressed: 'menu_pressed',\n *          title: 'Test',\n *          cancel: 'Cancel',\n *          align: 'right',\n *          items: [\n *              {\n *                  event: 'helloPressed',\n *                  label: 'Hello World!'\n *              },\n *              {\n *                  event: 'testPressed',\n *                  label: 'Test!'\n *              }\n *          ]\n *      },\n *      backButtonCanClose: true\n * };\n *\n * let browser = new ThemeableBrowser('https://ionic.io', '_blank', options);\n *\n * ```\n * We suggest that you refer to the plugin's repository for additional information on usage that may not be covered here.\n */\nvar ThemeableBrowser = (function () {\n    function ThemeableBrowser(url, target, styleOptions) {\n        try {\n            this._objectInstance = cordova.ThemeableBrowser.open(url, target, styleOptions);\n        }\n        catch (e) {\n            window.open(url);\n            console.warn('Native: ThemeableBrowser is not installed or you are running on a browser. Falling back to window.open, all instance methods will NOT work.');\n        }\n    }\n    /**\n     * Displays an browser window that was opened hidden. Calling this has no effect\n     * if the browser was already visible.\n     */\n    ThemeableBrowser.prototype.show = function () { };\n    /**\n     * Closes the browser window.\n     */\n    ThemeableBrowser.prototype.close = function () { };\n    /**\n     * Reloads the current page\n     */\n    ThemeableBrowser.prototype.reload = function () { };\n    /**\n     * Injects JavaScript code into the browser window.\n     * @param script    Details of the script to run, specifying either a file or code key.\n     */\n    ThemeableBrowser.prototype.executeScript = function (script) { return; };\n    /**\n     * Injects CSS into the browser window.\n     * @param css       Details of the script to run, specifying either a file or code key.\n     */\n    ThemeableBrowser.prototype.insertCss = function (css) { return; };\n    /**\n     * A method that allows you to listen to events happening in the browser.\n     * Available events are: `ThemeableBrowserError`, `ThemeableBrowserWarning`, `critical`, `loadfail`, `unexpected`, `undefined`\n     * @param event Event name\n     * @returns {Observable<any>} Returns back an observable that will listen to the event on subscribe, and will stop listening to the event on unsubscribe.\n     */\n    ThemeableBrowser.prototype.on = function (event) {\n        var _this = this;\n        return new Observable_1.Observable(function (observer) {\n            _this._objectInstance.addEventListener(event, observer.next.bind(observer));\n            return function () { return _this._objectInstance.removeEventListener(event, observer.next.bind(observer)); };\n        });\n    };\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], ThemeableBrowser.prototype, \"show\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], ThemeableBrowser.prototype, \"close\", null);\n    __decorate([\n        plugin_1.CordovaInstance({ sync: true })\n    ], ThemeableBrowser.prototype, \"reload\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], ThemeableBrowser.prototype, \"executeScript\", null);\n    __decorate([\n        plugin_1.CordovaInstance()\n    ], ThemeableBrowser.prototype, \"insertCss\", null);\n    ThemeableBrowser = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ThemeableBrowser',\n            plugin: 'cordova-plugin-themeablebrowser',\n            pluginRef: 'cordova.ThemeableBrowser',\n            repo: 'https://github.com/initialxy/cordova-plugin-themeablebrowser'\n        })\n    ], ThemeableBrowser);\n    return ThemeableBrowser;\n}());\nexports.ThemeableBrowser = ThemeableBrowser;\n//# sourceMappingURL=themeable-browser.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,");

/***/ },
/* 470 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Twitter Connect\n * @description\n * Plugin to use Twitter Single Sign On\n * Uses Twitter's Fabric SDK\n * ```typescript\n * import {TwitterConnect} from 'ionic-native';\n *\n * function onSuccess(response) {\n *   console.log(response);\n *\n *   // Will console log something like:\n *   // {\n *   //   userName: 'myuser',\n *   //   userId: '12358102',\n *   //   secret: 'tokenSecret'\n *   //   token: 'accessTokenHere'\n *   // }\n * }\n *\n * TwitterConnect.login().then(onSuccess, onError);\n *\n * TwitterConnect.logout().then(onLogoutSuccess, onLogoutError);\n * ```\n */\nvar TwitterConnect = (function () {\n    function TwitterConnect() {\n    }\n    /**\n     * Logs in\n     * @return {Promise<TwitterConnectResponse>} returns a promise that resolves if logged in and rejects if failed to login\n     */\n    TwitterConnect.login = function () { return; };\n    /**\n     * Logs out\n     * @return {Promise<any>} returns a promise that resolves if logged out and rejects if failed to logout\n     */\n    TwitterConnect.logout = function () { return; };\n    /**\n     * Returns user's profile information\n     * @return {Promise<any>} returns a promise that resolves if user profile is successfully retrieved and rejects if request fails\n     */\n    TwitterConnect.showUser = function () { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], TwitterConnect, \"login\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], TwitterConnect, \"logout\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], TwitterConnect, \"showUser\", null);\n    TwitterConnect = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'TwitterConnect',\n            plugin: 'twitter-connect-plugin',\n            pluginRef: 'TwitterConnect',\n            repo: 'https://github.com/ManifestWebDesign/twitter-connect-plugin',\n            install: 'ionic plugin add twitter-connect-plugin --variable FABRIC_KEY=fabric_API_key'\n        })\n    ], TwitterConnect);\n    return TwitterConnect;\n}());\nexports.TwitterConnect = TwitterConnect;\n//# sourceMappingURL=twitter-connect.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3R3aXR0ZXItY29ubmVjdC5qcz82MTVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDO0FBQ2hEO0FBQ0Esd0NBQXdDLFFBQVE7QUFDaEQ7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQTtBQUNBLGdCQUFnQixhQUFhO0FBQzdCO0FBQ0EsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ3MC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgVHdpdHRlciBDb25uZWN0XG4gKiBAZGVzY3JpcHRpb25cbiAqIFBsdWdpbiB0byB1c2UgVHdpdHRlciBTaW5nbGUgU2lnbiBPblxuICogVXNlcyBUd2l0dGVyJ3MgRmFicmljIFNES1xuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHtUd2l0dGVyQ29ubmVjdH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBmdW5jdGlvbiBvblN1Y2Nlc3MocmVzcG9uc2UpIHtcbiAqICAgY29uc29sZS5sb2cocmVzcG9uc2UpO1xuICpcbiAqICAgLy8gV2lsbCBjb25zb2xlIGxvZyBzb21ldGhpbmcgbGlrZTpcbiAqICAgLy8ge1xuICogICAvLyAgIHVzZXJOYW1lOiAnbXl1c2VyJyxcbiAqICAgLy8gICB1c2VySWQ6ICcxMjM1ODEwMicsXG4gKiAgIC8vICAgc2VjcmV0OiAndG9rZW5TZWNyZXQnXG4gKiAgIC8vICAgdG9rZW46ICdhY2Nlc3NUb2tlbkhlcmUnXG4gKiAgIC8vIH1cbiAqIH1cbiAqXG4gKiBUd2l0dGVyQ29ubmVjdC5sb2dpbigpLnRoZW4ob25TdWNjZXNzLCBvbkVycm9yKTtcbiAqXG4gKiBUd2l0dGVyQ29ubmVjdC5sb2dvdXQoKS50aGVuKG9uTG9nb3V0U3VjY2Vzcywgb25Mb2dvdXRFcnJvcik7XG4gKiBgYGBcbiAqL1xudmFyIFR3aXR0ZXJDb25uZWN0ID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBUd2l0dGVyQ29ubmVjdCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTG9ncyBpblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8VHdpdHRlckNvbm5lY3RSZXNwb25zZT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgbG9nZ2VkIGluIGFuZCByZWplY3RzIGlmIGZhaWxlZCB0byBsb2dpblxuICAgICAqL1xuICAgIFR3aXR0ZXJDb25uZWN0LmxvZ2luID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogTG9ncyBvdXRcbiAgICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IHJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgaWYgbG9nZ2VkIG91dCBhbmQgcmVqZWN0cyBpZiBmYWlsZWQgdG8gbG9nb3V0XG4gICAgICovXG4gICAgVHdpdHRlckNvbm5lY3QubG9nb3V0ID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB1c2VyJ3MgcHJvZmlsZSBpbmZvcm1hdGlvblxuICAgICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gcmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyBpZiB1c2VyIHByb2ZpbGUgaXMgc3VjY2Vzc2Z1bGx5IHJldHJpZXZlZCBhbmQgcmVqZWN0cyBpZiByZXF1ZXN0IGZhaWxzXG4gICAgICovXG4gICAgVHdpdHRlckNvbm5lY3Quc2hvd1VzZXIgPSBmdW5jdGlvbiAoKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgVHdpdHRlckNvbm5lY3QsIFwibG9naW5cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFR3aXR0ZXJDb25uZWN0LCBcImxvZ291dFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgVHdpdHRlckNvbm5lY3QsIFwic2hvd1VzZXJcIiwgbnVsbCk7XG4gICAgVHdpdHRlckNvbm5lY3QgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdUd2l0dGVyQ29ubmVjdCcsXG4gICAgICAgICAgICBwbHVnaW46ICd0d2l0dGVyLWNvbm5lY3QtcGx1Z2luJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ1R3aXR0ZXJDb25uZWN0JyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTWFuaWZlc3RXZWJEZXNpZ24vdHdpdHRlci1jb25uZWN0LXBsdWdpbicsXG4gICAgICAgICAgICBpbnN0YWxsOiAnaW9uaWMgcGx1Z2luIGFkZCB0d2l0dGVyLWNvbm5lY3QtcGx1Z2luIC0tdmFyaWFibGUgRkFCUklDX0tFWT1mYWJyaWNfQVBJX2tleSdcbiAgICAgICAgfSlcbiAgICBdLCBUd2l0dGVyQ29ubmVjdCk7XG4gICAgcmV0dXJuIFR3aXR0ZXJDb25uZWN0O1xufSgpKTtcbmV4cG9ydHMuVHdpdHRlckNvbm5lY3QgPSBUd2l0dGVyQ29ubmVjdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR3aXR0ZXItY29ubmVjdC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvdHdpdHRlci1jb25uZWN0LmpzXG4vLyBtb2R1bGUgaWQgPSA0NzBcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 471 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Vibration\n * @description Vibrates the device\n * @usage\n * ```typescript\n * import { Vibration } from 'ionic-native';\n *\n *\n * // Vibrate the device for a second\n * // Duration is ignored on iOS.\n * Vibration.vibrate(1000);\n *\n * // Vibrate 2 seconds\n * // Pause for 1 second\n * // Vibrate for 2 seconds\n * // Patterns work on Android and Windows only\n * Vibration.vibrate([2000,1000,2000]);\n *\n * // Stop any current vibrations immediately\n * // Works on Android and Windows only\n * Vibration.vibrate(0);\n * ```\n */\nvar Vibration = (function () {\n    function Vibration() {\n    }\n    /**\n     * Vibrates the device for given amount of time.\n     * @param time {number|Array<number>} Milliseconds to vibrate the device. If passed an array of numbers, it will define a vibration pattern. Pass 0 to stop any vibration immediately.\n     */\n    Vibration.vibrate = function (time) { };\n    __decorate([\n        plugin_1.Cordova({\n            sync: true\n        })\n    ], Vibration, \"vibrate\", null);\n    Vibration = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Vibration',\n            plugin: 'cordova-plugin-vibration',\n            pluginRef: 'navigator',\n            repo: 'https://github.com/apache/cordova-plugin-vibration',\n            platforms: ['Android', 'iOS', 'Windows 8.1 Phone', 'Windows 8.1', 'Windows 10']\n        })\n    ], Vibration);\n    return Vibration;\n}());\nexports.Vibration = Vibration;\n//# sourceMappingURL=vibration.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ZpYnJhdGlvbi5qcz9lMGE5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixxQkFBcUI7QUFDekM7QUFDQSx5Q0FBeUM7QUFDekM7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ3MS5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgVmlicmF0aW9uXG4gKiBAZGVzY3JpcHRpb24gVmlicmF0ZXMgdGhlIGRldmljZVxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBWaWJyYXRpb24gfSBmcm9tICdpb25pYy1uYXRpdmUnO1xuICpcbiAqXG4gKiAvLyBWaWJyYXRlIHRoZSBkZXZpY2UgZm9yIGEgc2Vjb25kXG4gKiAvLyBEdXJhdGlvbiBpcyBpZ25vcmVkIG9uIGlPUy5cbiAqIFZpYnJhdGlvbi52aWJyYXRlKDEwMDApO1xuICpcbiAqIC8vIFZpYnJhdGUgMiBzZWNvbmRzXG4gKiAvLyBQYXVzZSBmb3IgMSBzZWNvbmRcbiAqIC8vIFZpYnJhdGUgZm9yIDIgc2Vjb25kc1xuICogLy8gUGF0dGVybnMgd29yayBvbiBBbmRyb2lkIGFuZCBXaW5kb3dzIG9ubHlcbiAqIFZpYnJhdGlvbi52aWJyYXRlKFsyMDAwLDEwMDAsMjAwMF0pO1xuICpcbiAqIC8vIFN0b3AgYW55IGN1cnJlbnQgdmlicmF0aW9ucyBpbW1lZGlhdGVseVxuICogLy8gV29ya3Mgb24gQW5kcm9pZCBhbmQgV2luZG93cyBvbmx5XG4gKiBWaWJyYXRpb24udmlicmF0ZSgwKTtcbiAqIGBgYFxuICovXG52YXIgVmlicmF0aW9uID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWJyYXRpb24oKSB7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFZpYnJhdGVzIHRoZSBkZXZpY2UgZm9yIGdpdmVuIGFtb3VudCBvZiB0aW1lLlxuICAgICAqIEBwYXJhbSB0aW1lIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn0gTWlsbGlzZWNvbmRzIHRvIHZpYnJhdGUgdGhlIGRldmljZS4gSWYgcGFzc2VkIGFuIGFycmF5IG9mIG51bWJlcnMsIGl0IHdpbGwgZGVmaW5lIGEgdmlicmF0aW9uIHBhdHRlcm4uIFBhc3MgMCB0byBzdG9wIGFueSB2aWJyYXRpb24gaW1tZWRpYXRlbHkuXG4gICAgICovXG4gICAgVmlicmF0aW9uLnZpYnJhdGUgPSBmdW5jdGlvbiAodGltZSkgeyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHtcbiAgICAgICAgICAgIHN5bmM6IHRydWVcbiAgICAgICAgfSlcbiAgICBdLCBWaWJyYXRpb24sIFwidmlicmF0ZVwiLCBudWxsKTtcbiAgICBWaWJyYXRpb24gPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdWaWJyYXRpb24nLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdmlicmF0aW9uJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ25hdmlnYXRvcicsXG4gICAgICAgICAgICByZXBvOiAnaHR0cHM6Ly9naXRodWIuY29tL2FwYWNoZS9jb3Jkb3ZhLXBsdWdpbi12aWJyYXRpb24nLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgOC4xIFBob25lJywgJ1dpbmRvd3MgOC4xJywgJ1dpbmRvd3MgMTAnXVxuICAgICAgICB9KVxuICAgIF0sIFZpYnJhdGlvbik7XG4gICAgcmV0dXJuIFZpYnJhdGlvbjtcbn0oKSk7XG5leHBvcnRzLlZpYnJhdGlvbiA9IFZpYnJhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZpYnJhdGlvbi5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvdmlicmF0aW9uLmpzXG4vLyBtb2R1bGUgaWQgPSA0NzFcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 472 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name VideoEditor\n * @description Edit videos using native device APIs\n *\n * @usage\n * ```\n * import {VideoEditor} from 'ionic-native';\n *\n * VideoEditor.transcodeVideo({\n *   fileUri: '/path/to/input.mov',\n *   outputFileName: 'output.mp4',\n *   outputFileType: VideoEditor.OutputFileType.MPEG4\n * })\n * .then((fileUri: string) => console.log('video transcode success', fileUri))\n * .catch((error: any) => console.log('video transcode error', error));\n *\n * ```\n */\nvar VideoEditor = (function () {\n    function VideoEditor() {\n    }\n    /**\n     * Transcode a video\n     * @param options {TranscodeOptions} Options\n     * @return {Promise<string>} Returns a promise that resolves to the path of the transcoded video\n     */\n    VideoEditor.transcodeVideo = function (options) { return; };\n    /**\n     * Trim a video\n     * @param options {TrimOptions} Options\n     * @return {Promise<string>} Returns a promise that resolves to the path of the trimmed video\n     */\n    VideoEditor.trim = function (options) { return; };\n    /**\n     * Create a JPEG thumbnail from a video\n     * @param options {CreateThumbnailOptions} Options\n     * @return {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device\n     */\n    VideoEditor.createThumbnail = function (options) { return; };\n    /**\n     * Get info on a video (width, height, orientation, duration, size, & bitrate)\n     * @param options {GetVideoInfoOptions} Options\n     * @return {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video\n     */\n    VideoEditor.getVideoInfo = function (options) { return; };\n    VideoEditor.OptimizeForNetworkUse = {\n        NO: 0,\n        YES: 1\n    };\n    VideoEditor.OutputFileType = {\n        M4V: 0,\n        MPEG4: 1,\n        M4A: 2,\n        QUICK_TIME: 3\n    };\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], VideoEditor, \"transcodeVideo\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse',\n            platforms: ['iOS']\n        })\n    ], VideoEditor, \"trim\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], VideoEditor, \"createThumbnail\", null);\n    __decorate([\n        plugin_1.Cordova({\n            callbackOrder: 'reverse'\n        })\n    ], VideoEditor, \"getVideoInfo\", null);\n    VideoEditor = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'VideoEditor',\n            plugin: 'cordova-plugin-video-editor',\n            pluginRef: 'VideoEditor',\n            repo: 'https://github.com/jbavari/cordova-plugin-video-editor',\n            platforms: ['Android', 'iOS', 'Windows Phone 8']\n        })\n    ], VideoEditor);\n    return VideoEditor;\n}());\nexports.VideoEditor = VideoEditor;\n//# sourceMappingURL=video-editor.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ZpZGVvLWVkaXRvci5qcz8xNjY1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUJBQWlCO0FBQ3hDLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQSxxREFBcUQsUUFBUTtBQUM3RDtBQUNBO0FBQ0EsdUJBQXVCLFlBQVk7QUFDbkMsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0E7QUFDQSx1QkFBdUIsdUJBQXVCO0FBQzlDLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQSxzREFBc0QsUUFBUTtBQUM5RDtBQUNBO0FBQ0EsdUJBQXVCLG9CQUFvQjtBQUMzQyxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0EsbURBQW1ELFFBQVE7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NzIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFZpZGVvRWRpdG9yXG4gKiBAZGVzY3JpcHRpb24gRWRpdCB2aWRlb3MgdXNpbmcgbmF0aXZlIGRldmljZSBBUElzXG4gKlxuICogQHVzYWdlXG4gKiBgYGBcbiAqIGltcG9ydCB7VmlkZW9FZGl0b3J9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogVmlkZW9FZGl0b3IudHJhbnNjb2RlVmlkZW8oe1xuICogICBmaWxlVXJpOiAnL3BhdGgvdG8vaW5wdXQubW92JyxcbiAqICAgb3V0cHV0RmlsZU5hbWU6ICdvdXRwdXQubXA0JyxcbiAqICAgb3V0cHV0RmlsZVR5cGU6IFZpZGVvRWRpdG9yLk91dHB1dEZpbGVUeXBlLk1QRUc0XG4gKiB9KVxuICogLnRoZW4oKGZpbGVVcmk6IHN0cmluZykgPT4gY29uc29sZS5sb2coJ3ZpZGVvIHRyYW5zY29kZSBzdWNjZXNzJywgZmlsZVVyaSkpXG4gKiAuY2F0Y2goKGVycm9yOiBhbnkpID0+IGNvbnNvbGUubG9nKCd2aWRlbyB0cmFuc2NvZGUgZXJyb3InLCBlcnJvcikpO1xuICpcbiAqIGBgYFxuICovXG52YXIgVmlkZW9FZGl0b3IgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFZpZGVvRWRpdG9yKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBUcmFuc2NvZGUgYSB2aWRlb1xuICAgICAqIEBwYXJhbSBvcHRpb25zIHtUcmFuc2NvZGVPcHRpb25zfSBPcHRpb25zXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBwYXRoIG9mIHRoZSB0cmFuc2NvZGVkIHZpZGVvXG4gICAgICovXG4gICAgVmlkZW9FZGl0b3IudHJhbnNjb2RlVmlkZW8gPSBmdW5jdGlvbiAob3B0aW9ucykgeyByZXR1cm47IH07XG4gICAgLyoqXG4gICAgICogVHJpbSBhIHZpZGVvXG4gICAgICogQHBhcmFtIG9wdGlvbnMge1RyaW1PcHRpb25zfSBPcHRpb25zXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxzdHJpbmc+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIHRoZSBwYXRoIG9mIHRoZSB0cmltbWVkIHZpZGVvXG4gICAgICovXG4gICAgVmlkZW9FZGl0b3IudHJpbSA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBKUEVHIHRodW1ibmFpbCBmcm9tIGEgdmlkZW9cbiAgICAgKiBAcGFyYW0gb3B0aW9ucyB7Q3JlYXRlVGh1bWJuYWlsT3B0aW9uc30gT3B0aW9uc1xuICAgICAqIEByZXR1cm4ge1Byb21pc2U8c3RyaW5nPn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB0byB0aGUgcGF0aCB0byB0aGUganBlZyBpbWFnZSBvbiB0aGUgZGV2aWNlXG4gICAgICovXG4gICAgVmlkZW9FZGl0b3IuY3JlYXRlVGh1bWJuYWlsID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIEdldCBpbmZvIG9uIGEgdmlkZW8gKHdpZHRoLCBoZWlnaHQsIG9yaWVudGF0aW9uLCBkdXJhdGlvbiwgc2l6ZSwgJiBiaXRyYXRlKVxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtHZXRWaWRlb0luZm9PcHRpb25zfSBPcHRpb25zXG4gICAgICogQHJldHVybiB7UHJvbWlzZTxWaWRlb0luZm8+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHRvIGFuIG9iamVjdCBjb250YWluaW5nIGluZm8gb24gdGhlIHZpZGVvXG4gICAgICovXG4gICAgVmlkZW9FZGl0b3IuZ2V0VmlkZW9JbmZvID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIFZpZGVvRWRpdG9yLk9wdGltaXplRm9yTmV0d29ya1VzZSA9IHtcbiAgICAgICAgTk86IDAsXG4gICAgICAgIFlFUzogMVxuICAgIH07XG4gICAgVmlkZW9FZGl0b3IuT3V0cHV0RmlsZVR5cGUgPSB7XG4gICAgICAgIE00VjogMCxcbiAgICAgICAgTVBFRzQ6IDEsXG4gICAgICAgIE00QTogMixcbiAgICAgICAgUVVJQ0tfVElNRTogM1xuICAgIH07XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnXG4gICAgICAgIH0pXG4gICAgXSwgVmlkZW9FZGl0b3IsIFwidHJhbnNjb2RlVmlkZW9cIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ2lPUyddXG4gICAgICAgIH0pXG4gICAgXSwgVmlkZW9FZGl0b3IsIFwidHJpbVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBjYWxsYmFja09yZGVyOiAncmV2ZXJzZSdcbiAgICAgICAgfSlcbiAgICBdLCBWaWRlb0VkaXRvciwgXCJjcmVhdGVUaHVtYm5haWxcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoe1xuICAgICAgICAgICAgY2FsbGJhY2tPcmRlcjogJ3JldmVyc2UnXG4gICAgICAgIH0pXG4gICAgXSwgVmlkZW9FZGl0b3IsIFwiZ2V0VmlkZW9JbmZvXCIsIG51bGwpO1xuICAgIFZpZGVvRWRpdG9yID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnVmlkZW9FZGl0b3InLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdmlkZW8tZWRpdG9yJyxcbiAgICAgICAgICAgIHBsdWdpblJlZjogJ1ZpZGVvRWRpdG9yJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vamJhdmFyaS9jb3Jkb3ZhLXBsdWdpbi12aWRlby1lZGl0b3InLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJywgJ1dpbmRvd3MgUGhvbmUgOCddXG4gICAgICAgIH0pXG4gICAgXSwgVmlkZW9FZGl0b3IpO1xuICAgIHJldHVybiBWaWRlb0VkaXRvcjtcbn0oKSk7XG5leHBvcnRzLlZpZGVvRWRpdG9yID0gVmlkZW9FZGl0b3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWRlby1lZGl0b3IuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ZpZGVvLWVkaXRvci5qc1xuLy8gbW9kdWxlIGlkID0gNDcyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 473 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name VideoPlayer\n * @description\n * A Codova plugin that simply allows you to immediately play a video in fullscreen mode.\n *\n * Requires Cordova plugin: `com.moust.cordova.videoplayer`. For more info, please see the [VideoPlayer plugin docs](https://github.com/moust/cordova-plugin-videoplayer).\n *\n * @usage\n * ```typescript\n * import { VideoPlayer } from 'ionic-native';\n *\n *\n * // Playing a video.\n * VideoPlayer.play(\"file:///android_asset/www/movie.mp4\").then(() => {\n *  console.log('video completed');\n * }).catch(err => {\n *  console.log(err);\n * });\n *\n * ```\n */\nvar VideoPlayer = (function () {\n    function VideoPlayer() {\n    }\n    /**\n     * Plays the video from the passed url.\n     * @param fileUrl {string} File url to the video.\n     * @param options {VideoOptions?} Optional video playback settings. See options above.\n     * @returns {Promise<any>} Resolves promise when the video was played successfully.\n     */\n    VideoPlayer.play = function (fileUrl, options) { return; };\n    /**\n     * Stops the video playback immediatly.\n     */\n    VideoPlayer.close = function () { };\n    __decorate([\n        plugin_1.Cordova()\n    ], VideoPlayer, \"play\", null);\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], VideoPlayer, \"close\", null);\n    VideoPlayer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'VideoPlayer',\n            plugin: 'cordova-plugin-videoplayer',\n            pluginRef: 'VideoPlayer',\n            repo: 'https://github.com/moust/cordova-plugin-videoplayer',\n            platforms: ['Android']\n        })\n    ], VideoPlayer);\n    return VideoPlayer;\n}());\nexports.VideoPlayer = VideoPlayer;\n//# sourceMappingURL=video-player.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ZpZGVvLXBsYXllci5qcz84ZjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxjQUFjO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixPQUFPO0FBQzlCLHVCQUF1QixjQUFjO0FBQ3JDLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0Esb0RBQW9ELFFBQVE7QUFDNUQ7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDczLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBWaWRlb1BsYXllclxuICogQGRlc2NyaXB0aW9uXG4gKiBBIENvZG92YSBwbHVnaW4gdGhhdCBzaW1wbHkgYWxsb3dzIHlvdSB0byBpbW1lZGlhdGVseSBwbGF5IGEgdmlkZW8gaW4gZnVsbHNjcmVlbiBtb2RlLlxuICpcbiAqIFJlcXVpcmVzIENvcmRvdmEgcGx1Z2luOiBgY29tLm1vdXN0LmNvcmRvdmEudmlkZW9wbGF5ZXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbVmlkZW9QbGF5ZXIgcGx1Z2luIGRvY3NdKGh0dHBzOi8vZ2l0aHViLmNvbS9tb3VzdC9jb3Jkb3ZhLXBsdWdpbi12aWRlb3BsYXllcikuXG4gKlxuICogQHVzYWdlXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQgeyBWaWRlb1BsYXllciB9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICpcbiAqIC8vIFBsYXlpbmcgYSB2aWRlby5cbiAqIFZpZGVvUGxheWVyLnBsYXkoXCJmaWxlOi8vL2FuZHJvaWRfYXNzZXQvd3d3L21vdmllLm1wNFwiKS50aGVuKCgpID0+IHtcbiAqICBjb25zb2xlLmxvZygndmlkZW8gY29tcGxldGVkJyk7XG4gKiB9KS5jYXRjaChlcnIgPT4ge1xuICogIGNvbnNvbGUubG9nKGVycik7XG4gKiB9KTtcbiAqXG4gKiBgYGBcbiAqL1xudmFyIFZpZGVvUGxheWVyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBWaWRlb1BsYXllcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGxheXMgdGhlIHZpZGVvIGZyb20gdGhlIHBhc3NlZCB1cmwuXG4gICAgICogQHBhcmFtIGZpbGVVcmwge3N0cmluZ30gRmlsZSB1cmwgdG8gdGhlIHZpZGVvLlxuICAgICAqIEBwYXJhbSBvcHRpb25zIHtWaWRlb09wdGlvbnM/fSBPcHRpb25hbCB2aWRlbyBwbGF5YmFjayBzZXR0aW5ncy4gU2VlIG9wdGlvbnMgYWJvdmUuXG4gICAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn0gUmVzb2x2ZXMgcHJvbWlzZSB3aGVuIHRoZSB2aWRlbyB3YXMgcGxheWVkIHN1Y2Nlc3NmdWxseS5cbiAgICAgKi9cbiAgICBWaWRlb1BsYXllci5wbGF5ID0gZnVuY3Rpb24gKGZpbGVVcmwsIG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIC8qKlxuICAgICAqIFN0b3BzIHRoZSB2aWRlbyBwbGF5YmFjayBpbW1lZGlhdGx5LlxuICAgICAqL1xuICAgIFZpZGVvUGxheWVyLmNsb3NlID0gZnVuY3Rpb24gKCkgeyB9O1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBWaWRlb1BsYXllciwgXCJwbGF5XCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKHsgc3luYzogdHJ1ZSB9KVxuICAgIF0sIFZpZGVvUGxheWVyLCBcImNsb3NlXCIsIG51bGwpO1xuICAgIFZpZGVvUGxheWVyID0gX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLlBsdWdpbih7XG4gICAgICAgICAgICBwbHVnaW5OYW1lOiAnVmlkZW9QbGF5ZXInLFxuICAgICAgICAgICAgcGx1Z2luOiAnY29yZG92YS1wbHVnaW4tdmlkZW9wbGF5ZXInLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnVmlkZW9QbGF5ZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9tb3VzdC9jb3Jkb3ZhLXBsdWdpbi12aWRlb3BsYXllcicsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCddXG4gICAgICAgIH0pXG4gICAgXSwgVmlkZW9QbGF5ZXIpO1xuICAgIHJldHVybiBWaWRlb1BsYXllcjtcbn0oKSk7XG5leHBvcnRzLlZpZGVvUGxheWVyID0gVmlkZW9QbGF5ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD12aWRlby1wbGF5ZXIuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ZpZGVvLXBsYXllci5qc1xuLy8gbW9kdWxlIGlkID0gNDczXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 474 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name WebIntent\n * @description\n * @usage\n * For usage information please refer to the plugin's Github repo.\n *\n * ```typescript\n * import {WebIntent} from 'ionic-native';\n *\n * WebIntent.startActivity(options).then(onSuccess, onError);\n *\n * ```\n */\nvar WebIntent = (function () {\n    function WebIntent() {\n    }\n    Object.defineProperty(WebIntent, \"ACTION_VIEW\", {\n        get: function () {\n            return window.plugins.webintent.ACTION_VIEW;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(WebIntent, \"EXTRA_TEXT\", {\n        get: function () {\n            return window.plugins.webintent.EXTRA_TEXT;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    WebIntent.startActivity = function (options) { return; };\n    WebIntent.hasExtra = function (extra) { return; };\n    WebIntent.getExtra = function (extra) { return; };\n    WebIntent.getUri = function () { return; };\n    ;\n    WebIntent.onNewIntent = function () { return; };\n    ;\n    WebIntent.sendBroadcast = function (options) { return; };\n    __decorate([\n        plugin_1.CordovaProperty\n    ], WebIntent, \"ACTION_VIEW\", null);\n    __decorate([\n        plugin_1.CordovaProperty\n    ], WebIntent, \"EXTRA_TEXT\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"startActivity\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"hasExtra\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"getExtra\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"getUri\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"onNewIntent\", null);\n    __decorate([\n        plugin_1.Cordova()\n    ], WebIntent, \"sendBroadcast\", null);\n    WebIntent = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'WebIntent',\n            plugin: 'https://github.com/Initsogar/cordova-webintent.git',\n            pluginRef: 'window.plugins.webintent',\n            repo: 'https://github.com/Initsogar/cordova-webintent.git',\n            platforms: ['Android']\n        })\n    ], WebIntent);\n    return WebIntent;\n}());\nexports.WebIntent = WebIntent;\n//# sourceMappingURL=webintent.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3dlYmludGVudC5qcz83YTZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsS0FBSztBQUNMLGtEQUFrRCxRQUFRO0FBQzFELDJDQUEyQyxRQUFRO0FBQ25ELDJDQUEyQyxRQUFRO0FBQ25ELG9DQUFvQyxRQUFRO0FBQzVDO0FBQ0EseUNBQXlDLFFBQVE7QUFDakQ7QUFDQSxrREFBa0QsUUFBUTtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0EiLCJmaWxlIjoiNDc0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19kZWNvcmF0ZSA9ICh0aGlzICYmIHRoaXMuX19kZWNvcmF0ZSkgfHwgZnVuY3Rpb24gKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xuICAgIGVsc2UgZm9yICh2YXIgaSA9IGRlY29yYXRvcnMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIGlmIChkID0gZGVjb3JhdG9yc1tpXSkgciA9IChjIDwgMyA/IGQocikgOiBjID4gMyA/IGQodGFyZ2V0LCBrZXksIHIpIDogZCh0YXJnZXQsIGtleSkpIHx8IHI7XG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcbn07XG52YXIgcGx1Z2luXzEgPSByZXF1aXJlKCcuL3BsdWdpbicpO1xuLyoqXG4gKiBAbmFtZSBXZWJJbnRlbnRcbiAqIEBkZXNjcmlwdGlvblxuICogQHVzYWdlXG4gKiBGb3IgdXNhZ2UgaW5mb3JtYXRpb24gcGxlYXNlIHJlZmVyIHRvIHRoZSBwbHVnaW4ncyBHaXRodWIgcmVwby5cbiAqXG4gKiBgYGB0eXBlc2NyaXB0XG4gKiBpbXBvcnQge1dlYkludGVudH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBXZWJJbnRlbnQuc3RhcnRBY3Rpdml0eShvcHRpb25zKS50aGVuKG9uU3VjY2Vzcywgb25FcnJvcik7XG4gKlxuICogYGBgXG4gKi9cbnZhciBXZWJJbnRlbnQgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFdlYkludGVudCgpIHtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkludGVudCwgXCJBQ1RJT05fVklFV1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5wbHVnaW5zLndlYmludGVudC5BQ1RJT05fVklFVztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdlYkludGVudCwgXCJFWFRSQV9URVhUXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LnBsdWdpbnMud2ViaW50ZW50LkVYVFJBX1RFWFQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIFdlYkludGVudC5zdGFydEFjdGl2aXR5ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHsgcmV0dXJuOyB9O1xuICAgIFdlYkludGVudC5oYXNFeHRyYSA9IGZ1bmN0aW9uIChleHRyYSkgeyByZXR1cm47IH07XG4gICAgV2ViSW50ZW50LmdldEV4dHJhID0gZnVuY3Rpb24gKGV4dHJhKSB7IHJldHVybjsgfTtcbiAgICBXZWJJbnRlbnQuZ2V0VXJpID0gZnVuY3Rpb24gKCkgeyByZXR1cm47IH07XG4gICAgO1xuICAgIFdlYkludGVudC5vbk5ld0ludGVudCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuOyB9O1xuICAgIDtcbiAgICBXZWJJbnRlbnQuc2VuZEJyb2FkY2FzdCA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YVByb3BlcnR5XG4gICAgXSwgV2ViSW50ZW50LCBcIkFDVElPTl9WSUVXXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhUHJvcGVydHlcbiAgICBdLCBXZWJJbnRlbnQsIFwiRVhUUkFfVEVYVFwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgV2ViSW50ZW50LCBcInN0YXJ0QWN0aXZpdHlcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFdlYkludGVudCwgXCJoYXNFeHRyYVwiLCBudWxsKTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgV2ViSW50ZW50LCBcImdldEV4dHJhXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBXZWJJbnRlbnQsIFwiZ2V0VXJpXCIsIG51bGwpO1xuICAgIF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5Db3Jkb3ZhKClcbiAgICBdLCBXZWJJbnRlbnQsIFwib25OZXdJbnRlbnRcIiwgbnVsbCk7XG4gICAgX19kZWNvcmF0ZShbXG4gICAgICAgIHBsdWdpbl8xLkNvcmRvdmEoKVxuICAgIF0sIFdlYkludGVudCwgXCJzZW5kQnJvYWRjYXN0XCIsIG51bGwpO1xuICAgIFdlYkludGVudCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1dlYkludGVudCcsXG4gICAgICAgICAgICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vSW5pdHNvZ2FyL2NvcmRvdmEtd2ViaW50ZW50LmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICd3aW5kb3cucGx1Z2lucy53ZWJpbnRlbnQnLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9Jbml0c29nYXIvY29yZG92YS13ZWJpbnRlbnQuZ2l0JyxcbiAgICAgICAgICAgIHBsYXRmb3JtczogWydBbmRyb2lkJ11cbiAgICAgICAgfSlcbiAgICBdLCBXZWJJbnRlbnQpO1xuICAgIHJldHVybiBXZWJJbnRlbnQ7XG59KCkpO1xuZXhwb3J0cy5XZWJJbnRlbnQgPSBXZWJJbnRlbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD13ZWJpbnRlbnQuanMubWFwXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3dlYmludGVudC5qc1xuLy8gbW9kdWxlIGlkID0gNDc0XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=");

/***/ },
/* 475 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name YoutubeVideoPlayer\n * @description\n * Plays YouTube videos in Native YouTube App\n *\n * @usage\n * ```\n * import {YoutubeVideoPlayer} from 'ionic-native';\n *\n * YoutubeVideoPlayer.openVideo('myvideoid');\n *\n * ```\n */\nvar YoutubeVideoPlayer = (function () {\n    function YoutubeVideoPlayer() {\n    }\n    /**\n     * Plays a YouTube video\n     * @param videoId {string} Video ID\n     */\n    YoutubeVideoPlayer.openVideo = function (videoId) { };\n    __decorate([\n        plugin_1.Cordova({ sync: true })\n    ], YoutubeVideoPlayer, \"openVideo\", null);\n    YoutubeVideoPlayer = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'YoutubeVideoPlayer',\n            plugin: 'https://github.com/Glitchbone/CordovaYoutubeVideoPlayer.git',\n            pluginRef: 'YoutubeVideoPlayer',\n            repo: 'https://github.com/Glitchbone/CordovaYoutubeVideoPlayer',\n            platforms: ['Android', 'iOS']\n        })\n    ], YoutubeVideoPlayer);\n    return YoutubeVideoPlayer;\n}());\nexports.YoutubeVideoPlayer = YoutubeVideoPlayer;\n//# sourceMappingURL=youtube-video-player.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3lvdXR1YmUtdmlkZW8tcGxheWVyLmpzPzg0MGUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLE9BQU87QUFDOUI7QUFDQSx1REFBdUQ7QUFDdkQ7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSIsImZpbGUiOiI0NzUuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2RlY29yYXRlID0gKHRoaXMgJiYgdGhpcy5fX2RlY29yYXRlKSB8fCBmdW5jdGlvbiAoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcbiAgICB2YXIgYyA9IGFyZ3VtZW50cy5sZW5ndGgsIHIgPSBjIDwgMyA/IHRhcmdldCA6IGRlc2MgPT09IG51bGwgPyBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSkgOiBkZXNjLCBkO1xuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcbiAgICByZXR1cm4gYyA+IDMgJiYgciAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHIpLCByO1xufTtcbnZhciBwbHVnaW5fMSA9IHJlcXVpcmUoJy4vcGx1Z2luJyk7XG4vKipcbiAqIEBuYW1lIFlvdXR1YmVWaWRlb1BsYXllclxuICogQGRlc2NyaXB0aW9uXG4gKiBQbGF5cyBZb3VUdWJlIHZpZGVvcyBpbiBOYXRpdmUgWW91VHViZSBBcHBcbiAqXG4gKiBAdXNhZ2VcbiAqIGBgYFxuICogaW1wb3J0IHtZb3V0dWJlVmlkZW9QbGF5ZXJ9IGZyb20gJ2lvbmljLW5hdGl2ZSc7XG4gKlxuICogWW91dHViZVZpZGVvUGxheWVyLm9wZW5WaWRlbygnbXl2aWRlb2lkJyk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBZb3V0dWJlVmlkZW9QbGF5ZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFlvdXR1YmVWaWRlb1BsYXllcigpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGxheXMgYSBZb3VUdWJlIHZpZGVvXG4gICAgICogQHBhcmFtIHZpZGVvSWQge3N0cmluZ30gVmlkZW8gSURcbiAgICAgKi9cbiAgICBZb3V0dWJlVmlkZW9QbGF5ZXIub3BlblZpZGVvID0gZnVuY3Rpb24gKHZpZGVvSWQpIHsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7IHN5bmM6IHRydWUgfSlcbiAgICBdLCBZb3V0dWJlVmlkZW9QbGF5ZXIsIFwib3BlblZpZGVvXCIsIG51bGwpO1xuICAgIFlvdXR1YmVWaWRlb1BsYXllciA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1lvdXR1YmVWaWRlb1BsYXllcicsXG4gICAgICAgICAgICBwbHVnaW46ICdodHRwczovL2dpdGh1Yi5jb20vR2xpdGNoYm9uZS9Db3Jkb3ZhWW91dHViZVZpZGVvUGxheWVyLmdpdCcsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdZb3V0dWJlVmlkZW9QbGF5ZXInLFxuICAgICAgICAgICAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9HbGl0Y2hib25lL0NvcmRvdmFZb3V0dWJlVmlkZW9QbGF5ZXInLFxuICAgICAgICAgICAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnaU9TJ11cbiAgICAgICAgfSlcbiAgICBdLCBZb3V0dWJlVmlkZW9QbGF5ZXIpO1xuICAgIHJldHVybiBZb3V0dWJlVmlkZW9QbGF5ZXI7XG59KCkpO1xuZXhwb3J0cy5Zb3V0dWJlVmlkZW9QbGF5ZXIgPSBZb3V0dWJlVmlkZW9QbGF5ZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD15b3V0dWJlLXZpZGVvLXBsYXllci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMveW91dHViZS12aWRlby1wbGF5ZXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ3NVxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 476 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name ZBar\n * @description\n * The ZBar Scanner Plugin allows you to scan 2d barcodes.\n *\n * Requires Cordova plugin: `cordova-plugin-cszbar`. For more info, please see the [zBar plugin docs](https://github.com/tjwoon/csZBar).\n *\n * @usage\n * ```\n * import { ZBar } from 'ionic-native';\n *\n * let zBarOptions = {\n *       flash: \"off\",\n *       drawSight: false\n *     };\n *\n * ZBar.scan(zBarOptions)\n *    .then(result => {\n *       console.log(result); // Scanned code\n *    })\n *    .catch(error => {\n *       console.log(error); // Error message\n *    });\n *\n * ```\n *\n * @advanced\n * zBar options\n *\n * | Option             | Type      | Values                    | Defaults                                                    |\n * |--------------------|-----------|-----------------------------------------------------------------------------------------|\n * | text_title         |`string?`  |                           | `\"Scan QR Code\"` (Android only)                             |\n * | text_instructions  |`string?`  |                           | `\"Please point your camera at the QR code.\"` (Android only) |\n * | camera             |`string?`  | `\"front\"`, `\"back\"`,      | `\"back\"`                                                    |\n * | flash              |`string?`  | `\"on\"`, `\"off\"`, `\"auto\"` | `\"auto\"`                                                    |\n * | drawSight          |`boolean?` | `true`, `false`           | `true` (Draws red line in center of scanner)                |\n *\n */\nvar ZBar = (function () {\n    function ZBar() {\n    }\n    /**\n     * Open the scanner\n     * @param options { ZBarOptions } Scan options\n     * @return Returns a Promise that resolves with the scanned string, or rejects with an error.\n     */\n    ZBar.scan = function (options) { return; };\n    __decorate([\n        plugin_1.Cordova()\n    ], ZBar, \"scan\", null);\n    ZBar = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'ZBar',\n            plugin: 'cordova-plugin-cszbar',\n            pluginRef: 'cloudSky.zBar',\n            repo: 'https://github.com/tjwoon/csZBar',\n            platforms: ['Android', 'iOS']\n        })\n    ], ZBar);\n    return ZBar;\n}());\nexports.ZBar = ZBar;\n//# sourceMappingURL=z-bar.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3otYmFyLmpzP2Y0YjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0Q0FBNEMsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixPQUFPO0FBQ1A7QUFDQSw0QkFBNEI7QUFDNUIsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsY0FBYztBQUNyQztBQUNBO0FBQ0Esb0NBQW9DLFFBQVE7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ3Ni5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgWkJhclxuICogQGRlc2NyaXB0aW9uXG4gKiBUaGUgWkJhciBTY2FubmVyIFBsdWdpbiBhbGxvd3MgeW91IHRvIHNjYW4gMmQgYmFyY29kZXMuXG4gKlxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGBjb3Jkb3ZhLXBsdWdpbi1jc3piYXJgLiBGb3IgbW9yZSBpbmZvLCBwbGVhc2Ugc2VlIHRoZSBbekJhciBwbHVnaW4gZG9jc10oaHR0cHM6Ly9naXRodWIuY29tL3Rqd29vbi9jc1pCYXIpLlxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQgeyBaQmFyIH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBsZXQgekJhck9wdGlvbnMgPSB7XG4gKiAgICAgICBmbGFzaDogXCJvZmZcIixcbiAqICAgICAgIGRyYXdTaWdodDogZmFsc2VcbiAqICAgICB9O1xuICpcbiAqIFpCYXIuc2Nhbih6QmFyT3B0aW9ucylcbiAqICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gKiAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpOyAvLyBTY2FubmVkIGNvZGVcbiAqICAgIH0pXG4gKiAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICogICAgICAgY29uc29sZS5sb2coZXJyb3IpOyAvLyBFcnJvciBtZXNzYWdlXG4gKiAgICB9KTtcbiAqXG4gKiBgYGBcbiAqXG4gKiBAYWR2YW5jZWRcbiAqIHpCYXIgb3B0aW9uc1xuICpcbiAqIHwgT3B0aW9uICAgICAgICAgICAgIHwgVHlwZSAgICAgIHwgVmFsdWVzICAgICAgICAgICAgICAgICAgICB8IERlZmF1bHRzICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tLS0tLS0tLXwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXxcbiAqIHwgdGV4dF90aXRsZSAgICAgICAgIHxgc3RyaW5nP2AgIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGBcIlNjYW4gUVIgQ29kZVwiYCAoQW5kcm9pZCBvbmx5KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCB0ZXh0X2luc3RydWN0aW9ucyAgfGBzdHJpbmc/YCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYFwiUGxlYXNlIHBvaW50IHlvdXIgY2FtZXJhIGF0IHRoZSBRUiBjb2RlLlwiYCAoQW5kcm9pZCBvbmx5KSB8XG4gKiB8IGNhbWVyYSAgICAgICAgICAgICB8YHN0cmluZz9gICB8IGBcImZyb250XCJgLCBgXCJiYWNrXCJgLCAgICAgIHwgYFwiYmFja1wiYCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8IGZsYXNoICAgICAgICAgICAgICB8YHN0cmluZz9gICB8IGBcIm9uXCJgLCBgXCJvZmZcImAsIGBcImF1dG9cImAgfCBgXCJhdXRvXCJgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAqIHwgZHJhd1NpZ2h0ICAgICAgICAgIHxgYm9vbGVhbj9gIHwgYHRydWVgLCBgZmFsc2VgICAgICAgICAgICB8IGB0cnVlYCAoRHJhd3MgcmVkIGxpbmUgaW4gY2VudGVyIG9mIHNjYW5uZXIpICAgICAgICAgICAgICAgIHxcbiAqXG4gKi9cbnZhciBaQmFyID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBaQmFyKCkge1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPcGVuIHRoZSBzY2FubmVyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgeyBaQmFyT3B0aW9ucyB9IFNjYW4gb3B0aW9uc1xuICAgICAqIEByZXR1cm4gUmV0dXJucyBhIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBzY2FubmVkIHN0cmluZywgb3IgcmVqZWN0cyB3aXRoIGFuIGVycm9yLlxuICAgICAqL1xuICAgIFpCYXIuc2NhbiA9IGZ1bmN0aW9uIChvcHRpb25zKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSgpXG4gICAgXSwgWkJhciwgXCJzY2FuXCIsIG51bGwpO1xuICAgIFpCYXIgPSBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuUGx1Z2luKHtcbiAgICAgICAgICAgIHBsdWdpbk5hbWU6ICdaQmFyJyxcbiAgICAgICAgICAgIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLWNzemJhcicsXG4gICAgICAgICAgICBwbHVnaW5SZWY6ICdjbG91ZFNreS56QmFyJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vdGp3b29uL2NzWkJhcicsXG4gICAgICAgICAgICBwbGF0Zm9ybXM6IFsnQW5kcm9pZCcsICdpT1MnXVxuICAgICAgICB9KVxuICAgIF0sIFpCYXIpO1xuICAgIHJldHVybiBaQmFyO1xufSgpKTtcbmV4cG9ydHMuWkJhciA9IFpCYXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD16LWJhci5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvei1iYXIuanNcbi8vIG1vZHVsZSBpZCA9IDQ3NlxuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9");

/***/ },
/* 477 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar plugin_1 = __webpack_require__(369);\n/**\n * @name Zip\n * @description\n * A Cordova plugin to unzip files in Android and iOS.\n *\n * @usage\n * ```\n * import {Zip} from 'ionic-native';\n *\n * Zip.unzip('path/to/source.zip', 'path/to/dest', (progress) => console.log('Unzipping, ' + Math.round((progress.loaded / progress.total) * 100) + '%'))\n *  .then((result) => {\n *    if(result === 0) console.log('SUCCESS');\n *    if(result === -1) console.log('FAILED');\n *  });\n *\n * ```\n */\nvar Zip = (function () {\n    function Zip() {\n    }\n    /**\n     * Extracts files from a ZIP archive\n     * @param sourceZip {string} Source ZIP file\n     * @param destUrl {string} Destination folder\n     * @param onProgress {Function} optional callback to be called on progress update\n     * @return  {Promise<number>} returns a promise that resolves with a number. 0 is success, -1 is error\n     */\n    Zip.unzip = function (sourceZip, destUrl, onProgress) { return; };\n    __decorate([\n        plugin_1.Cordova({\n            successIndex: 2,\n            errorIndex: 4\n        })\n    ], Zip, \"unzip\", null);\n    Zip = __decorate([\n        plugin_1.Plugin({\n            pluginName: 'Zip',\n            plugin: 'cordova-plugin-zip',\n            pluginRef: 'zip',\n            repo: 'https://github.com/MobileChromeApps/cordova-plugin-zip',\n        })\n    ], Zip);\n    return Zip;\n}());\nexports.Zip = Zip;\n//# sourceMappingURL=zip.js.map//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2lvbmljLW5hdGl2ZS9kaXN0L2VzNS9wbHVnaW5zL3ppcC5qcz9hOWUxIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNENBQTRDLFFBQVE7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLElBQUk7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsT0FBTztBQUNoQyx1QkFBdUIsT0FBTztBQUM5QiwwQkFBMEIsU0FBUztBQUNuQyxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0EsMkRBQTJELFFBQVE7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBIiwiZmlsZSI6IjQ3Ny5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fZGVjb3JhdGUgPSAodGhpcyAmJiB0aGlzLl9fZGVjb3JhdGUpIHx8IGZ1bmN0aW9uIChkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XG4gICAgaWYgKHR5cGVvZiBSZWZsZWN0ID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBSZWZsZWN0LmRlY29yYXRlID09PSBcImZ1bmN0aW9uXCIpIHIgPSBSZWZsZWN0LmRlY29yYXRlKGRlY29yYXRvcnMsIHRhcmdldCwga2V5LCBkZXNjKTtcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XG59O1xudmFyIHBsdWdpbl8xID0gcmVxdWlyZSgnLi9wbHVnaW4nKTtcbi8qKlxuICogQG5hbWUgWmlwXG4gKiBAZGVzY3JpcHRpb25cbiAqIEEgQ29yZG92YSBwbHVnaW4gdG8gdW56aXAgZmlsZXMgaW4gQW5kcm9pZCBhbmQgaU9TLlxuICpcbiAqIEB1c2FnZVxuICogYGBgXG4gKiBpbXBvcnQge1ppcH0gZnJvbSAnaW9uaWMtbmF0aXZlJztcbiAqXG4gKiBaaXAudW56aXAoJ3BhdGgvdG8vc291cmNlLnppcCcsICdwYXRoL3RvL2Rlc3QnLCAocHJvZ3Jlc3MpID0+IGNvbnNvbGUubG9nKCdVbnppcHBpbmcsICcgKyBNYXRoLnJvdW5kKChwcm9ncmVzcy5sb2FkZWQgLyBwcm9ncmVzcy50b3RhbCkgKiAxMDApICsgJyUnKSlcbiAqICAudGhlbigocmVzdWx0KSA9PiB7XG4gKiAgICBpZihyZXN1bHQgPT09IDApIGNvbnNvbGUubG9nKCdTVUNDRVNTJyk7XG4gKiAgICBpZihyZXN1bHQgPT09IC0xKSBjb25zb2xlLmxvZygnRkFJTEVEJyk7XG4gKiAgfSk7XG4gKlxuICogYGBgXG4gKi9cbnZhciBaaXAgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFppcCgpIHtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgZmlsZXMgZnJvbSBhIFpJUCBhcmNoaXZlXG4gICAgICogQHBhcmFtIHNvdXJjZVppcCB7c3RyaW5nfSBTb3VyY2UgWklQIGZpbGVcbiAgICAgKiBAcGFyYW0gZGVzdFVybCB7c3RyaW5nfSBEZXN0aW5hdGlvbiBmb2xkZXJcbiAgICAgKiBAcGFyYW0gb25Qcm9ncmVzcyB7RnVuY3Rpb259IG9wdGlvbmFsIGNhbGxiYWNrIHRvIGJlIGNhbGxlZCBvbiBwcm9ncmVzcyB1cGRhdGVcbiAgICAgKiBAcmV0dXJuICB7UHJvbWlzZTxudW1iZXI+fSByZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggYSBudW1iZXIuIDAgaXMgc3VjY2VzcywgLTEgaXMgZXJyb3JcbiAgICAgKi9cbiAgICBaaXAudW56aXAgPSBmdW5jdGlvbiAoc291cmNlWmlwLCBkZXN0VXJsLCBvblByb2dyZXNzKSB7IHJldHVybjsgfTtcbiAgICBfX2RlY29yYXRlKFtcbiAgICAgICAgcGx1Z2luXzEuQ29yZG92YSh7XG4gICAgICAgICAgICBzdWNjZXNzSW5kZXg6IDIsXG4gICAgICAgICAgICBlcnJvckluZGV4OiA0XG4gICAgICAgIH0pXG4gICAgXSwgWmlwLCBcInVuemlwXCIsIG51bGwpO1xuICAgIFppcCA9IF9fZGVjb3JhdGUoW1xuICAgICAgICBwbHVnaW5fMS5QbHVnaW4oe1xuICAgICAgICAgICAgcGx1Z2luTmFtZTogJ1ppcCcsXG4gICAgICAgICAgICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi16aXAnLFxuICAgICAgICAgICAgcGx1Z2luUmVmOiAnemlwJyxcbiAgICAgICAgICAgIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vTW9iaWxlQ2hyb21lQXBwcy9jb3Jkb3ZhLXBsdWdpbi16aXAnLFxuICAgICAgICB9KVxuICAgIF0sIFppcCk7XG4gICAgcmV0dXJuIFppcDtcbn0oKSk7XG5leHBvcnRzLlppcCA9IFppcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXppcC5qcy5tYXBcblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vaW9uaWMtbmF0aXZlL2Rpc3QvZXM1L3BsdWdpbnMvemlwLmpzXG4vLyBtb2R1bGUgaWQgPSA0Nzdcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ },
/* 478 */
/***/ function(module, exports, __webpack_require__) {

	eval("\"use strict\";\nvar core_1 = __webpack_require__(1);\nvar router_1 = __webpack_require__(479);\n// import { RouteUndefinedComponent } from './route-undefined/route-undefined.component';\nexports.routes = [\n    // TODO Redirect based on device state\n    { path: '', redirectTo: 'login', pathMatch: 'full' },\n];\nvar AppRoutingModule = (function () {\n    function AppRoutingModule() {\n    }\n    AppRoutingModule = __decorate([\n        core_1.NgModule({\n            imports: [router_1.RouterModule.forRoot(exports.routes)],\n            exports: [router_1.RouterModule]\n        }), \n        __metadata('design:paramtypes', [])\n    ], AppRoutingModule);\n    return AppRoutingModule;\n}());\nexports.AppRoutingModule = AppRoutingModule;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi93ZWIvc3JjL2FwcC9hcHAtcm91dGluZy5tb2R1bGUudHM/Njg5ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsaUNBQXlCLENBQWUsQ0FBQztBQUN6QyxtQ0FBcUMsR0FBaUIsQ0FBQztBQUV2RCx5RkFBeUY7QUFFNUUsY0FBTSxHQUFXO0lBQzVCLHNDQUFzQztJQUN0QyxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFDO0NBQ3BELENBQUM7QUFNRjtJQUFBO0lBQStCLENBQUM7SUFKaEM7UUFBQyxlQUFRLENBQUM7WUFDUixPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLE9BQU8sQ0FBQyxjQUFNLENBQUMsQ0FBQztZQUN2QyxPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDO1NBQ3hCLENBQUM7O3dCQUFBO0lBQzZCLHVCQUFDO0FBQUQsQ0FBQztBQUFuQix3QkFBZ0IsbUJBQUciLCJmaWxlIjoiNDc4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlck1vZHVsZSwgUm91dGVzIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuLy8gaW1wb3J0IHsgUm91dGVVbmRlZmluZWRDb21wb25lbnQgfSBmcm9tICcuL3JvdXRlLXVuZGVmaW5lZC9yb3V0ZS11bmRlZmluZWQuY29tcG9uZW50JztcblxuZXhwb3J0IGNvbnN0IHJvdXRlczogUm91dGVzID0gW1xuICAvLyBUT0RPIFJlZGlyZWN0IGJhc2VkIG9uIGRldmljZSBzdGF0ZVxuICB7IHBhdGg6ICcnLCByZWRpcmVjdFRvOiAnbG9naW4nLCBwYXRoTWF0Y2g6ICdmdWxsJ30sXG5dO1xuXG5ATmdNb2R1bGUoe1xuICBpbXBvcnRzOiBbUm91dGVyTW9kdWxlLmZvclJvb3Qocm91dGVzKV0sXG4gIGV4cG9ydHM6IFtSb3V0ZXJNb2R1bGVdXG59KVxuZXhwb3J0IGNsYXNzIEFwcFJvdXRpbmdNb2R1bGUge31cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vYW5ndWxhcjItdGVtcGxhdGUtbG9hZGVyIS4vd2ViL3NyYy9hcHAvYXBwLXJvdXRpbmcubW9kdWxlLnRzIl0sInNvdXJjZVJvb3QiOiIifQ==");

/***/ }
]);